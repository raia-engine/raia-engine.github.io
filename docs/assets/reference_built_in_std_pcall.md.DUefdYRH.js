import{_ as s,c as i,a2 as e,o as l}from"./chunks/framework.CuCbyi2k.js";const k=JSON.parse('{"title":"pcall","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/std/pcall.md","filePath":"reference/built_in/std/pcall.md","lastUpdated":1730041717000}'),t={name:"reference/built_in/std/pcall.md"};function n(h,a,p,r,d,c){return l(),i("div",null,a[0]||(a[0]=[e(`<h1 id="pcall" tabindex="-1">pcall <a class="header-anchor" href="#pcall" aria-label="Permalink to &quot;pcall&quot;">​</a></h1><p>保護されたモードで関数を呼び出す（エラーが発生しても処理を継続させる）</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (f, arg1, ···)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>関数 <code>f</code> を指定した引数 <code>arg1, ...</code> とともに保護モードで呼び出します。保護モードでは、<code>f</code> 内で発生したエラーが伝播せず、エラーをキャッチして処理を継続できます。</p><p><code>pcall</code> の返り値は、まずステータスコード（ブール値）で、エラーがなければ <code>true</code>、エラーがあれば <code>false</code> です。エラーがなかった場合、続けて関数 <code>f</code> の戻り値が返されます。エラーが発生した場合は、<code>false</code> とエラーメッセージが返されます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status, err)</span></span></code></pre></div><p>この例では、エラーが発生してもプログラムが停止せず、エラーメッセージが表示されます。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./xpcall.html"><code>xpcall</code></a></li></ul>`,13)]))}const u=s(t,[["render",n]]);export{k as __pageData,u as default};
