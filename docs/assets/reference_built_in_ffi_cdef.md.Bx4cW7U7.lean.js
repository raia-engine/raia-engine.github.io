import{_ as a,c as s,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"ffi.cdef","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/ffi/cdef.md","filePath":"reference/built_in/ffi/cdef.md","lastUpdated":1729914702000}'),l={name:"reference/built_in/ffi/cdef.md"};function n(h,i,d,p,r,k){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="ffi-cdef" tabindex="-1">ffi.cdef <a class="header-anchor" href="#ffi-cdef" aria-label="Permalink to &quot;ffi.cdef&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(def)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>ffi.cdef</code> 関数は、LuaJITにC言語の型や関数の宣言を追加するために使用します。<code>def</code> はCの宣言を含むLua文字列で、構造体や外部C関数の宣言を記述します。複数のC宣言を記述する場合は、セミコロンで区切る必要がありますが、単一の宣言であれば省略可能です。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li><code>ffi.cdef</code> で宣言された外部シンボル（関数や変数）は名前のみが定義され、メモリ上の実アドレスにはバインドされません。バインドは <code>ffi.C</code> などのCライブラリ名前空間で実行されます。</li><li><code>ffi.cdef</code> で追加された宣言には、Cのプリプロセッサは使用されません。例えば <code>#define</code> を使用した定義は、<code>enum</code> や <code>static const</code> などに置き換えて記述する必要があります。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ffi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[[</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b; } mystruct;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mystruct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span></code></pre></div><p>このコードは、Cの構造体と関数をLuaJITに追加しています。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>ffi.new</li><li>ffi.typeof</li><li>ffi.load</li></ul>`,13)]))}const f=a(l,[["render",n]]);export{o as __pageData,f as default};
