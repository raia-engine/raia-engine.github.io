import{_ as i,c as s,a2 as e,o as l}from"./chunks/framework.6x3wfQve.js";const k=JSON.parse('{"title":"load","description":"","frontmatter":{},"headers":[],"relativePath":"document/built_in/std/load.md","filePath":"document/built_in/std/load.md","lastUpdated":1729067310000}'),t={name:"document/built_in/std/load.md"};function d(n,a,o,h,p,r){return l(),s("div",null,a[0]||(a[0]=[e(`<h1 id="load" tabindex="-1">load <a class="header-anchor" href="#load" aria-label="Permalink to &quot;load&quot;">​</a></h1><p>文字列や関数からLuaコードを読み込み、チャンクを返す</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ld [, source [, mode [, env]]])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>関数<code>func</code>を使用してチャンクを読み込み、そのピースを取得します。<code>func</code>への各呼び出しは、前の結果と連結される文字列を返す必要があります。空の文字列、nil、または値がないことを返すと、チャンクの終わりを示します。</p><p>エラーがなければ、コンパイルされたチャンクを関数として返します。そうでない場合は、nilとエラーメッセージを返します。返された関数の環境はグローバル環境です。</p><p><code>chunkname</code>はエラーメッセージとデバッグ情報のチャンク名として使用されます。省略された場合、デフォルトは&quot;=(load)&quot;です。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;return 1 + 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 2</span></span></code></pre></div><p>この例では、<code>load</code>を使って計算式を実行します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.2</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./loadfile.html"><code>loadfile</code></a></li><li><a href="./loadstring.html"><code>loadstring</code></a></li><li><a href="./dofile.html"><code>dofile</code></a></li></ul>`,14)]))}const u=i(t,[["render",d]]);export{k as __pageData,u as default};
