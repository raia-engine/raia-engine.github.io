import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.CKGreiRV.js";const E=JSON.parse('{"title":"Duktapeデバッガ","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/debugger.md","filePath":"resource/duktape/doc/debugger.md","lastUpdated":1732350347000}'),l={name:"resource/duktape/doc/debugger.md"};function n(p,s,h,d,k,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="duktapeデバッガ" tabindex="-1">Duktapeデバッガ <a class="header-anchor" href="#duktapeデバッガ" aria-label="Permalink to &quot;Duktapeデバッガ&quot;">​</a></h1><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><h3 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>Duktapeには、以下の基本的なデバッグ機能があります。</p><ul><li>実行状況：ファイル/ラインでの実行/一時停止、コールスタック、ローカル変数</li><li>実行制御：一時停止、再開、ステップオーバー、ステップイン、ステップアウト</li><li>ブレークポイント：対象となるファイル/行のペア、ブレークポイントリスト、&quot;debugger &quot;ステートメント</li><li>一時停止中にコールスタック上の任意の活性化のコンテキストで評価（基本的なウォッチ式の実装に使用可能）</li><li>内部メタデータ、プロパティを列挙してヒープオブジェクトを検査し、プロトタイプチェーンを歩く</li><li>任意のコールスタックレベルで変数を取得/配置する。</li><li>アプリケーション定義のリクエスト（AppRequest）および通知（AppNotify）のためのメカニズム</li><li>ロガーの書き込みを転送する</li><li>ヒープフルダンプ（デバッガーのウェブUIでJSONに変換される）</li></ul><p>Duktapeのデバッグ・アーキテクチャは、以下の主要な部分から構成されています。</p><ul><li>Duktapeが直接実装する標準的な<strong>デバッグ・プロトコル</strong>です。</li><li>アプリケーションによって実装される、信頼性の高い <strong>デバッグトランスポート</strong> ストリーム。</li><li>Duktapeヒープにデバッガをアタッチ/デタッチするための<strong>デバッグAPI</strong>です。</li><li>デバッグプロトコルエンドポイントを実装し、ユーザーインターフェースを提供する、オフターゲットで動作する<strong>デバッグクライアント</strong>である。</li><li>オプションの <strong>JSON デバッグプロトコルプロキシ</strong> は、デバッグターゲットと対話するための、より簡単なJSONベースのインターフェイスを提供します。 Node.jsとDukLuvで書かれたプロキシ実装の例がDuktapeに含まれています。</li></ul><p>本書では、これらの作品について詳しく説明します。</p><h3 id="はじめに-duk-を使ったデバッグについて" tabindex="-1">はじめに：&quot;duk &quot;を使ったデバッグについて <a class="header-anchor" href="#はじめに-duk-を使ったデバッグについて" aria-label="Permalink to &quot;はじめに：&quot;duk &quot;を使ったデバッグについて&quot;">​</a></h3><p>デバッグターゲットとして <code>duk --debugger</code> を、デバッグクライアントとして <code>debugger/duk_debug.js</code> を使用する具体的な方法については <code>debugger/README.rst</code> を参照してください。</p><h3 id="はじめに-ターゲットのデバッグ" tabindex="-1">はじめに：ターゲットのデバッグ <a class="header-anchor" href="#はじめに-ターゲットのデバッグ" aria-label="Permalink to &quot;はじめに：ターゲットのデバッグ&quot;">​</a></h3><p>ターゲットにデバッガサポートを組み込むには、以下のことが必要です。</p><ul><li><strong>設定オプションの確認</strong>: Duktape のデバッガーサポートを有効にするには、<code>DUK_USE_DEBUGGER_SUPPORT</code> と <code>DUK_USE_INTERRUPT_COUNTER</code> を有効にしてください。また、その他のデバッグ関連のコンフィグオプションも考慮してください。</li><li><strong>具体的なストリーム伝送機構を実装する</strong>: ターゲット・デバイスとDuktapeデバッガの両方に必要です。 最適なトランスポートはターゲットに依存します。例えば、TCP ソケット、 シリアルリンク、あるいは既存のカスタムプロトコルにデバッグデータを埋め込む、などです。 TCP デバッグトランスポートの例は <code>examples/debug-trans-socket/duk_trans_socket_unix.c</code> で提供されています。</li><li><strong>デバッガを添付するコードの追加</strong>: はデバッグを開始する時に <code>duk_debugger_attach()</code> を呼び出します。Duktapeは実行を一時停止し、デバッグメッセージを処理します(必要ならブロッ キングします)。 実行はデバッグクライアントの制御下で再開されます。</li><li><strong>終了後、デバッガをデタッチします</strong>: デバッグを停止するには <code>duk_debugger_detach()</code> を呼び出します。デバッグストリームエラーも自動的に切り離されます。 デバッグストリームエラーが発生すると、Duktapeは通常の実行を再開し、ブレークポイントなどを無視します(デバッグクライアントから明示的に要求された場合やDuktapeがデバッグストリームエラーを検出した場合にもデタッチが発生することがあります。)。</li><li><strong>イベントループがある場合</strong>: オプションで、Duktape の呼び出しが行われていない時に、たまに <code>duk_debugger_cooperate()</code> を呼び出します。 これにより、デバッグコマンドを Duktape の呼び出しの外で実行することができるようになります。</li></ul><p>Duktapeには、プレーンなTCPトランスポートをサポートするデバッグ・クライアントが付属しています。また、サードパーティ製のデバッグクライアントもいくつかあり、ターゲットと通信できるようにすることができます。これらは同じデバッグプロトコルを共有しているので、トランスポートだけを適合させる必要があります。</p><p>また、デバッグプロトコルのクライアント側を実装することで、独自のデバッグクライアントを作成することもできます。 デバッグ・クライアントはターゲットのデバッグ・プロトコルのバージョンに適応するよう意図されているので、Duktapeデバッグ・プロトコルの進化に伴って、デバッグ・クライアントの変更が必要になる場合があります。 デバッグ・プロトコルは、Duktape APIと同じセマンティック・バージョニングの原則でバージョン管理されています。</p><p>バイナリー・デバッグ・プロトコルをデバッグ・クライアントに直接実装することもできますが、より簡単な方法として、デバッグ・プロトコルのJSONマッピングを使用すると、より使い勝手が良くなります。 Duktapeには、JSONマッピングと、ターゲット上で実際に動作するバイナリー・デバッグ・プロトコルを変換するプロキシサーバーが含まれています。</p><h3 id="クライアントとサーバーのデバッグ例" tabindex="-1">クライアントとサーバーのデバッグ例 <a class="header-anchor" href="#クライアントとサーバーのデバッグ例" aria-label="Permalink to &quot;クライアントとサーバーのデバッグ例&quot;">​</a></h3><p>Duktapeレポには、デバッグ・トランスポートにTCPを使用し、Duktapeコマンドライン・ツール（「duk」）と通信できるデバッガーのウェブUIの例が含まれています。 この実行例は、デバッグコマンドの具体的な詳細とデバッグトランスポートの実装方法をさらに文書化するためのものです。 ウェブコンソールは、TCPデバッグトランスポートを使用する他のデバッグターゲットと直接対話することも可能です。</p><p>デバッガーのサンプルには:</p><ul><li><p>Duktapeのコマンドラインツールの <code>--debugger</code> オプションは、 <code>DUK_CMDLINE_DEBUGGER_SUPPORT</code> と <code>DUK_USE_DEBUGGER_SUPPORT</code> の両方を使用することで有効にすることができます。コマンドラインツールは <code>examples/debug-trans-socket/</code> で提供される TCP ソケットベースのサンプルトランスポートを使用します。</p></li><li><p>NodeJS + ExpressJS ベースの最小デバッガー Web UI が <code>debugger/</code> ディレクトリにあり、デバッグ転送に TCP ソケットを使用します。</p></li></ul><p><strong>TCPは良い例のトランスポートではあるが、「標準」トランスポートではない。トランスポートは常に最終的にはユーザーコード次第である。</strong></p><h3 id="ローカルデバッガの例" tabindex="-1">ローカルデバッガの例 <a class="header-anchor" href="#ローカルデバッガの例" aria-label="Permalink to &quot;ローカルデバッガの例&quot;">​</a></h3><p>通常、リモート・デバッグ・クライアントが望ましいのですが、場合によってはDuktapeが動作しているのと同じプロセスでデバッグ接続を終了させるのが便利なことがあります。 Duktapeの観点からは、「ローカル」デバッガはリモートのデバッガと同じです：デバッグ・トランスポートの実装がDuktapeとの違いを隠してくれます。ローカルなd値エンコーダー/デコーダーを持つデバッグ・トランスポートの例があります。</p><ul><li><code>examples/debug-trans-dvalue/</code></li></ul><p>サンプルのトランスポートは、dvalueのエンコードとデコードの詳細を隠し、ローカルのデバッグクライアントを書きやすくします。 このトランスポートは、C言語でdvalueを扱う例としても役立ちます（Node.jsのデバッガには、Javascriptのための同様の例があります）。</p><h3 id="duktapeが提供しないもの" tabindex="-1">Duktapeが提供しないもの <a class="header-anchor" href="#duktapeが提供しないもの" aria-label="Permalink to &quot;Duktapeが提供しないもの&quot;">​</a></h3><h4 id="標準的なデバッグ用トランスポート" tabindex="-1">標準的なデバッグ用トランスポート <a class="header-anchor" href="#標準的なデバッグ用トランスポート" aria-label="Permalink to &quot;標準的なデバッグ用トランスポート&quot;">​</a></h4><p>最適なトランスポートは千差万別なので、これはユーザーコード次第です。Wi-Fi、シリアルポート、などなど。 しかし、TCP を使用しない特別な理由がないのであれば、おそらく TCP は良いデフォルトのトランスポートとなるでしょう。 バンドルされているサンプルのデバッガー Web UI と JSON デバッグプロキシは、トランスポートとして TCP を使用します。</p><h4 id="標準的なデバッガーui" tabindex="-1">標準的なデバッガーUI <a class="header-anchor" href="#標準的なデバッガーui" aria-label="Permalink to &quot;標準的なデバッガーUI&quot;">​</a></h4><p>ユーザー・コードは、Duktapeがサポートするデバッグ・コマンドの上に、具体的なデバッガー・インターフェイスを実装する必要があります。 しかし、Duktapeには、完全に機能するデバッガの例が含まれています。 必要に応じてこれを拡張することもできますし、自分で書くこともできます。</p><h4 id="機能ソースコード" tabindex="-1">機能ソースコード <a class="header-anchor" href="#機能ソースコード" aria-label="Permalink to &quot;機能ソースコード&quot;">​</a></h4><p>Duktapeは現在、デバッグ・プロトコルで関数のソース・コードを提供していません。 デバッグクライアントは、一致するソースコードにアクセスでき、特定のファイル名に一致するソースファイルを見つける能力を持っていることが前提です。 これは、<code>eval</code> を使って作成された関数は、ソースが存在する状態でデバッグできないことも意味します。</p><h2 id="デバッガサポート有効化の影響" tabindex="-1">デバッガサポート有効化の影響 <a class="header-anchor" href="#デバッガサポート有効化の影響" aria-label="Permalink to &quot;デバッガサポート有効化の影響&quot;">​</a></h2><h3 id="パフォーマンス" tabindex="-1">パフォーマンス <a class="header-anchor" href="#パフォーマンス" aria-label="Permalink to &quot;パフォーマンス&quot;">​</a></h3><p>デバッガが接続され、実行中の関数にアクティブなブレークポイントがある場合を除き、パフォーマンスへの影響は非常に小さいはずです。</p><p>バイトコードエクゼキュータが再起動するとき、デバッガが接続されていないことをすぐに判断し、ブレークポイントを処理する必要はありません。 バイトコード実行に何らかの影響を与えるデバッガを使用するには、バイトコードエクゼキュータ割り込みを有効にする必要があります。</p><p>Duktapeは、デバッガが接続され、現在の関数にアクティブなブレークポイントがある場合、「チェック済み実行」になります。 チェック実行（詳細は後述）は、通常の実行よりはるかに遅く、バイトコード命令ごとに割り込みハンドラが実行されます。</p><h3 id="コードフットプリント" tabindex="-1">コードフットプリント <a class="header-anchor" href="#コードフットプリント" aria-label="Permalink to &quot;コードフットプリント&quot;">​</a></h3><p>デバッガサポートにより、フットプリントが約15-20kB増加します（有効なデバッガ機能に依存）。 デバッガ機能が有効な場合</p><h3 id="メモリフットプリント" tabindex="-1">メモリフットプリント <a class="header-anchor" href="#メモリフットプリント" aria-label="Permalink to &quot;メモリフットプリント&quot;">​</a></h3><p>ヒープレベルのデバッガー状態のため、 <code>duk_heap</code> 構造体のサイズが増加します。細かく調整されたメモリプールを使用している場合、メモリプールのサイズを再チューニングする必要があるかもしれません。</p><p>関数インスタンスは常に内部の <code>_Varmap</code> プロパティを保持し、ローカル変数が常に名前で検索できるようにします。 デバッガのサポートがない場合、 <code>_Varmap</code> は実行中に必要となる場合のみ保持されます (例: 関数に eval コールが含まれている場合など)。</p><p>そうでなければ、メモリフットプリントは無視できるほど小さくなるはずです。 Duktape はデバッグ・メッセージのバッファリングを維持する必要がありません。なぜなら、全てのデバッグ・データはストリームで入出力されるからです。</p><h3 id="セキュリティ" tabindex="-1">セキュリティ <a class="header-anchor" href="#セキュリティ" aria-label="Permalink to &quot;セキュリティ&quot;">​</a></h3><p>デバッガープロトコル経由で利用可能なデバッグコマンドは、潜在的に悪用可能なメモリ安全でない動作をトリガーするために（誤って）使用される可能性があります。 たとえば、デバッグクライアントは、悪用される可能性のあるファブリケーションポインタから/への読み取り/書き込みを行う可能性があります。</p><p>これがセキュリティ上の懸念である場合、デバッグトランスポートは認証、暗号化、および完全性保護を提供する必要があります。 例えば、相互認証されたTLS接続を使用することができます。 Duktape自体は、トランスポートによって提供される以上のセキュリティ対策を提供しません。</p><h2 id="デバッグapi" tabindex="-1">デバッグAPI <a class="header-anchor" href="#デバッグapi" aria-label="Permalink to &quot;デバッグAPI&quot;">​</a></h2><h3 id="duk-debugger-attach" tabindex="-1">duk_debugger_attach() <a class="header-anchor" href="#duk-debugger-attach" aria-label="Permalink to &quot;duk_debugger_attach()&quot;">​</a></h3><p>アプリケーションがDuktapeヒープにデバッガーを取り付けたいときに呼び出されます::</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_debugger_attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_trans_read_cb,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /* 読み取りコールバック */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_trans_write_cb,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 書き込みコールバック */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_trans_peek_cb,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /* ピークコールバック (オプション) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_trans_read_flush_cb,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* 読み取りフラッシュコールバック (オプション) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_trans_write_flush_cb,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 書き込みフラッシュコールバック (オプション) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_request_cb,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /* アプリリクエストコールバック (オプション) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_detached_cb,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           /* デバッガデタッチドコールバック */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    my_udata);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                /* デバッグudata */</span></span></code></pre></div><p>呼び出されると、Duktapeはデバッグ・モードに入り、実行を一時停止し、デバッグ・クライアントからのさらなる指示を待ちます。 Duktapeのデバッガ・サポートが有効でない場合、エラーがスローされます。</p><p>トランスポートコールバックは、開始要求の一部として与えられる。 Duktape はデバッグの開始/停止サイクルごとに新しい仮想ストリームを期待し、 <code>duk_debugger_attach()</code> が呼ばれるたびにプロトコルバージョン識別子を送信します。</p><p>detached コールバックはデバッガが切り離されたときに呼び出されます。 これは、明示的な要求 (<code>duk_debugger_detach()</code>) やデバッグメッセージ/トランスポートエラー、Duktape ヒープの破壊によって起こります。</p><p>APIドキュメントに明示的に記載されていない限り、どのコールバックもDuktape APIを呼び出すことはできません(ほとんどの場合、 <code>ctx</code> 引数を取得しないのもこのためです)。そうすると、メモリが安全でない挙動を引き起こす可能性があります。 具体的な例として、もしユーザーの読み出しコールバックが読み出し中に Duktape API を呼び出すと、その API 呼び出しがガベージコレクションの引き金になる可能性があります。 ガベージコレクションは任意の副作用を持つ可能性があるため、実行中のデバッガコマンド (<code>src-input/duk_debugger.c</code> で実装) が非常に混乱した方法でブレークする可能性があります。</p><h3 id="duk-debugger-detach" tabindex="-1">duk_debugger_detach() <a class="header-anchor" href="#duk-debugger-detach" aria-label="Permalink to &quot;duk_debugger_detach()&quot;">​</a></h3><p>アプリケーションがデバッガーをデタッチしたいときに呼び出されます::</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_debugger_detach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span></code></pre></div><p>デバッガが切り離されると、Duktapeは通常の実行を再開します。 残っているデバッグ状態（ブレークポイントなど）は無視されます。</p><p>Duktapeのデバッガ・サポートが有効でない場合、エラーが投げられます。</p><h3 id="duk-debugger-cooperate" tabindex="-1">duk_debugger_cooperate() <a class="header-anchor" href="#duk-debugger-cooperate" aria-label="Permalink to &quot;duk_debugger_cooperate()&quot;">​</a></h3><p>Duktapeへの呼び出しがアクティブでない場合に、受信デバッグ・コマンドを処理するためのオプションの呼び出しです。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_debugger_cooperate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span></code></pre></div><p>保留中のデバッグコマンドは <code>ctx</code> スレッドのコンテキスト内で実行されます。ブロックせずに実行できるすべてのデバッグコマンドは、呼び出しの間に実行されます。 この呼び出しはブロックしないので、イベントループの中に埋め込んでも安全です。 この呼び出しは、デバッグがサポートされていないときやアクティブでないときは無意味なので、デバッグの状態をチェックせずに呼び出すことができます。</p><p>注意点：</p><ul><li>呼び出し元は、Duktapeへの呼び出しがアクティブなときに、このAPI関数を呼び出さないようにする責任があります（どのようなコンテキストでも）。</li><li>duk_debugger_cooperate() の呼び出しの間隔は、保留中のデバッグ・コマンドに対する Duktape の反応速度に影響します。</li></ul><p>このAPIコールは、Duktapeへの呼び出しがアクティブでないときにEvalなどのデバッグ・コマンドを実行できるようにするために、一部のアプリケーションで必要とされています。 例えば、以下のようになります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* イベントまたはタイムアウトを待ちます。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wait_for_events_or_timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* プロセスイベント。 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event1) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*...*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Duktapeデバッガと連携する。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    duk_debugger_cooperate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このAPIコールは、保留中の受信メッセージをすべて処理するため（ブロックせずに利用可能）、次のように使用することも可能です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* イベントまたはタイムアウトを待ちます。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wait_for_events_or_timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* プロセスイベント。 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (got_inbound_debugger_data) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* Duktapeデバッガと協力：新しい受信データが到着するまで、保留中のメッセージをすべて処理する。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_debugger_cooperate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*...*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="duk-debugger-pause" tabindex="-1">duk_debugger_pause() <a class="header-anchor" href="#duk-debugger-pause" aria-label="Permalink to &quot;duk_debugger_pause()&quot;">​</a></h3><p>ターゲットはいつでもこれを呼び出して、ECMAScript の実行を一時停止し、添付のデバッグクライアントに制御を移すよう要求することができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_debugger_pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span></code></pre></div><p>要求された一時停止はすぐには起こらないかもしれませんが、次のバイトコードオペレーションディスパッチで実行されます。詳細はAPIドキュメントを参照してください。</p><p>このコールの一般的な使用例は、ホットキーにバインドすることで、ユーザーが無限ループから抜け出し、デバッグすることを可能にします。 しかし、他のDuktape APIコールと同様に、このコールはスレッドセーフではないので、デバッグ対象のECMAScriptコードを実行するために使用するのと同じスレッドから呼び出す必要があります。</p><h3 id="duk-debugger-notify" tabindex="-1">duk_debugger_notify() <a class="header-anchor" href="#duk-debugger-notify" aria-label="Permalink to &quot;duk_debugger_notify()&quot;">​</a></h3><p>デバッグトランスポートを通じてアプリケーション固有の通知を送信するためのオプションのコール::</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_bool_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sent;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_push_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BatteryLevel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_push_uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">130</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 130 of 1000 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_debugger_notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*nvalues*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* &#39;sent&#39; は、notify が正常に送信されたか否かを示す。 */</span></span></code></pre></div><p>この呼び出しは0を返し、デバッガサポートがコンパイルされていないときや、デバッガが接続されていないときは事実上無視されます。</p><p>詳細については、以下の「カスタムリクエストと通知」を参照してください。</p><h2 id="デバッグトランスポート" tabindex="-1">デバッグトランスポート <a class="header-anchor" href="#デバッグトランスポート" aria-label="Permalink to &quot;デバッグトランスポート&quot;">​</a></h2><h3 id="概要-1" tabindex="-1">概要 <a class="header-anchor" href="#概要-1" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>Duktapeのデバッガ・コードは、TCPコネクションやシリアル・リンクに似たセマンティクスを持つ、抽象化された信頼性の高いストリーム・トランスポートを介してデバッグ・メッセージを送受信します。 異なる環境への移植性を最大化するために、Duktapeはユーザーコードが <code>duk_debugger_attach()</code> に与えるコールバックという形で、このトランスポートの具体的な実装を提供することを期待しています。</p><p>トランスポートが提供する論理的なサービスは、以下のプリミティブを持つ信頼性の高いバイトストリームである。</p><ul><li>バイト読み（部分読みOK，最低1バイト読みが必要ならブロック）</li><li>バイト書き込み（部分書き込みOK，最低1バイトの書き込みが必要な場合はブロックする）</li><li>ブロッキングせずに受信バイトをPeekする。</li><li>フラッシュヒントを読む</li><li>書き込みフラッシュヒント</li></ul><p>トランスポート・コールバックの実装をできるだけ簡単にするために、部分的な 読み書きを許可しています。 Duktapeは、必要な回数だけreadとwriteを呼び出すことで、「完全に読む」「完全に書く」セマンティクスを自動的に処理します。</p><p>Peekingは、Duktapeがブロックすることなく、受信したデバッグ・メッセージを検出することを可能にします。これにより、Duktapeが（一時停止状態ではなく）通常通り動作している場合でも、デバッグ・メッセージを処理することができます。</p><p>書き込みフラッシュは、トランスポート実装が書き込みを確実に合体させることを可能にする。リードフラッシュは、トランスポート実装が受信ウィンドウをより効率的に管理 することを可能にする。 読み取り/書き込みフラッシュコールバックは、いくつかのタイプのトランスポートに おいてのみ必要とされる。</p><p>このセクションでは、各コールバックの詳細なセマンティクスをカバーし、フロー制御、圧縮、セキュリティなどの他のトランスポート関連の一般的な問題について議論しています。</p><p><strong>重要：アプリケーションは read/write チャンクバウンダリに何の意味も持たせるべきではありません。 リード、ライト、ピーキング、フラッシュコールがデバッグメッセージの境界に対応する保証はありません。</strong></p><h3 id="コールバックのセマンティクスを読み取る" tabindex="-1">コールバックのセマンティクスを読み取る <a class="header-anchor" href="#コールバックのセマンティクスを読み取る" aria-label="Permalink to &quot;コールバックのセマンティクスを読み取る&quot;">​</a></h3><ul><li>読み取り長は≧1が保証される。</li><li>バッファポインタは非NULLであることが保証される。</li><li>Duktapeは、少なくとも1バイト、最大でも「長さ」バイトの読み取りを要求しています。 部分的な読み出しはOKだが、少なくとも1バイトは読み出さなければならない。 ユーザーコードが少なくとも1バイトを読み取れない場合、読み取れるまでブロックしなければならない(MUST)。 1バイト以上が利用可能な場合、ユーザーコードはブロックしてはならない(MUST NOT)。</li><li>1,lengthの範囲の戻り値は、与えられたバッファにいくつのバイトが読み込まれたかを示す。</li><li>戻り値0は、ストリーム・エラー（サニティ・タイムアウト、コネクション・クローズなど）を示します。 Duktapeはそのストリームを壊れたとみなし、それ以上操作を行いません。 デバッガは自動的に切り離されます。</li></ul><h3 id="コールバックのセマンティクスを書き込む" tabindex="-1">コールバックのセマンティクスを書き込む <a class="header-anchor" href="#コールバックのセマンティクスを書き込む" aria-label="Permalink to &quot;コールバックのセマンティクスを書き込む&quot;">​</a></h3><ul><li>書き込み長は≧1であることが保証される。</li><li>バッファポインタは非NULLであることが保証される。</li><li>Duktapeは、最低でも1バイト、最大でも「length」バイトの書き込みを要求しています。 部分的な書き込みはOKだが、少なくとも1バイトは書き込まなければならない。もしユーザー・コードが少なくとも1バイトを書き込めない場合は、書き込めるようになるまでブロックしなければならない（MUST）。</li><li>1,lengthの範囲の戻り値は、与えられたバッファから何バイトが書き込まれたかを示します。</li><li>戻り値0は、ストリーム・エラー（サニティ・タイムアウト、コネクション・クローズなど）を示します。 Duktapeはそのストリームを壊れたとみなし、それ以上操作を行いません。 デバッガは自動的に切り離されます。</li></ul><h3 id="peekコールバックのセマンティクス" tabindex="-1">Peekコールバックのセマンティクス <a class="header-anchor" href="#peekコールバックのセマンティクス" aria-label="Permalink to &quot;Peekコールバックのセマンティクス&quot;">​</a></h3><ul><li>peekコールバックの実装はオプションです(NULLは <code>duk_debugger_attach()</code> で渡すことができます)が、強く推奨します。 コールバックが提供されない場合、(Duktapeが正常に動作している間に)「突然」実行を一時停止するようないくつかの機能は動作しなくなります。</li><li>Peekコールバックには引数がありません。</li><li>Duktapeは入力ストリームを覗くことを要求しています。つまり、少なくとも1バイトがブロックされずに読み込めるかどうかを確認するためです。</li><li>戻り値0は、ブロックせずに読み取ることができるバイトがないことを示す。</li><li>戻り値 &gt; 0 は、ブロッキングせずに読み込めるバイト数を示します。 現在、Duktapeは少なくとも1バイトが利用可能かどうかだけを気にしているので、 0か1を返せば十分です。</li><li>Duktapeは現在、少なくとも1バイトが利用可能であれば、デバッグメッセージ全体を読み取ることができると仮定しています（必要に応じてブロックし、部分的な読み取りを処理します）。</li></ul><h3 id="リードフラッシュコールバックのセマンティクス" tabindex="-1">リードフラッシュコールバックのセマンティクス <a class="header-anchor" href="#リードフラッシュコールバックのセマンティクス" aria-label="Permalink to &quot;リードフラッシュコールバックのセマンティクス&quot;">​</a></h3><ul><li>リードフラッシュコールバックの実装はオプションです (<code>duk_debugger_attach()</code> で NULL を渡すことができます)。</li><li>リードフラッシュコールバックは引数を持たない。</li><li>Duktapeはユーザー・コードに対して「リード・フラッシュ」を指示しています。 Duktapeは、その場ではもう読み込みをしないかもしれないのに、&quot;read flush &quot;を指示することが保証されています。 (ただし、Duktapeはその直後から読み込みを続けていても、読み込みのフラッシュを示すことがあります)。</li><li>ほとんどのトランスポートでは、リードフラッシュは重要ではない。 トランスポートプロトコルが制限された読み取りウィンドウを使用し、リ モートピアにウィンドウの状態を更新するプロトコルを持つ場合、ウィンドウ 制御メッセージは次の読み取りフラッシュに延期できる(読み取りバッファが空の状態 など、それを送信する他の緊急の理由がない場合)。</li></ul><h3 id="書き込みフラッシュコールバックセマンティクス" tabindex="-1">書き込みフラッシュコールバックセマンティクス <a class="header-anchor" href="#書き込みフラッシュコールバックセマンティクス" aria-label="Permalink to &quot;書き込みフラッシュコールバックセマンティクス&quot;">​</a></h3><ul><li>書き込みフラッシュコールバックの実装はオプションです (<code>duk_debugger_attach()</code> で NULL を渡すことができます)。</li><li>書き込みフラッシュコールバックは引数を持ちません。</li><li>Duktapeは、ユーザーコードに対して「書き込みフラッシュ」を示しています。 Duktapeは、その特定の機会にこれ以上書き込みをしないかもしれないとき、 「書き込みフラッシュ」を示すことが保証されています。 (ただし、Duktapeは書き込みの直後でも書き込みフラッシュを指示することが あります)。</li><li>この表示は、ユーザー・トランスポートが書き込みをより大きなチャンクにまと める場合に有用です。 ユーザーコードは、バッファリングされたデータが十分に大きくなるか、書き込みフラッシ ュが指示されると、チャンクを送り出すことができます。 ユーザーコードは、重要なときにライトフラッシュが起こることを信頼することができる。</li><li>ユーザーコードは、この表示が基礎となるトランスポートに適用されない場合（例えば、TCPを使用する場合、書き込みの自動合体のためのメカニズムがすでにあります）、または保留中のバイトが最終的に送信されることを確実にするための他のメカニズム（例えば、タイマー）がある場合、無視する自由もあります。</li></ul><h3 id="トランスポートが壊れたことを示すマーク" tabindex="-1">トランスポートが壊れたことを示すマーク <a class="header-anchor" href="#トランスポートが壊れたことを示すマーク" aria-label="Permalink to &quot;トランスポートが壊れたことを示すマーク&quot;">​</a></h3><p>Duktapeは、次の場合に輸送が壊れたとマークします。</p><ul><li>ユーザー・コールバックがストリーム・エラーを示した場合</li><li>Duktapeがデバッグ・ストリームをパースする際に、パース・エラーに遭遇した場合。</li></ul><p>デバッグ・トランスポートが壊れたとマークされたとき。</p><ul><li>デバッガは自動的に切り離され、通常のECMAScriptの実行が直ちに再開されます。 デタッチド コールバックが存在する場合は、それが呼び出されます。</li><li>Duktapeは、ストリームのユーザー・コールバックに対して、これ以上呼び出しを行いません。</li><li>Duktape内部のデバッグ用読み込みコールは、ダミー値（バイト読み込み時は0、整数読み込み時は0、文字列読み込み時は空文字列など）を返し、書き込みは黙って無視されます。 これにより、実装は読み書きのたびにエラーをチェックすることなくデータの読み書きができます。「壊れたトランスポート」に対する明示的なチェックは、最も便利な場所で行うことができます。</li></ul><h3 id="ピーキングリクエストノート" tabindex="-1">ピーキングリクエストノート <a class="header-anchor" href="#ピーキングリクエストノート" aria-label="Permalink to &quot;ピーキングリクエストノート&quot;">​</a></h3><p>Duktapeは、入ってくるデバッグ・コマンドを検出し、それを処理するためにピー ク・リクエストを使用します。ピー クは、通常の実行時 (関連するブレークポイントがなく、ステッピングがアクティブでない時) と チェック実行時 (1つ以上のアクティブなブレークポイントがあり、ステッピングがアクティブな時) の両方に使用されます。</p><p>Duktapeは、日付ベースのタイムスタンプを使用して、ピーク要求のレートを自動的に制限しています。</p><h3 id="フラッシュ・ノートの作成" tabindex="-1">フラッシュ・ノートの作成 <a class="header-anchor" href="#フラッシュ・ノートの作成" aria-label="Permalink to &quot;フラッシュ・ノートの作成&quot;">​</a></h3><p>Duktapeは、書き込みフラッシュを使用して、この機会にこれ以上データを送信しない可能性があること、および、アプリケーションがキューに入れた保留データを送信する必要があることを示します。</p><p>Duktapeは、送信するデバッグ・メッセージを非常に小さく分割して書き込むので、アプリケーションが送信待ちデータのバッファを維持するのは理にかなっているかもしれません。Duktapeが書き込みを行う際、データをバッファに追加することができます。 データは、バッファが十分に大きくなった時か、Duktapeが書き込みフラッシュを実行した時に送出されます。</p><p>書き込みフラッシュは、Duktapeがメッセージのセットを処理し終わった時に発生するこ とが保証されており、アプリケーションは、保留中の書き込みをフラッシュするための タイマー・メカニズムなどを別に持つ必要がありません。 書き込みフラッシュは、送信されるデバッグ・メッセージの後では保証され ません（現在のDuktapeの実装はそのように動作しますが）。</p><p><strong>ユーザー・コードは、Duktapeがいつ書き込みフラッシュを示すかについて、それが起こったときに保留中のバイトを送信すること以外、何も仮定してはいけません</strong>。</p><h3 id="信頼性" tabindex="-1">信頼性 <a class="header-anchor" href="#信頼性" aria-label="Permalink to &quot;信頼性&quot;">​</a></h3><p>Duktapeは、トランスポートが信頼できるものであることを期待します。すなわち、 バイトの並び替えや紛失、重複がないことです。 具体的なトランスポートは、アプリケーション固有の手段で信頼性を提供しな ければならない。 例えば、TCP ソケットが使われる場合、信頼性は TCP によって自動的に提供されます。 信頼性のないパケットトランスポートの場合、ユーザコードは再送、重複検出、順序付けを提供しなければならない。</p><h3 id="フロー制御" tabindex="-1">フロー制御 <a class="header-anchor" href="#フロー制御" aria-label="Permalink to &quot;フロー制御&quot;">​</a></h3><p>抽象的なトランスポートレベルではフロー制御はないが、アプリケーションはト ランスポートの一部としてフロー制御を自由に実装することができる。 例えば、TCPソケットが使用される場合、TCPの一部として自動的なフロー制御が存在する。</p><p>フロー制御は、バッファの過剰な確保を避けるために、メモリ量の非常に少ないデバイスでは必要かもしれない。</p><h3 id="圧縮" tabindex="-1">圧縮 <a class="header-anchor" href="#圧縮" aria-label="Permalink to &quot;圧縮&quot;">​</a></h3><p>非常に低速なリンクでは、アプリケーション固有のトランスポートがデバッグトラフィックのストリーム圧縮を使用することが適切である場合があります。 圧縮は、ストリームを非圧縮サイズの10〜30%程度に減らすことができる。</p><h3 id="セキュリティ-1" tabindex="-1">セキュリティ <a class="header-anchor" href="#セキュリティ-1" aria-label="Permalink to &quot;セキュリティ&quot;">​</a></h3><p>環境によっては、デバッグトランスポートはセキュリティ上重要である場合があります。 そのような場合、アプリケーションはデバッグトランスポートに認証と暗号化（例：トランスポートにSSL/TLSを使用）を使用する必要があります。</p><h3 id="パケットベースのトランスポートの上に実装する" tabindex="-1">パケットベースのトランスポートの上に実装する <a class="header-anchor" href="#パケットベースのトランスポートの上に実装する" aria-label="Permalink to &quot;パケットベースのトランスポートの上に実装する&quot;">​</a></h3><p>このトピックは別のセクションで扱います。</p><h3 id="開発時間輸送拷問オプション" tabindex="-1">開発時間輸送拷問オプション <a class="header-anchor" href="#開発時間輸送拷問オプション" aria-label="Permalink to &quot;開発時間輸送拷問オプション&quot;">​</a></h3><p>DUK_USE_DEBUGGER_TRANSPORT_TORTURE という設定オプションを使うと、Duktape はすべてのデバッグトランスポートの読み込み/書き込み操作を 1 バイト単位で行うようになり、あるサイズのチャンクの読み込み/書き込みに関する不正な仮定をキャッチするのに役立ちます。</p><h2 id="デバッグストリームフォーマット" tabindex="-1">デバッグストリームフォーマット <a class="header-anchor" href="#デバッグストリームフォーマット" aria-label="Permalink to &quot;デバッグストリームフォーマット&quot;">​</a></h2><h3 id="概要-2" tabindex="-1">概要 <a class="header-anchor" href="#概要-2" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>デバッグ・プロトコルは、Duktape内部とデバッグ・クライアントの間で交わされる会話です。 ユーザーコードはデバッグプロトコルの内容を意識することはなく、デバッグターゲットとデバッグクライアントの間でストリームのチャンクを運ぶためのデバッグトランスポートを提供するだけです。</p><p>デバッグプロトコルはシンプルな3つのライフサイクルを持っています。</p><ul><li>ストリームが接続され、バージョン識別（Duktapeによって送信される）を待機しています。</li><li>ストリームが接続され、アクティブに使用されている状態。 デバッグ・メッセージは、それぞれの方向で自由に交換されます。</li><li>ストリームは切断されます。 これは明示的なデタッチ要求（つまり <code>duk_debugger_detach()</code> への呼び出し、ユーザーのトランスポートコールバックによって示される読み込み/書き込みエラー、Duktapeによって検出されるメッセージ構文エラー、またはDuktapeヒープ破棄によって起こります。</li></ul><p>プロトコルはリクエストパイプラインを使用する。つまり、各ピアは前のリ クエストに対する応答を待つことなく、複数のリクエストを送ることが許される。 これを促進するために、すべてのリクエストは対応する応答/エラーメッセージを持ち、リクエストは常に再順序付けされることなく処理される。 どちらのピアもパイプライン化されたリクエストを送る必要はなく、例えばデバッグクライアントが別のリクエストを送る前に応答を待つことは全く問題ありません。</p><h3 id="バージョン識別" tabindex="-1">バージョン識別 <a class="header-anchor" href="#バージョン識別" aria-label="Permalink to &quot;バージョン識別&quot;">​</a></h3><p>デバッグ・トランスポートが装着されているとき、Duktapeはバージョン識別をUTF-8でエンコードされた:という形の行として書き込みます。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">protocolversion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x20)&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">additional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text, no LF&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">LF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x0a)&gt;</span></span></code></pre></div><p>現在のプロトコルのバージョンは「2」であり、識別行は現在、次のような形になっています。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2 &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DUK_VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DUK_GIT_DESCRIBE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">LF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>プロトコルバージョン番号の後に続くものはすべて情報提供のみです。 例::</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2 20000 v2.0.0 duk command built from Duktape repo</span></span></code></pre></div><p>デバッグプロトコルのバージョンは、ユーザーコードへの定義として利用可能です (<code>duktape.h</code> で定義されます)::</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DUK_DEBUG_PROTOCOL_VERSION</span></span></code></pre></div><p>これは、ターゲットがそのデバッグ機能を宣伝できる場合などに有用である。</p><p>デバッグクライアントはその行を解析し、最初にプロトコルバージョンをチェックする必要があります。プロトコルバージョンがサポートされていない場合、デバッグ接続は閉じられるべきです。 デバッグクライアントは、常にターゲットに存在するプロトコルバージョンに適応します。 バージョン識別に対する確認応答はなく、デバッグクライアントからの対応するハンドシェイクメッセージもありません。</p><p>バージョン識別（ハンドシェイク）が完了すると、デバッグストリームは以下に説明する異なるフレーミングに切り替わります。 このフレーミングはプロトコルのバージョンに依存する可能性があり、そのためバージョン識別が最初に処理されなければなりません。</p><p>バージョン識別形式に関するいくつかの根拠。</p><ul><li>1行のテキスト文字列は一般的なハンドシェイク手法であり、（TCPトランスポートを使用している場合）ターゲットにtelnet接続でき、デバッガーポートに接続したことを容易に確認できるという利点があります。 また、例えばDuktapeがオプションの機能をアドバタイズできるように、簡単に拡張することができます（それが必要になった場合）。</li><li>バージョン識別は、ハンドシェイク形式を変更することなく、将来的にプロトコルのフレームを変更することを可能にします。 もしバージョン識別が以下に述べるような複雑なフレームを使用するならば、 バージョンの互換性をより難しくするでしょう。</li><li>Duktapeは、ただやみくもにバージョン識別を送信し、応答を解析する必要がないので、例えば1バイトのバージョンを送信することと比較して、人間が読めるバージョン識別行を持つことにほとんどコストはかかりません。</li><li>デバッグ・クライアントのためにバージョン識別を追加することは、Duktapeにとって不必要なパース状態を意味します。 Duktapeにデバッグ・クライアントのバージョンを認識させるメリットはほとんどない。</li></ul><h3 id="dvalue" tabindex="-1">Dvalue <a class="header-anchor" href="#dvalue" aria-label="Permalink to &quot;Dvalue&quot;">​</a></h3><p>バージョン識別ハンドシェイクの後、デバッグストリームはそれぞれの方向に送られる <em>dvalues</em> と呼ばれる型付き値で構成される。 Dvalues はメッセージフレームマーカー、整数、文字列、タグ付き ECMAScript 値などを表現する。 これらはコンテキストなしで解析することができ、ダンプに便利であり、またコンテキストなしで dvalues (とデバッグメッセージ) をスキップすることができる。 デバッグメッセージは、開始マーカ、0個以上のd値、メッセージ終了マーカからなる一連のd値として構築される。</p><p>次の表は、dvalueとそのフォーマットについてまとめたものである。 初期バイト(IB)は、タイプタグとして、また、値の一部を含むものとして使用される場合がある。</p><table tabindex="0"><thead><tr><th>Byte sequence</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>0x00</td><td>EOM</td><td>メッセージの終わり</td></tr><tr><td>0x01</td><td>REQ</td><td>リクエストメッセージの開始</td></tr><tr><td>0x02</td><td>REP</td><td>成功返信メッセージの開始</td></tr><tr><td>0x03</td><td>ERR</td><td>エラー返信メッセージの開始</td></tr><tr><td>0x04</td><td>NFY</td><td>通知メッセージの開始</td></tr><tr><td>0x05...0x0f</td><td>reserved</td><td></td></tr><tr><td>0x10 <code>&lt;int32&gt;</code></td><td>integer</td><td>4 バイト整数，符号付き 32 ビット整数，ネットワーク順で先頭バイトに続く。</td></tr><tr><td>0x11 <code>&lt;uint32&gt;</code> <code>&lt;data&gt;</code></td><td>string</td><td>4 バイト文字列、符号なし 32 ビット文字列長でネットワーク順、文字列データは先頭バイトに続く。</td></tr><tr><td>0x12 <code>&lt;uint16&gt;</code> <code>&lt;data&gt;</code></td><td>string</td><td>2 バイト文字列、符号なし 16 ビット文字列長、ネットワーク順、文字列データは先頭バイトに続く。</td></tr><tr><td>0x13 <code>&lt;uint32&gt;</code> <code>&lt;data&gt;</code></td><td>buffer</td><td>4 バイトバッファ、符号なし 32 ビットバッファ長、ネットワーク順、バッファデータは先頭バイトに続く。</td></tr><tr><td>0x14 <code>&lt;uint16&gt;</code> <code>&lt;data&gt;</code></td><td>buffer</td><td>2 バイトバッファ、符号なし 16 ビットバッファ長、ネットワーク順、バッファデータは先頭バイトに続く</td></tr><tr><td>0x15</td><td>unused</td><td>内部的にはマッピングされていない配列エントリをマークするために使用され、デバッガプロトコルでは &quot;none &quot;の結果を示すために使用されます。</td></tr><tr><td>0x16</td><td>undefined</td><td>ECMAScript &quot;undefined&quot;</td></tr><tr><td>0x17</td><td>null</td><td>ECMAScript &quot;null&quot;</td></tr><tr><td>0x18</td><td>true</td><td>ECMAScript &quot;true&quot;</td></tr><tr><td>0x19</td><td>false</td><td>ECMAScript &quot;false&quot;</td></tr><tr><td>0x1a <code>&lt;8 bytes&gt;</code></td><td>number</td><td>IEEEダブル（ネットワークエンディアン）</td></tr><tr><td>0x1b <code>&lt;uint8&gt;</code> <code>&lt;uint8&gt;</code> <code>&lt;data&gt;</code></td><td>object</td><td>クラス番号、ポインタ長、ポインタデータ(ネットワークエンディアン)</td></tr><tr><td>0x1c <code>&lt;uint8&gt;</code> <code>&lt;data&gt;</code></td><td>pointer</td><td>ポインタ長、ポインタデータ(ネットワークエンディアン)</td></tr><tr><td>0x1d <code>&lt;uint16&gt;</code> <code>&lt;uint8&gt;</code> <code>&lt;data&gt;</code></td><td>lightfunc</td><td>Lightfuncフラグ、ポインタ長、ポインタデータ(ネットワークエンディアン)</td></tr><tr><td>0x1e <code>&lt;uint8&gt;</code> <code>&lt;data&gt;</code></td><td>heapptr</td><td>ポインタの長さ、ポインタデータ（ネットワークエンディアン）；ヒープオブジェクトへのポインタ、DumpHeapで使用される</td></tr><tr><td>0x1f</td><td>reserved</td><td></td></tr><tr><td>0x20...0x5f</td><td>reserved</td><td></td></tr><tr><td>0x60...0x7f <code>&lt;data&gt;</code></td><td>string</td><td>長さ [0,31] の文字列、文字列の長さは IB - 0x60, データは以下の通り。</td></tr><tr><td>0x80...0xbf</td><td>integer</td><td>整数 [0,63]、整数値はIB - 0x80</td></tr><tr><td>0xc0...0xff <code>&lt;uint8&gt;</code></td><td>integer</td><td>整数 [0,16383], 整数値は ((IB - 0xc0) &lt;&lt; 8) + followup_byte です。</td></tr></tbody></table><p>すべての &quot;integer &quot;表現は意味的に同じであり，整数が期待されるところではすべて使用することができる。 文字列 &quot;と &quot;バッファ &quot;表現も同様である。</p><p>dvalue の型付けは <code>duk_tval</code> の値を表現するのに十分であり、型付けを保持することができます (例えば、文字列とバッファは別々の型を持っています)。</p><p>dvalueは以下のテキストで以下のように表現される(テキスト中のすべての型に必要なわけではない)::</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field name&gt;      e.g. &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error code&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field name&gt;      e.g. &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error message&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">buf:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field name&gt;      e.g. &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">buf:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer data&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ptr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field name&gt;      e.g. &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ptr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prototype pointer&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field name&gt;     e.g. &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eval result&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field name&gt;      e.g. &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">heapptr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field name&gt;  e.g. &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">heapptr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt;</span></span></code></pre></div><p>これらの追加的な表記は次の通りである。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 1つの整数または2つの文字列のような代替。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quux&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 繰り返し、例えば0-N個の整数。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo&gt;]*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 繰り返し、例えば1-N個の値、各文字列または整数。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar&gt;]+</span></span></code></pre></div><p>フィールドが ECMAScript の値と正確に関連しない場合、例えばフィールドがデバッガ制御フィールドである場合、型付けは緩くなることがある。 例えば、boolean フィールドは integer dvalue として、任意のバイナリ文字列は string dvalue として表現されることがあります。 各コマンドで使用される具体的な型は、以下のコマンドごとのセクションで説明します。</p><p>dvalue形式の背後にある意図は、次のとおりです。</p><ul><li>最下層のプロトコルを型付けし、解析される特定のメッセージを知ることなく、dvalueとメッセージをダンプできるようにする。</li><li>EOMマーカーをスキャンすることで、メッセージの内容を理解せずに メッセージをスキップする、あるいはメッセージの末尾のフィールドを 無視する方法を提供する。これは、サポートされていないリクエストを処理したり、既存のものに dvalue を追加してメッセージを拡張したりするのに便利である。 しかし、信頼性のあるスキップは、実装がすべてのd値の型を解析し、その長さを知ることができる場合にのみ可能であることに注意してください。 特に、(EOMに使用される)ゼロバイトはdvalueの内部にも現れることが あるので、ゼロバイトにスキップすることは信頼できるスキップの方法 ではない。</li><li>これは、両方のピアが、それ自身のリクエストに対するリプライと、相手から 開始されたリクエストまたは通知とを確実に区別できるようにするために必要であ る。</li><li>最終メッセージの長さを事前に知ることなく、デバッグメッセージのストリーム書き込みを許可する(これは、たとえばフレーミングが先行メッセージ長フィールドを持つ場合に必要である)。 これは、メッセージのサイズを事前に計算したり、送信前に完全なメッセージを 作成するために蓄積バッファを使用する必要性を回避するのに便利です。</li><li>すべての <code>duk_tval</code> 値を情報を失うことなく表現します。</li><li>低帯域幅のデバッグ用トランスポート(シリアル回線など)のトラフィックを最小化するために、典型的な数値や文字列には短いエンコーディングフォームを使用します。 <ul><li>整数の範囲 [0,63] は1バイトにエンコードされ、コマンド番号、ステータスコード、ブール値などに有効です。</li><li>整数範囲 [0,16383] は2バイトにエンコードされ、例えば行番号、典型的な配列インデックス、ループカウンタ値などに有効です。</li><li>長さ [0,31] の短い文字列は、1 バイトと文字列データにエンコードされます。 これは、典型的なファイル名、プロパティ名、変数名などに有効です。</li></ul></li></ul><p>注意事項</p><ul><li><code>duk_tval</code> を送信しない場合、整数の値は常にプレーンな整数としてエンコードされなければなりません (IEEE double エンコーディングではありません)。</li><li><code>duk_tval</code> の値をパースする際には、プレーンな整数値と IEEE double 値の両方を受け入れなければなりません。 プレーンな整数は IEEE doubles に一意に対応するので、情報の損失はありません。 負の 0 は，符号を保持するために IEEE double として表現しなければならないことに注意してください．</li><li>高速整数(fastint)はデバッガープロトコルにおいて通常の数値と区別されません。</li><li>バッファの値は明示的に表現されますが、バッファオブジェクト(Node.js Buffer, ArrayBuffer, DataView, TypedArray ビュー)はオブジェクトとして表現されます。 つまり、その内容は送信されず、ヒープポインタとクラス番号のみが送信されます。</li><li>未使用」値は特別です。Duktapeが内部的にマッピングされていない配列のエントリーをマークするために使用されますが、実際の値（値スタック上のエントリー、プロパティ値など）に使用されることは意図されていません。 unused&quot; 値は、デバッガ・プロトコルで、いくつかのコマンド・リプライの欠落/無値を示すために使用されます。 リクエストでは使用されないので、デバッグ・クライアントはリクエスト（PutVarなど）で「unused」d値を送信してはいけません。</li></ul><h3 id="エンディアン" tabindex="-1">エンディアン <a class="header-anchor" href="#エンディアン" aria-label="Permalink to &quot;エンディアン&quot;">​</a></h3><p>原則として、すべての値はネットワークオーダー（ビッグエンディアン）にシリアライズされます。これはポインタ値やIEEEダブル値にも適用されます。</p><p>ポインタやIEEEダブルがバッファデータの一部である場合、それらはメモリ上に存在する任意の順序でエンコードされます。 これは、例えばDumpHeapによってダンプされたバイトコードは、プラットフォーム固有のバイトオーダーでバッファーの値として表現されることを意味します。 バイトオーダーを変更すると、デバッガーコードが特定のバッファ値のメモリレイアウトを認識する必要があるため、非常に厄介なことになります。</p><h3 id="duk-tvalの値を表現する" tabindex="-1">duk_tvalの値を表現する <a class="header-anchor" href="#duk-tvalの値を表現する" aria-label="Permalink to &quot;duk_tvalの値を表現する&quot;">​</a></h3><p><code>duk_tval</code> の値には、以下の dvalue タイプが使用される。</p><ul><li>未使用（undefined/unused/none）：特定の dvalue。</li><li>未定義：特定の dvalue</li><li>null: 固有の dvalue</li><li>boolean: <code>true</code> と <code>false</code> に対応する特定の dvalue です。</li><li>数値：符号付き 32 ビット整数は，単純な整数の d 値で表現できる（負の 0 を除く），その他の数値はリテラルの IEEE 倍数として表現される．</li><li>文字列: いくつかの文字列長に対応する特定の d 値</li><li>buffer: 数少ないバッファ長に対する特定のd値</li><li>オブジェクト: ポインタとして表現される (デバッグクライアントからデバッグターゲットに送信される場合は危険)</li><li>ポインター: ポインターとして表現</li><li>lightfunc: ポイントとフラグフィールドで表現される（デバッグクライアントからデバッグター ゲットに送信される場合は危険）。</li></ul><p><code>&lt;tval: フィールド名&gt;</code> という記法では、 <code>duk_tval</code> と互換性のある任意の dval を使用することができます。 しかし、いくつかの値はデバッグクライアントからターゲットに送信する際に危険であることに注意してください。例えば、PutVar への引数として lightfunc 値を送信することは可能ですが、非常に注意しなければ簡単にセグメンテーションフォルトを起こすことができます。</p><h3 id="request-replies-and-notifications" tabindex="-1">Request, replies, and notifications <a class="header-anchor" href="#request-replies-and-notifications" aria-label="Permalink to &quot;Request, replies, and notifications&quot;">​</a></h3><p>リクエストは次のような形式です。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">0-N</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dvalues&gt; EOM</span></span></code></pre></div><p>成功応答は次のような形式です。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">0-N</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dvalues&gt; EOM</span></span></code></pre></div><p>エラー応答は、コマンドに依存しない <strong>固定フォーマット</strong> である。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error code&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error message or empty string&gt; EOM</span></span></code></pre></div><p>通知には、次のような形式があります。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">0-N</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dvalues&gt; EOM</span></span></code></pre></div><p>注意事項</p><ul><li>リクエストとリプライはメッセージIDを持たない: それは必要ない。 各ピアは、送られてくるリクエストに順番に応答することが要求される。また、 すべてのリクエストは、一つの成功またはエラー応答を持つことが要求されるので、 応答を以前に送ったリクエストに確実に関連付けることができる。 返信メッセージは、他の方向でピアから送られたリクエストや通知とまだ混 在しているかもしれない、ということに注意すること。</li><li>返信メッセージは、デバッグストリームでの順序に基づいて暗黙のうちに リクエスト/通知と関連付けられる。</li><li>エラー応答は、エラー処理を統一するために決まった形式を持ちます。デバッグクライアントが新しいコマンドがサポートされているかどうかを簡単に チェックし、サポートされていなければ他のコマンドにフォールバックできるように、 「unsupported command」に対する特定のエラーコードを用意しています。</li><li>Duktapeは現在、通知のみを送信し、リクエストは送信しません。</li></ul><h3 id="error-codes" tabindex="-1">Error codes <a class="header-anchor" href="#error-codes" aria-label="Permalink to &quot;Error codes&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Code</th><th>Description</th></tr></thead><tbody><tr><td>0x00</td><td>不明または未指定のエラー</td></tr><tr><td>0x01</td><td>非対応のコマンド</td></tr><tr><td>0x02</td><td>多すぎる（例：ブレークポイントが多すぎる、新規に追加できないなど）</td></tr><tr><td>0x03</td><td>見つかりません（例：無効なブレークポイントインデックス）</td></tr><tr><td>0x04</td><td>アプリケーションエラー（例：AppRequest関連エラー）</td></tr></tbody></table><h3 id="インバウンドリクエストの対応" tabindex="-1">インバウンドリクエストの対応 <a class="header-anchor" href="#インバウンドリクエストの対応" aria-label="Permalink to &quot;インバウンドリクエストの対応&quot;">​</a></h3><p>どちらかのピアが何か予期せぬことが起こったと判断した場合、単にトランスポートをドロップすることができます。 Duktapeがこれを検出するとすぐに、デバッガは自動的に切り離され、通常の実行が再開されます。 これは予期せぬエラーに対する統一されたハンドリングを提供し、例えば以下のような場合に適切な動作となります。</p><ul><li>無効な、あるいは非常識なdvalueフォーマットに遭遇した場合。 このような場合、確実に実行を継続する方法がないことがよくあります。</li><li>サポートされているコマンドが処理されているときにパースエラーが発生した。 このような状況は、ピアにバグがあるか、一貫性のない状態であることを示しています。</li></ul><p>正確なエラー処理規則は、ここではあまり詳細に規定しませんが、重要な規則がいくつかあります。 拡張性のために重要なルールがいくつかある。</p><ul><li>ピアは、サポートされていないコマンド番号のリクエストを受信した場 合、そのコマンドがサポートされていることを示すエラー応答を返さなければ ならず[MUST NOT]、デバッグ接続を切断してはならない[MUST NOT]。 この動作は、ピアがコマンドを試してたまたまサポートされてい るかどうかを確認し、サポートされていない場合は他の動作にフォールバッ クできるようにするために、重要である。 その結果、常にプロトコルのバージョンを厳密に上げることなく新しいコマンドを追加することができ、オプションやカスタム、ターゲット固有のコマンドを追加して、それらを「調査」することが可能になります。 <ul><li>今のところ、これはDuktapeにのみ適用されます。Duktapeはリクエストを送信せず、通知のみを送信します。 Duktapeはリクエストを送ることはなく、通知だけを送ります。 * サポートされていないコマンド番号の通知を相手が受け取った場合、その通知を無視 しなければならず、デバッグ接続を切断してはいけません(MUST NOT)。その理由はリクエストと同じである。</li></ul></li><li>サポートされているコマンドがパースされ、EOMの前に追加のdvalueが ある場合、最後のdvalueは無視されなければならない[MUST]。 これは、新しいコマンド番号を割り当てたり、プロトコルのバージョンを上げ たりすることなく、既存のコマンドを(場合によっては)拡張することができる ようにするものである。</li></ul><p>これらの単純なルールは実装が簡単で、いくつかの一般的なケースでプロトコルを優雅に拡張することができます(もちろんすべてではありませんが)。</p><h3 id="d値およびデバッグメッセージのテキスト表示" tabindex="-1">d値およびデバッグメッセージのテキスト表示 <a class="header-anchor" href="#d値およびデバッグメッセージのテキスト表示" aria-label="Permalink to &quot;d値およびデバッグメッセージのテキスト表示&quot;">​</a></h3><p><strong>これは、このドキュメントとduk_debug.jsのダンプで使用される情報提供の慣習です</strong>。</p><p>Duktapeデバッグクライアントは、以下の規約を使用して、dvalueをテキストで表現します。 Duktapeデバッグ・クライアントは、dvaluesをテキストとして表現するために、以下の規約を使用します。</p><ul><li>マーカバイト: <code>EOM</code>, <code>REQ</code>, <code>REP</code>, <code>ERR</code>, <code>NFY</code>.</li><li>整数: <code>-123</code> などのように、文字列を正規化したもの。</li><li>文字列は、バイト列 (0x00...0xff) からコードポイント U+0000...U+00FF に1対1でマッピングされ、JSON にエンコードされる。 JSONエンコーディングは、結果にエスケープされていない改行がないことを保証します。 標準的なJSONは、コードポイントU+0080...U+00FFをすべてエスケープしないので、残念ながらおかしなことになります（ASCIIのみのシリアライズが望ましいでしょう）。</li><li>その他の型は、JSONマッピングのようにJSONエンコードされています、以下を参照してください。</li></ul><p>デバッグメッセージは、関連するすべてのd値(メッセージタイプマーカーとEOMを含む)を空白で区切った1行で表現されるだけです。これにより、テキストダンプは読みやすく、カットアンドペーストや診断などが容易になります。</p><p>例として、ペイロードが文字列「touché」、整数「123」、整数「-321」からなる応答を考えてみよう。 この文字列は、Duktape内部でUTF-8シーケンス:.Touchéとして表現されます。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">74 6f 75 63 68 c3 a9</span></span></code></pre></div><p>返信メッセージの生のバイトは、（パイプで区切られたdvaluesで）次のようになります：。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">02 | 67 74 6f 75 63 68 c3 a9 | c0 7b | 10 ff ff fe bf | 00</span></span></code></pre></div><p>これは、テキストのワンライナーとしてレンダリングされます：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &quot;touch\\u00c3\\u00a9&quot; 123 -321 EOM</span></span></code></pre></div><p>Duktape内部で文字列が使用する正確なバイト数を維持するために、奇数文字列のマッピングが選択されます。 Duktapeの文字列の中には、意図的に無効なUTF-8を使用しているものがあるので、Unicodeにマッピングすることが常に選択肢になるわけではないことに注意してください。 この文字列マッピングは、バッファ・データを表現するためにも使用されます。</p><h3 id="デバッグ・プロトコルのためのjsonマッピング" tabindex="-1">デバッグ・プロトコルのためのJSONマッピング <a class="header-anchor" href="#デバッグ・プロトコルのためのjsonマッピング" aria-label="Permalink to &quot;デバッグ・プロトコルのためのJSONマッピング&quot;">​</a></h3><p>このセクションで説明するマッピングは、デバッグのd値やメッセージをJSONの値にマッピングするために使用されます。 このマッピングは JSON デバッグプロキシーの実装に使用され、デバッグクライアントはバイナリプロトコルを全く実装せずに、クリーンな JSON メッセージだけを使用してデバッグターゲットと対話できるようになります。</p><h3 id="dvalues-の-json-表現" tabindex="-1">dvalues の JSON 表現 <a class="header-anchor" href="#dvalues-の-json-表現" aria-label="Permalink to &quot;dvalues の JSON 表現&quot;">​</a></h3><ul><li>Unused::</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unused&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>Undefined::</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;undefined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>Null、true、falseはJSONに直接マッピングされます。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><ul><li>整数は、JSONの数値型に直接マッピングされます：。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span></span></code></pre></div><ul><li>JSONの数値として損失なく表現できない数値（無限大、NaN、負のゼロなど）は、次のように表現されます。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// data contains IEEE double in big endian hex encoded bytes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (here Math.PI)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;400921fb54442d18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>このオブジェクトには、オプションで <code>value</code> フィールドを含めることができ、これは JSON 互換の近似値として数値を提供します。 このフィールドは、JSON互換の近似値として数値を提供します。生のIEEE doubleと比較して、いくつかの精度が失われる可能性があります。 また、NaNや無限大の場合は <code>null</code> となり、コードを書く際に <code>JSON.stringify()</code> で値をエンコードすることができるようになります。 例::</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4012000000000000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// +Infinity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;7ff0000000000000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p><strong>重要</strong>: <code>value</code> のキーは機械的に処理されてはならず、JSON プロトコルのテキストを直接読みやすくするためにのみ存在する。 パースするコードは常にこれを無視し、代わりに <code>data</code> を使用しなければならない。</p><ul><li>文字列はテキスト表現と同様にマッピングされます。すなわち、バイト 0x00...0xff は Unicode コードポイント U+0000...U+00FF: にマッピングされます。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4 バイトの文字列 0xde 0xad 0xbe 0xef</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u00de</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">\\0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0ad</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">\\0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0be</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">\\0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0ef&quot;</span></span></code></pre></div><p>この表現は、バイト単位で正確であり、UTF-8以外の文字列を正しく表現し、かつほとんどの実用的な（ASCII）文字列に対して人間が読みやすいという理由で使用されています。</p><ul><li>バッファデータは、16進エンコードされた形でオブジェクトに包まれて表現されます：。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;buffer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deadbeef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>メッセージフレーミングの d 値 (EOM, REQ, REP, NFY, ERR) は、JSON プロトコルでは見えません。 これらは <code>duk_debug.js</code> が内部で次のようなフォーマットで使用しています:</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;req&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;err&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nfy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>Object:</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// classは数値，ポインタは16進数である．</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;pointer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deadbeef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>Pointer:</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ポインタは16進数である</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pointer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;pointer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deadbeef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>Lightfunc:</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// flagsはJSONの数値として表現される16ビット整数、ポインタは16進数で表現されます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lightfunc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;flags&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;pointer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deadbeef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>Heap pointer:</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ポインタは16進数である</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;heapptr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;pointer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deadbeef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h3 id="デバッグメッセージのjson表現" tabindex="-1">デバッグメッセージのJSON表現 <a class="header-anchor" href="#デバッグメッセージのjson表現" aria-label="Permalink to &quot;デバッグメッセージのJSON表現&quot;">​</a></h3><p>メッセージは、以下のようにメッセージタイプマーカーとEOMマーカーを削除したJSONオブジェクトとして表現される。</p><p>request メッセージは、&#39;request&#39; キーと dvalue のリスト (EOM は省略) を含む &#39;args&#39; 配列を用いてコマンドを指定します:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AddBreak&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>args&#39; 引数はオプションである。これがない場合は、空の配列と同じように扱われる:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AddBreak&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通常、デバッグコマンドは文字列として指定され、プロキシはデバッガのメタデータを使用して文字列をコマンド番号に自動的にマッピングします。 コマンド番号は明示的に指定することができ、さらに次のように両方指定することもできます。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 明示的なコマンド番号（例：メタデータがカスタムコマンドを知らない）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同上、これは以前から使われていた形式です（上記の形式が望ましい）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;request&#39; にはコマンド名を指定し、&#39;command&#39; には予備のコマンドを数値で指定することも可能です。  コマンド名がコマンドメタデータで解決できない場合は、&#39;command&#39; に指定したコマンド番号が使用されます (その場合のみ)。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AddBreak&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>返信メッセージはコマンド番号を持たないので、メッセージの種類を区別できるように、 「reply」キーに「true」をセットしておく。 引数は再び&#39;args&#39;（EOMは省略）になります。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;reply&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>エラーメッセージは返信のようなもので、&#39;error&#39; キーには &quot;true&quot; 値が、&#39;args&#39; にはエラー引数（EOM は省略）が含まれます。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no space for breakpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通知メッセージはリクエストと同じ形式ですが、「request」キーが「notify」に置き換えられています。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">808</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通知コマンド番号の指定には、notifiesの代替形式も用意されています。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">808</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">808</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">808</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>引数リストが空の場合、&#39;args&#39; はどのメッセージでも省略可能である。</p><p>要求メッセージと通知メッセージは、要求/通知コマンド名と番号の両方を含み、いくつかの形式がサポートされている。 コマンド名／番号は以下のように解決される。</p><ul><li><code>request</code> / <code>notify</code> にコマンド名が文字列で指定されている場合、コマンドのメタデータ からコマンドを検索します。 コマンド名がわかっている場合、コマンドメタデータのコマンド番号を使用します (「command」キーの可能性は無視します)。</li><li><code>request</code> / <code>notify</code> でコマンド番号が指定されている場合は、その番号をそのまま使用します。</li><li>command&#39; がコマンド番号を提供している場合、それをそのまま使用します。 <code>request</code> や <code>notify</code> が <code>true</code> 値で存在する場合もありますが、無視されます。</li><li>上記の手順が失敗した場合、request/notifyは処理できません。</li></ul><h3 id="その他のjsonメッセージ" tabindex="-1">その他のJSONメッセージ <a class="header-anchor" href="#その他のjsonメッセージ" aria-label="Permalink to &quot;その他のJSONメッセージ&quot;">​</a></h3><p>上記のコアメッセージフォーマットに加えて、デバッグプロトコルのバージョン情報やトランスポートイベントのためのいくつかのカスタムメッセージがあります。 これらは、アンダースコアで始まる特別なコマンド名とコマンド番号のない「通知」メッセージとして表現されます。 これらは主に人間の読みやすさを向上させるためのもので、細かい部分は必要に応じて変更される可能性があります。</p><p>ターゲットへの接続が試みられると、次のようなnotifyが送信されます</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_TargetConnecting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.3.4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9091</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ターゲットに接続すると、バージョン識別がそのまま中継される。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_TargetConnected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 10199 v1.1.0-173-gecd806e-dirty duk command built from Duktape repo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ターゲットが切断されたとき。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_TargetDisconnected&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>トランスポートエラーが発生した場合（ターミナルエラーとは限らないので、複数回表示される可能性がある）。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_Error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some kind of error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JSONプロキシ接続が切断される寸前の場合：。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_Disconnecting&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>オプションで reason 引数を含めることができる：。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;notify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_Disconnecting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Target disconnected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jsonプロトコルのラインフォーマット" tabindex="-1">JSONプロトコルのラインフォーマット <a class="header-anchor" href="#jsonプロトコルのラインフォーマット" aria-label="Permalink to &quot;JSONプロトコルのラインフォーマット&quot;">​</a></h3><p>JSONメッセージは、コンパクトなワンライナー形式でエンコードされ、メッセージの最後に改行(LF文字1つ、0x0a)を入れて送信されます。(上記の例は、複数行のフォーマットで書かれていますが、これは <strong>not</strong> 許可されていないことに注意してください; これは単に分かりやすくするためです)。</p><p>この規約により、メッセージの読み書きが容易になります。 メッセージは簡単にカット・ペーストでき、メッセージ・ログを効果的にグ レープすることができます。</p><h2 id="プロトコルの拡張とバージョンの互換性" tabindex="-1">プロトコルの拡張とバージョンの互換性 <a class="header-anchor" href="#プロトコルの拡張とバージョンの互換性" aria-label="Permalink to &quot;プロトコルの拡張とバージョンの互換性&quot;">​</a></h2><p>バージョン識別行は、デバッグプロトコルに互換性のない変更を加えるために使用されるプロトコルのバージョン番号を提供します; デバッグクライアントは常にターゲットのデバッグプロトコルバージョンに準拠するものと想定されます。</p><p>また、以下の基本的な方法で、プロトコルのバージョン番号を変更することなくプロトコルを拡張することが可能です。</p><ul><li><p>新しいコマンドを追加する。 新しいコマンドを追加する。コマンドがサポートされていない場合、ピアは未知の/サポートされていないコマンドを示す特定のエラーを送り返す。</p></li><li><p>リクエスト、レスポンス、または通知に末尾のフィールドを追加する。 ピアはサポートするフィールドを読み込んで処理した後、未知の末尾フィールドをスキップしてEOMに進むことが要求される。 メッセージの中には、可変数のフィールド(例えば、変数名/値ペアのリスト)を持つものがあり、その場合、このアプローチは不可能かもしれない。</p></li></ul><p>これらの拡張は、(1) メッセージの内容を理解せずに EOM にスキップする機能、および (2) 未知のメッセージと未知の末尾 d 値に対する処理要件によって実現されています。</p><p>一般的な設計ルールとして、Duktape内部はバージョン特有の処理や回避策を排除しておく必要があります。 もし、ある機能が互換性のある方法できれいに実装できない場合、コマンドの並列変種を追加したり、他の厄介な妥協をしたりする代わりに、プロトコルのバージョンを上げる必要があります。デバッガのコードを小さくきれいに保ち、ターゲットでのコードフットプリントが損なわれないようにすることが重要です。</p><h2 id="duktape-が送るコマンド" tabindex="-1">Duktape が送るコマンド <a class="header-anchor" href="#duktape-が送るコマンド" aria-label="Permalink to &quot;Duktape が送るコマンド&quot;">​</a></h2><h3 id="状態通知-0x01" tabindex="-1">状態通知(0x01) <a class="header-anchor" href="#状態通知-0x01" aria-label="Permalink to &quot;状態通知(0x01)&quot;">​</a></h3><p>フォーマット::</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funcname&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linenumber&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pc&gt; EOM</span></span></code></pre></div><p>例::</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY 1 0 &quot;foo.js&quot; &quot;frobValues&quot; 101 679 EOM</span></span></code></pre></div><p>何も実行していない時（例えば、Duktape の起動時以外から duk_debug_cooperate() が呼ばれた時） filename と funcname は未定義（d 値として &quot;undefined&quot; が使われる）、 pc/line は 0 になります。</p><p>状態は、以下のいずれかである。</p><ul><li>0x00: 実行中</li><li>0x01: 一時停止中、デバッグクライアントを再開する必要があります。</li></ul><p>実行状態が変化した場合（例：一時停止から実行中、またはその逆）、Duktapeは常にStatus通知を送信します。</p><p>デバッガを接続してDuktapeを実行している場合、どのファイル／行／関数が実行されているかをデバッグ・クライアントに知らせるために、随時ステータス通知を送信します。</p><p>ステータス更新のレートは、日付ベースのタイムスタンプを使用して自動的に制限されるため、Duktapeが通常モードまたはチェック・モードで動作している場合、ステータス更新は最大で200msごとに送信されます。</p><h3 id="予約済み-0x02" tabindex="-1">予約済み (0x02) <a class="header-anchor" href="#予約済み-0x02" aria-label="Permalink to &quot;予約済み (0x02)&quot;">​</a></h3><p>(Duktape 2.0.0で削除、Duktape 1.xで印刷通知)</p><h3 id="予約済み-0x03" tabindex="-1">予約済み (0x03) <a class="header-anchor" href="#予約済み-0x03" aria-label="Permalink to &quot;予約済み (0x03)&quot;">​</a></h3><p>(Duktape2.0.0で削除。Duktape1.xではアラート通知)</p><h3 id="ログ通知-0x04" tabindex="-1">ログ通知(0x04) <a class="header-anchor" href="#ログ通知-0x04" aria-label="Permalink to &quot;ログ通知(0x04)&quot;">​</a></h3><p>(Duktape2.0.0で削除。Duktape1.xでログ通知)</p><h3 id="throw通知-0x05" tabindex="-1">throw通知(0x05) <a class="header-anchor" href="#throw通知-0x05" aria-label="Permalink to &quot;throw通知(0x05)&quot;">​</a></h3><p>Format::</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 5&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fatal&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linenumber&gt; EOM</span></span></code></pre></div><p>Example::</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY 5 1 &quot;ReferenceError: identifier not defined&quot; &quot;pig.js&quot; 812 EOM</span></span></code></pre></div><p>Fatalは、その一つです。</p><ul><li>0x00: キャッチ</li><li>0x01: 致命的(捕捉されない)</li></ul><p>Duktapeは、ランタイム・エラーによってDuktapeによって、あるいはECMAScriptコードによって直接、エラーが投げられるたびにThrow通知を送信します。</p><p>msgはスローされる文字列強制の値です。 ファイル名と行番号は、スローされたオブジェクトがErrorインスタンス（拡張後）であれば直接取得され、そうでなければ、これらの値はバイトコード・エグゼキュータの状態から計算されます。</p><h3 id="通知解除-0x06" tabindex="-1">通知解除 (0x06) <a class="header-anchor" href="#通知解除-0x06" aria-label="Permalink to &quot;通知解除 (0x06)&quot;">​</a></h3><p>フォーマット：:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 6&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reason&gt; [&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg&gt;] EOM</span></span></code></pre></div><p>例:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY 6 1 &quot;d値のパースエラー&quot; EOM</span></span></code></pre></div><p>理由は以下のいずれかです。</p><ul><li>0x00: 正常なデタッチ</li><li>0x01: ストリームエラーによるデタッチ</li></ul><p>Duktapeは、デバッガがデタッチする際にDetaching通知を送信します。 クライアントがこの通知を見ることなくターゲットがトランスポートをドロップした場合、接続が失われたと仮定し、それに応じて対応することができます（例えば、リンクを再確立しようとする）。</p><p>msg\`\` はオプションの文字列で、切り離しの理由を詳しく説明します。 これは切り離しの性質によって、存在する場合としない場合があります。</p><h3 id="appnotify-notification-0x07" tabindex="-1">AppNotify notification (0x07) <a class="header-anchor" href="#appnotify-notification-0x07" aria-label="Permalink to &quot;AppNotify notification (0x07)&quot;">​</a></h3><p>フォーマット:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x07&gt; [&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;]* EOM</span></span></code></pre></div><p>例:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NFY 7 &quot;DebugPrint&quot; &quot;Everything is going according to plan!&quot; EOM</span></span></code></pre></div><p>これはカスタム通知メッセージで、その意味とセマンティクスはアプリケーションに依存します。 アプリケーションに依存します。</p><p>AppNotifyメッセージは、Duktapeデバッグ・プロトコルを介したデバッグ・クライアントとデバッグ・ターゲット間の直接通信のために使用されます。 カスタム・メッセージの意味とそれに含まれるdvalueの両方は、完全に実装次第であり、アプリケーションのニーズによっては、まったくサポートされないこともあります。</p><p>詳細については、以下の「カスタム・リクエストと通知」を参照してください。</p><h2 id="デバッグクライアントから送信されるコマンド" tabindex="-1">デバッグクライアントから送信されるコマンド <a class="header-anchor" href="#デバッグクライアントから送信されるコマンド" aria-label="Permalink to &quot;デバッグクライアントから送信されるコマンド&quot;">​</a></h2><h3 id="basicinfo-request-0x10" tabindex="-1">BasicInfo request (0x10) <a class="header-anchor" href="#basicinfo-request-0x10" aria-label="Permalink to &quot;BasicInfo request (0x10)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x10&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DUK_VERSION&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DUK_GIT_DESCRIBE&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target info&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endianness&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sizeof(void *)&gt; EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 16 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 10099 &quot;v1.0.0-254-g2459e88&quot; &quot;Arduino Yun&quot; 2 4 EOM</span></span></code></pre></div><p>Endianness:</p><ul><li>1 = little endian</li><li>2 = mixed endian (doubles in ARM &quot;mixed&quot; endian, integers little endian)</li><li>3 = big endian</li></ul><p>エンディアンは、少数のd値のデコードに影響する。</p><p>ターゲット情報は、コンパイル可能な文字列で、例えば、デバイスの種類を記述することができます。</p><p>Void ポインタサイズとは、ポインタに関連する値に対して使用されるポインタサイズを示す。ただし、関数ポインタは異なるサイズを持つことがある。</p><h3 id="triggerstatus-request-0x11" tabindex="-1">TriggerStatus request (0x11) <a class="header-anchor" href="#triggerstatus-request-0x11" aria-label="Permalink to &quot;TriggerStatus request (0x11)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x11&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 17 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>その後、Duktapeはステータス通知を再送信します。</p><h3 id="pause-request-0x12" tabindex="-1">Pause request (0x12) <a class="header-anchor" href="#pause-request-0x12" aria-label="Permalink to &quot;Pause request (0x12)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x12&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 18 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Duktape がすでに一時停止している場合は、ノー・オペレーションとなります。Duktapeが実行中であれば、Duktapeは時々デバッグ・メッセージの着信をチェックします。Duktapeが一時停止要求に気付くと（数秒かかることもあります）、要求に応答して実行を一時停止し、一時停止したことを示すStatus通知を送ります。</p><h3 id="resume-request-0x13" tabindex="-1">Resume request (0x13) <a class="header-anchor" href="#resume-request-0x13" aria-label="Permalink to &quot;Resume request (0x13)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x13&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 19 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Duktapeがすでに実行されている場合は、ノー・オペレーションです。Duktapeが一時停止している場合、一時停止状態に関連するデバッグ・メッセージ・ループ（制御は完全にデバッグ・クライアントの手中にある）を終了して実行を再開し、実行中であることを示すステータス通知を送信します。</p><h3 id="stepinto-request-0x14" tabindex="-1">StepInto request (0x14) <a class="header-anchor" href="#stepinto-request-0x14" aria-label="Permalink to &quot;StepInto request (0x14)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x14&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 20 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>実行が現在の行を抜けるとき、別の関数に入るとき、現在の関数を抜けるとき、現在の関数を過ぎてエラーが投げられたとき（この場合、エラーキャッチャーがあれば、その中で実行を一時停止する）、実行を再開し一時停止する。現在の関数が行情報を持っていない場合（ネイティブなど）、関数の出入りやエラーの発生で一時停止する。</p><h3 id="stepover-request-0x15" tabindex="-1">StepOver request (0x15) <a class="header-anchor" href="#stepover-request-0x15" aria-label="Permalink to &quot;StepOver request (0x15)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x15&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 21 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>実行が現在の行を抜けるとき、現在の関数を抜けるとき、現在の関数を過ぎてエラーが投げられたとき（この場合、エラーキャッチャーがあれば、その中で実行を一時停止する）、実行を再開し一時停止する。現在の関数が行情報を持っていない場合（ネイティブなど）、関数終了時またはエラースロー時に一時停止する。</p><h3 id="stepout-request-0x16" tabindex="-1">StepOut request (0x16) <a class="header-anchor" href="#stepout-request-0x16" aria-label="Permalink to &quot;StepOut request (0x16)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x16&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 22 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>実行が現在の関数を終了したとき、または現在の関数を過ぎてエラーが発生したときに、実行を再開し、一時停止する（この場合、エラーキャッチャーがあれば、その中で実行を一時停止する）。</p><h3 id="listbreak-request-0x17" tabindex="-1">ListBreak request (0x17) <a class="header-anchor" href="#listbreak-request-0x17" aria-label="Permalink to &quot;ListBreak request (0x17)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x17&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP [ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileName&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line&gt; ]* EOM</span></span></code></pre></div><p>Example (two breakpoints):</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 23 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &quot;foo.js&quot; 102 &quot;bar.js&quot; 99 EOM</span></span></code></pre></div><h3 id="addbreak-request-0x18" tabindex="-1">AddBreak request (0x18) <a class="header-anchor" href="#addbreak-request-0x18" aria-label="Permalink to &quot;AddBreak request (0x18)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x18&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileName&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> breakpoint index&gt; EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 24 &quot;foo.js&quot; 109 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 3 EOM</span></span></code></pre></div><p>ブレイクポイントを置くスペースがない場合は、Too manyエラーを送信します：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 24 &quot;foo.js&quot; 109 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR 2 &quot;no space for breakpoint&quot; EOM</span></span></code></pre></div><h3 id="delbreak-request-0x19" tabindex="-1">DelBreak request (0x19) <a class="header-anchor" href="#delbreak-request-0x19" aria-label="Permalink to &quot;DelBreak request (0x19)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x19&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 25 3 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>無効なインデックスを使用した場合は、エラー応答を送信します。</p><h3 id="getvar-request-0x1a" tabindex="-1">GetVar request (0x1a) <a class="header-anchor" href="#getvar-request-0x1a" aria-label="Permalink to &quot;GetVar request (0x1a)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x1a&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> varname&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0/1, found&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value&gt; EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 26 -1 &quot;testVar&quot; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 1 &quot;myValue&quot; EOM</span></span></code></pre></div><p>Levelはコールスタックの深さを指定し、-1が最上位（現在の）関数、-2が呼び出し関数などである。指定しない場合は、最上位の関数が使用されます。</p><h3 id="putvar-request-0x1b" tabindex="-1">PutVar request (0x1b) <a class="header-anchor" href="#putvar-request-0x1b" aria-label="Permalink to &quot;PutVar request (0x1b)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x1b&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> varname&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 27 -1 &quot;testVar&quot; &quot;newValue&quot; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Levelはコールスタックの深さを指定し、-1が最上位（現在の）関数、-2が呼び出し関数などである。指定しない場合は、最上位の関数が使用されます。</p><h3 id="getcallstack-request-0x1c" tabindex="-1">GetCallStack request (0x1c) <a class="header-anchor" href="#getcallstack-request-0x1c" aria-label="Permalink to &quot;GetCallStack request (0x1c)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x1c&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP [ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileName&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funcName&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lineNumber&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pc&gt; ]* EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 28 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &quot;foo.js&quot; &quot;doStuff&quot; 100 317 &quot;bar.js&quot; &quot;doOtherStuff&quot; 210 880 EOM</span></span></code></pre></div><p>コールスタックのエントリーを上から下へリストアップします。</p><h3 id="getlocals-request-0x1d" tabindex="-1">GetLocals request (0x1d) <a class="header-anchor" href="#getlocals-request-0x1d" aria-label="Permalink to &quot;GetLocals request (0x1d)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x1d&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP [ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> varName&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> varValue&gt; ]* EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 29 -1 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &quot;x&quot; &quot;1&quot; &quot;y&quot; &quot;3.1415&quot; &quot;foo&quot; &quot;bar&quot; EOM</span></span></code></pre></div><p>指定された活性化（内部の <code>_Varmap</code> ）からローカル変数名をリストアップします。Levelはコールスタックの深さを指定し、-1は最上位（現在の）関数、-2は呼び出し関数、などである。</p><p>その結果、<code>var</code>で宣言されたローカル変数とローカルに宣言された関数だけが含まれます。外部関数やグローバル変数など、現在の関数スコープの外にある変数は含まれません。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ローカル変数のリストには、eval()などで動的に宣言された変数や、try-catchのcatch変数のような動的スコープを持つ変数は現在含まれていません。これは、将来のバージョンで修正される予定です。</p></div><h3 id="eval-request-0x1e" tabindex="-1">Eval request (0x1e) <a class="header-anchor" href="#eval-request-0x1e" aria-label="Permalink to &quot;Eval request (0x1e)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x1e&gt; (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=success, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=error&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value&gt; EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 30 null &quot;1+2&quot; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 0 3 EOM</span></span></code></pre></div><p>Levelはコールスタックの深さを指定し、-1が最上位（現在の）関数、-2が呼び出し関数などである。指定しない場合は、最上位の関数が使用されます（実際の <code>eval()</code> と同様）。レベルは、評価されるコードの字句の範囲にのみ影響します。コールスタックはそのままで、スタックトレースや<code>Duktape.act()</code>などで確認することができます。レベルは、間接的なEvalを実行するためにNULLにすることもできます。</p><p>有効なコールスタックレベルが指定された場合、指定されたコールスタックレベルで指定されたレキシカルスコープで、実行が一時停止した位置でevalへの直接呼び出しを実行したかのようにeval式が評価されます。evalの直接呼び出しは、呼び出された関数と同じレキシカルスコープを共有します（evalの間接呼び出しはそうではありません）。例えば、次のように実行するとします：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (A)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (B) &lt;== paused here (before print(y))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>で、evalする：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y); y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;quux&quot;</span></span></code></pre></div><p>Evalは、あたかもそのコードがあったかのように実行される：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;print(x + y); y = 10; &quot;quux&quot;)</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>というように、Eval文がそうなるように：</p><ul><li>300をプリントアウトする（printを使用）。</li><li>y\`に10を代入して、ステートメントBが（200の代わりに）10を表示するようにする。</li><li>evalの最終結果は文字列<code>&quot;quux&quot;</code>となり、デバッグクライアントUIに表示されます。</li></ul><p>duk_debugger_cooperate()呼び出し中など、Duktapeの起動外からEvalが要求された場合、ECMAScriptが起動されていないため、直接Evalを実行することができません。その場合、Evalは間接Evalとして実行されます。上記のように、コールスタックレベルにnullを送ることで、間接Evalを明示的に要求することができます。</p><p>現在の限界：</p><ul><li>無限ループにはまる可能性がある。</li><li>デバッグコードは実際の <code>eval()</code> 呼び出しの内部で実行され、コールスタックに影響を与えます。例えば、<code>Duktape.act()</code>は、追加のスタックフレームを見ることになります。</li></ul><h3 id="detach-request-0x1f" tabindex="-1">Detach request (0x1f) <a class="header-anchor" href="#detach-request-0x1f" aria-label="Permalink to &quot;Detach request (0x1f)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x1f&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 31 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP EOM</span></span></code></pre></div><p>Duktapeにデバッガを切り離すよう要求する。Duktapeがユーザートランスポートコードにトランスポート接続を閉じるよう要求し、通常の実行を再開する。</p><h3 id="dumpheap-request-0x20" tabindex="-1">DumpHeap request (0x20) <a class="header-anchor" href="#dumpheap-request-0x20" aria-label="Permalink to &quot;DumpHeap request (0x20)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x20&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dvalues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 32 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dvalues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; EOM</span></span></code></pre></div><p>Duktape ヒープ全体の内容をダンプします。ヒープダンプのフォーマットはやや複雑で、 <code>duk_debugger.c</code> を参照してください。</p><p>ヒープ状態のJSONダンプをダウンロードして解析できるデバッガーUI機能の実装に使用されます。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このコマンドは、現時点ではやや不完全なものです。ヒープブラウザを実装するのに便利で、おそらく何らかのUIと一緒に完成することになるでしょう。</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ダンプのフォーマットは、個々のヒープオブジェクトの詳細を読み取るためにGetHeapObjInfoを活用するように変更される可能性があります。このコマンドは、デバッグクライアントが独自に検査できるオブジェクトのリストを提供するだけになります。</p></div><h3 id="getbytecode-request-0x21" tabindex="-1">GetBytecode request (0x21) <a class="header-anchor" href="#getbytecode-request-0x21" aria-label="Permalink to &quot;GetBytecode request (0x21)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x21&gt; (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">heapptr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt;) EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numconsts&gt; (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> const&gt;){numconsts}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numfuncs&gt; (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func&gt;){numfuncs}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytecode&gt; EOM</span></span></code></pre></div><p>引数なしの例では、現在の関数のバイトコードを取得します：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 33 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 2 &quot;foo&quot; &quot;bar&quot; 0  &quot;...bytecode...&quot; EOM</span></span></code></pre></div><p>コールスタックレベルは明示的に与えることができ、例えば-3はコールスタックトップから数えて3番目のコールスタックレベルです：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 33 -3 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 2 &quot;foo&quot; &quot;bar&quot; 0  &quot;...bytecode...&quot; EOM</span></span></code></pre></div><p>ECMAScriptの関数オブジェクトは、&quot;object &quot;または &quot;heapptr &quot;のdvalueを使用して明示的に与えることもできます：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 33 {&quot;type&quot;:&quot;object&quot;,&quot;class&quot;:6,&quot;pointer&quot;:&quot;00000000014839e0&quot;} EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 2 &quot;foo&quot; &quot;bar&quot; 0  &quot;...bytecode...&quot; EOM</span></span></code></pre></div><p>場合、エラー返信が返されます：</p><ul><li>引数は存在するが、無効な型を持っているか、ECMAScript関数でないターゲット値を指している。</li><li>Callstack entry doesn&#39;t exist or isn&#39;t an ECMAScript activation.</li></ul><p>Notes:</p><ul><li>バイトコードのエンディアンはターゲットに依存するため、デバッグクライアントはターゲットのエンディアンを取得し、それに基づいてバイトコードを解釈する必要があります。</li><li>Duktape 1.4.0からのマイナーチェンジ：コールスタック・エントリーが存在しない場合、Duktape 1.5.x 以上では空の結果ではなく、エラーを返します。</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このコマンドは現時点ではやや不完全なもので、デバッガーUIでこれを行う最良の方法が判明した時点で修正される可能性があります。</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このコマンドは、GetHeapObjInfoを使用して同じバイトコード情報を取得するために、削除することができます。</p></div><h3 id="apprequest-request-0x22" tabindex="-1">AppRequest request (0x22) <a class="header-anchor" href="#apprequest-request-0x22" aria-label="Permalink to &quot;AppRequest request (0x22)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x22&gt; [&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;*] EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP [&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;*] EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 34 &quot;GameInfo&quot; &quot;GetTitle&quot; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &quot;Spectacles: Bruce&#39;s Story&quot; EOM</span></span></code></pre></div><p>ターゲットがリクエストコールバックを登録していない場合、Duktapeは応答する：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR 2 &quot;AppRequest unsupported by target&quot; EOM</span></span></code></pre></div><p>アプリケーションリクエストコールバックは、例えば、エラーを示すこともある：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR 4 &quot;missing argument for SetFrameRate&quot;</span></span></code></pre></div><p>これはカスタムリクエストメッセージであり、その意味とセマンティクスはアプリケーションに依存する。</p><p>AppRequestメッセージは、Duktapeデバッグプロトコルでデバッグクライアントとデバッグターゲットの間で直接通信するために使用されます。カスタムメッセージの意味や含まれるdvalueは、完全に実装次第であり、アプリケーションのニーズによっては、まったくサポートされないこともあります。</p><p>詳しくは後述の「カスタムリクエストと通知」をご覧ください。</p><h3 id="getheapobjinfo-0x23" tabindex="-1">GetHeapObjInfo (0x23) <a class="header-anchor" href="#getheapobjinfo-0x23" aria-label="Permalink to &quot;GetHeapObjInfo (0x23)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x23&gt; (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">heapptr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">object:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pointer:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt;) EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP [&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/int: key&gt; [&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getter&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setter&gt;]]* EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 35 { &quot;type&quot;: &quot;heapptr&quot;, &quot;pointer&quot;: &quot;deadbeef&quot; } EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 0 &quot;class_name&quot; &quot;ArrayBuffer&quot; ... EOM</span></span></code></pre></div><p>提供されたヒープ・ポインタを使用してヒープ・オブジェクトを検査します。ポインタを含む任意のd値型が許可されます: heapptr, object, pointer.デバッグ・クライアントは、ポインタが安全であること、すなわちポインタが有効であり、ポインタ・ターゲットがまだDuktapeヒープにあることを保証する責任があります：</p><ul><li>デバッガが一時停止されると、ガベージコレクションは自動的に無効になり、デバッガが一時停止している間に取得されたポインタはすべて安全です。実行が Resume またはステップ コマンドを使用して再開されると、すべてのポインターがガベージコレクションによって無効になる可能性があります。</li><li>デバッガが一時停止していないとき、デバッグクライアントは、オブジェクトが到達可能であり、したがって検査しても安全であることが100％確実に知られている場合、オブジェクトを安全に検査することができます。これは一般的に安全な仮定ではないので、本当に必要な場合を除き、この仮定を行うことは避けるべきです。</li><li><strong>警告</strong>：安全でないポインタを検査すると、メモリが安全でない動作になり、クラッシュなどにつながる可能性があります。</li></ul><p>結果は、人工的なプロパティエントリーのリストで、それぞれフラグフィールド、キー、および値を含んでいます。使用される共有フォーマットについては、GetObjPropDescを参照してください。</p><p>人工プロパティは実際にはプロパティテーブルに存在しませんが、<code>duk_heaphdr</code>フラグなどに基づいて生成され、バージョン管理を容易にするために文字列キーが付けられています。人工プロパティは、バージョン間で変更される可能性のある内部フィールドを公開し、バージョン保証の一部ではありません。そのため、人工プロパティのキーや値はバージョン間で変更される可能性があります。しかし、プロパティが文字列でキー設定されているため、デバッグ・クライアントがそのような変更に対応するのは比較的簡単です。</p><p>現在の人工キーについては、「ヒープオブジェクト検査」の項で説明しています。</p><h3 id="getobjpropdesc-0x24" tabindex="-1">GetObjPropDesc (0x24) <a class="header-anchor" href="#getobjpropdesc-0x24" aria-label="Permalink to &quot;GetObjPropDesc (0x24)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x24&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags&gt; (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key&gt;) (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getter&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setter&gt;) EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 36 { &quot;type&quot;: &quot;object&quot;, &quot;class&quot;: 10, &quot;pointer&quot;: &quot;deadbeef&quot; } &quot;message&quot; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 7 &quot;message&quot; &quot;Hello there!&quot; EOM</span></span></code></pre></div><p>ゲッターコールやProxyトラップなどの副作用を起こすことなく、特定の文字列キーを使用してECMAScriptオブジェクトのプロパティを検査します。結果は以下のどちらかです：</p><ul><li>以下のフォーマットでプロパティ値を指定する。</li><li>プロパティが存在しない場合、&quot;not found &quot;エラーとなる。</li></ul><p>内部配列に格納されているプロパティは、整数ではなく「3」のような数値文字列のキーでインデックスされます。</p><p>プロキシオブジェクトは、トラップを呼び出すことなく、そのまま検査されます。通常利用できるプロパティは、ターゲットを示すDuktape固有の内部制御プロパティと、トラップを持つハンドラーオブジェクトだけです。Proxyオブジェクトは、GetHeapObjInfoが返す人工プロパティ <code>exotic_proxyobj</code> を使って確実に検出することができます。</p><p>ポインタの安全性に関する注意事項については、GetHeapObjInfoを参照してください。</p><p>各プロパティ項目は、以下のdvalueのシーケンスを使用して記述されます（このフォーマットは、GetHeapObjInfoやGetObjPropDescRangeなどの他のプロパティ関連コマンドと共有されています）：</p><ul><li>フラグフィールド <ul><li>ビットマスク(後述)</li></ul></li><li>キー <ul><li>常に文字列。配列のインデックスプロパティでは、インデックスを正規のインデックス文字列に変換する（例：<code>&quot;3&quot;</code>）。</li></ul></li><li>プロパティ値： <ul><li>プロパティがアクセサーでない場合（flagsフィールドから明らか）： duk_tvalを表す単一のdvalue。</li><li>プロパティがアクセサの場合：ゲッター関数とセッター関数を指す2つのd値（それぞれ）</li></ul></li></ul><p>flags フィールドは、以下のビットを持つ符号なし整数のビットマスクである：</p><table tabindex="0"><thead><tr><th>Bitmask</th><th>Description</th></tr></thead><tbody><tr><td>0x01</td><td>プロパティ属性：書き込み可能、DUK_PROPDESC_FLAG_WRITABLEに一致します。</td></tr><tr><td>0x02</td><td>プロパティ属性：enumerable、DUK_PROPDESC_FLAG_ENUMERABLEにマッチします。</td></tr><tr><td>0x04</td><td>プロパティ属性：設定可能、DUK_PROPDESC_FLAG_CONFIGURABLEにマッチします。</td></tr><tr><td>0x08</td><td>プロパティ属性：アクセサー、DUK_PROPDESC_FLAG_ACCESSORにマッチします。</td></tr><tr><td>0x10</td><td>プロパティが仮想であり、DUK_PROPDESC_FLAG_VIRTUALに一致します。</td></tr><tr><td>0x100</td><td>プロパティキーはSymbolです。</td></tr><tr><td>0x200</td><td>プロパティは、通常のECMAScriptのコードからは見えない隠しSymbolです。</td></tr></tbody></table><p>人工プロパティ（GetHeapObjInfoによって返される）については、プロパティ属性は関連性がなく（ゼロとして送信される）、値は現在決してアクセッサではありません。</p><h3 id="getobjpropdescrange-0x25" tabindex="-1">GetObjPropDescRange (0x25) <a class="header-anchor" href="#getobjpropdescrange-0x25" aria-label="Permalink to &quot;GetObjPropDescRange (0x25)&quot;">​</a></h3><p>Format:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x25&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx_start&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx_end&gt; EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP [&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags&gt; (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">str:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">int:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key&gt;) (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tval:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value&gt; | &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getter&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obj:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setter&gt;)]* EOM</span></span></code></pre></div><p>Example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REQ 37 { &quot;type&quot;: &quot;object&quot;, &quot;class&quot;: 10, &quot;pointer&quot;: &quot;deadbeef&quot; } 0 2 EOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REP 7 &quot;name&quot; &quot;Example object&quot; 7 &quot;message&quot; &quot;Hello there!&quot; EOM</span></span></code></pre></div><p>ECMAScriptオブジェクトの &quot;own &quot;プロパティの範囲 <code>[idx_start,idx_end[</code> を検査します。結果は見つかったプロパティを含む。もし開始/終了インデックスが利用可能なプロパティ数より大きければ、それらの値は結果から完全に欠落する。例えば、オブジェクトに3つのプロパティがあり、範囲<code>[0,10]</code>を要求した場合、結果には3つのプロパティのみが含まれます。インデックスが交差している場合（例：<code>[10,5[</code>）には、空の結果が返されます。</p><p>範囲 <code>[idx_start,idx_end[</code> のインデックスは、(1) ガベージコレクションを防ぐために実行を一時停止し、 (2) オブジェクトが変異しない限り安定であることが保証されている概念的なインデックス空間を参照しています。インデックス空間内のプロパティの順序は特に保証されておらず、必ずしも列挙順序と一致しない。特定の表示順序が必要な場合は、デバッグクライアントがプロパティを並び替える必要がある。</p><p>現在のインデックス空間（将来のバージョンでは変更される可能性があります）には、以下のものが含まれています：</p><ul><li>オブジェクトの内部配列部分、添字 <code>[0,a_size[</code>.ここで、<code>a_size</code>は密な配列部分に割り当てられたスペースであり、配列の見かけ上の <code>.length</code> プロパティよりも大きいかもしれない。マッピングされていない値や配列のインデックスがない場合は、&quot;unused&quot; dvaluesとして返されます。</li><li>objectの内部エントリ部分、インデックス <code>[0,e_next[</code>.エントリ部には削除されたプロパティが含まれることがあり、そのプロパティは &quot;unused &quot;dvalueとして返されます。</li></ul><p>デバッグクライアントは、これらの詳細を気にする必要はなく、unusedの値を正しく処理すれば、任意の範囲（2つの部分にまたがるものでも可）を読み取ることができます。</p><p>デバッグクライアントは、インデックス範囲 <code>[0,0x7fffff[</code> (今のところ符号付きインデックス) を要求するだけで、すべてのプロパティを要求することができます。結果は、実際に存在するプロパティと同じ数だけ含まれます。</p><p>デバッグクライアントは、次のようにプロパティセットに対してインクリメンタルに反復処理することもできます：</p><ul><li>例えば、<code>[0,10[</code>、<code>[10,20[</code>などのように、インデックス範囲を順番にリクエストします。</li><li>部分的な結果(ここでは10個未満のプロパティ)を受け取ったら、終了とする。同じような方法として、完全に空の結果を受け取ったときに反復処理を停止することもできます。</li></ul><p>インデックス空間に含まれるプロパティは、副作用のない対象オブジェクトの⾵⾊のプロパティです：</p><ul><li>プロパティの属性は、flagsフィールドで提供されます。内部プロパティは、現在0xFFバイトで始まるキーを使って実装されているが、デバッグクライアントがマーカーバイト（将来のバージョンでは変更される可能性がある）を個別にチェックする必要がないように、明示的にフラグを立てる。</li><li>アクセサー・プロパティは、セッターとゲッターのペアとして、ゲッターを呼び出さずにそのまま記述する。デバッグクライアントが望むなら、明示的にそれを行うことができる。</li><li>継承されたプロパティは、列挙されません。デバッグクライアントは、<code>prototype</code>人工プロパティを検索し、そのオブジェクトを個別に検査することで、プロトタイプチェーンを手動で歩くことができます。プロトタイプのウォーキングは、プロトタイプのループで失敗しないように注意する必要があります。</li><li>完全に仮想化された方法で実装されているいくつかのプロパティは、ECMAScriptの列挙で見えるが、検査では見えないかもしれない。例えば、Stringオブジェクトは文字列の仮想インデックスプロパティ（0, 1, 2, ...）を持っていますが、これらは現時点では検査結果に含まれません。ただし、GetObjPropDescで読み取ることは可能です。</li><li>Proxyのトラップは発動されず、返されるプロパティはProxy自身のプロパティです。通常、ProxyはProxyのターゲットとハンドラテーブルを特定するDuktape固有の内部制御プロパティしか持っていません。</li></ul><p>Arrayオブジェクトには密と疎があることに注意してください。密な配列には配列項目が格納される配列部分があり、疎な配列には配列部分がなく、配列項目は通常の文字列キー付きプロパティと一緒にメインプロパティテーブルに格納されます。したがって、スパース配列の配列項目は、通常の文字列キー付きプロパティとして表示され、インデックスの昇順でない場合があります。デバッグクライアントは、常に優先表示順序に合うようにプロパティを並べ替える必要があります。配列の隙間は、欠落したキーとして、またはd値 &quot;unused &quot;を持つキーとして表示することができる。現在、疎な配列の隙間は欠落したキーとして表示され、密な配列の隙間は &quot;unused &quot;というd値として表示されます。</p><p>ポインタの安全性に関する注意事項については、GetHeapObjInfoを参照してください。</p><h2 id="カスタムリクエストと通知" tabindex="-1">カスタムリクエストと通知 <a class="header-anchor" href="#カスタムリクエストと通知" aria-label="Permalink to &quot;カスタムリクエストと通知&quot;">​</a></h2><p>Duktape 1.5.xから、Duktapeは特別なAppRequestとAppNotifyメッセージを使用して、同じトランスポート上でデバッグクライアントとデバッグターゲットの間の直接通信をサポートしています。これらのメッセージはDuktapeにとって意味を持たず、定義されたAPIを通じて前後にマーシャリングする役割を果たすだけです。</p><p>AppNotify メッセージは、メッセージの内容をスタックにプッシュして <code>duk_debugger_notify()</code> を呼び出し、プッシュした値の数を渡すことで送信することができます。プッシュされた各値は、メッセージの中でdvalueとして送信されます。つまり、&quot;foo &quot;という文字列と &quot;bar &quot;という文字列をpushすると、クライアントには<code>NFY 7 &quot;foo&quot; &quot;bar&quot; EOM</code>と表示されます。</p><p>AppRequestは、ECMAScriptの実行とは直接関係なく、実装に依存する可能性のある要求をターゲットに行うために使用されます。例えば、AppRequestは次のように使用されるかもしれない：</p><ul><li>デバッグ対象のファイルシステムからソースファイルを直接ダウンロードする。</li><li>ゲームエンジンのフレームレートを変更する</li><li>デバッグ中に組み込みターゲットデバイスをリセット/リブートする。</li><li>ソフトウェアやスクリプトのアップデートの実行またはトリガー</li></ul><p>AppRequest をサポートしたいターゲットは、<code>duk_debugger_attach()</code> を呼び出す際にリクエストコールバックを提供する必要があります。AppRequestを受信すると、リクエストコールバックは値スタック上のメッセージの内容で起動され、返信で送信される独自の値をプッシュすることができます。リクエストコールバックは、必要に応じてブロックすることができる（例えば、コールバックはハードウェアボタンが押されるのを待つかもしれない）。しかし、コールバックが実行される間、Duktapeもブロックされるので、場合によっては望ましくないし、デバッグ・クライアントがタイムアウトする原因になるかもしれない（もちろん、これは完全にデバッグ・クライアントに依存する）ことに注意してください。</p><p>これは、最小限の何もしないリクエストコールバックです：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_cb_debug_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">udata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nvalues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Number of return values is returned: here empty reply. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記のダミーコールバックは、すべてのリクエストに対して <code>REP EOM</code> (空の返信) で応答するだけです。</p><p>より有用なコールバックは、受け取った値を値スタックで処理し、返信として送信する値を自分でプッシュし、プッシュした値の数を示す非負の整数を返すべきである。以下は、もう少し便利な実装です：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_cb_debug_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">udata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nvalues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cmd_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Callback must be very careful NEVER to access values below</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * &#39;nvalues&#39; topmost value stack elements.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nvalues </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* Must access values relative to stack top. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cmd_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_get_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nvalues </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cmd_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* Return -1 to send an ERR reply.  The value on top of the stack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * should be a string which will be used for the error text sent</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * to the debug client.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_push_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;missing application specific command name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cmd_name, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VersionInfo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* Return a positive integer to send a REP containing values pushed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * to the stack.  The return value indicates how many dvalues you</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * are including in the response.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_push_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Awesome Program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_push_int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">81200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ver. 8.12.0 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 2 dvalues */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_push_sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unrecognized application specific command name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         cmd_name);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>アタッチ時にリクエストコールバックが提供されない場合、AppRequestはサポートされていないコマンドとして扱われ、Duktapeからその旨のERR返信を引き出す。ターゲットは常にAppNotifyメッセージを自由に送信することができます。</p><p>予防措置として、ターゲットは、クライアントが受信して検査するまでにヒープポインタが古くなる可能性があるため、JSオブジェクトのような構造化された値を通知メッセージで送信しないようにする必要があります。これは、特にターゲットが実行中に送信された通知について当てはまります。数値、ブーリアン、文字列など、ユニークなdvalue表現を持つプリミティブにこだわるのがよいでしょう。構造化された値を送信する必要がある場合は、JSON/JXなどでエンコードして文字列として送信すればよい（キャッチされないエラーを注意深く回避する）。</p><h3 id="リクエストコールバックに関する重要な注意事項" tabindex="-1">リクエストコールバックに関する重要な注意事項 <a class="header-anchor" href="#リクエストコールバックに関する重要な注意事項" aria-label="Permalink to &quot;リクエストコールバックに関する重要な注意事項&quot;">​</a></h3><p>リクエストコールバックには <code>duk_context</code> ポインタが提供され、このポインタを使用して値スタックにアクセスすることができ、信頼されていると見なされます。このコールバックには、やってはいけないことがあります(MUST NOT)。具体的には</p><ul><li>それは <code>nvalues</code> が特定の値を持つことを想定してはならない(MUST NOT)。特に、コールバックの引数(アプリケーション固有のコマンドを識別するために慣習的に使用される文字列でさえも)がないように、それはゼロであるかもしれない。</li><li>コールバックは、与えられた <code>nvalues</code> とコールバック自身がプッシュした値を超えて、スタックの最上位にある値にアクセスしたり、ポップしたりしようとしてはならない(MUST NOT)。</li><li>また、<code>duk_get_top()</code> や同様のプリミティブに対して、特定の値を仮定してはなりません(MUST NOT)。実際のところ、これは値へのアクセスに負のスタックインデックスを使用することを意味します。</li><li>エラーを投げてはならない(MUST NOT)。スタックの値を直接扱うと、誤ってエラーを投げてしまうことが非常に多いので、ここでは注意が必要です。</li></ul><p>この契約に違反すると、未定義の動作となり、デバッガーの状態を破損したり、不正な動作を引き起こしたり、あるいはセグフォールトにつながる可能性があります。例えば、関数をサンドボックス化して、無関係なスタック値にアクセスできないようにし、安全にエラーを投げることができるようにするなど、将来的にはより堅牢にしたいものです。</p><p>メッセージの dvalue は、受信した順にプッシュされます。スタック上の任意の値の相対位置が値の総数に依存するため、負のインデックスを使用してアクセスするのは不便です。しかし、コールバックは値の総数をパラメータとして受け取るので、便利な慣例として、スタックに次のようなインデックスを付けることができます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nvalues </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    duk_push_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;not enough arguments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cmd_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_get_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nvalues </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_get_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nvalues </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val_2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_get_int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nvalues </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="apprequest-appnotifyコマンドフォーマット" tabindex="-1">AppRequest/AppNotifyコマンドフォーマット <a class="header-anchor" href="#apprequest-appnotifyコマンドフォーマット" aria-label="Permalink to &quot;AppRequest/AppNotifyコマンドフォーマット&quot;">​</a></h3><p>一般的な慣習として、AppRequestやAppNotifyメッセージのコマンド番号の後の最初のフィールドは、コマンドを識別する文字列にすることが推奨されます。これにより、異なるクライアントやターゲットの相互運用が容易になります。認識できないコマンド名は無視できますが、整数コマンドなどは、使用するデバッグクライアントやターゲットによって解釈が異なる可能性があります。</p><p>もし、あるコマンドがあなたのアプリケーションに特有なもの（目的や動作）であれば、例えば「MyApp-AwesomeCmd」のように接頭辞を付けるとよいでしょう。これにより、似たような名前のコマンドを持つ他のターゲットとの衝突を避けることができます。</p><p>結局のところ、アプリケーション・メッセージの内容に関する規約や全体的な形式は、Duktapeによって実際に強制されることはありません。したがって、ピアは、そのメッセージがどこから来たのか正確に知らない限り、AppRequestまたはAppNotifyメッセージの内容に関していかなる仮定も立ててはならない。</p><h2 id="ヒープオブジェクトの検査" tabindex="-1">ヒープオブジェクトの検査 <a class="header-anchor" href="#ヒープオブジェクトの検査" aria-label="Permalink to &quot;ヒープオブジェクトの検査&quot;">​</a></h2><p>人工キーはバージョン間で変更になる可能性があります。</p><p>ただし、以下のものはバージョン保証があります：</p><ul><li>prototype\`：内部プロトタイプ（外部プロトタイプである㊙プロパティと混同しないでください）。</li><li>class_name\`: オブジェクトクラスの文字列名。</li><li>class_number\`: オブジェクトのクラス番号、オブジェクトの dvalue と一致する。</li></ul><h3 id="duktape-1-5-0" tabindex="-1">Duktape 1.5.0 <a class="header-anchor" href="#duktape-1-5-0" aria-label="Permalink to &quot;Duktape 1.5.0&quot;">​</a></h3><p>以下のリストは、Duktape 1.5.0に含まれる人工キーの説明です。最新の動作は <code>src-input/duk_debugger.c</code> を参照してください：</p><table tabindex="0"><thead><tr><th>Artificial property key</th><th>Object type(s)</th><th>Description</th></tr></thead><tbody><tr><td><code>heaphdr_flags</code></td><td><code>duk_heaphdr</code> (all)</td><td>生の <code>duk_heaphdr</code> フラグフィールド。個々のフラグは、個別の人工プロパティとしても提供されます。</td></tr><tr><td><code>heaphdr_type</code></td><td><code>duk_heaphdr</code> (all)</td><td><code>duk_heaphdr</code>型フィールド、[\`duk_HTYPE_xxx]{.title-ref}.</td></tr><tr><td><code>refcount</code></td><td><code>duk_heaphdr</code> (all)</td><td>参照回数。refcount がサポートされていない場合は省略される。</td></tr><tr><td><code>extensible</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_EXTENSIBLE</td></tr><tr><td><code>constructable</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_CONSTRUCTABLE</td></tr><tr><td><code>callable</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_CALLABLE</td></tr><tr><td><code>bound</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_BOUND</td></tr><tr><td><code>compfunc</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_COMPFUNC</td></tr><tr><td><code>natfunc</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_NATFUNC</td></tr><tr><td><code>bufobj</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_BUFOBJ</td></tr><tr><td><code>fastrefs</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_FASTREFS</td></tr><tr><td><code>array_part</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_ARRAY_PART</td></tr><tr><td><code>strict</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_STRICT</td></tr><tr><td><code>notail</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_NOTAIL</td></tr><tr><td><code>newenv</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_NEWENV</td></tr><tr><td><code>namebinding</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_NAMEBINDING</td></tr><tr><td><code>createargs</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_CREATEARGS</td></tr><tr><td><code>have_finalizer</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_HAVE_FINALIZER</td></tr><tr><td><code>exotic_array</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_EXOTIC_ARRAY</td></tr><tr><td><code>exotic_stringobj</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_EXOTIC_STRINGOBJ</td></tr><tr><td><code>exotic_arguments</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_EXOTIC_ARGUMENTS</td></tr><tr><td><code>exotic_proxyobj</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_EXOTIC_PROXYOBJ</td></tr><tr><td><code>special_call</code></td><td><code>duk_hobject</code></td><td>DUK_HOBJECT_FLAG_SPECIAL_CALL</td></tr><tr><td><code>class_number</code></td><td><code>duk_hobject</code></td><td>Duktape internal class number (same as object dvalue).</td></tr><tr><td><code>class_name</code></td><td><code>duk_hobject</code></td><td>文字列のクラス名、例：<code>&quot;ArrayBuffer&quot;</code>。</td></tr><tr><td><code>prototype</code></td><td><code>duk_hobject</code></td><td>有効な（内部）プロトタイプを指し、クライアントコントロールで継承されたプロパティを列挙することができる。</td></tr><tr><td><code>props</code></td><td><code>duk_hobject</code></td><td>現在のプロパティテーブルの割り当て。</td></tr><tr><td><code>e_size</code></td><td><code>duk_hobject</code></td><td>エントリーパーツサイズです。</td></tr><tr><td><code>e_next</code></td><td><code>duk_hobject</code></td><td>入力部次のインデックス（＝使用サイズ）。</td></tr><tr><td><code>a_size</code></td><td><code>duk_hobject</code></td><td>アレイの部品サイズ。</td></tr><tr><td><code>h_size</code></td><td><code>duk_hobject</code></td><td>ハッシュパーツサイズです。</td></tr><tr><td><code>length</code></td><td><code>duk_harray</code></td><td>配列 .長さ。</td></tr><tr><td><code>length_nonwritable</code></td><td><code>duk_harray</code></td><td>Array .length の書き込み可能（false）または書き込み不可能（true）。</td></tr><tr><td><code>thread</code></td><td><code>duk_hdecenv</code></td><td>オープンな宣言型環境のためのスレッド。</td></tr><tr><td><code>varmap</code></td><td><code>duk_hdecenv</code></td><td>オープンな宣言型環境のためのVarmap。</td></tr><tr><td><code>regbase</code></td><td><code>duk_hdecenv</code></td><td>オープンな宣言型環境のためのRegbase。</td></tr><tr><td><code>target</code></td><td><code>duk_hobjenv</code></td><td>オブジェクト環境の対象オブジェクト。</td></tr><tr><td><code>has_this</code></td><td><code>duk_hobjenv</code></td><td>オブジェクトの環境から&#39;この&#39;バインディングが提供される場合、真。</td></tr><tr><td>(not present yet)</td><td><code>duk_hnatfunc</code></td><td>ネイティブ関数ポインタ。</td></tr><tr><td><code>nargs</code></td><td><code>duk_hnatfunc</code></td><td>スタック引数の数。</td></tr><tr><td><code>magic</code></td><td><code>duk_hnatfunc</code></td><td>魔法値です。</td></tr><tr><td><code>varargs</code></td><td><code>duk_hnatfunc</code></td><td>関数が変数引数を持つ場合、真。</td></tr><tr><td>(not present yet)</td><td><code>duk_hcompfunc</code></td><td>バイトコードを含むECMAScript関数データ領域。</td></tr><tr><td><code>lex_env</code></td><td><code>duk_hcompfunc</code></td><td>機能字句の環境。</td></tr><tr><td><code>var_env</code></td><td><code>duk_hcompfunc</code></td><td>関数変数環境。</td></tr><tr><td><code>nregs</code></td><td><code>duk_hcompfunc</code></td><td>バイトコードエグゼキュータレジスタの数。</td></tr><tr><td><code>nargs</code></td><td><code>duk_hcompfunc</code></td><td>スタック引数の数。</td></tr><tr><td><code>start_line</code></td><td><code>duk_hcompfunc</code></td><td>ソースコードの1行目。</td></tr><tr><td><code>end_line</code></td><td><code>duk_hcompfunc</code></td><td>ソースコードの最終行。</td></tr><tr><td>(no properties yet)</td><td><code>duk_hthread</code></td><td>スレッドプロパティはまだありません。</td></tr><tr><td><code>buffer</code></td><td><code>duk_hbufobj</code></td><td>下地となるプレーンバッファ（heapptrとして提供）。</td></tr><tr><td><code>slice_offset</code></td><td><code>duk_hbufobj</code></td><td>スライスの開始のための基礎となるバッファへのバイトオフセット。</td></tr><tr><td><code>slice_length</code></td><td><code>duk_hbufobj</code></td><td>スライスのバイト長。</td></tr><tr><td><code>elem_shift</code></td><td><code>duk_hbufobj</code></td><td>要素のシフト値、例：Uint64 -&gt; 3.</td></tr><tr><td><code>elem_type</code></td><td><code>duk_hbufobj</code></td><td>DUK_HBUFOBJ_ELEM_xxx</td></tr><tr><td><code>is_typedarray</code></td><td><code>duk_hbufobj</code></td><td>bufferobjectが型付き配列（例：Uint8Array）であれば真。</td></tr><tr><td><code>extdata</code></td><td><code>duk_hstring</code></td><td>duk_hstring_flag_extdata</td></tr><tr><td><code>bytelen</code></td><td><code>duk_hstring</code></td><td>文字列のバイト長。</td></tr><tr><td><code>charlen</code></td><td><code>duk_hstring</code></td><td>文字列の文字数。</td></tr><tr><td><code>hash</code></td><td><code>duk_hstring</code></td><td>文字列ハッシュ。アルゴリズムは設定オプションに依存する。</td></tr><tr><td><code>data</code></td><td><code>duk_hstring</code></td><td>プレーンな文字列の値。</td></tr><tr><td><code>dynamic</code></td><td><code>duk_hbuffer</code></td><td>duk_hbuffer_flag_dynamic</td></tr><tr><td><code>external</code></td><td><code>duk_hbuffer</code></td><td>duk_hbuffer_flag_external</td></tr><tr><td><code>size</code></td><td><code>duk_hbuffer</code></td><td>バッファのバイトサイズ。</td></tr><tr><td><code>dataptr</code></td><td><code>duk_hbuffer</code></td><td>現在のデータ領域への生ポインタ。</td></tr><tr><td><code>data</code></td><td><code>duk_hbuffer</code></td><td>バッファデータ</td></tr></tbody></table><h3 id="現在、使用不可" tabindex="-1">現在、使用不可 <a class="header-anchor" href="#現在、使用不可" aria-label="Permalink to &quot;現在、使用不可&quot;">​</a></h3><p>これらはコード上では無効（<code>if #0</code>&#39;d out）であり、有用であれば再び追加することができる：</p><table tabindex="0"><thead><tr><th>Artificial property key</th><th>Object type(s)</th><th>Description</th></tr></thead><tbody><tr><td><code>reachable</code></td><td><code>duk_heaphdr</code> (all)</td><td>DUK_HEAPHDR_FLAG_REACHABLE</td></tr><tr><td><code>temproot</code></td><td><code>duk_heaphdr</code> (all)</td><td>DUK_HEAPHDR_FLAG_TEMPROOT</td></tr><tr><td><code>finalizable</code></td><td><code>duk_heaphdr</code> (all)</td><td>DUK_HEAPHDR_FLAG_FINALIZABLE</td></tr><tr><td><code>finalized</code></td><td><code>duk_heaphdr</code> (all)</td><td>DUK_HEAPHDR_FLAG_FINALIZED</td></tr><tr><td><code>readonly</code></td><td><code>duk_heaphdr</code> (all)</td><td>DUK_HEAPHDR_FLAG_READONLY</td></tr><tr><td><code>arridx</code></td><td><code>duk_hstring</code></td><td>DUK_HSTRING_FLAG_ARRIDX</td></tr><tr><td><code>symbol</code></td><td><code>duk_hstring</code></td><td>DUK_HSTRING_FLAG_SYMBOL (DUK_HSTRING_FLAG_INTERNAL in Duktape 1.x)</td></tr><tr><td><code>hidden</code></td><td><code>duk_hstring</code></td><td>DUK_HSTRING_FLAG_HIDDEN</td></tr><tr><td><code>reserved_word</code></td><td><code>duk_hstring</code></td><td>DUK_HSTRING_FLAG_RESERVED_WORD</td></tr><tr><td><code>strict_reserved_word</code></td><td><code>duk_hstring</code></td><td>DUK_HSTRING_FLAG_STRICT_RESERVED_WORD</td></tr><tr><td><code>eval_or_arguments</code></td><td><code>duk_hstring</code></td><td>DUK_HSTRING_FLAG_EVAL_OR_ARGUMENTS</td></tr></tbody></table><h2 id="デバッガ文" tabindex="-1">デバッガ文 <a class="header-anchor" href="#デバッガ文" aria-label="Permalink to &quot;デバッガ文&quot;">​</a></h2><p>ECMAScriptにはデバッガ文があります：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">debugger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 234</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>E5仕様では、以下のように記載されています：</p><blockquote><p>DebuggerStatement productionを評価することで、デバッガで実行したときにブレークポイントを発生させる実装が可能になる場合があります。デバッガが存在しないか、またはアクティブでない場合、このステートメントは観察可能な効果を持ちません。</p></blockquote><p>他のECMAScriptエンジンは、通常、デバッガステートメントをブレイクポイント</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger</a></li><li><a href="http://msdn.microsoft.com/en-us/library/ie/0bwt76sk%28v=vs.94%29.aspx" target="_blank" rel="noreferrer">http://msdn.microsoft.com/en-us/library/ie/0bwt76sk(v=vs.94).aspx</a></li><li><a href="http://blog.katworksgames.com/2012/09/27/debugger-statement-makes-javascript-development-easier/" target="_blank" rel="noreferrer">http://blog.katworksgames.com/2012/09/27/debugger-statement-makes-javascript-development-easier/</a></li></ul><p>Duktapeはこれをブレークポイントとしても解釈します。つまり、デバッグクライアントが接続されているときにデバッグ文に遭遇すると、実行が一時停止されます。これにより、匿名のevalコードでもブレークポイントを設定することができます（ただし、ソースコードへのアクセスはできません）。</p><h2 id="パケットベースのトランスポートの上にデバッグトランスポートを実装する" tabindex="-1">パケットベースのトランスポートの上にデバッグトランスポートを実装する <a class="header-anchor" href="#パケットベースのトランスポートの上にデバッグトランスポートを実装する" aria-label="Permalink to &quot;パケットベースのトランスポートの上にデバッグトランスポートを実装する&quot;">​</a></h2><p>パケットベースの下位プロトコル上にデバッグトランスポートを実装することは、パックベースのプロトコル上にTCPストリームや仮想シリアルリンクを転送することと本質的に同じ問題です。そうすることで、Duktape特有の問題はほとんどなく、この問題はかなりよく理解されています。このセクションでは、いくつかのポインタを提供します。</p><h3 id="基本的な課題" tabindex="-1">基本的な課題 <a class="header-anchor" href="#基本的な課題" aria-label="Permalink to &quot;基本的な課題&quot;">​</a></h3><ul><li>任意のデータチャンクを、順序を入れ替えたり重複させたりせずに、確実に送受信する仕組みが必要です。このメカニズムは、ターゲットとデバッグクライアントの両方に必要です。</li><li>バッファリングが問題になる場合は、フロー制御機構を実装する必要があるかもしれません。通常、バッファリングが問題になるのはデバッグターゲットだけなので、通常は片方向のフロー制御で十分です。</li><li>デバッグターゲットから送信されるデータチャンクが適度な大きさになるように、Duktapeによって行われるデバッグトランスポートライトを合体させ、これ以上データが送信されないときに保留中のバイトをフラッシュアウトするために⽶書フラッシュを使う必要があるかもしれません。また、TCPと同じようにタイマーを使うこともできます。</li></ul><p>独自のデバッグクライアントを実装する場合は、受信したデータチャンクからデバッグストリームを解析する必要があります（例えば、トライアルパースなど）：</p><ul><li>受信したデータチャンクを読み、入力バイトバッファに追加する。</li><li>デバッグメッセージの試行解析は、完全なメッセージが解析できなくなるまで行う。その後、次の受信データチャンクを待つ。</li><li>デバッグメッセージの境界は、Duktapeがトランスポート実装に行う読み取り/書き込み呼び出しと一致することが保証されていないため、<strong>デバッグメッセージをトランスポート実装が送信/受信するデータチャンクに一致させようとするべきではありません！</strong>。</li></ul><h3 id="コアレスティングの書き込み例" tabindex="-1">コアレスティングの書き込み例 <a class="header-anchor" href="#コアレスティングの書き込み例" aria-label="Permalink to &quot;コアレスティングの書き込み例&quot;">​</a></h3><ul><li>アウトバウンドライトのために最大NバイトのバッファBUFを維持する。</li><li>Duktapeトランスポートの各書き込みコールに対して： <ul><li>書き込みデータがBUFに収まるなら、それを追加する。そうでない場合は、残りのBUFスペースに収まるだけのバイトを追加する（部分書き込み）。</li><li>バッファが満杯（Nバイト）になった場合は、送信してバッファを空にする。</li><li>Duktapeへの戻り値は、消費された、つまりBUFに追加された値の数を示します。</li></ul></li><li>各Duktapeトランスポートに対して、フラッシュを書き込みます： <ul><li>BUFにバイトがある場合、バッファを送信して空にする。</li><li>Duktapeが書き込みを終了し、読み取りをブロックしたり、実行を再開したりする前に、書き込みフラッシュを実行することを頼りにしてください。ライトフラッシュは、他のタイミングでも行われることがあります。**例えば、書き込みフラッシュがデバッグ・メッセージの境界と一致することは保証されません！**フラッシュに他の意味を割り当てないでください。</li></ul></li></ul><h3 id="一方通行のフロー制御例" tabindex="-1">一方通行のフロー制御例 <a class="header-anchor" href="#一方通行のフロー制御例" aria-label="Permalink to &quot;一方通行のフロー制御例&quot;">​</a></h3><p>デバッグターゲットを確実にするためのシンプルな一方向のフロー制御メカニズムは、MAXBUFバイトの固定受信バッファで実装できます（MAXBUFは256など小さいものです）：</p><ul><li>デバッグクライアントは、2つのバイトカウントを保持します： 1.SENTは、デバッグ接続の開始以来、何バイトが送信されたかを示します。 2.ACKEDは、デバッグターゲットが消費したことが確認されたバイト数を示します。SENT-ACKEDは、ターゲットの入力バッファに潜在するバイト数である。</li><li>デバッグクライアントは、ターゲットが少なくともMAXBUF - (SENT - ACKED)バイトをバッファリングできることを知っているので、その量を送信するために自由であることがわかります。</li><li>デバッグターゲットがデバッグクライアントからデータチャンクを受信すると、次のようになります： <ul><li>データチャンクを受信データバッファに追加する。デバッグ・クライアントが正しく動作していれば、データのためのスペースが常にあるはずです。</li></ul></li><li>Duktapeがデバッグ・トランスポートの読み取りコールバックを呼び出すとき： <ul><li>インバウンドデータバッファからバイトを消費する。</li><li>デバッグクライアントにトランスポート固有の通知を送り、ACKEDバイトカウント（=Duktapeリードコールによって消費されたバイト数）を更新する。</li></ul></li></ul><p>Duktapeは小さな読み込みを多く行うので、便利な場合があります：</p><ul><li>デバッグトランスポートの読み取りコールバックで <ul><li>以前に送信した値に対する変化が十分に大きくない限り、更新されたACKEDバイト数に対して通知を送信しない。</li></ul></li><li>デバッグトランスポートの &quot;read flush &quot;表示に依存する： <ul><li>受信したら、常に更新されたACKEDバイト数の通知を送信する。</li></ul></li></ul><p>他にも、例えば、ACKEDのバイト数を更新して送るなど、様々なオプションがあります：</p><ul><li>デバッグターゲットからバイトを受信する。</li><li>Duktapeがバイトを読み込むとき、完全に満杯の入力バッファから読み込んだときのみ、更新されたACKEDバイトカウントを送信します（つまり、デバッグクライアントは現在、私たちがスペースがあることを通知するまでデータを送信していません）。</li></ul><h2 id="実施上の注意" tabindex="-1">実施上の注意 <a class="header-anchor" href="#実施上の注意" aria-label="Permalink to &quot;実施上の注意&quot;">​</a></h2><h3 id="概要-3" tabindex="-1">概要 <a class="header-anchor" href="#概要-3" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>このセクションでは、Duktapeの内部に関する実装上の注意点を説明します。</p><p>Duktapeデバッガサポートはオプションで、configオプションで有効になります。また、デバッガサポートが有効な場合、バイトコードエグゼキュータ割り込み機能は必須となります。</p><h3 id="ソースファイル" tabindex="-1">ソースファイル <a class="header-anchor" href="#ソースファイル" aria-label="Permalink to &quot;ソースファイル&quot;">​</a></h3><p>デバッガーのサポートは、ほとんど以下のファイルで実装されています：</p><ul><li><code>duk_js_executor.c</code>: チェック実行、ブレークポイント、ステップイン/オーバー、デバッガとの連動 メッセージループ</li><li><code>duk_hthread_stacks.c</code>: step out handling</li><li><code>duk_debugger.c</code>: デバッグトランスポート、デバッグコマンドハンドリング</li><li><code>duk_api_debug.c</code>: デバッガAPIエントリポイント</li></ul><h3 id="デバッガーのヒープへのアタッチとデタッチ" tabindex="-1">デバッガーのヒープへのアタッチとデタッチ <a class="header-anchor" href="#デバッガーのヒープへのアタッチとデタッチ" aria-label="Permalink to &quot;デバッガーのヒープへのアタッチとデタッチ&quot;">​</a></h3><p>ユーザーコードが <code>duk_debugger_attach()</code> を使ってデバッガーをアタッチすると、Duktape は <code>duk_heap</code> の状態を更新してデバッガーがアタッチされたことを反映し、コールバックなどを格納します。</p><p>デバッガはDuktapeのヒープレベルで動作します。他のオプションは混乱した結果につながるようです。例えば、デバッガが1つのスレッドに接続されている場合、ブレークポイントはそのスレッドによってのみトリガーされることになります。それでも、ブレークポイントが発動すると、ヒープ全体が一時停止される。単一のスレッドを一時停止して、他のスレッドの実行を再開する方法はない。</p><h3 id="実行モード、実行者割り込み、restart-execution" tabindex="-1">実行モード、実行者割り込み、restart_execution <a class="header-anchor" href="#実行モード、実行者割り込み、restart-execution" aria-label="Permalink to &quot;実行モード、実行者割り込み、restart_execution&quot;">​</a></h3><p>デバッガの実装に必要な最も重要な機能は、アクティブなブレークポイントの検出、ブレークポイントでのトリガー、ステップ実行の効率的な方法を持つことでしょう。これらはDuktapeバイトコードエグゼキュータに以下のように実装されています。</p><p>デバッガのサポートは、バイトコードの実行を定期的またはバイトコード命令ごとに中断する機能を提供する、エクゼキュータ割り込み機能に依存しています。このメカニズムは、3つの概念的な実行モードを実装するために使用されます：</p><ul><li><strong>Normal</strong>: バイトコードエグゼキュータは全速力で実行し、たまにエグゼキュータ割り込みに呼び出します。割り込みでは、デバッグクライアントメッセージ（これにより、例えば、突然の一時停止が可能になる）、実行タイムアウトなどを覗き見します。</li><li><strong>Checked</strong>: バイトコードエクゼキュータは、命令ごとにエクゼキュータ割り込みを呼び出して、一度に1つずつオペコードを実行します。割り込みは、行の遷移を検出し、ブレークポイントやステップ関連の条件がトリガーされたかどうかをチェックし、デバッグクライアントメッセージを覗き見（ただし待ち受けブロックはしない）します。</li><li><strong>Paused</strong>: バイトコードエグゼキュータはエグゼキュータ割り込みを呼び出し、エグゼキュータ割り込みは、デバッグクライアントがステップオーバー/イント/アウトやレジュームなどのコントロールフロー関連のコマンドを発行するまでデバッグクライアントのメッセージを処理します。実行はデバッグクライアントの完全な制御下にあります。</li></ul><p>一時停止モードは，何らかの再開・離脱コマンドに遭遇するまでデバッグメッセージを処理することで，実行者割り込みに具体的に実装されています．</p><p>チェックモードは、割り込みカウンタを注意深く管理することで実現されます。これは、エクゼキュータのファストパスに追加のチェックを導入しないために重要です。実行が再開されると、チェック実行の必要性が検出され（例えば、アクティブなブレークポイントがある、またはステッピングがアクティブである）、どのオペコードも実行される前に割り込みをトリガするように割り込みカウンタが構成される。チェックされたモードを維持する必要がある場合、割り込みハンドラは、再び割り込みハンドラに戻る前に、1つのオペコードのみが実行されるように割り込みカウンタを構成する。</p><p>通常実行モードも同様ですが、バイトコードエクゼキュータに戻る際の割り込みカウンタが高い値（例えば、10万オペコード毎に割り込み）に設定されます。</p><p>バイトコードエグゼキュータの <code>restart_execution:</code> ラベルは、重要な制御ポイントです。これは、バイトコード・エグゼキュータが新しいアクティベーションの実行を開始しようとするときにいつでも呼び出されますが、デバッグ・コマンドがブレークポイントの状態を調整したときなどにも明示的に呼び出されることがあります。restart実行」操作は、多くの重要なことを行います：</p><ul><li>デバッガーの接続/非接続の状態をチェックします。デタッチされている場合、他のすべてのデバッガ関連のチェックはスキップされます。</li><li>現在の関数でアクティブなブレークポイントをチェックし、実行者割り込みでブレークポイントのトリガーチェックを高速化するためにアクティブなブレークポイントリストを書き出します。</li><li>アクティブなステッピング状態をチェックします。ステップインとステップオーバーの両方を処理する必要があります。</li><li>一時停止状態もチェックする。バイトコードエクゼキュータの外部で一時停止フラグを設定できる場合がある。例えば、&quot;step out &quot;をするとき、コールスタックの巻き戻しコードは、ステップアウトしているアクティベーションを巻き戻すときに &quot;paused &quot;フラグをセットする。これを検出するのは、次回に「実行再開」を呼び出すときだけです。</li><li>最終的に、チェックモードとノーマルモードのどちらで実行するかを決定する。</li></ul><p>実行後は、エクゼキュータ割り込み機構と割り込みハンドラの助けにより、正常に実行されます。実行モードは、割り込みハンドラが割り込みカウンターを高い値に設定し始めるか、再度restart_executionを起動した場合のみ変更可能です。</p><p>バイトコードエグゼキュータの観点からは、統合は非常にシンプルです：</p><ul><li>restart_executionは、実行の設定としてデバッガの処理を多く行っている。</li><li>割り込みカウンタ機構は割り込みハンドラへの呼び出しに使用され、実際のオペコード実行者はそれ以外を気にする必要はない。</li></ul><h3 id="ステップとポーズ" tabindex="-1">ステップとポーズ <a class="header-anchor" href="#ステップとポーズ" aria-label="Permalink to &quot;ステップとポーズ&quot;">​</a></h3><p>以下の内部ヒープレベルの状態が必要です：</p><ul><li>一時停止状態：ヒープ幅の広いフラグで、デバッグクライアントが継続の許可を出すまで会話する必要があることを示す。</li></ul><p>ステップの状態が割と厄介です：</p><ul><li>ステップオーバー：元のスレッド、アクティベーションインデックス、スタートラインを追跡する。開始行が変わるまでチェックモードで実行し、その後、一時停止する。他の関数を呼び出した場合、状態は保持され、戻って行番号が変わったら一時停止する。</li><li>ステップイン：元のスレッド、アクティベーションインデックス、スタートラインを追跡する。開始線が変わるまでチェックモードで実行する。別の関数に呼び出す場合は、その関数に入るときに一時停止する必要がある。</li><li>ステップアウト：元のスレッドと活性化インデックスを追跡する（スタートラインは関係ない）。通常モードで実行する（もちろんブレークポイントがある場合は除く）。何らかの理由でアクティベーションが解除された場合、一時停止モードに入る。つまり、エラーが投げられたら、キャッチャーで実行を再開する。ステップアウト処理はコールスタック巻き戻しの一部として具体的に実装されており、他のステップコマンドの実装方法とは全く異なる。</li></ul><p>コールスタックが巻き戻されないので、コルーチンの降伏は発生しません。</p><p>ステップオーバー／イン状態を実行器で確認する ￤「実行を再開」する の操作を行います。</p><h3 id="ブレイクポイント" tabindex="-1">ブレイクポイント <a class="header-anchor" href="#ブレイクポイント" aria-label="Permalink to &quot;ブレイクポイント&quot;">​</a></h3><p>ブレークポイントは、ヒープレベルのファイル/行リストとして保持されます。バイトコードエグゼキュータが &quot;restart execution &quot;操作をすると、ブレークポイントリストを再チェックし、どのブレークポイントがアクティブであるかを把握します。デバッグコマンドの実行などでブレークポイントの状態が変化した場合、バイトコードエグゼキュータが &quot;restart execution &quot;操作を行うことで、ブレークポイントが正しく再チェックされアクティブになります。</p><p>アクティブなブレークポイントが1つ以上ある場合、チェックモードで実行が再開されます。ブレークポイントがアクティブでない場合（他にチェックモードにする理由がない場合）、通常モードで実行を再開する。これは、現在実行中の関数の外にあるブレークポイントがアクティブな場合に、実行性能を最大化するために重要です。</p><p>アクティブなブレークポイントを把握する上で重要な問題の1つは、内部関数をどのように扱うかです。これについては、以下の別のセクションで取り上げます。</p><p>ブレークポイントはDuktapeによって直接処理され、合理的に効率化されています。もう一つの設計案は、ユーザーコードが独自にブレークポイントを実装できるように、ステップ実行のAPIやプロトコル機構を用意することです。この場合、統合されたブレークポイント機構よりも柔軟性が高くなりますが、その分、速度も遅くなります。</p><p>ファイル/行のペアを使用してブレークポイントを定義することには、多くの設計上の選択肢があります。現在のファイル/ラインのアプローチは直感的ですが、次のことを意味します：</p><ul><li>1行の関数など、1行の途中で改行する方法がない。これは、最小化されたECMAScriptのコードにも影響します。</li><li>同じ場所から作成された複数のECMAScript関数インスタンス（つまり <code>duk_hcompfunc</code> オブジェクト）が存在する可能性があります。ブレークポイントはそれら全てにマッチします。</li></ul><h3 id="ライン遷移" tabindex="-1">ライン遷移 <a class="header-anchor" href="#ライン遷移" aria-label="Permalink to &quot;ライン遷移&quot;">​</a></h3><p>行番号をアクティブなブレークポイントのPCに変換するために、行からPCへの変換プリミティブが必要であるように最初は思えるかもしれない。しかし、このようなアプローチは、以下に述べるいくつかの理由から、実際には機能しない。</p><p>1つの行から複数の命令を生成することができるので、典型的なケースでは同じ行番号の命令が複数存在する。また、ある行番号に対応するオペコードは、フロー制御の構成要素など、（必ずしも直線的、局所的にではなく）コード中に散在させることができます。次のようなことは、まったく可能であり、正常である：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Line</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ----</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">50</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      98</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">51</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      99</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">52</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">53</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">54</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">55</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">56</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      102</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">57</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      103</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">58</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      103</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">59</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      104</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      105</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">61</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span></span></code></pre></div><p>また、ある行番号のエントリポイントになるPCが複数存在する場合があります。これは、例えば、ループ構成で起こります。</p><p>また、一致するバイトコード命令がない行番号にブレークポイントが設定されることもあります。これは、ブレークポイントが空の行に割り当てられている場合に些細なことで起こりますが、生成されたバイトコードの行番号が1つずれている場合など、非自明な場合にも起こります。期待される動作は、ブレークポイント行に遷移したとき、またはブレークポイント行を越えたときにブレークポイントが一致することです。しかし、このブレークポイントルールを使うには、いくつかの困難があります：</p><ul><li>複数の &quot;next lines &quot;や &quot;next opcodes &quot;が存在する可能性がある。switch文の途中の空行にブレークポイントを設けることを考える。</li><li><code>(prev_line&lt;break_line) AND (curr_line &gt;= break_line)</code>をブレークポイントのトリガールールとして使用すると、ほとんどの場合動作しますが、特にブレークポイントがスキップされるが実行されない条件付きコードブロックにある場合、直感的ではないブレークポイントの動作を引き起こします。での議論を参照してください：<a href="https://github.com/svaarala/duktape/issues/263" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/issues/263</a>。(Duktape1.2.xではこのブレークポイントルールを使用していましたが、Duktape1.3.xではルールが変更されました)</li></ul><p>ブレークポイントトリガーの現在のルール（Duktape 1.3.x）は、次のとおりです：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev_line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> break_line) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (curr_line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> break_line)</span></span></code></pre></div><p>つまり、正確なブレークポイント行に遷移したときにブレークポイントが発生するのです。<a href="https://github.com/svaarala/duktape/issues/263" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/issues/263</a>の議論を参照してください。</p><p>PCの値ではなく、行の遷移でブレークポイントを実装することで、ある行でブレークポイントが発生した場合、どのように実装するかという問題も解決されます。/ &quot;ステップオーバー&quot;？ブレークポイント行から離れるとは、現在の行がブレークポイント行と異なる値に変わるまでバイトコード命令を実行する必要があるということです。制御フローが後方へジャンプすることもあるので、必ずしも次の行やそれ以上の行番号になるとは限らないことに注意してください。</p><p>そこで、今現在Duktapeでは、以下のようにブレークポイントを実装しています：</p><ul><li>1つ以上のブレークポイントが有効な場合、バイトコードエグゼキュータはチェック付き実行に入ります。チェックされた実行では、バイトコード割り込みメカニズムがすべてのオペコードの前に呼び出されます。チェック実行は、ブレークポイントが性能を低下させないようにするため、可能な限り避けるようにします。</li><li>割り込み機構は、行の遷移を検出するために、行情報（前の行、現在の行）を追跡します。つまり、Duktapeは実行されたすべてのオペコードに対してpc-to-lineを実行します。これは現在最適化されておらず、毎回pc-to-lineビットストリームを参照することになります。将来の改善方法については、将来の作業を参照してください。</li><li>ブレークポイントやステッピングは、行の遷移が発生したとき、つまり <code>prev_line != curr_line</code> のときにチェックされます。</li></ul><h3 id="内部関数とブレークポイント" tabindex="-1">内部関数とブレークポイント <a class="header-anchor" href="#内部関数とブレークポイント" aria-label="Permalink to &quot;内部関数とブレークポイント&quot;">​</a></h3><p>ブレークポイントは、ソースコード内の最も内側の関数でのみ有効であるべきです。例えば、次のように考えてください：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>現在2行目で実行中で、4行目にブレークポイントが追加されたとします。シングルステップにするとどうなるか？</p><p>素朴な実装では、実行者は4行目のブレークポイントをfoo()起動のために有効だと考え、2行目から6行目への行遷移を検出すると、ブレークポイントがトリガーされます。実行は6行目で停止し、&quot;foo 2 &quot;と表示されます。</p><p>これを避けるために、ブレークポイントは常に、それが現れる最も内側の関数と関連付けられる（だけ）。これは、各関数の行範囲（最小行番号と最大行番号）を追跡することですぐに検出することができます。そして、ある関数FUNCのアクティブなブレークポイントを次のように決定することができる：</p><ul><li>ブレークポイントのファイル名が異なる場合、拒否します。</li><li>ブレークポイントの行番号がFUNC行の範囲外の場合、拒否する。(foo()の場合は1～8、bar()の場合は3～5が行の範囲となります)</li><li>FUNCのすべての内部関数IFUNCをループする： <ul><li>FUNCのIFUNC：ブレークポイントの行番号がIFUNCの中にある場合、拒否する。IFUNCはブレークポイントを捕捉したものと見なす。</li></ul></li><li>FUNCのIFUNC：ブレークポイントの行番号がIFUNCの中にある場合は却下。</li></ul><h3 id="pcと行番号の取り扱い" tabindex="-1">PCと行番号の取り扱い <a class="header-anchor" href="#pcと行番号の取り扱い" aria-label="Permalink to &quot;PCと行番号の取り扱い&quot;">​</a></h3><p>内部帳簿では、<code>duk_activation</code>のPCフィールドは、次に実行される命令を指しています。このPCは、必ずしも報告すべき正しいものではありません。概念的には、前の命令(PC-1)がまだ実行されていることもあれば、PC-1の実行を終えて2つのオペコードの途中にいることもある。</p><p>使用する正しいPCは、文脈によって異なります。例えば、以下のような場合です：</p><ul><li>スタックトレースでは、すべてのコールスタックレベルに対してPC-1が使用されます。コールスタックトップ以下の起動では、PC-1はまだ実行されている命令（コール命令）です。コールスタックトップの場合、PC-1は &quot;offending &quot;命令である。</li><li>デバッガのStatus通知では、PC-1を概念的に完了し、PCを実行しようとしているため、PCが使われる。また、ブレークポイントは、PCのオペコードが実行される前に、PCでトリガーされる。デバッガUIでは、ハイライトされた行が次に実行される行であり、まだ実行されていないことを意味する。</li><li>デバッガのGetCallStack PC-1は、コールスタック・トップ以下のすべてのコールスタック・レベルに対して使用されます：スタック・トレースのように、これらの呼び出し命令はまだ実行されています。ただし、コールスタックトップでは、PCはStatusと一致するように使用され、報告された行は次にどの行が実行されるかを示している。</li></ul><p>参照: <a href="https://github.com/svaarala/duktape/issues/281" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/issues/281</a></p><h3 id="メッセージのネスト-入れ子-を避ける" tabindex="-1">メッセージのネスト（入れ子）を避ける <a class="header-anchor" href="#メッセージのネスト-入れ子-を避ける" aria-label="Permalink to &quot;メッセージのネスト（入れ子）を避ける&quot;">​</a></h3><p>次のシナリオを考えてみましょう：</p><ul><li>仮想のGetLocalVarsAndValuesリクエストを使用して、ローカル変数名と値に対するクライアントリクエストをデバッグします。</li><li>Duktapeはリクエストの処理を開始し、REPマーカーをストリームアウトし、その後に変数名と値をストリームアウトします。</li><li>変数値の一つはゲッターで、リクエストハンドラは単純な読み込みで変数値を取得し、ゲッターを起動させます。</li><li>ゲッターは <code>print()</code> を呼び出し、デバッグクライアントに転送されます。print()\`ハンドラは、印刷データを含む通知メッセージを書きます。</li><li>この通知はGetLocalVarsAndValuesレスポンスの途中で終了し、デバッグストリームを破損させる。</li></ul><p>このようなネストしたデバッグメッセージは、常に避けなければなりません。これを実現するためのいくつかの方法：</p><ul><li>デバッグコマンドが1つの値（値のリストではない）を扱うだけであれば、レスポンスをストリームアウトする前に、値を読み取り、安全な形式に強制します。</li><li>一般的なルールとして、副作用のないデバッグ・コマンドを使用する。</li><li>副作用のある安全でないプリミティブでは、（任意に長い値のリストではなく）1つの値だけを扱うデバッグコマンドを推奨します。このようなプリミティブは、応答を書き出す前に、安全に取得された無制限の値のリストをバッファリングする必要がないため、安全に実装するのが簡単です。</li><li>具体的な例として、GetLocalVarsAndValuesを修正するには、以下の方法が考えられます： a. アクセサーを呼び出さないように変更する。 b. 変数名のリストだけを返すように変更し、ローカル変数の値（GetLocalVar）を取得するプリミティブを別に追加する。このプリミティブはゲッターを呼び出すことができますが、レスポンスのストリームアウトを開始する前に呼び出す必要があります。まず変数名を読み、次にパイプライン化された大きなリクエストのセットですべての変数名の読み込みを発行します。</li></ul><p>この問題は、あちこちのいろいろなものに影響を及ぼします：</p><ul><li>GC が呼び出された場合、マーク・アンド・スウィープ・コードの内部から GC 通知を発することが魅力的かもしれません。GCは値スタックを含むあらゆる操作によって容易に起動されるため、これは非常に安全ではないでしょう。</li></ul><h2 id="デザイン目標" tabindex="-1">デザイン目標 <a class="header-anchor" href="#デザイン目標" aria-label="Permalink to &quot;デザイン目標&quot;">​</a></h2><p>このセクションでは、デバッガ設計の背後にある目標について、いくつかのメモを提供します（これは包括的なリストではありません）。</p><h3 id="カスタムターゲットとの迅速な統合" tabindex="-1">カスタムターゲットとの迅速な統合 <a class="header-anchor" href="#カスタムターゲットとの迅速な統合" aria-label="Permalink to &quot;カスタムターゲットとの迅速な統合&quot;">​</a></h3><p>カスタムターゲットにデバッグサポートを非常に早く、例えば1日で統合できるようにする必要があります。</p><ul><li>これは現在のソリューションで達成できるはずです。ターゲットデバイスとduk_debug.jsの両方にカスタムトランスポートを実装する必要があり、その後、デバッガーのウェブUIを使用してターゲットをデバッグすることができます。</li></ul><h3 id="デバッグソリューションの断片化を最小限に抑える" tabindex="-1">デバッグソリューションの断片化を最小限に抑える <a class="header-anchor" href="#デバッグソリューションの断片化を最小限に抑える" aria-label="Permalink to &quot;デバッグソリューションの断片化を最小限に抑える&quot;">​</a></h3><p>デバッガー・アーキテクチャーは、Duktapeのデバッグ機能の向上がユーザー間で共有されるようにする必要があります。理想的には、異なる環境向けに開発されたデバッグクライアントを混在させることができる。</p><ul><li>これが、デバッグAPIではなく、デバッグプロトコルを設計の基礎とした主な理由である。デバッグAPIを使用すると、すべてのユーザーが独自のデバッグプロトコルを定義する必要があり、デバッグプロトコルとその結果としてのデバッグクライアントの両方が断片化することになります。</li><li>この目標は、どのデバッグクライアントもどのターゲットとも対話できるようにすることで、かなりの程度達成されています。しかし、トランスポート・メカニズムを適応させる必要があるかもしれないので、完全に自動化されているわけではありません。</li></ul><h3 id="輸送の中立性" tabindex="-1">輸送の中立性 <a class="header-anchor" href="#輸送の中立性" aria-label="Permalink to &quot;輸送の中立性&quot;">​</a></h3><p>デバッグプロトコルは、非常に異なる環境や通信回線（Wi-Fi、Bluetooth、シリアルなど）での組み込みをサポートするために、トランスポートニュートラルであるべきです。</p><ul><li>具体的な解決策としては、信頼性の高い（TCPのような）バイトストリームを想定し、ユーザーコードで具体的なトランスポートを提供することです。</li></ul><h3 id="トランスポート帯域" tabindex="-1">トランスポート帯域 <a class="header-anchor" href="#トランスポート帯域" aria-label="Permalink to &quot;トランスポート帯域&quot;">​</a></h3><p>デバッガは、低速のシリアルリンクなど、低速のトランスポートで動作する必要があります。</p><ul><li>これがバイナリプロトコルが使われる理由です：圧縮をせずに合理的にコンパクトにするためです。圧縮は可能な解決策ですが、非常に低いメモリデバイスには好ましくありません（メモリオーバーヘッド）。</li></ul><p>デバッガは高遅延トランスポート（数百ミリ秒）で動作する必要があります。</p><ul><li>パイプラインは、複数のコマンドを送信することができ、ブロックのラウンドトリップ待ち時間を短縮します。</li><li>パイプライン化により、デバッグコマンドを小さな単純な操作から構築することができ、（同期リクエスト/リプライモデルと比較して）追加のレイテンシを最小限に抑えることができます。</li></ul><h3 id="ヒューマンリーダブルプロトコル" tabindex="-1">ヒューマンリーダブルプロトコル <a class="header-anchor" href="#ヒューマンリーダブルプロトコル" aria-label="Permalink to &quot;ヒューマンリーダブルプロトコル&quot;">​</a></h3><p>プロトコルがプレーンテキストなど、人間が読めるものであることは良いことだと思います。</p><ul><li>デバッグプロトコルがバイナリであるため、現時点では実現されていません。</li><li>バイナリプロトコルは、テキストベースのプロトコルをパースするよりもコンパクトで、コードフットプリントが小さいため、現時点では使用されています。このような解析は、GCへの影響やその他の副作用なしに行われる必要があるため、既存のECMAScriptメカニズム（数値解析など）は必ずしもそのまま使用することができないことに注意してください。</li></ul><h3 id="コード・フットプリント" tabindex="-1">コード・フットプリント <a class="header-anchor" href="#コード・フットプリント" aria-label="Permalink to &quot;コード・フットプリント&quot;">​</a></h3><p>デバッガーのサポートは、フットプリントが大きいので、オプションにすべきです。</p><p>非常に低いメモリデバイス（例えば256kBフラッシュ）でもデバッガサポートを有効にすることができるはずです。</p><ul><li>現時点では、デバッガーサポートのための追加コードフットプリントは約15〜20kBです。</li></ul><h3 id="メモリ-ram-フットプリントと最小限のチャーン-乗り換え" tabindex="-1">メモリ（RAM）フットプリントと最小限のチャーン（乗り換え） <a class="header-anchor" href="#メモリ-ram-フットプリントと最小限のチャーン-乗り換え" aria-label="Permalink to &quot;メモリ（RAM）フットプリントと最小限のチャーン（乗り換え）&quot;">​</a></h3><p>デバッガの実装は、デバッグ・コマンド自体が必要とする量の上に、最小限のRAMを消費する必要があります。</p><ul><li>低メモリデバイスの場合、可変アロケーションよりも固定アロケーションが望ましい。</li></ul><p>デバッガ・コマンドは、Duktapeの内部状態を乱すことを避ける必要があります。例えば、デバッグ・コマンドがDuktapeヒープのダンプを要求した場合、そのコマンドはレスポンスのシリアライズ中にヒープに変更を与えないようにしなければなりません。具体的には、次のような意味です：</p><ul><li>GCを引き起こす可能性のあるメモリ割り当てを行うことなく、デバッグメッセージの読み書きが可能である必要があります。これは、特に、値スタックに値をプッシュすることや、文字列をインターリングすることを除外するものです。メモリ確保は、アロケーションコールバックの生の呼び出しを使用して行うことができますが、メモリ確保を完全に避けることができることが望ましいです。</li><li>なお、すべてのデバッグコマンドを副作用なく実装することは必須条件ではありません。例えば、変数の読み出しでは、ゲッターを呼び出したり、副作用のある内部機構を使用したりすることがあります。必要であれば、副作用のないデバッグ・コマンドを書くことが可能であることが目標である。</li></ul><p>インバウンドメッセージの解析やアウトバウンドメッセージの構築のために、大きく可変なサイズのバッファは避けるべきです。これらは、低メモリデバイスでは非常に問題となる。</p><ul><li>この目標は、デバッグプロトコルがストリームトランスポートを使用する重要な理由である。ストリームトランスポートは、例えばヒープ全体を、可変サイズの出力バッファリングなしでシリアライズすることを可能にします。</li><li>この目標は、デバッグプロトコルがJSONなどではなくバイナリである理由の1つでもあります：JSONパーシングは、現在のパーサーを使用した場合、大幅なメモリ消費を引き起こします。デバッグのために別のパーサーを追加するのは無駄なことです。</li></ul><h3 id="パフォーマンス-1" tabindex="-1">パフォーマンス <a class="header-anchor" href="#パフォーマンス-1" aria-label="Permalink to &quot;パフォーマンス&quot;">​</a></h3><p>デバッガが添付されていない（しかしデバッガサポートはコンパイルされている）場合、パフォーマンスは可能な限り正常に近いものであるべきです。</p><p>デバッガが接続されているが、アクティブなブレークポイントがない場合、パフォーマンスは可能な限り正常に近くなるはずです。</p><p>アクティブブレークポイントの性能は重要ではありませんが、遅いターゲットでは、タイミングに敏感なアプリケーションがデバッグ時に正しく動作する可能性があるため、重要です。</p><h2 id="その他のデザインノート" tabindex="-1">その他のデザインノート <a class="header-anchor" href="#その他のデザインノート" aria-label="Permalink to &quot;その他のデザインノート&quot;">​</a></h2><p>雑多な問題や却下された代替案など、いくつかのデザインメモ。</p><h3 id="デバッグapiの代わりにデバッグコマンドを使用する" tabindex="-1">デバッグAPIの代わりにデバッグコマンドを使用する <a class="header-anchor" href="#デバッグapiの代わりにデバッグコマンドを使用する" aria-label="Permalink to &quot;デバッグAPIの代わりにデバッグコマンドを使用する&quot;">​</a></h3><p>デバッグプロトコルの代わりに、Duktapeはユーザーコードが独自にデバッガを実装できるように、APIプリミティブのセットを提供することができます。これにはいくつかの欠点があります：</p><ul><li>Duktapeの内部へ深くアクセスできる新しいパブリックAPIプリミティブがたくさん必要です。このようなAPIは、将来的に大きなメンテナンスの問題となるでしょう。Duktapeの内部が変更された場合、古いAPIの約束を守らなければならないからです。デバッグ・プロトコルは、より効果的に内部の詳細を隠蔽することができます。</li><li>デバッグを必要とするすべてのユーザー・アプリケーションは、独自のデバッグ・プロトコルを実装する必要があります。 デバッガーになります。Duktapeデバッガーの統合は、それぞれ異なるでしょう。</li></ul><h3 id="エンベデッドインタープリタであることの影響" tabindex="-1">エンベデッドインタープリタであることの影響 <a class="header-anchor" href="#エンベデッドインタープリタであることの影響" aria-label="Permalink to &quot;エンベデッドインタープリタであることの影響&quot;">​</a></h3><p>組み込み型ということは、例えばJVMのような標準的な起動がないことを意味します。デバッガは実行中のインスタンスに接続する必要があり、インスタンスの起動はユーザー次第である。また、ソースコードに簡単にアクセスできないこともあります。ソースコードのロード方法はユーザー次第で、ソースコードの一部はCコードから、おそらくプログラム的に与えられています。</p><p>デバッガをいつアタッチするかは、アプリケーション次第です。例えば、起動時にデバッガを付ける（「再起動してデバッグ」モード）とか、実行時にデバッガを付けた時だけ付けるとか。</p><h3 id="パケットベースプロトコル" tabindex="-1">パケットベースプロトコル <a class="header-anchor" href="#パケットベースプロトコル" aria-label="Permalink to &quot;パケットベースプロトコル&quot;">​</a></h3><p>デバッグトランスポートは、区切られたデバッグパケットをベースにすることができます。V8とSpidermonkeyのデバッグプロトコルは、どちらも（JSON）パケットベースです。</p><p>パケットベースのプロトコルでは、インバウンドメッセージは処理するためにメモリに存在する必要があります。同様に、アウトバウンドメッセージは、送信前にフルパケットとして形成されます。これは、デバッグパケットの最大サイズを制限することが困難であるため、低メモリデバイスではうまく機能しません：</p><ul><li>例えば、デバッグパケットに含まれる文字列が1つだけだったとしても（おそらくevalの結果）、その文字列のサイズは大きく変化する可能性がある。デバッグパケットのサイズに上限があると、メモリに収まるような値がデバッグプロトコルで送れないという事態が発生しやすくなります。</li><li>断片化された読み込みを行うことで、この問題を軽減することができます。つまり、デバッグプロトコルは、デバッグクライアントが文字列をチャンクで読み込むことを許可しています。これは文字列のライフサイクルの問題があり、このような断片化プロトコルは、実際には粗雑な方法でストリームトランスポートをエミュレートしています。</li><li>同様のアプローチは、オブジェクト値のシリアライズや、潜在的に他の多くのデバッグコマンドにも必要であり、プロトコル設計の観点からは非常に厄介です。</li></ul><h3 id="リクエスト-レスポンスフレームを使用しないストリームプロトコル" tabindex="-1">リクエスト/レスポンスフレームを使用しないストリームプロトコル <a class="header-anchor" href="#リクエスト-レスポンスフレームを使用しないストリームプロトコル" aria-label="Permalink to &quot;リクエスト/レスポンスフレームを使用しないストリームプロトコル&quot;">​</a></h3><p>デバッグプロトコルは、リクエスト/レスポンスフレームを持たないストリームプロトコルである可能性もあります。これは、どちらかのパーティがロックステップなしでメッセージを開始する可能性がある場合、うまく機能しません。例えば、デバッグクライアントがリクエストを送信し、ターゲットが通知を送信した場合、デバッグクライアントは受信したバイトが応答ではなく、無関係な通知であることをどのように知ることができるでしょうか？</p><p>少なくともレスポンスと他のメッセージを分離するために、何らかのフレーミングが必要である。</p><h3 id="パイプラインと非同期メッセージの比較" tabindex="-1">パイプラインと非同期メッセージの比較 <a class="header-anchor" href="#パイプラインと非同期メッセージの比較" aria-label="Permalink to &quot;パイプラインと非同期メッセージの比較&quot;">​</a></h3><p>現在の設計では、リクエストのパイプライン化を可能にしています。各リクエストは1つの返信（またはエラー）を持ち、リクエストは決して並べ替えられません。このモデルでは、リクエスト/リプライの識別子は必要ありません。</p><p>別の設計としては、各パーティが任意の順序で（非同期で）受信コマンドに対する応答を送信できるようにすることが考えられます。これは、ある操作に時間がかかり、バックグラウンドで処理できる一方で、より緊急性の高い操作をその間に処理できる場合に有効である。</p><p>実際には、特にデバッグターゲットでの実装は困難であり、より多くの状態追跡が必要になる。また、完了順序が保証されないため、（パイプライン化に比べて）複数のリクエストを送信することが難しくなる。</p><h3 id="型にはまらないデバッグメッセージのエンコーディング" tabindex="-1">型にはまらないデバッグメッセージのエンコーディング <a class="header-anchor" href="#型にはまらないデバッグメッセージのエンコーディング" aria-label="Permalink to &quot;型にはまらないデバッグメッセージのエンコーディング&quot;">​</a></h3><p>つまり、デバッグクライアントとターゲットの両方が、メッセージが持つべき正確なデータを知っているため、例えば整数や文字列といった値をタグ付けする必要がないのです。</p><p>これは効率的ですが、互換性のある方法で拡張することは困難です。その代わり、デバッグプロトコルはマイナーチェンジごとにハードバージョンアップが必要になり、デバッグクライアントはすべてのプロトコルの変種をサポートする必要があります。しかし、デバッグクライアントがバージョンを認識する必要があるため、これは必ずしもショーストッパーではありません。</p><h3 id="可変長整数符号化" tabindex="-1">可変長整数符号化 <a class="header-anchor" href="#可変長整数符号化" aria-label="Permalink to &quot;可変長整数符号化&quot;">​</a></h3><p>デバッグ・プロトコルは、大小の整数を大量にやり取りする。拡張UTF-8エンコーディングが最初に使われましたが、これはDuktapeの他の可変長整数エンコーディングと整合性があります。</p><p>しかし、現在のタグ初期バイト(IB)が追加されると、タグバイトを使って小さな整数を符号化し、大きな整数のバイト長を符号化することが非常に自然になった。この表現は、実はCBOR: <a href="https://tools.ietf.org/html/rfc7049" target="_blank" rel="noreferrer">https://tools.ietf.org/html/rfc7049</a>とよく似ています。</p><h3 id="アクセサーとプロキシ-vs-変数の取得・設定" tabindex="-1">アクセサーとプロキシ vs. 変数の取得・設定 <a class="header-anchor" href="#アクセサーとプロキシ-vs-変数の取得・設定" aria-label="Permalink to &quot;アクセサーとプロキシ vs. 変数の取得・設定&quot;">​</a></h3><ul><li>セッターやゲッターをトリガーすることは望ましくないかもしれません。</li><li>Object.getOwnPropertyDescriptor()のような値を返し、必要に応じてデバッグクライアントがゲッターを呼び出すことができるようにするとか？(ヒープウォーキングは現在同様の機能を提供しています。)</li><li>プロキシとターゲットに別々にアクセスする？</li></ul><h2 id="その他のデバッガ実装" tabindex="-1">その他のデバッガ実装 <a class="header-anchor" href="#その他のデバッガ実装" aria-label="Permalink to &quot;その他のデバッガ実装&quot;">​</a></h2><h3 id="概要-4" tabindex="-1">概要 <a class="header-anchor" href="#概要-4" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>V8とSpidermonkeyは、プロトコルの多くがJSONでフォーマットされたパケットベースのデバッグプロトコルを使用しています。これは非常に直感的なアプローチですが、Duktapeでは、JSONを使用することによるメモリ不足を回避し、メモリ内に完全なデバッグメッセージを形成することが問題となる非常に低いメモリデバイスをより良くサポートするために、ストリームベースのバイナリプロトコルを使用しています。</p><h3 id="クローム-v8" tabindex="-1">クローム/V8 <a class="header-anchor" href="#クローム-v8" aria-label="Permalink to &quot;クローム/V8&quot;">​</a></h3><p>Chrome/V8はパケットベースのデバッグプロトコルを採用しており、各パケットはJSONメッセージとなっています：</p><ul><li><a href="https://code.google.com/p/v8-wiki/wiki/DebuggerProtocol" target="_blank" rel="noreferrer">https://code.google.com/p/v8-wiki/wiki/DebuggerProtocol</a></li></ul><p>こちらもご覧ください：</p><ul><li><a href="https://code.google.com/p/chromedevtools/wiki/ChromeDevToolsProtocol" target="_blank" rel="noreferrer">https://code.google.com/p/chromedevtools/wiki/ChromeDevToolsProtocol</a></li><li><a href="https://developer.chrome.com/devtools/docs/javascript-debugging" target="_blank" rel="noreferrer">https://developer.chrome.com/devtools/docs/javascript-debugging</a></li></ul><h3 id="firefox" tabindex="-1">Firefox <a class="header-anchor" href="#firefox" aria-label="Permalink to &quot;Firefox&quot;">​</a></h3><p>Mozillaはパケットベースのデバッグプロトコルを使用しており、パケットはJSONまたはバイナリブロブのいずれかです。ストリームにマッピングすることができます：</p><ul><li><a href="https://wiki.mozilla.org/Remote_Debugging_Protocol_Stream_Transport" target="_blank" rel="noreferrer">https://wiki.mozilla.org/Remote_Debugging_Protocol_Stream_Transport</a></li></ul><p>こちらもご覧ください：</p><ul><li><a href="https://developer.mozilla.org/en/docs/Debugging_JavaScript" target="_blank" rel="noreferrer">https://developer.mozilla.org/en/docs/Debugging_JavaScript</a></li></ul><h3 id="eclipse" tabindex="-1">Eclipse <a class="header-anchor" href="#eclipse" aria-label="Permalink to &quot;Eclipse&quot;">​</a></h3><p>Eclipseデバッガは、Duktapeデバッガプロトコルを使用して実装することができます。そのためのリソースをいくつか紹介します：</p><ul><li><a href="http://www.eclipse.org/articles/Article-Launch-Framework/launch.html" target="_blank" rel="noreferrer">http://www.eclipse.org/articles/Article-Launch-Framework/launch.html</a></li><li><a href="http://www.eclipse.org/articles/Article-Debugger/how-to.html" target="_blank" rel="noreferrer">http://www.eclipse.org/articles/Article-Debugger/how-to.html</a></li></ul><h2 id="既知の問題" tabindex="-1">既知の問題 <a class="header-anchor" href="#既知の問題" aria-label="Permalink to &quot;既知の問題&quot;">​</a></h2><h3 id="valgrind-の未初期化バイトの警告" tabindex="-1">Valgrind の未初期化バイトの警告 <a class="header-anchor" href="#valgrind-の未初期化バイトの警告" aria-label="Permalink to &quot;Valgrind の未初期化バイトの警告&quot;">​</a></h3><p>DumpHeapを行う際に、以下のようになることがあります：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">==17318== Syscall param write(buf) points to uninitialised byte(s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">==17318==    at 0x5466700: __write_nocancel (syscall-template.S:81)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">==17318==    by 0x427ADA: duk_trans_socket_write_cb (duk_trans_socket_unix.c:237)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">==17318==    by 0x403538: duk_debug_write_bytes.isra.11 (duk_debugger.c:379)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">==17318==    by 0x4036AC: duk_debug_write_strbuf (duk_debugger.c:463)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[...]</span></span></code></pre></div><p>アンパックされたduk_tvalを使用している場合、ある値がduk_tvalに書き込まれたとき、duk_tvalの全バイトが必ずしもセットされるとは限りません。これは、Duktapeが未初期化バイトを読み込んだり、使用したりすることは通常ないため、安全上の問題はない。しかし、コンパイルされた関数のデータ領域にある未初期化バイトは、そのままDumpHeapに書き出されるため、上記のようなvalgrindの不満が発生します（害はありません）。</p><h2 id="今後の課題" tabindex="-1">今後の課題 <a class="header-anchor" href="#今後の課題" aria-label="Permalink to &quot;今後の課題&quot;">​</a></h2><h3 id="エラー処理" tabindex="-1">エラー処理 <a class="header-anchor" href="#エラー処理" aria-label="Permalink to &quot;エラー処理&quot;">​</a></h3><p>デバッグコードにエラーハンドリングラッパーを追加する。例えば、メモリ不足になった場合、回復策として自動的にデタッチする？</p><p>現在安全でない動作は、内部エラー（メモリ不足など）や、例えばGetVarによるゲッターエラーが引き金となる場合があります。</p><h3 id="チェックされた実行のための高速なpc-to-line" tabindex="-1">チェックされた実行のための高速なpc-to-line <a class="header-anchor" href="#チェックされた実行のための高速なpc-to-line" aria-label="Permalink to &quot;チェックされた実行のための高速なpc-to-line&quot;">​</a></h3><p>チェック実行中に、行の遷移を正確に追跡できるように、現在のPCの行番号を把握する必要があります。現在、PCから行へのビットストリームは毎回ステートレスで参照されるため、時間がかかります（ただし、チェックされた実行、つまり現在の関数に対してアクティブなブレークポイントがある場合にのみ影響があります）。</p><p>これを高速化する方法はいくつかあります：</p><ul><li>PCからラインへの変換状態をキャッシュする。PCが1つ増えたら、ほとんどの場合、ビットストリームから1行のデルタをデコードすればよく、非常に効率的でデータフォーマットの変更も必要ありません。</li><li>チェックされた実行に入るとき、ルックアップが単純な配列ルックアップとして実行できるように、アンパックされたpc-to-line配列を作成する。</li><li>デバッグが有効な場合は、一般的にプレーン配列としてpc-to-line変換情報を格納します。これは、デバッガが接続されていない場合（ただし、Duktapeデバッガサポートはコンパイルされている）でも、すべての関数に対してメモリフットプリントの影響があるため、この方法はあまり望ましくありません。</li><li>明示的なライン遷移オペコードを出力する。これは、デバッガが接続されていない場合でも、メモリとパフォーマンスに影響を与えるので、このアプローチもあまり好ましくはありません。</li></ul><h3 id="コンパイラの行番号精度を向上" tabindex="-1">コンパイラの行番号精度を向上 <a class="header-anchor" href="#コンパイラの行番号精度を向上" aria-label="Permalink to &quot;コンパイラの行番号精度を向上&quot;">​</a></h3><p>ECMAScriptコンパイラは、出力されるバイトコードに行番号を割り当てますが、その際、必ずしも完璧な仕事をするわけではありません。あるステートメントの行番号が1つずれることがあり（前のステートメントと一致する）、デバッガUIでおかしなことになるケースがいくつかあります。</p><p>根本的な問題は、アクティブなトークンが「前のトークン」スロットと「現在のトークン」スロットにあるとき、コンパイラがバイトコードのオペコードを出力することです。式の解析では通常、アクティブ・トークンは前のトークン・スロットにあり、文の解析（特に初期キーワードの解析）ではアクティブ・トークンは現在のトークン・スロットにあります。これは、正しく修正するためにいくつかの手直しが必要です。</p><h3 id="ソースコード" tabindex="-1">ソースコード <a class="header-anchor" href="#ソースコード" aria-label="Permalink to &quot;ソースコード&quot;">​</a></h3><p>ソースコードの扱いはDuktapeの範囲外であり、実行中の関数の「fileName」プロパティから適切なソースファイルを探し出すことができると考えています。</p><p>将来の選択肢はたくさんあります：</p><ul><li>ターゲットデバイスからダウンロードする（コードが最初に読み込まれた場所と同じ）。</li><li>デバッグモードでコンパイルする際にソースを保存し、メモリへの影響を軽減するために些細な圧縮を使用することができる。</li><li>ターゲット上で計算されたハッシュを使用してソースコードのテキストを識別し、対応するソースをより確実に見つけることができます。</li></ul><h3 id="ソースマップ" tabindex="-1">ソースマップ <a class="header-anchor" href="#ソースマップ" aria-label="Permalink to &quot;ソースマップ&quot;">​</a></h3><p>Javascriptのコードを最小化することはよくあることです。その過程で行番号の情報が失われることが多く、様々な理由でデバッグが困難なコードになります：</p><ul><li>ソースコードの読みやすさが悪い</li><li>ファイル/ラインを対象としたブレークポイントの仕組みが非常に貧弱</li></ul><p>ソースマップは、オリジナルのライン番号情報を記録しています：</p><ul><li><a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/" target="_blank" rel="noreferrer">http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/</a></li></ul><p>もしDuktapeがソースマップをサポートしていれば、コンパイル時にソースマップを考慮し、関数pc-to-lineマッピングで元の未消化のソースコードを参照できるため、よりデバッガーフレンドリーなものとなるでしょう。</p><h3 id="より柔軟な一時停止が可能" tabindex="-1">より柔軟な一時停止が可能 <a class="header-anchor" href="#より柔軟な一時停止が可能" aria-label="Permalink to &quot;より柔軟な一時停止が可能&quot;">​</a></h3><p>一時停止のためのさまざまなトリガーを追加することができます：</p><ul><li>機能入力/終了時のポーズ</li><li>次の発言でポーズ</li><li>歩留まり/再開時のポーズ</li><li>実行タイムアウト時のポーズ</li></ul><h3 id="よりフレキシブルなステッピング" tabindex="-1">よりフレキシブルなステッピング <a class="header-anchor" href="#よりフレキシブルなステッピング" aria-label="Permalink to &quot;よりフレキシブルなステッピング&quot;">​</a></h3><p>追加のステッピングパラメーターを実装することも可能です：</p><ul><li>PCを1台ずつステップアップ</li><li>N個のバイトコード命令に対するステップ</li><li>約Nミリ秒のステップ</li></ul><h3 id="ローカル変数リストで動的に宣言された変数" tabindex="-1">ローカル変数リストで動的に宣言された変数 <a class="header-anchor" href="#ローカル変数リストで動的に宣言された変数" aria-label="Permalink to &quot;ローカル変数リストで動的に宣言された変数&quot;">​</a></h3><p>GetLocalsが返すローカル変数リストには、動的に宣言された変数や、関数全体より小さなスコープを持つ変数は含まれません：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;foo&#39; is included</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;var bar = 321&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;bar&#39; is not included</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // &#39;e&#39; is not included</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは、ローカルに動的変数も含まれるように修正されるべきです。これは特にtry-catchで重要です。</p><p>Evalコマンドは動的変数の読み書きもできるので、現状ではEvalを使うのが回避策となります。例えば、catch句の中で、Eval <code>&quot;e&quot;</code> を使って、キャッチしたエラーを読み込む。</p><h3 id="式に依存するブレークポイント" tabindex="-1">式に依存するブレークポイント <a class="header-anchor" href="#式に依存するブレークポイント" aria-label="Permalink to &quot;式に依存するブレークポイント&quot;">​</a></h3><p>式が真理値として評価されたときに一時停止する。</p><h3 id="表情を見る" tabindex="-1">表情を見る <a class="header-anchor" href="#表情を見る" aria-label="Permalink to &quot;表情を見る&quot;">​</a></h3><p>ウォッチ式は現在、デバッグクライアントでEvalコマンドを使用して実装されています。</p><p>例えば、デバッガーのWeb UIでは、1つの式に対して自動evalが実装されています。この式は、Duktapeが一時停止状態になったときに自動的に評価されます。これは、複数のウォッチ式に対して簡単に拡張することができます。</p><h3 id="内部イベントの通知" tabindex="-1">内部イベントの通知 <a class="header-anchor" href="#内部イベントの通知" aria-label="Permalink to &quot;内部イベントの通知&quot;">​</a></h3><p>など、社内の面白いイベントが発生したら、通知を送る：</p><ul><li>通常のGC</li><li>エマージェンシーGC</li><li>スレッド作成</li><li>スレッド破壊</li><li>実行タイムアウト</li></ul><p>これらは非常に慎重に実装する必要があります。例えば、デバッグコマンド（例えば、&quot;get locals&quot;）に応答している最中にGCが起動した場合、GC通知はマーク＆スイープコードからインラインで送信することはできず、&quot;get locals &quot;応答の途中に表示される可能性があります。その代わりに、イベントはフラグを立てるか、カウンターに基づくか、キューに入れる必要があります。</p><h3 id="新コマンドやコマンドの改良の可能性" tabindex="-1">新コマンドやコマンドの改良の可能性 <a class="header-anchor" href="#新コマンドやコマンドの改良の可能性" aria-label="Permalink to &quot;新コマンドやコマンドの改良の可能性&quot;">​</a></h3><ul><li>より包括的なコールスタックの検査、少なくともスタックトレースが提供するものと同程度のもの</li><li>エラーでレジュームする、つまりインジェクトエラーする</li><li>ヒープ内のスレッドを列挙する</li><li>ヒープ内の全オブジェクトを列挙する</li><li>PutVarの成功/失敗を示すステータス。</li><li>PutVarのエラー処理</li><li>GetVarで副作用（ゲッター呼び出し）を回避する。</li></ul><h3 id="構造化された価値観をダイレクトにサポート" tabindex="-1">構造化された価値観をダイレクトにサポート <a class="header-anchor" href="#構造化された価値観をダイレクトにサポート" aria-label="Permalink to &quot;構造化された価値観をダイレクトにサポート&quot;">​</a></h3><p>現在の <code>duk_tval</code> 値と dvalue の間のマッピングは機能しますが、構造化された型を表現することはできません。例えば、グローバル変数を設定する仮想的なデバッグコマンドが引数 value を dvalue として読み込んだ場合、<code>[1,2,3]</code> のような値をグローバル変数に書き込むことはできません。</p><p>これはもちろん、引数に対して <code>eval()</code> を実行するか、値をJSONとして表現することで解決できます（これは多かれ少なかれ同じことです）。</p><p>別の方法として、構造化された値を直接dvaluesで表現するサポートを追加することで、Cコードがaを実行する際に、dvaluesを使用することができます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_debug_read_tval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thr);</span></span></code></pre></div><p>任意に複雑なオブジェクトの値（おそらく任意のオブジェクトグラフも）をデコードして、値スタックにプッシュすることができます。</p><p>ヒープウォーキングのサポートにより、構造化データがDuktapeのヒープに存在する、または配置できる場合、この問題を緩和することができます。</p><h3 id="ヒープダンプビューア" tabindex="-1">ヒープダンプビューア <a class="header-anchor" href="#ヒープダンプビューア" aria-label="Permalink to &quot;ヒープダンプビューア&quot;">​</a></h3><p>DumpHeapコマンドは、すべてのヒープオブジェクトのスナップショットを提供し、デバッガーのWeb UIはJSONダンプに変換する。ダンプのビューアがあれば、オブジェクト・グラフを走査して、文字列や値を探すのが簡単になるね。</p><h3 id="eclipse-デバッガ" tabindex="-1">Eclipse デバッガ <a class="header-anchor" href="#eclipse-デバッガ" aria-label="Permalink to &quot;Eclipse デバッガ&quot;">​</a></h3><p>Eclipseのデバッガは、組み込み開発用のIDEとして非常に人気があるので、非常に便利です。Visual Studio Codeとの統合はすでにあります。</p><h3 id="アタッチ-デタッチ時のブレークポイント処理" tabindex="-1">アタッチ/デタッチ時のブレークポイント処理 <a class="header-anchor" href="#アタッチ-デタッチ時のブレークポイント処理" aria-label="Permalink to &quot;アタッチ/デタッチ時のブレークポイント処理&quot;">​</a></h3><p>現在、ブレークポイントのリストはアタッチやデタッチではクリアされないので、デタッチした後に再アタッチしても古いブレークポイントが設定されたままになっています。デバッグクライアントは、アタッチ時にすべてのブレークポイントを削除することができますが、アタッチまたはデタッチのどちらかでブレークポイントを削除したほうがすっきりしますよ。</p><h3 id="ファスティックの状態を示す" tabindex="-1">ファスティックの状態を示す <a class="header-anchor" href="#ファスティックの状態を示す" aria-label="Permalink to &quot;ファスティックの状態を示す&quot;">​</a></h3><p>Fastintで動作するコードをデバッグする際、ある値が内部的にFastintとして表現されているのか、完全なIEEE doubleとして表現されているのかを確認することができれば便利です。現在、この情報はプロトコルによって伝達されず、すべてのfastintは他の数値と同じように表示されます。</p><h3 id="バッファオブジェクトのサポート" tabindex="-1">バッファオブジェクトのサポート <a class="header-anchor" href="#バッファオブジェクトのサポート" aria-label="Permalink to &quot;バッファオブジェクトのサポート&quot;">​</a></h3><p>バッファオブジェクトの内容を見やすくする（プレーンバッファのように）。</p><h3 id="トランスポートの状態をチェックするためのコールバックを別に用意" tabindex="-1">トランスポートの状態をチェックするためのコールバックを別に用意 <a class="header-anchor" href="#トランスポートの状態をチェックするためのコールバックを別に用意" aria-label="Permalink to &quot;トランスポートの状態をチェックするためのコールバックを別に用意&quot;">​</a></h3><p>Duktapeが実行状態にあるとき（一時停止していないとき）、Duktapeは呼び出しのみを行います：</p><ul><li>peekコールバックは、読むべきものがあるかどうかを定期的に確認する。今、peekでトランスポートのデタッチ/エラーを示す方法はない。</li><li>書き込みコールバックは、Status通知送信の副次的な効果として、定期的に行われる。これは、実行中の状態で壊れたトランスポートを検出するための、現在の主なメカニズムである。もしStatus notifiesが削除されたら、Duktapeは他の何かがデバッグトランスポートへの書き込みを促さない限り、トランスポートの破損に気づかないだろう。</li></ul><p>どちらかを用意した方がすっきりするかもしれません：</p><ul><li>トランスポートの状態を明示的にチェックするコールバックで、おそらくエラーメッセージを表示することもできるようにする。</li><li>トランスポートが壊れていることを示すために、ユーザーコードが積極的に Duktape を呼び出せるようにします（<code>duk_debugger_detach()</code>を呼ぶ以上のこと）。</li></ul><p>しかし、いくつかのトランスポートでは、実際に書き込みを試みることなく、トランスポートステータス情報を取得することができないかもしれない。これは、例えば、トランスポートの性質や基礎となるプラットフォーム API の制限によって引き起こされるかもしれない。したがって、このようなトランスポートステータスコールバックはオプションで なければならず、このような場合にトランスポートエラーを検出するために、 定期的な書き込み(何もなければkeepalive)を確保することがまだ必要かもしれない。</p><h3 id="errメッセージをプログラム文字列エラーコードで拡張する" tabindex="-1">ERRメッセージをプログラム文字列エラーコードで拡張する <a class="header-anchor" href="#errメッセージをプログラム文字列エラーコードで拡張する" aria-label="Permalink to &quot;ERRメッセージをプログラム文字列エラーコードで拡張する&quot;">​</a></h3><p>現在のエラーメッセージは、以下のような形になっています：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; EOM</span></span></code></pre></div><p>番号空間は、モジュール的に管理するのが厄介で、AppRequestメッセージなどに有用なアプリケーション固有のエラーにはうまく機能しない。エラー形式を拡張する：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string code&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; EOM</span></span></code></pre></div><p>文字列コードは、<code>&quot;NOT_FOUND&quot;</code>のような全角の規約に従うことができる：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERR 3 &quot;NOT_FOUND&quot; &quot;breakpoint not found&quot; EOM</span></span></code></pre></div><p>文字列のエラーコードは、番号順のような矛盾がなく、拡張が容易です。</p><h3 id="ゲッターの起動を回避するためにコールスタックのエントリーを変更する" tabindex="-1">ゲッターの起動を回避するためにコールスタックのエントリーを変更する <a class="header-anchor" href="#ゲッターの起動を回避するためにコールスタックのエントリーを変更する" aria-label="Permalink to &quot;ゲッターの起動を回避するためにコールスタックのエントリーを変更する&quot;">​</a></h3><p>ヒープウォーキングを導入すれば、コールスタック変数のダンプによって、データとアクセッサのプロパティを区別するための必要な情報を提供し、デバッグクライアントがゲッターを呼び出すかどうかを決定できるようになります。</p><p>コールスタック・プリミティブは、GetHeapObjInfoコマンドと一致するフォーマットで変数リストを返すことも可能である。</p><h3 id="getbytecodeをオブジェクト検査に置き換える" tabindex="-1">GetBytecodeをオブジェクト検査に置き換える <a class="header-anchor" href="#getbytecodeをオブジェクト検査に置き換える" aria-label="Permalink to &quot;GetBytecodeをオブジェクト検査に置き換える&quot;">​</a></h3><p>GetBytecodeコマンドは、現在の関数への参照を提供し、オブジェクト検査を使用して、GetBytecode㊤で現在返されているバイトコード・データ、つまりバイトコード、定数などを取得することで削除することができます。</p><h3 id="一時停止状態でのガベージコレクションの動作を改善" tabindex="-1">一時停止状態でのガベージコレクションの動作を改善 <a class="header-anchor" href="#一時停止状態でのガベージコレクションの動作を改善" aria-label="Permalink to &quot;一時停止状態でのガベージコレクションの動作を改善&quot;">​</a></h3><p>現在の動作：一時停止中に発生したゴミ（refzeroや参照ループ内のオブジェクト）は、いずれもヒープに残され、最終的にはマークアンドスイープで回収されます。</p><p>様々な改良が可能です。<a href="https://github.com/svaarala/duktape/pull/617" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/pull/617</a> の議論を参照してください。</p>`,795)]))}const c=i(l,[["render",n]]);export{E as __pageData,c as default};
