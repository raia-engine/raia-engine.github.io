import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.32d25f99.js";const q=JSON.parse('{"title":"RaiaAPIについて","description":"","frontmatter":{},"headers":[],"relativePath":"document/about_raia_api.md","filePath":"document/about_raia_api.md","lastUpdated":1697360545000}'),p={name:"document/about_raia_api.md"},l=o(`<h1 id="raiaapiについて" tabindex="-1">RaiaAPIについて <a class="header-anchor" href="#raiaapiについて" aria-label="Permalink to &quot;RaiaAPIについて&quot;">​</a></h1><h2 id="raiaapiとは" tabindex="-1">RaiaAPIとは <a class="header-anchor" href="#raiaapiとは" aria-label="Permalink to &quot;RaiaAPIとは&quot;">​</a></h2><p>RaiaAPIはRaiaプロジェクトが提供するAPIです。</p><h2 id="raiaapiの特徴" tabindex="-1">RaiaAPIの特徴 <a class="header-anchor" href="#raiaapiの特徴" aria-label="Permalink to &quot;RaiaAPIの特徴&quot;">​</a></h2><p>Raiaを独特なものにする最たる例がRaiaAPIです。RaiaAPIはRaiaの最大の長所であり、同時に最大の欠点でもあります。</p><p>RaiaAPIは機械設計におけるジョイントに例えられるかもしれません。ジョイントは関節のような役割を果たし、機械に柔軟性をもたらす一方で、強度や安全性の低下が懸念されます。同様にRaiaAPIはRaiaに柔軟性をもたらしますが、速度や安全性を低下させる性質を持っています。</p><h3 id="共有ライブラリとして提供される" tabindex="-1">共有ライブラリとして提供される <a class="header-anchor" href="#共有ライブラリとして提供される" aria-label="Permalink to &quot;共有ライブラリとして提供される&quot;">​</a></h3><p>RaiaAPIは共有ライブラリの形式で提供されます。これによりABIに対応したプログラミング言語からRaiaAPIを呼び出すことが可能になります。</p><h3 id="インターフェースが統一されている" tabindex="-1">インターフェースが統一されている <a class="header-anchor" href="#インターフェースが統一されている" aria-label="Permalink to &quot;インターフェースが統一されている&quot;">​</a></h3><p>RaiaAPIは次のCインターフェースで統一されています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func_name</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func_name</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">args</span><span style="color:#24292E;">)</span></span></code></pre></div><p>提供されるAPIはすべて、C文字列を引数として1つだけ受け取り、またC文字列を戻り値として返します。</p><p>ABIに対応した共有ライブラリを作成できるプログラミング言語であれば、同等の関数を作成することができます。</p><p>Go言語の例:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//export goFunc</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func_name</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">C.char) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">C.char</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//export goFunc</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func_name</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">C.char) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">C.char</span></span></code></pre></div><p>インターフェースが統一されていることで、様々なプログラミング言語でRaiaAPIを提供することが容易になっています。</p><h3 id="jsonによる引数と戻り値のやり取り" tabindex="-1">JSONによる引数と戻り値のやり取り <a class="header-anchor" href="#jsonによる引数と戻り値のやり取り" aria-label="Permalink to &quot;JSONによる引数と戻り値のやり取り&quot;">​</a></h3><p>RaiaAPIの引数と戻り値はJSON文字列を介してやり取りされます。</p><p>Go言語で文字列を出力する関数を提供する例:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//export puts</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">puts</span><span style="color:#E1E4E8;">(args </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">C.char) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">C.char {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cstr_to_json</span><span style="color:#E1E4E8;">(args)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(parsed[</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//export puts</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">puts</span><span style="color:#24292E;">(args </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">C.char) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">C.char {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> parsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cstr_to_json</span><span style="color:#24292E;">(args)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(parsed[</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>受け取ったC文字列をGoで扱えるJSONにパースし、そこからメッセージを読み取って出力しています。</p><p>値を返す場合は値をJSON文字列にシリアライズしてから返します。</p><p>このような仕様は一定の手間とやり取りにボトルネックを発生させる反面、JSONを扱えるプログラミング言語であれば、それぞれの言語の違いを吸収して一様にAPIを扱えるようになります。</p><h2 id="jsonによる引数" tabindex="-1">JSONによる引数 <a class="header-anchor" href="#jsonによる引数" aria-label="Permalink to &quot;JSONによる引数&quot;">​</a></h2><h3 id="標準" tabindex="-1">標準 <a class="header-anchor" href="#標準" aria-label="Permalink to &quot;標準&quot;">​</a></h3><p><code>{&quot;引数名&quot;: 値, ...}</code> の形。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;param1&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;param2&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;param3&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;param1&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;param2&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;param3&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>戻り値。多くの言語では戻り値の名前を必要としないが、RaiAPIでは指定する。<code>result</code> といった戻り値そのものを表す名前でもよいが、<code>is_exist</code> のような戻り値が何の値であるかを端的に表す名前の方が望ましい。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;ret1&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;ret2&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;bye&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;ret3&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;ret1&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;ret2&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;bye&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;ret3&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="拡張記法-案" tabindex="-1">拡張記法（案） <a class="header-anchor" href="#拡張記法-案" aria-label="Permalink to &quot;拡張記法（案）&quot;">​</a></h3><p>配列による省略形。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>頭文字が <code>@</code> の場合は拡張記法。その記号+単語が予約されていることを示す。</p><ul><li>引数: <code>@arguments</code>, <code>@args</code>, <code>@parameters</code>, <code>@params</code></li><li>戻り値: <code>@return</code>, <code>@returns</code>, <code>@results</code>, <code>@ret</code> , <code>@rets</code>,</li><li>型: <code>@type</code>, <code>@types</code></li><li>値: <code>@value</code>, <code>@val</code></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;@args&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;p1&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">&quot;@type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Number&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;@value&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;p2&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">&quot;@type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Number&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;@value&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;@rets&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;p1&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">&quot;@type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;boolean&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;@value&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;@args&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;p1&quot;</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">&quot;@type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Number&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;@value&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;p2&quot;</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">&quot;@type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Number&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;@value&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;@rets&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;p1&quot;</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">&quot;@type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;boolean&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;@value&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;@args&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">		{ </span><span style="color:#79B8FF;">&quot;@type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;@val&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// option {@name&quot;: &quot;p1&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">	],</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;@rets&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">		{ </span><span style="color:#79B8FF;">&quot;@type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;boolean&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;@val&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// option {&quot;@name&quot;: &quot;res1&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">	],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;@args&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">		{ </span><span style="color:#005CC5;">&quot;@type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;@val&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// option {@name&quot;: &quot;p1&quot;}</span></span>
<span class="line"><span style="color:#24292E;">	],</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;@rets&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">		{ </span><span style="color:#005CC5;">&quot;@type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;boolean&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;@val&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// option {&quot;@name&quot;: &quot;res1&quot;}</span></span>
<span class="line"><span style="color:#24292E;">	],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="キーワード一覧" tabindex="-1">キーワード一覧 <a class="header-anchor" href="#キーワード一覧" aria-label="Permalink to &quot;キーワード一覧&quot;">​</a></h3>`,37),t=[l];function e(c,r,E,y,i,u){return a(),n("div",null,t)}const F=s(p,[["render",e]]);export{q as __pageData,F as default};
