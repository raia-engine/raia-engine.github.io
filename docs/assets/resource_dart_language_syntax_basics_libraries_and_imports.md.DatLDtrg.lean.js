import{_ as i,c as a,a2 as t,o as l}from"./chunks/framework.DzmM640o.js";const c=JSON.parse('{"title":"ライブラリとインポート","description":"","frontmatter":{},"headers":[],"relativePath":"resource/dart/language/syntax_basics/libraries_and_imports.md","filePath":"resource/dart/language/syntax_basics/libraries_and_imports.md","lastUpdated":1732376957000}'),e={name:"resource/dart/language/syntax_basics/libraries_and_imports.md"};function n(p,s,h,r,k,d){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="ライブラリとインポート" tabindex="-1">ライブラリとインポート <a class="header-anchor" href="#ライブラリとインポート" aria-label="Permalink to &quot;ライブラリとインポート&quot;">​</a></h1><p>importディレクティブとlibraryディレクティブは、モジュール化された共有可能なコードベースを作成するのに役立ちます。ライブラリはAPIを提供するだけでなく、プライバシーの単位でもあります: アンダースコア(_)で始まる識別子は、ライブラリ内部でのみ見ることができます。たとえ library ディレクティブを使用していなくても、すべての Dart ファイル（とそのパーツ）はライブラリです。</p><p>ライブラリはパッケージを使って配布できる。</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>Dartがpublicやprivateのようなアクセス修飾キーワードの代わりにアンダースコアを使用する理由を知りたい場合は、SDK issue 33383を参照してください。</p></div><h2 id="ライブラリの利用" tabindex="-1">ライブラリの利用 <a class="header-anchor" href="#ライブラリの利用" aria-label="Permalink to &quot;ライブラリの利用&quot;">​</a></h2><p>あるライブラリーの名前空間を、別のライブラリーのスコープでどのように使うかを指定するには、importを使う。</p><p>例えば、DartのWebアプリは一般的にdart:htmlライブラリを使用し、次のようにインポートすることができます：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dart:html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>インポートに必要な唯一の引数は、ライブラリを指定するURIです。組み込みライブラリの場合、URIは特別なdart:スキームを持ちます。その他のライブラリについては、ファイルシステムのパスまたは package: スキームを使用できます。package:スキームは、pubツールなどのパッケージマネージャが提供するライブラリを指定します。例えば</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:test/test.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>URIはuniform resource identifierの略。URL（ユニフォーム・リソース・ロケータ）は一般的なURIの一種です。</p></div><h2 id="ライブラリ接頭辞の指定" tabindex="-1">ライブラリ接頭辞の指定 <a class="header-anchor" href="#ライブラリ接頭辞の指定" aria-label="Permalink to &quot;ライブラリ接頭辞の指定&quot;">​</a></h2><p>競合する識別子を持つ2つのライブラリをインポートする場合、一方または両方のライブラリに接頭辞を指定することができます。例えば、library1とlibrary2の両方にElementクラスがある場合、次のようなコードになります：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib1/lib1.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib2/lib2.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uses Element from lib1.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uses Element from lib2.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="ライブラリの一部だけをインポートする" tabindex="-1">ライブラリの一部だけをインポートする <a class="header-anchor" href="#ライブラリの一部だけをインポートする" aria-label="Permalink to &quot;ライブラリの一部だけをインポートする&quot;">​</a></h2><p>ライブラリの一部だけを使用したい場合は、選択的にライブラリをインポートすることができます。例えば</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo のみインポートする。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib1/lib1.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo を除くすべての名前をインポートする。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib2/lib2.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo;</span></span></code></pre></div><h2 id="ライブラリの遅延ロード" tabindex="-1">ライブラリの遅延ロード <a class="header-anchor" href="#ライブラリの遅延ロード" aria-label="Permalink to &quot;ライブラリの遅延ロード&quot;">​</a></h2><p>遅延ロード(lazy loading)は、ライブラリが必要な時に、ウェブアプリがオンデマンドでライブラリをロードすることを可能にします。ここでは、遅延ロードを使用するいくつかのケースを紹介します：</p><ul><li>ウェブアプリの初期起動時間を短縮する。</li><li>A/Bテストの実施-例えばアルゴリズムの代替実装を試す。</li><li>オプションの画面やダイアログなど、使用頻度の低い機能をロードする。</li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>dart compile jsだけが遅延ロードをサポートしている。FlutterとDart VMは遅延ロードをサポートしていない。詳しくは issue #33118 と issue #27776 を参照してください。</p></div><p>ライブラリを遅延ロードするには、まず deferred as を使ってライブラリをインポートしなければならない。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:greetings/hello.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello;</span></span></code></pre></div><p>ライブラリーが必要になったら、ライブラリーの識別子を使ってloadLibrary()を呼び出す。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadLibrary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hello.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>先のコードでは、awaitキーワードはライブラリがロードされるまで実行を一時停止する。asyncとawaitの詳細については、asynchrony supportを参照してください。</p><p>1つのライブラリに対してloadLibrary()を複数回起動しても問題はない。ライブラリがロードされるのは1回だけである。</p><p>遅延ローディングを使用する際には、以下の点に注意してください：</p><ul><li>遅延ライブラリの定数は、インポートファイルの定数ではありません。これらの定数は、遅延ライブラリがロードされるまで存在しないことを覚えておいてください。</li><li>遅延ライブラリの型をインポートファイルで使用することはできません。代わりに、遅延ライブラリとインポートファイルの両方によってインポートされるライブラリにインターフェイス型を移動することを検討してください。</li><li>Dartは、deferredを名前空間として使用して定義した名前空間に、暗黙的にloadLibrary()を挿入します。loadLibrary() 関数は Future を返します。</li></ul><h2 id="ライブラリ指令" tabindex="-1">ライブラリ指令 <a class="header-anchor" href="#ライブラリ指令" aria-label="Permalink to &quot;ライブラリ指令&quot;">​</a></h2><p>ライブラリレベルのdocコメントやメタデータ注釈を指定するには、ファイルの冒頭でライブラリ宣言に添付します。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// 本当に素晴らしいテストライブラリだ。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@TestOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;browser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="ライブラリの実装" tabindex="-1">ライブラリの実装 <a class="header-anchor" href="#ライブラリの実装" aria-label="Permalink to &quot;ライブラリの実装&quot;">​</a></h2><p>パッケージの実装方法については、「パッケージの作成」を参照してください：</p><ul><li>ライブラリーのソースコードを整理する方法</li><li>exportディレクティブの使い方</li><li>パート指示文を使うとき</li><li>複数のプラットフォームをサポートするライブラリを実装するために、条件付きインポートおよびエクスポートを使用する方法。</li></ul>`,35)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
