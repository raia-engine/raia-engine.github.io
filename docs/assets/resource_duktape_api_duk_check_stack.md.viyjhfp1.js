import{_ as a,c as i,a2 as t,o as e}from"./chunks/framework.DzmM640o.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/api/duk_check_stack.md","filePath":"resource/duktape/api/duk_check_stack.md","lastUpdated":1732350347000}'),n={name:"resource/duktape/api/duk_check_stack.md"};function k(h,s,p,l,r,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h2 id="duk-check-stack" tabindex="-1">duk_check_stack() <a class="header-anchor" href="#duk-check-stack" aria-label="Permalink to &quot;duk_check_stack()&quot;">​</a></h2><p>1.0.0 stack</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_bool_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_check_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> extra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>(バリュースタックに影響なし。)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>バリュースタックに、呼び出し元が使用するために、現在のスタックの先頭から相対的に、少なくとも余分な予約（割り当て）要素があることを確認します。成功すれば1を、そうでなければ0を返す。呼び出しが成功した場合、呼び出し元は、バリュースタック関連のエラーなしに、追加の要素をバリュースタックにプッシュできることが保証される（メモリ不足などの他のエラーはまだ発生する可能性がある）。呼び出し元は、余分な値をプッシュできることに依存してはならない（MUST NOT）。</p><p>Duktape/C関数に入る時、そして呼び出しの外では、バリュースタックの呼び出し引数に加え、呼び出し側のために（DUK_API_ENTRY_STACK要素の）自動的な予備が確保されています。より多くのバリュースタックスペースが必要な場合、呼び出し側は関数の最初（例えば、必要な要素数が既知であるか、引数に基づいて計算できる場合）または動的（例えば、ループ内）に明示的に多くのスペースを予約しなければなりません。現在割り当てられているバリュースタックを越えて値をプッシュしようとするとエラーになることに注意してください．これは，内部実装を簡略化するためである．</p><p>Duktapeは、ユーザー予約要素に加えて、全てのAPIコールが更なる割り当てをせずに動作するのに十分なバリュースタック空間を確保するために、自動的に内部バリュースタック予備を保持します。また、メモリ再割り当ての動作を最小限に抑えるため、バリュースタックはある程度大きなステップで拡張されます。その結果、呼び出し元が指定した余分な値を超えて利用可能なバリュースタック要素の内部数は、かなり変化します。呼び出し元はこれを考慮する必要はなく、利用可能な追加要素に依存するべきでは決してない。</p><p>一般的なルールとして、より多くのスタックスペースを確保するために、この関数の代わりに duk_require_stack() が使用されるべきです。バリュースタックを拡張できない場合、エラーを投げて巻き戻す以外に、有用な回復方法はほとんどありません。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nargs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_get_top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* number or arguments */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* reserve space for one temporary for each input argument */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_check_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, nargs)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* return &#39;undefined&#39; if cannot allocate space */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;failed to reserve enough stack space</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_require_stack</p>`,15)]))}const u=a(n,[["render",k]]);export{o as __pageData,u as default};
