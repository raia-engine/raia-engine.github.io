import{_ as e,c as a,a2 as i,o as r}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/guide/versioning.md","filePath":"resource/duktape/guide/versioning.md","lastUpdated":null}'),l={name:"resource/duktape/guide/versioning.md"};function d(o,t,p,n,u,s){return r(),a("div",null,t[0]||(t[0]=[i('<h2 id="versioning" tabindex="-1">バージョニング <a class="header-anchor" href="#versioning" aria-label="Permalink to &quot;バージョニング {#versioning}&quot;">​</a></h2><h3 id="セマンティック・バージョニング" tabindex="-1">セマンティック・バージョニング <a class="header-anchor" href="#セマンティック・バージョニング" aria-label="Permalink to &quot;セマンティック・バージョニング&quot;">​</a></h3><p>Duktapeは、公式リリースの際にセマンティック・バージョニングを採用しています。</p><ul><li>APIと互換性のない変更が行われた場合は、メジャー・バージョンに変更します。</li><li>マイナー・バージョンの変更は、後方互換性のある機能的な変更が行われたときに行われます。</li><li>後方互換性のあるバグフィックスが行われた場合は、パッチバージョンに変更されます。</li></ul><p>このルールが適用される「公開API」には、以下のものが含まれます。</p><ul><li>duktape.orgで文書化されているDuktape APIコール。</li><li>Duktapeオブジェクトと他のECMAScript拡張を含む、ECMAScriptコードから見えるグローバル環境（duktape.orgで文書化されているもの）。</li></ul><p>以下のものは、「公開API」のバージョン保証の対象外です。</p><ul><li>experimentalとタグ付けされたDuktape APIコール、およびexperimentalとして文書化されたその他の機能。</li><li>APIマクロによる内部コール。マクロとして実装されたAPIコールはパブリックAPIの一部ですが、マクロが行う内部コールは、たとえそのシンボルの可視性がパブリックであったとしても、パブリックAPIには含まれません。</li><li>APIコールを関数コールからマクロに変更すること(またはその逆)。これらは互換性のある変更とみなされます (ただし、パッチリリースでは行われません)。</li><li>最新のECMAScriptの仕様に合わせる。Duktapeは、最新のECMAScript仕様（現在はES2016）を追跡しています。最新の仕様に合わせるために必要な後方互換性のない変更は、マイナー・バージョンでも行われることがあります（ただし、バグを修正する必要がある場合を除き、パッチ・バージョンでは行われません）。通常、このような変更は、例えば引数の強制やプロパティの継承の変更など、比較的小さなものです。</li><li>マイナーバージョンでも変更される可能性があると明示的に指摘されている特定の動作、例えば</li><li>バッファオブジェクトのバッキングバッファが、バッファオブジェクトの見かけのサイズより小さい場合の動作。メモリセーフな動作は保証されますが、それ以外の動作はバージョンによって異なる可能性があります。</li><li>Duktapeのコンフィグオプション。互換性のない設定オプションの変更は、パッチリリースでは行われませんが、マイナーリリースでは行われる可能性があります。目標は、サポートされなくなった機能オプションが使われたときに（可能であれば）コンパイル・エラーを発生させ、誤った仮定を修正できるようにすることです。</li><li>Duktape と共に配布される Extras (extras/ ディレクトリ)。</li></ul><p>パッチ版がリリースされた場合、以下のことが保証されます。</p><ul><li>APIバイナリ互換性の維持：定数値の変更、関数の型付けの変更、APIコール関数/マクロのステータスの変更はありません。</li><li>バイトコードダンプ・ロードの形式は変更しないので、パッチバージョンのみが異なる旧バージョンからダンプしたバイトコードをロードすることができます。</li><li>ECMAScriptのセマンティックスの修正は、バグフィックスに必要な場合を除き、含まれません。</li><li>設定オプションが互換性のない形で変更されることはありません。</li></ul><p>Duktape リポジトリから作成された開発版ビルドは、公式リリースではなく、厳密なセマンティックバージョン管理には従いません。</p><h3 id="実験的な機能" tabindex="-1">実験的な機能 <a class="header-anchor" href="#実験的な機能" aria-label="Permalink to &quot;実験的な機能&quot;">​</a></h3><p>いくつかの新しい機能やAPIコールは実験的とマークされています。これは、マイナーリリースであっても互換性のない方法で変更される可能性があることを意味します。</p><p>例えば、有用ではあるが不完全であったり、最適な設計が明らかでないため、設計にコミットする前にフィードバックを収集することが有効であるなどの理由で、機能は実験的とマークされることがあります。通常、ある機能は1つのマイナーリリースで実験的なものとなり、その後、必要な変更を経て、完全にサポートされる機能となります。</p><h3 id="バージョンの命名規則" tabindex="-1">バージョンの命名規則 <a class="header-anchor" href="#バージョンの命名規則" aria-label="Permalink to &quot;バージョンの命名規則&quot;">​</a></h3><p>リリースは、(メジャー).(マイナー).(パッチ)の形式を使用します、例えば、1.0.3です。</p><h3 id="duk-versionとduktape-versionについて" tabindex="-1">DUK_VERSIONとDuktape.versionについて <a class="header-anchor" href="#duk-versionとduktape-versionについて" aria-label="Permalink to &quot;DUK_VERSIONとDuktape.versionについて&quot;">​</a></h3><p>DUK_VERSIONとDuktape.versionは、次のように計算された1つの番号を使ってバージョンを識別します。(major * 10000 + minor * 100 + patch) のように計算された1つの番号を使用し、Duktape リポジトリから作られた開発版ビルド（公式リリースではない）については1つ減算されます。</p><p>開発版ビルドの制限に注意してください。</p><ul><li>例えば、1.3.0リリース以前のmasterからのビルドは、すべて10299として識別されます。</li><li>パッチリリース用の開発版ビルドは、以前のパッチリリースと区別されません: 例えば、1.3.2 より後 1.3.3 より前の開発版ビルドは 10302 と識別されます。</li></ul><p>開発版ビルドは実運用に使うべきではありませんが、現在の DUK_VERSION と Duktape.version 番号は、バージョンを比較するのに便利な近似値を提供します：開発版ビルドは、実際のリリースより小さく、以前のリリースより大きい（または同じ）比較をします。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><p>以下の表は、バージョンの昇順にいくつかの例を示しています。</p><table tabindex="0"><thead><tr><th>Version</th><th>DUK_VERSION &amp; Duktape.version</th><th>Notes</th></tr></thead><tbody><tr><td>0.12.0</td><td>1200</td><td></td></tr><tr><td>1.0.0</td><td>10000</td><td></td></tr><tr><td>1.2.99</td><td>10299</td><td>Development build before 1.3 release.</td></tr><tr><td>1.3.0</td><td>10300</td><td></td></tr><tr><td>1.3.2</td><td>10302</td><td></td></tr><tr><td>2.0.0</td><td>20000</td><td></td></tr></tbody></table><h3 id="安定版のメンテナンスについて" tabindex="-1">安定版のメンテナンスについて <a class="header-anchor" href="#安定版のメンテナンスについて" aria-label="Permalink to &quot;安定版のメンテナンスについて&quot;">​</a></h3><p>長期的なメンテナンス方針はまだありません: 安定版には、少なくとも次の安定版がリリースされ、それに移行する時間ができるまでは、バグフィックス (パッチリリース) が行われます。</p><h3 id="互換性のない変更" tabindex="-1">互換性のない変更 <a class="header-anchor" href="#互換性のない変更" aria-label="Permalink to &quot;互換性のない変更&quot;">​</a></h3><p>互換性のない変更の一般的な目標は、古くてサポートされていない機能に依存するアプリケーションのビルドに失敗することです。黙って壊れるよりも、ビルドに失敗する方が望ましいのです。これは、たとえば次のようなことを意味します。</p><ul><li>APIコールのセマンティクスが変更された場合、古いAPIコールは削除され（使用するとビルド失敗の原因になる）、新しいものが追加される。</li><li>古い機能オプションのサポートが削除された場合、それを使おうとするとビルド失敗の原因となる。</li></ul><p>これは厳密なルールではなく、すべてのケースで実現できるわけではありません。</p>',30)]))}const k=e(l,[["render",d]]);export{c as __pageData,k as default};
