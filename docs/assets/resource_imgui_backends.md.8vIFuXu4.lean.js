import{_ as e,c as r,a2 as i,o as a}from"./chunks/framework.DPuwY6B9.js";const h=JSON.parse('{"title":"Dear ImGui: バックエンド","description":"","frontmatter":{},"headers":[],"relativePath":"resource/imgui/backends.md","filePath":"resource/imgui/backends.md","lastUpdated":null}'),l={name:"resource/imgui/backends.md"};function d(o,t,n,p,c,m){return a(),r("div",null,t[0]||(t[0]=[i('<h1 id="dear-imgui-バックエンド" tabindex="-1">Dear ImGui: バックエンド <a class="header-anchor" href="#dear-imgui-バックエンド" aria-label="Permalink to &quot;Dear ImGui: バックエンド&quot;">​</a></h1><h2 id="バックエンドの統合" tabindex="-1">バックエンドの統合 <a class="header-anchor" href="#バックエンドの統合" aria-label="Permalink to &quot;バックエンドの統合&quot;">​</a></h2><p><strong><a href="https://github.com/ocornut/imgui/wiki/Getting-Started" target="_blank" rel="noreferrer">Getting Started</a> のWikiガイド</strong>に、既存のアプリケーションにDear ImGuiを統合する例が記載されています。</p><p>また、<a href="https://github.com/ocornut/imgui/blob/master/docs/EXAMPLES.md" target="_blank" rel="noreferrer">EXAMPLES.MD</a> のドキュメントも参考になるでしょう。</p><h2 id="バックエンドとは" tabindex="-1">バックエンドとは？ <a class="header-anchor" href="#バックエンドとは" aria-label="Permalink to &quot;バックエンドとは？&quot;">​</a></h2><p>Dear ImGuiは非常に移植性が高く、基本的には次のような要素だけで実行およびレンダリングが可能です。</p><ul><li>必須: マウスとキーボードの入力を提供する（<code>ImGuiIO</code>構造体に入力を渡す）。</li><li>必須: フォントアトラステクスチャをグラフィックメモリにアップロードする。</li><li>必須: クリッピング矩形を使用して、インデックス付きのテクスチャ付き三角形をレンダリングする。</li></ul><p>追加の機能はオプションで、各バックエンドは可能な限り多くの機能をサポートしようとしています。</p><ul><li>オプション: カスタムテクスチャのバインディングサポート</li><li>オプション: クリップボードのサポート</li><li>オプション: ゲームパッドのサポート</li><li>オプション: マウスカーソルの形状のサポート</li><li>オプション: IME（インプットメソッドエディタ）のサポート</li><li>オプション: マルチビューポートのサポート など</li></ul><p>このように、バックエンドはDear ImGuiを移植しやすくするための機能を提供しています。標準的なバックエンドを使用することで、マルチビューポートサポートのように自前で実装するのが難しい機能も含め、さまざまな機能を簡単に利用できるようになります。</p><p>Dear ImGuiのコアライブラリ（ルートフォルダ内のファイル）と、このセクションで説明しているバックエンド（backends/フォルダ内のファイル）の違いを理解することは重要です。</p><ul><li>一部の問題は特定のバックエンドやプラットフォームに限定されて発生する可能性があります。</li><li>基本的にはどのプラットフォームや3DグラフィックスAPIでもバックエンドを作成できるようになっています。たとえば、ソフトウェアレンダリングを使用したり、別のマシンでリモートレンダリングを行ったりすることも可能です。</li></ul><h2 id="標準的なバックエンド" tabindex="-1">標準的なバックエンド <a class="header-anchor" href="#標準的なバックエンド" aria-label="Permalink to &quot;標準的なバックエンド&quot;">​</a></h2><p><strong><a href="https://github.com/ocornut/imgui/blob/master/backends" target="_blank" rel="noreferrer">backends/</a> フォルダには、人気のあるプラットフォームやグラフィックスAPI用のバックエンドが含まれており、これを使用するとDear ImGuiをアプリケーションやエンジンに簡単に統合できます。</strong> 各バックエンドは通常、imgui_impl_XXXX.cppとimgui_impl_XXXX.hという2つのファイルで構成されています。</p><ul><li><p>「プラットフォーム」バックエンドは、マウスやキーボード、ゲームパッドの入力、カーソルの形状、タイミング、ウィンドウ管理を担当します。例:</p><ul><li>Windows (<a href="https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_win32.cpp" target="_blank" rel="noreferrer">imgui_impl_win32.cpp</a>)</li><li>GLFW (<a href="https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_glfw.cpp" target="_blank" rel="noreferrer">imgui_impl_glfw.cpp</a>)</li><li>SDL2 (<a href="https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_sdl2.cpp" target="_blank" rel="noreferrer">imgui_impl_sdl2.cpp</a>)など。</li></ul></li><li><p>「レンダラー」バックエンドは、アトラステクスチャの生成やImGuiの描画データのレンダリングを担当します。例:</p><ul><li>DirectX11 (<a href="https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_dx11.cpp" target="_blank" rel="noreferrer">imgui_impl_dx11.cpp</a>)</li><li>OpenGL/WebGL (<a href="https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_opengl3.cpp" target="_blank" rel="noreferrer">imgui_impl_opengl3.cpp</a>)</li><li>Vulkan (<a href="https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_vulkan.cpp" target="_blank" rel="noreferrer">imgui_impl_vulkan.cpp</a>)など。</li></ul></li><li><p>一部の高レベルなフレームワークでは、通常1つのバックエンドが「プラットフォーム」と「レンダラー」の両方を担当します。例:</p><ul><li>Allegro 5 (<a href="https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_allegro5.cpp" target="_blank" rel="noreferrer">imgui_impl_allegro5.cpp</a>)</li></ul></li></ul><h1 id="バックエンドの一覧" tabindex="-1">バックエンドの一覧 <a class="header-anchor" href="#バックエンドの一覧" aria-label="Permalink to &quot;バックエンドの一覧&quot;">​</a></h1><p><a href="https://github.com/ocornut/imgui/blob/master/backends" target="_blank" rel="noreferrer">backends/</a> フォルダ内にあるバックエンドの一覧です。</p><h3 id="プラットフォームバックエンド一覧" tabindex="-1">プラットフォームバックエンド一覧 <a class="header-anchor" href="#プラットフォームバックエンド一覧" aria-label="Permalink to &quot;プラットフォームバックエンド一覧&quot;">​</a></h3><table tabindex="0"><thead><tr><th>ファイル名</th><th>説明</th></tr></thead><tbody><tr><td><code>imgui_impl_android.cpp</code></td><td>Android ネイティブアプリAPI</td></tr><tr><td><code>imgui_impl_glfw.cpp</code></td><td>GLFW (Windows, macOS, Linuxなど) <a href="http://www.glfw.org/" target="_blank" rel="noreferrer">GLFW公式サイト</a></td></tr><tr><td><code>imgui_impl_osx.mm</code></td><td>macOSネイティブAPI (GLFWやSDLに比べて機能が少ない)</td></tr><tr><td><code>imgui_impl_sdl2.cpp</code></td><td>SDL2 (Windows, macOS, Linux, iOS, Android) <a href="https://www.libsdl.org" target="_blank" rel="noreferrer">SDL公式サイト</a></td></tr><tr><td><code>imgui_impl_sdl3.cpp</code></td><td>SDL3 (Windows, macOS, Linux, iOS, Android) <a href="https://www.libsdl.org" target="_blank" rel="noreferrer">SDL公式サイト</a> （SDL3の正式リリースまでは試験的に提供）</td></tr><tr><td><code>imgui_impl_win32.cpp</code></td><td>Win32 ネイティブAPI (Windows)</td></tr><tr><td><code>imgui_impl_glut.cpp</code></td><td>GLUT/FreeGLUT (非常に古いソフトウェアで、推奨されません)</td></tr></tbody></table><h3 id="レンダラーバックエンド一覧" tabindex="-1">レンダラーバックエンド一覧 <a class="header-anchor" href="#レンダラーバックエンド一覧" aria-label="Permalink to &quot;レンダラーバックエンド一覧&quot;">​</a></h3><table tabindex="0"><thead><tr><th>ファイル名</th><th>説明</th></tr></thead><tbody><tr><td><code>imgui_impl_dx9.cpp</code></td><td>DirectX9</td></tr><tr><td><code>imgui_impl_dx10.cpp</code></td><td>DirectX10</td></tr><tr><td><code>imgui_impl_dx11.cpp</code></td><td>DirectX11</td></tr><tr><td><code>imgui_impl_dx12.cpp</code></td><td>DirectX12</td></tr><tr><td><code>imgui_impl_metal.mm</code></td><td>Metal (ObjCを使用)</td></tr><tr><td><code>imgui_impl_opengl2.cpp</code></td><td>OpenGL 2（古い固定機能パイプライン、最新のOpenGLコンテキストでは非推奨）</td></tr><tr><td><code>imgui_impl_opengl3.cpp</code></td><td>OpenGL 3/4、OpenGL ES 2、OpenGL ES 3（最新のプログラム可能なパイプライン）</td></tr><tr><td><code>imgui_impl_sdlrenderer2.cpp</code></td><td>SDL_Renderer (SDL2のオプションコンポーネント、SDL 2.0.18以降で利用可能)</td></tr><tr><td><code>imgui_impl_sdlrenderer3.cpp</code></td><td>SDL_Renderer (SDL3のオプションコンポーネント、SDL 3.0.0以降で利用可能)</td></tr><tr><td><code>imgui_impl_vulkan.cpp</code></td><td>Vulkan</td></tr><tr><td><code>imgui_impl_wgpu.cpp</code></td><td>WebGPU（Webとデスクトップで利用可能）</td></tr></tbody></table><h3 id="高レベルフレームワークのバックエンド一覧-プラットフォーム-レンダラー" tabindex="-1">高レベルフレームワークのバックエンド一覧（プラットフォーム＋レンダラー） <a class="header-anchor" href="#高レベルフレームワークのバックエンド一覧-プラットフォーム-レンダラー" aria-label="Permalink to &quot;高レベルフレームワークのバックエンド一覧（プラットフォーム＋レンダラー）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>ファイル名</th><th>説明</th></tr></thead><tbody><tr><td><code>imgui_impl_allegro5.cpp</code></td><td>Allegro 5を使用する際のバックエンド</td></tr></tbody></table><p><strong>Emscriptenもサポートされています！</strong><br> SDL+GL、GLFW+GL、およびGLFW+WebGPUの例はすべて、Emscriptenでビルドして実行する準備ができています。</p><h3 id="サードパーティ製フレームワーク、グラフィックスapi、その他の言語向けバックエンド" tabindex="-1">サードパーティ製フレームワーク、グラフィックスAPI、その他の言語向けバックエンド <a class="header-anchor" href="#サードパーティ製フレームワーク、グラフィックスapi、その他の言語向けバックエンド" aria-label="Permalink to &quot;サードパーティ製フレームワーク、グラフィックスAPI、その他の言語向けバックエンド&quot;">​</a></h3><p>サードパーティのフレームワークや言語のサポートについては、<a href="https://github.com/ocornut/imgui/wiki/Bindings" target="_blank" rel="noreferrer">こちらのWikiページ</a>に詳細なリストがあります（例: Adventure Game Studio, Cinder, Cocos2d-x, Game Maker Studio2, Godot, LÖVE+LUA, Magnum, Monogame, Ogre, openFrameworks, OpenSceneGraph, SFML, Sokol, Unity, Unreal Engineなど多数）。</p><h3 id="推奨バックエンド" tabindex="-1">推奨バックエンド <a class="header-anchor" href="#推奨バックエンド" aria-label="Permalink to &quot;推奨バックエンド&quot;">​</a></h3><p>どのバックエンドを使用すべきか迷った場合、移植性のあるアプリケーションに推奨されるプラットフォームやフレームワークは以下の通りです。</p><table tabindex="0"><thead><tr><th>ライブラリ</th><th>Webサイト</th><th>バックエンド</th><th>備考</th></tr></thead><tbody><tr><td>GLFW</td><td><a href="https://github.com/glfw/glfw" target="_blank" rel="noreferrer">GLFW公式サイト</a></td><td><code>imgui_impl_glfw.cpp</code></td><td></td></tr><tr><td>SDL2</td><td><a href="https://www.libsdl.org" target="_blank" rel="noreferrer">SDL公式サイト</a></td><td><code>imgui_impl_sdl2.cpp</code></td><td></td></tr><tr><td>Sokol</td><td><a href="https://github.com/floooh/sokol" target="_blank" rel="noreferrer">Sokol公式サイト</a></td><td><a href="https://github.com/floooh/sokol/blob/master/util/sokol_imgui.h" target="_blank" rel="noreferrer">util/sokol_imgui.h</a></td><td>GLFWやSDLに比べて低レベル</td></tr></tbody></table><h2 id="カスタムエンジンを使用する場合" tabindex="-1">カスタムエンジンを使用する場合 <a class="header-anchor" href="#カスタムエンジンを使用する場合" aria-label="Permalink to &quot;カスタムエンジンを使用する場合&quot;">​</a></h2><p>独自の高レベルAPIを活用して、最初から自分のバックエンドを作り直したくなるかもしれませんが、<strong>ちょっと待ってください！</strong></p><p>Dear ImGuiを初めて使用する場合は、まず既存のバックエンドをそのまま使ってみることをおすすめします。これにより、ライブラリの統合にかかる時間を大幅に節約できます。本当に必要になったときに、後からカスタムバックエンドを書くことを検討しても遅くはありません。多くの場合、カスタムバックエンドは標準バックエンドに比べて機能が少なく、バグも多くなりがちです。移植性が必要な場合は、複数のバックエンドを使い、コンパイル時または実行時に選択できるようにすると良いでしょう。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><p><strong>例A</strong>: エンジンがWindows＋DirectX11で構築されており、DirectX11上に独自の高レベルなレンダリングシステムがある場合。</p><ul><li><strong>提案</strong>: まず<code>imgui_impl_win32.cpp</code>と<code>imgui_impl_dx11.cpp</code>を使ってみてください。うまく動作したら、本当に必要であれば<code>imgui_impl_dx11.cpp</code>のコードを独自のレンダリング関数を使ったカスタムレンダラーに置き換え、標準のWin32コードはそのまま使用するなどの方法を検討してください。</li></ul><p><strong>例B</strong>: エンジンがWindows、Mac、Linuxで動作し、それぞれDirectX11、Metal、Vulkanを使用している場合。</p><ul><li><strong>提案</strong>: 複数の汎用バックエンドを使用してください。うまく動作したら、必要に応じてバックエンドの一部を独自の抽象化に置き換えていくと良いでしょう。</li></ul><p><strong>例C</strong>: エンジンがPS4/PS5やSwitchなどの公開できないプラットフォームで動作し、すべての環境で独自の高レベルシステムを使用している場合。</p><ul><li><strong>提案</strong>: まず非移植性のバックエンド（例: win32＋ベースとなるグラフィックスAPI）を使用して、デスクトップビルドを先に動作させてみてください。これにより、Dear ImGuiがどのように動作するかを理解しやすくなり、導入も迅速に行えます。その後、自分のエンジンAPIを使用してカスタムバックエンドを再構築することができます。</li></ul><h3 id="一般的に" tabindex="-1">一般的に <a class="header-anchor" href="#一般的に" aria-label="Permalink to &quot;一般的に&quot;">​</a></h3><p>カスタムバックエンドを作成することでプロジェクトに付加価値を加えられる可能性は低いと考えられます。</p><h3 id="また、マルチビューポート機能について" tabindex="-1">また、マルチビューポート機能について <a class="header-anchor" href="#また、マルチビューポート機能について" aria-label="Permalink to &quot;また、マルチビューポート機能について&quot;">​</a></h3><p>「Docking」ブランチの<a href="https://github.com/ocornut/imgui/wiki/Multi-Viewports" target="_blank" rel="noreferrer">マルチビューポート機能</a>を使うと、Dear ImGuiのウィンドウをメインアプリケーションウィンドウからシームレスに分離できます。これには、プラットフォームやレンダラーのバックエンドに追加のレイヤーを使用し、Dear ImGuiがプラットフォーム固有のリクエスト（例: 「追加のOSウィンドウを作成する」、「レンダーコンテキストを作成する」、「このウィンドウのOS位置を取得する」など）を伝えることが可能です。詳細は「ImGuiPlatformIO」を参照してください。</p><p>独自の抽象化でマルチビューポート機能を完全にサポートするのは、シングルビューポートのサポートよりも困難です。<code>imgui_impl_XXXX.cpp</code>ファイルを改変せずに使用すれば、ビューポートやプラットフォームウィンドウに関連する改良や修正を自分で手を加えることなく、自動的に受けることができます。</p>',44)]))}const g=e(l,[["render",d]]);export{h as __pageData,g as default};
