import{_ as e,c as r,a2 as a,o as d}from"./chunks/framework.DPuwY6B9.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/guide/buffer_objects.md","filePath":"resource/duktape/guide/buffer_objects.md","lastUpdated":null}'),i={name:"resource/duktape/guide/buffer_objects.md"};function n(o,t,s,l,f,u){return d(),r("div",null,t[0]||(t[0]=[a('<h2 id="buffer_objects" tabindex="-1">バッファ・オブジェクト <a class="header-anchor" href="#buffer_objects" aria-label="Permalink to &quot;バッファ・オブジェクト {#buffer_objects}&quot;">​</a></h2><h3 id="バッファ・タイプの概要" tabindex="-1">バッファ・タイプの概要 <a class="header-anchor" href="#バッファ・タイプの概要" aria-label="Permalink to &quot;バッファ・タイプの概要&quot;">​</a></h3><p>Duktapeは、以下のバッファ・タイプおよびバッファ関連タイプを提供します。</p><table tabindex="0"><thead><tr><th>Type</th><th>Standard</th><th>Duktape version</th><th>Description</th></tr></thead><tbody><tr><td>Plain buffer</td><td>No Duktape specific</td><td>1.0</td><td>Plain, primitive buffer value (not an object), similar to how a plain string relates to a String object. Behaves like an Uint8Array instance where possible, object coerces to an actual Uint8Array.</td></tr><tr><td>ArrayBuffer object</td><td>Yes ES2015</td><td>1.3</td><td>Standard object type for representing a byte array. References an underlying plain buffer.</td></tr><tr><td>DataView, typed array objects</td><td>Yes ES2015</td><td>1.3</td><td>View objects to access an underlying ArrayBuffer. References an underlying plain buffer.</td></tr><tr><td>Node.js Buffer object</td><td>No Node.js-like</td><td>1.3</td><td>Object with Node.js Buffer API, inherits from Uint8Array.prototype. References an underlying plain buffer.</td></tr></tbody></table><p>バッファの種類とそのプロパティの詳細な表など、詳しい説明はbuffers.rstを参照してください。</p><h3 id="プレーン-バッファ" tabindex="-1">プレーン バッファ <a class="header-anchor" href="#プレーン-バッファ" aria-label="Permalink to &quot;プレーン バッファ&quot;">​</a></h3><p>プレーンバッファーは、バッファーのデータを表現するための非標準的なメモリ効率の良い方法です。プレーンバッファーは Uint8Array.prototype を継承し、型付き配列のコンストラクターの引数として受け付けられるなど、Uint8Array オブジェクトを模倣しています。プレーンバッファーはプロパティテーブルを持たず、それ自身のプロパティを保持できませんが、以下の仮想または継承されたプロパティを持っています（例の値は24バイトのバッファーのものです）。</p><table tabindex="0"><thead><tr><th>Property name</th><th>Example value</th><th>Description</th></tr></thead><tbody><tr><td>[index]</td><td>0-255</td><td>Index properties in the range [0, length-1]. Reads and writes behave like for Uint8Array.</td></tr><tr><td>length</td><td>24</td><td>Length of buffer in bytes. Length is not writable, so you can&#39;t resize a buffer by assigning its length.</td></tr><tr><td>byteOffset</td><td>0</td><td>Always 0, present to match typed arrays.</td></tr><tr><td>byteLength</td><td>24</td><td>Same as .length.</td></tr><tr><td>BYTES_PER_ELEMENT</td><td>1</td><td>Always 1, present to match typed arrays.</td></tr><tr><td>buffer</td><td></td><td>Getter property which returns a new ArrayBuffer instance backing to the plain buffer without making a copy. Because plain buffers don&#39;t have a property table, a new ArrayBuffer is created on every property read. Absent if buffer object support is disabled in Duktape configuration.</td></tr></tbody></table><p>ArrayBuffer や Node.js Buffer などのバッファオブジェクトは、プレーンなバッファ値の上に実装され、ビュー/スライスのサポート、型付きアクセッサ、異なるエンディアンのデータを操作するメソッドなどの追加機能を提供します。しかし、これらはプレーンなバッファよりもオーバーヘッドがあります。</p><p>詳しくは、以下を参照してください。</p><ul><li>バッファの扱い方</li><li>型付けアルゴリズム</li><li>buffers.rst</li></ul><h3 id="バッファを使った作業" tabindex="-1">バッファを使った作業 <a class="header-anchor" href="#バッファを使った作業" aria-label="Permalink to &quot;バッファを使った作業&quot;">​</a></h3><p>バッファの値は C と ECMAScript の両方のコードで動作します。</p><ul><li>ECMAScript コードでは、ほとんどの動作は関連する API 標準で定義されていますが、異なるバッファ・タイプの混在のような Duktape 固有の機能については例外があります。</li><li>Cコードでは、プレーン・バッファとバッファ・オブジェクトを操作するためのAPIコールがあります。</li></ul><p>例としては、How to work with buffers (バッファの扱い方) を参照してください。</p><blockquote><p>特殊なケースでは、バッファ・オブジェクトをバックアップするプレーン・バッファが、バッファ・オブジェクトの見かけ上のサイズをカバーするのに十分な大きさでないことがあります。Duktapeはこのようなバッファに対してメモリセーフな動作を保証していますが、それ以外の動作は呼び出しによって異なります。例えば、ある呼び出しがこの状況を無視して黙ってundefined、NaN、または0を返すこともあれば、TypeErrorを投げることもあります。アンバックアップバッファの動作はバージョン保証の対象外であり、マイナーバージョン間で変更される可能性があります。</p></blockquote><h3 id="現在の制限事項" tabindex="-1">現在の制限事項 <a class="header-anchor" href="#現在の制限事項" aria-label="Permalink to &quot;現在の制限事項&quot;">​</a></h3><ul><li>TypedArrayバインディングのカスタム動作を参照してください。</li><li>Node.jsのBufferバインディングのカスタム動作を参照してください。</li></ul>',18)]))}const c=e(i,[["render",n]]);export{b as __pageData,c as default};
