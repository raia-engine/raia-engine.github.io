import{_ as s,c as a,a2 as e,o as t}from"./chunks/framework.DzmM640o.js";const r=JSON.parse('{"title":"lua_getinfo","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_getinfo.md","filePath":"reference/lua_c/lua_getinfo.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/lua_getinfo.md"};function n(h,i,p,d,k,o){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="lua-getinfo" tabindex="-1">lua_getinfo <a class="header-anchor" href="#lua-getinfo" aria-label="Permalink to &quot;lua_getinfo&quot;">​</a></h1><p>特定の関数または関数呼び出しについての情報を返します。</p><p><code>[-(0|1), +(0|1|2), m]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>特定の関数または関数呼び出しについての情報を返します。</p><p>関数呼び出しについての情報を取得するには、<code>ar</code>パラメータは、以前に<code>lua_getstack</code>によって記入された有効なアクティベーションレコードである必要があります、またはフックに引数として与えられる必要があります（<code>lua_Hook</code>を参照）。</p><p>関数についての情報を取得するには、それをスタックにプッシュし、<code>what</code>文字列を文字<code>&#39;&gt;&#39;</code>で開始します。（その場合、<code>lua_getinfo</code>はスタックの上にある関数をポップします。）例えば、関数<code>f</code>がどの行で定義されたかを知るには、次のコードを書くことができます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Debug ar;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getfield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, LUA_GLOBALSINDEX, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* get global &#39;f&#39; */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;S&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ar.linedefined);</span></span></code></pre></div><p><code>what</code>文字列の各文字は、構造体<code>ar</code>の特定のフィールドを記入するか、スタックに値をプッシュすることを選択します：</p><ul><li><code>&#39;n&#39;</code>: <code>name</code>と<code>namewhat</code>フィールドを記入します。</li><li><code>&#39;S&#39;</code>: <code>source</code>、<code>short_src</code>、<code>linedefined</code>、<code>lastlinedefined</code>、および<code>what</code>フィールドを記入します。</li><li><code>&#39;l&#39;</code>: <code>currentline</code>フィールドを記入します。</li><li><code>&#39;u&#39;</code>: <code>nups</code>フィールドを記入します。</li><li><code>&#39;f&#39;</code>: 与えられたレベルで実行中の関数をスタックにプッシュします。</li><li><code>&#39;L&#39;</code>: 関数で有効な行の番号がインデックスであるテーブルをスタックにプッシュします。（有効な行とは、コードが関連付けられている行、つまり、ブレークポイントを置くことができる行です。無効な行には空行やコメントが含まれます。）</li></ul><p>この関数はエラーが発生した場合（例えば、<code>what</code>で無効なオプションがある場合）に0を返します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Debug ar;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getfield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, LUA_GLOBALSINDEX, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myFunction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;S&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;定義開始行: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ar.linedefined);</span></span></code></pre></div><p>このコードは、グローバル関数<code>myFunction</code>の定義開始行を取得して表示します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_getstack</li><li>lua_Debug</li></ul>`,19)]))}const g=s(l,[["render",n]]);export{r as __pageData,g as default};
