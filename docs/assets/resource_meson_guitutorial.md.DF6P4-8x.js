import{_ as i,c as a,a2 as n,o as p}from"./chunks/framework.DPuwY6B9.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/meson/guitutorial.md","filePath":"resource/meson/guitutorial.md","lastUpdated":null}'),l={name:"resource/meson/guitutorial.md"};function e(t,s,h,k,d,r){return p(),a("div",null,s[0]||(s[0]=[n(`<h2 id="シンプルなsdl2アプリをゼロから作る" tabindex="-1">シンプルなSDL2アプリをゼロから作る <a class="header-anchor" href="#シンプルなsdl2アプリをゼロから作る" aria-label="Permalink to &quot;シンプルなSDL2アプリをゼロから作る&quot;">​</a></h2><p>このページでは、Meson だけを使用して SDL2 GUI アプリケーションを定義し構築する方法を一から説明します。このドキュメントは、最も複雑なプラットフォームである Windows 用に書かれていますが、Linux や macOS でも同じ基本的な考え方が通用するはずです。</p><p>SDL 2 も C で書かれているため、サンプルアプリケーションはプレーン C で書かれています。もし C++ が好きなら、変換は非常に簡単なので、読者の練習問題として残しておきます。</p><p>このドキュメントは、Visual Studio と Meson の両方がすでにインストールされていることを前提にしています。</p><h2 id="ビルドディレクトリの設定" tabindex="-1">ビルドディレクトリの設定 <a class="header-anchor" href="#ビルドディレクトリの設定" aria-label="Permalink to &quot;ビルドディレクトリの設定&quot;">​</a></h2><p>まず、すべてのものを格納する空のディレクトリを作成する必要があります。Visual Studioのツールチェーンは少し変わっていて、特定のシェルからビルドを実行する必要があります。これは、アプリケーションメニューを開き、<code>Visual Studio &lt;year&gt; -&gt; x86_64 native tools</code> コマンドプロンプトを選択することで見つけることができます。</p><p>変なディレクトリに移動してしまうので、ホームディレクトリに移動する必要があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd \\users\\yourusername</span></span></code></pre></div><p>通常、<code>cd \\users</code> と入力し、tabulator キーを押してユーザー名をシェルに自動補完させます。これが完了したら、ディレクトリを作成できます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir sdldemo</span></span>
<span class="line"><span>cd sdldemo</span></span></code></pre></div><h2 id="creating-the-sample-program" tabindex="-1">Creating the sample program <a class="header-anchor" href="#creating-the-sample-program" aria-label="Permalink to &quot;Creating the sample program&quot;">​</a></h2><p>ここで、ソースファイルと Meson ビルド定義ファイルを作成する必要があります。ここでは SDL をまったく使用せず、テキストを表示するだけの簡単なプログラムから始めます。一度動作させれば、グラフィックを行うように拡張できます。ソースは <code>sdlprog.c</code> というファイルに入っており、次のような内容になっています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;App is running.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ビルドの定義はmeson.buildというファイルに入っていて、以下のような感じになっています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>project(&#39;sdldemo&#39;, &#39;c&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>executable(&#39;sdlprog&#39;, &#39;sdlprog.c&#39;)</span></span></code></pre></div><p>これで、次のコマンドでビルドを開始することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>meson setup builddir</span></span></code></pre></div><p>ここで<code>builddir</code>はビルドディレクトリで、ビルド中に生成されるものは全てこのディレクトリに置かれます。実行すると、次のようになります。</p><p>サンプルアプリケーションの設定</p><p>プログラムはこれでコンパイルされます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>meson compile -C builddir</span></span></code></pre></div><p>C 引数は、設定されたビルドディレクトリがどこにあるかを Meson に知らせます。</p><p>プログラムはビルドディレクトリに置かれ、次のように実行することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>builddir\\sdlprog</span></span></code></pre></div><p>このように出力されるはずです。</p><p>サンプルアプリケーションの実行</p><h2 id="sdlを使用するためにプログラムをアップグレードする" tabindex="-1">SDLを使用するためにプログラムをアップグレードする <a class="header-anchor" href="#sdlを使用するためにプログラムをアップグレードする" aria-label="Permalink to &quot;SDLを使用するためにプログラムをアップグレードする&quot;">​</a></h2><p>SDLを起動するために必要なコードは少し複雑なので、その仕組みについては割愛します。単に<code>sdlprog.c</code>の内容を次のように置き換えるだけです。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SDL.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SDL_Window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SDL_Renderer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renderer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SDL_Surface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">surface;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SDL_Event event;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SDL_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SDL_INIT_VIDEO) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SDL_LogError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SDL_LOG_CATEGORY_APPLICATION, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Couldn&#39;t initialize SDL: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SDL_GetError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SDL_CreateWindowAndRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">320</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">240</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SDL_WINDOW_RESIZABLE, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renderer)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SDL_LogError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SDL_LOG_CATEGORY_APPLICATION, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Couldn&#39;t create window and renderer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SDL_GetError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SDL_PollEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SDL_QUIT) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SDL_SetRenderDrawColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SDL_RenderClear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SDL_RenderPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SDL_DestroyRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SDL_DestroyWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SDL_Quit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>もう一度、meson compile -C builddirを実行して、これをコンパイルしてみましょう。</p><p>SDLアプリのビルドに失敗しました</p><p>失敗しました。この理由は、実はSDLが現在利用できないからです。何らかの方法で入手する必要があります。専門用語では SDL2 は外部依存であり、それを取得することを依存関係の解決と呼びます。</p><p>Meson には、WrapDB と呼ばれる依存関係をダウンロードして (必要なら) 構築するための Web サービスがあります。これは SDL2 を提供するので、それを直接使用することができます。まず最初に subprojects ディレクトリを作成する必要があります。Meson では一貫性を保つために、このようなサブプロジェクトはすべてこのディレクトリに保存する必要があるからです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir subprojects</span></span></code></pre></div><p>そして、依存関係をインストールすることができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>meson wrap install sdl2</span></span></code></pre></div><p>こんな感じです。</p><p>WrapDB から SDL2 を取得する。</p><p>最後のステップとして、新しく取得した依存関係を使用するためにビルド定義ファイルを更新する必要があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>project(&#39;sdldemo&#39;, &#39;c&#39;,</span></span>
<span class="line"><span>        default_options: &#39;default_library=static&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sdl2_dep = dependency(&#39;sdl2&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>executable(&#39;sdlprog&#39;, &#39;sdlprog.c&#39;,</span></span>
<span class="line"><span>           win_subsystem: &#39;windows&#39;,</span></span>
<span class="line"><span>           dependencies: sdl2_dep)</span></span></code></pre></div><p>依存関係に加え、他にもいくつかの変更があります。まず、ヘルパーライブラリを静的にビルドするように指定しています。このような単純なプロジェクトでは、これによって物事がよりシンプルになります。また、構築するプログラムがコンソールアプリケーションではなく、Windows GUI アプリケーションであることを Meson に伝える必要があります。</p><p>これだけで、再び meson compile を実行できるようになります。まず、システムは SDL2 をダウンロードし、設定します。</p><p>サンプルアプリケーションの実行</p><p>少しして、コンパイルが正常に終了しました。</p><p>サンプルアプリケーションの実行</p><h2 id="プログラム終了" tabindex="-1">プログラム終了 <a class="header-anchor" href="#プログラム終了" aria-label="Permalink to &quot;プログラム終了&quot;">​</a></h2><p>これで、アプリケーションを</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>builddir\\sdlprog</span></span></code></pre></div><p>最終的には、黒いSDLウィンドウが表示されます。</p><p>サンプルアプリケーションを実行する</p>`,50)]))}const c=i(l,[["render",e]]);export{g as __pageData,c as default};
