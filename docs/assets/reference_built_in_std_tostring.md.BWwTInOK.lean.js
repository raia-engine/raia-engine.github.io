import{_ as t,c as e,a2 as i,o as s}from"./chunks/framework.DzmM640o.js";const u=JSON.parse('{"title":"tostring","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/std/tostring.md","filePath":"reference/built_in/std/tostring.md","lastUpdated":1730041717000}'),n={name:"reference/built_in/std/tostring.md"};function l(o,a,r,d,h,p){return s(),e("div",null,a[0]||(a[0]=[i('<h1 id="tostring" tabindex="-1">tostring <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;tostring&quot;">​</a></h1><p>値を文字列に変換する</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>任意の型の引数 <code>e</code> を受け取り、それを適切な文字列に変換します。数値の変換を細かく制御したい場合は、<code>string.format</code> を使用してください。</p><p><code>e</code> のメタテーブルに <code>&quot;__tostring&quot;</code> フィールドがある場合、<code>tostring</code> はそのフィールドに関連付けられた関数を <code>e</code> を引数として呼び出し、その結果を返します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &quot;123&quot;</span></span></code></pre></div><p>この例では、数値が文字列に変換されます。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><p>NaNと±Infを正規化します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li><li>LuaJIT独自の拡張あり</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./tonumber.html"><code>tonumber</code></a></li></ul>',15)]))}const k=t(n,[["render",l]]);export{u as __pageData,k as default};
