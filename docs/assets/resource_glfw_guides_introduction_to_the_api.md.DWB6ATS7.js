import{_ as s,c as a,a2 as l,o as t}from"./chunks/framework.6x3wfQve.js";const g=JSON.parse('{"title":"GLFWのAPI紹介","description":"","frontmatter":{},"headers":[],"relativePath":"resource/glfw/guides/introduction_to_the_api.md","filePath":"resource/glfw/guides/introduction_to_the_api.md","lastUpdated":null}'),e={name:"resource/glfw/guides/introduction_to_the_api.md"};function n(p,i,h,r,k,d){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="glfwのapi紹介" tabindex="-1">GLFWのAPI紹介 <a class="header-anchor" href="#glfwのapi紹介" aria-label="Permalink to &quot;GLFWのAPI紹介&quot;">​</a></h1><p>このガイドでは、GLFWの基本的な概念を紹介し、初期化、エラー処理、APIの保証と制限について説明します。広く、しかし浅いチュートリアルは、代わりにGetting startedを参照してください。このカテゴリの特定の関数の詳細については、初期化・バージョン・エラーのリファレンスを参照してください。</p><p>また、GLFWの他のエリアのガイドもあります。</p><ul><li>ウィンドウガイド</li><li>コンテキストガイド</li><li>Vulkanガイド</li><li>モニターガイド</li><li>入力ガイド</li></ul><nav class="table-of-contents"><ul><li><a href="#初期化および終了">初期化および終了</a><ul><li><a href="#glfwの初期化">GLFWの初期化</a></li><li><a href="#初期設定のヒント">初期設定のヒント</a></li><li><a href="#glfwの終端">GLFWの終端</a></li></ul></li><li><a href="#エラー処理">エラー処理</a></li><li><a href="#座標系">座標系</a></li><li><a href="#保証と制限">保証と制限</a><ul><li><a href="#ポインターの寿命">ポインターの寿命</a></li><li><a href="#リエントランシー">リエントランシー</a></li><li><a href="#スレッドセーフ">スレッドセーフ</a></li><li><a href="#バージョン互換性">バージョン互換性</a></li><li><a href="#イベントの順序">イベントの順序</a></li></ul></li><li><a href="#バージョンマネジメント">バージョンマネジメント</a><ul><li><a href="#コンパイル時バージョン">コンパイル時バージョン</a></li><li><a href="#ランタイムバージョン">ランタイムバージョン</a></li><li><a href="#バージョン文字列">バージョン文字列</a></li></ul></li></ul></nav><h2 id="初期化および終了" tabindex="-1">初期化および終了 <a class="header-anchor" href="#初期化および終了" aria-label="Permalink to &quot;初期化および終了&quot;">​</a></h2><p>ほとんどのGLFW関数が呼ばれる前に、ライブラリは初期化されなければならない。この初期化では、マシンで利用可能な機能のチェック、モニタやジョイスティックの列挙、 タイマの初期化、プラットフォーム固有の必要な初期化などを行います。</p><p>ライブラリが正常に初期化される前に、以下の関数だけをメインスレッドから 呼び出すことができる。</p><ul><li>glfwGetVersion</li><li>glfwGetVersionString</li><li>glfwGetError</li><li>glfwSetErrorCallback</li><li>glfwInitHint</li><li>glfwInit</li><li>glfwTerminate</li></ul><p>初期化に成功する前に他の関数を呼び出すと、GLFW_NOT_INITIALIZEDエラーが発生する。</p><h3 id="glfwの初期化" tabindex="-1">GLFWの初期化 <a class="header-anchor" href="#glfwの初期化" aria-label="Permalink to &quot;GLFWの初期化&quot;">​</a></h3><p>ライブラリは glfwInit で初期化され、エラーが発生した場合は GLFW_FALSE が返される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle initialization failure</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>初期化の一部が失敗した場合、成功した部分は、glfwTerminateが呼ばれたかのように終了される。ライブラリは一度だけ初期化する必要があり、すでに初期化されたライブラリに追加で呼び出すと、すぐにGLFW_TRUEが返されます。</p><p>いったんライブラリが正常に初期化されたら、アプリケーションが終了する前に 終了させる必要があります。最近のシステムは、終了するプログラムによって割り当てられたリソースを 解放することに非常に長けていますが、GLFW はグローバルなシステム設定を変更しな ければならないことがあり、終了しなければ元に戻せないことがあります。</p><h3 id="初期設定のヒント" tabindex="-1">初期設定のヒント <a class="header-anchor" href="#初期設定のヒント" aria-label="Permalink to &quot;初期設定のヒント&quot;">​</a></h3><p>初期化ヒントはglfwInitの前に設定され，ライブラリが終了するまでの動作に影響する．ヒントはglfwInitHintで設定されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwInitHint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFW_JOYSTICK_HAT_BUTTONS, GLFW_FALSE);</span></span></code></pre></div><p>ヒントを設定した値は，GLFWによってリセットされることはなく，初期化時にのみ有効になります．GLFWが初期化されると、ライブラリが終了して再度初期化されるまで、設定した値は無視されます。</p><p>いくつかのヒントは、プラットフォーム固有のものである。これらはどのプラットフォームでも設定可能であるが、そのプラットフォームのみに影響する。他のプラットフォームでは無視されます。これらのヒントを設定するために、プラットフォーム固有のヘッダーや関数は必要ありません。</p><h4 id="initのヒントの共有" tabindex="-1">initのヒントの共有 <a class="header-anchor" href="#initのヒントの共有" aria-label="Permalink to &quot;initのヒントの共有&quot;">​</a></h4><p>GLFW_JOYSTICK_HAT_BUTTONSは、glfwGetJoystickHatsがなかった以前のバージョンのGLFWとの互換性のために、 ジョイスティックハットもボタンとして公開するかどうかを指定します。指定できる値はGLFW_TRUEとGLFW_FALSEです。</p><h4 id="macos固有のinitのヒント" tabindex="-1">macOS固有のinitのヒント <a class="header-anchor" href="#macos固有のinitのヒント" aria-label="Permalink to &quot;macOS固有のinitのヒント&quot;">​</a></h4><p>GLFW_COCOA_CHDIR_RESOURCES は、アプリケーションのカレントディレクトリを、アプリケーションのバンドルの Contents/Resources サブディレクトリに設定するかどうかを指定します(存在する場合)。glfwInitHintで設定します。</p><p>GLFW_COCOA_MENUBARは、AppKitが初期化される最初のウィンドウの作成時に、nibまたは手動で基本的なメニューバーを作成するかどうかを指定します。glfwInitHintで設定します。</p><h4 id="対応機種と初期設定値" tabindex="-1">対応機種と初期設定値 <a class="header-anchor" href="#対応機種と初期設定値" aria-label="Permalink to &quot;対応機種と初期設定値&quot;">​</a></h4><table tabindex="0"><thead><tr><th>初期化のヒント</th><th>デフォルト値</th><th>サポートされる値</th></tr></thead><tbody><tr><td>GLFW_JOYSTICK_HAT_BUTTONS</td><td>GLFW_TRUE</td><td>GLFW_TRUE または GLFW_FALSE</td></tr><tr><td>GLFW_COCOA_CHDIR_RESOURCES</td><td>GLFW_TRUE</td><td>GLFW_TRUE または GLFW_FALSE</td></tr><tr><td>GLFW_COCOA_MENUBAR</td><td>GLFW_TRUE</td><td>GLFW_TRUE または GLFW_FALSE</td></tr></tbody></table><h3 id="glfwの終端" tabindex="-1">GLFWの終端 <a class="header-anchor" href="#glfwの終端" aria-label="Permalink to &quot;GLFWの終端&quot;">​</a></h3><p>アプリケーションが終了する前に、GLFWライブラリが初期化されている場合は、終了させる必要があります。これは glfwTerminate で行われます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwTerminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>これにより、残っているウィンドウ、モニター、カーソルオブジェクトが破壊され、変更されたガンマランプが復元され、スクリーンセーバーが無効になっている場合は再有効化され、GLFWによって割り当てられた他のリソースが解放されます。</p><p>いったんライブラリが終了すると、初期化されていなかったのと同じことになり、GLFWを使用する前に再度初期化する必要があります。ライブラリが初期化されていない場合，あるいはすでに終了している場合は，すぐに復帰します．</p><h2 id="エラー処理" tabindex="-1">エラー処理 <a class="header-anchor" href="#エラー処理" aria-label="Permalink to &quot;エラー処理&quot;">​</a></h2><p>GLFWのいくつかの関数は、エラーを示す戻り値を持っていますが、何が起こったのか、なぜ起こったのかを解明しようとするとき、これはあまり役に立たないことが多いのです。他の関数は、エラーのために予約された戻り値を持たないので、エラー通知は別のチャンネルが必要です。最後に、すべてのGLFW関数が戻り値を持っているわけではありません。</p><p>呼び出したスレッドの最後のエラーコードは、いつでも glfwGetError で問い合わせることができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFW_NO_ERROR)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handle_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code);</span></span></code></pre></div><p>最後の呼び出しからエラーが発生していない場合、GLFW_NO_ERROR (ゼロ) が返される。エラーは、この関数が戻る前にクリアされる。</p><p>エラーコードは、エラーの一般的なカテゴリーを示す。GLFW_NOT_INITIALIZED のようないくつかのエラーコードは単一の意味しか持たないが、 GLFW_PLATFORM_ERROR のように多くの異なるエラーに使われるものもある。</p><p>GLFWはしばしば、一般的なカテゴリよりも多くのエラーに関する情報を持っています。UTF-8でエンコードされた人間が読める説明を、エラーコードと一緒に取り出すことができます。最後の呼び出しからエラーが発生していない場合、説明文はNULLに設定される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> description;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (description)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    display_error_message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, description);</span></span></code></pre></div><p>取得した説明文字列は、次にエラーが発生するまでしか有効ではありません。つまり、保存したい場合はコピーを取る必要があります。</p><p>また、エラーが発生するたびに呼び出されるエラーコールバックを設定することができます。これは glfwSetErrorCallback で設定されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetErrorCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error_callback);</span></span></code></pre></div><p>エラーコールバックは、glfwGetErrorによって返された同じエラーコードと人間が読める説明を受け取る。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> error_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    display_error_message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, description);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>エラーコールバックはエラーが保存された後に呼び出されるため、エラーコールバック内からglfwGetErrorを呼び出すと、コールバックの引数と同じ値が返されます。</p><p>コールバックに渡された説明文字列は、エラーコールバックが戻るまでしか有効ではありません。つまり、それを保持したい場合は、コピーを作成する必要があります。</p><p>報告されたエラーは決して致命的なものではありません。GLFWが正常に初期化されている限り、何度エラーが発生しても終了するまで初期化されたまま安全な状態に保たれる。初期化中にglfwInitが失敗するようなエラーが発生した場合，初期化されていた ライブラリのいかなる部分も安全に終了する．</p><p>将来、同じ呼び出しが別のエラーを発生させたり、有効になったりするかもしれないので、特定のエラーを発生させるために、現在無効な呼び出しに依存しないこと。</p><h2 id="座標系" tabindex="-1">座標系 <a class="header-anchor" href="#座標系" aria-label="Permalink to &quot;座標系&quot;">​</a></h2><p>GLFWには2つの主要な座標系があります：仮想スクリーンとウィンドウ内容領域または内容領域です。どちらも同じ単位を使います：仮想スクリーン座標、または単にスクリーン座標、これは必ずしもピクセルに対応しません。</p><p>仮想スクリーンとコンテンツ・エリアの座標系は，どちらも X 軸が右を，Y 軸が下を向いている．</p><p>ウィンドウやモニターの位置は、仮想スクリーンに対するコンテンツエリアの左上隅の位置で指定し、カーソルの位置はウィンドウのコンテンツエリアに対する相対位置で指定します。</p><p>ウィンドウのコンテンツエリア座標系の原点は、ウィンドウ位置を指定する点でもあるため、ウィンドウ位置を加えることでコンテンツエリア座標を仮想画面に変換することができる。ウィンドウフレームが存在する場合、コンテンツエリアからはみ出しますが、ウィンドウ位置には影響しません。</p><p>GLFWのほとんどすべての位置とサイズは、上記の2つの原点のうちの1つを基準としたスクリーン座標で測定されます。これには、カーソルの位置、ウィンドウの位置とサイズ、ウィンドウフレームのサイズ、モニターの位置、ビデオモードの解像度が含まれます。</p><p>2つの例外は、ミリメートルで測定されるモニターの物理サイズと、ピクセルで測定されるフレームバッファサイズです。</p><p>ピクセルとスクリーン座標は、あなたのマシンでは1対1に対応するかもしれませんが、例えばRetinaディスプレイを搭載したMacなど、他のすべてのマシンではそうではありません。画面座標とピクセルの比率は、ウィンドウが現在どのモニタにあるとみなされるかによって、ランタイムに変更されることもあります。</p><h2 id="保証と制限" tabindex="-1">保証と制限 <a class="header-anchor" href="#保証と制限" aria-label="Permalink to &quot;保証と制限&quot;">​</a></h2><p>このセクションでは、オペレーティングシステムやドライバのバグを除いて、 GLFWが機能すると期待される条件について説明します。これらの制限の範囲外でGLFWを使用すると、あるプラットフォーム、あるマシン、ある時間、あるバージョンのGLFWで動作するかもしれませんが、いつでも壊れる可能性があり、これはバグとは見なされません。</p><h3 id="ポインターの寿命" tabindex="-1">ポインターの寿命 <a class="header-anchor" href="#ポインターの寿命" aria-label="Permalink to &quot;ポインターの寿命&quot;">​</a></h3><p>GLFWは、あなたが提供したポインタを決して解放しませんし、あなたが提供したポインタを決して解放してはいけません。</p><p>多くのGLFW関数は、動的に割り当てられた構造体、文字列、配列へのポインタを返し、いくつかのコールバックは、文字列や配列で提供されます。これらは常にGLFWによって管理され、アプリケーションによって決して解放されるべきではありません。これらのポインタの寿命は、各GLFW関数とコールバックのために文書化されています。このデータを保持する必要がある場合、その寿命が切れる前にコピーする必要があります。</p><p>多くのGLFW関数は、アプリケーションによって割り当てられた構造体や文字列への ポインターを受け取ります。これらは決してGLFWによって解放されることはなく、常にアプリケーションの責任となります。GLFWがこれらの構造体や文字列のデータを保持する必要がある場合、関数が戻る前にコピーされます。</p><p>ポインタの寿命は、将来のマイナーリリースやパッチリリースで短縮されないことが 保証されています。</p><h3 id="リエントランシー" tabindex="-1">リエントランシー <a class="header-anchor" href="#リエントランシー" aria-label="Permalink to &quot;リエントランシー&quot;">​</a></h3><p>GLFWのイベント処理とオブジェクトの破壊はリエントラントではありません．つまり，以下の関数は，どのコールバック関数からも呼び出してはいけないということです．</p><ul><li>glfwDestroyWindow</li><li>glfwDestroyCursor</li><li>glfwPollEvents</li><li>glfwWaitEvents</li><li>glfwWaitEventsTimeout</li><li>glfwTerminate</li></ul><p>これらの関数は、将来のマイナーリリースやパッチリリースでリエントラントになる可能性がありますが、このリストにない関数がリエントラントにならないようにすることはありません。</p><h3 id="スレッドセーフ" tabindex="-1">スレッドセーフ <a class="header-anchor" href="#スレッドセーフ" aria-label="Permalink to &quot;スレッドセーフ&quot;">​</a></h3><p>ほとんどのGLFW関数は、メインスレッド（mainを呼び出すスレッド）からしか 呼び出すことができませんが、ライブラリが初期化されれば、どのスレッドからも 呼び出すことができるものもあります。初期化前は、ライブラリ全体がスレッドセーフではありません。</p><p>すべての GLFW 関数のリファレンス・ドキュメントには、それがメインスレッドに限定されて いるかどうかが書かれています。</p><p>初期化、終了、イベント処理、ウィンドウ、カーソル、OpenGLおよびOpenGL ESコンテキストの生成と破壊はすべて、1つまたはいくつかのプラットフォームの制限により、メインスレッドに制限されます。</p><p>イベント処理はメインスレッドで実行されなければならないので、エラーコールバック以外のすべてのコールバックはそのスレッド上でのみ呼び出されることになる。GLFW関数はエラーを生成する可能性があるため、エラーコールバックはどのスレッドでも呼び出される可能性があります。</p><p>エラーコードと説明は、どのスレッドからでも問い合わせることができます。</p><ul><li>glfwGetError</li></ul><p>空のイベントは、どのスレッドからでも投稿できます。</p><ul><li>glfwPostEmptyEvent</li></ul><p>ウィンドウユーザポインタとクローズフラグは，どのスレッドからでも読み書き可能であるが，GLFWでは同期されない．</p><ul><li>glfwGetWindowUserPointer</li><li>glfwSetWindowUserPointer</li><li>glfwWindowShouldClose</li><li>glfwSetWindowShouldClose</li></ul><p>OpenGLおよびOpenGL ESのコンテキストを扱うこれらの関数は、どのスレッドからも呼び出すことができますが、ウィンドウオブジェクトはGLFWによって同期されません。</p><ul><li>glfwMakeContextCurrent</li><li>glfwGetCurrentContext</li><li>glfwSwapBuffers</li><li>glfwSwapInterval</li><li>glfwExtensionSupported</li><li>glfwGetProcAddress</li></ul><p>生のタイマー関数は、どのスレッドからも呼び出すことができます。</p><ul><li>glfwGetTimerFrequency</li><li>glfwGetTimerValue</li></ul><p>通常のタイマーはどのスレッドからでも使用できるが、タイマーオフセットの読み書きがGLFWによって同期されていない。</p><ul><li>glfwGetTime</li><li>glfwSetTime</li></ul><p>ライブラリのバージョン情報は、どのスレッドからでも問い合わせることができます。</p><ul><li>glfwGetVersion</li><li>glfwGetVersionString</li></ul><p>Vulkanに関連するすべての関数は、どのスレッドからも呼び出すことができます。</p><ul><li>glfwVulkanSupported</li><li>glfwGetRequiredInstanceExtensions</li><li>glfwGetInstanceProcAddress</li><li>glfwGetPhysicalDevicePresentationSupport</li><li>glfwCreateWindowSurface</li></ul><p>GLFWは、スレッドごとのコンテキストとエラー状態を管理するためにのみ、 内部で同期オブジェクトを使用します。追加の同期化はアプリケーションに任されています。</p><p>現在、どのスレッドからも呼び出せる関数は、常にそのままですが、現在メインスレッ ドに限定されている関数は、将来のリリースでどのスレッドからも呼び出せるよう に更新されるかもしれません。</p><h3 id="バージョン互換性" tabindex="-1">バージョン互換性 <a class="header-anchor" href="#バージョン互換性" aria-label="Permalink to &quot;バージョン互換性&quot;">​</a></h3><p>GLFWはセマンティックバージョニングを採用しています。これは、APIの以前のマイナーバージョンとのソースおよびバイナリ の後方互換性を保証するものです。つまり、新しいバージョンのライブラリをドロップしても、既存の プログラムは引き続きコンパイルでき、既存のバイナリは引き続き実行できます。</p><p>いったん関数や定数が追加されると、その関数のシグネチャや定数の値は、 GLFWの次のメジャーバージョンになるまで変更されることはありません。メジャーバージョン間の互換性は、いかなる種類のものでも保証されません。</p><p>文書化されていない動作、すなわち文書に記述されていない動作は、文書化されるま でいつでも変更される可能性があります。</p><p>リファレンスドキュメントと実装が異なる場合、ほとんどの場合、リファレンスドキュメントが優先され、実装は次のリリースで修正されます。また、ガイドに記載されていることよりもリファレンスドキュメントが優先されます。</p><h3 id="イベントの順序" tabindex="-1">イベントの順序 <a class="header-anchor" href="#イベントの順序" aria-label="Permalink to &quot;イベントの順序&quot;">​</a></h3><p>関連するイベントの到着順序は、プラットフォーム間で一貫していることは保証されない。例外は合成キーとマウスボタン解放イベントで、これは常にウィンドウのデフォーカスイベントの後に配送される。</p><h2 id="バージョンマネジメント" tabindex="-1">バージョンマネジメント <a class="header-anchor" href="#バージョンマネジメント" aria-label="Permalink to &quot;バージョンマネジメント&quot;">​</a></h2><p>GLFWは、アプリケーションがコンパイルされたGLFWのバージョンと、 現在実行されているバージョンを識別するメカニズムを提供します。GLFWを動的にロードしている場合（動的にリンクしているだけではない）、 ライブラリバイナリがアプリケーションと互換性があるかどうかを確認するために これを使うことができます。</p><h3 id="コンパイル時バージョン" tabindex="-1">コンパイル時バージョン <a class="header-anchor" href="#コンパイル時バージョン" aria-label="Permalink to &quot;コンパイル時バージョン&quot;">​</a></h3><p>GLFW のコンパイル時のバージョンは、GLFW_VERSION_MAJOR、GLFW_VERSION_MINOR および GLFW_VERSION_REVISION マクロで GLFW ヘッダーから提供されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compiled against GLFW </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       GLFW_VERSION_MAJOR,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       GLFW_VERSION_MINOR,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       GLFW_VERSION_REVISION);</span></span></code></pre></div><h3 id="ランタイムバージョン" tabindex="-1">ランタイムバージョン <a class="header-anchor" href="#ランタイムバージョン" aria-label="Permalink to &quot;ランタイムバージョン&quot;">​</a></h3><p>ランタイムバージョンはglfwGetVersionで取得できる．この関数はGLFWが初期化されているかどうかに関係なく呼び出すことができる．</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> major, minor, revision;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">major</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">minor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">revision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Running against GLFW </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, major, minor, revision);</span></span></code></pre></div><h3 id="バージョン文字列" tabindex="-1">バージョン文字列 <a class="header-anchor" href="#バージョン文字列" aria-label="Permalink to &quot;バージョン文字列&quot;">​</a></h3><p>GLFW 3はまた、バージョン、プラットフォーム、コンパイラ、そして、 プラットフォーム固有のコンパイル時オプションを記述した、コンパイル時に生成される バージョン文字列を提供します。これは主にバグレポートを提出するためのもので、開発者がバイナリでどの コードパスが有効になっているかを確認できるようにするためのものです。</p><p>バージョン文字列は glfwGetVersionString 関数によって返される．この関数は GLFW が初期化されているかどうかに関係なく呼び出されることがある．</p><p>GLFW ライブラリのバージョンを解析するためにバージョン文字列を使用しないでください。glfwGetVersion 関数は、すでに実行中のライブラリ・バイナリのバージョンを提供しています。</p><p>文字列のフォーマットは以下の通りです．</p><ul><li>GLFWのバージョン</li><li>ウィンドウシステムAPIの名称</li><li>コンテキスト作成APIの名前</li><li>追加オプションやAPIがある場合</li></ul><p>たとえば、Win32とWGLのバックエンドを使ってGLFW 3.0をMinGWでコンパイルする場合、バージョン文字列は次のようになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3.0.0 Win32 WGL MinGW</span></span></code></pre></div>`,114)]))}const c=s(e,[["render",n]]);export{g as __pageData,c as default};
