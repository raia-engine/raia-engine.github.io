import{_ as e,c as t,a2 as s,o}from"./chunks/framework.CKGreiRV.js";const h=JSON.parse('{"title":"Natural Docsのセットアップ（日本語訳）","description":"","frontmatter":{},"headers":[],"relativePath":"resource/natural-docs/getting_started/getting_set_up.md","filePath":"resource/natural-docs/getting_started/getting_set_up.md","lastUpdated":1732720247000}'),n={name:"resource/natural-docs/getting_started/getting_set_up.md"};function p(i,a,l,c,r,d){return o(),t("div",null,a[0]||(a[0]=[s(`<h1 id="natural-docsのセットアップ-日本語訳" tabindex="-1">Natural Docsのセットアップ（日本語訳） <a class="header-anchor" href="#natural-docsのセットアップ-日本語訳" aria-label="Permalink to &quot;Natural Docsのセットアップ（日本語訳）&quot;">​</a></h1><p><a href="https://www.naturaldocs.org/getting_started/getting_set_up/" target="_blank" rel="noreferrer">原文</a></p><h2 id="ダウンロードとインストール" tabindex="-1">ダウンロードとインストール <a class="header-anchor" href="#ダウンロードとインストール" aria-label="Permalink to &quot;ダウンロードとインストール&quot;">​</a></h2><p>最初に行う必要があるのはNatural Docsをダウンロードすることです。ここからダウンロードします。</p><p><a href="https://www.naturaldocs.org/download" target="_blank" rel="noreferrer">Download</a></p><h3 id="windowsの説明" tabindex="-1">Windowsの説明 <a class="header-anchor" href="#windowsの説明" aria-label="Permalink to &quot;Windowsの説明&quot;">​</a></h3><p>WindowsのNatural Docsには.NET 3.5以降が必要です。Windows 7以降を使用している場合は、すでにそれを使用しています。</p><p>Natural Docsはコマンドライン（コンソール）アプリケーションなので、開発環境とビルドプロセスに統合することができます。つまり、グラフィカルインターフェースはありません。コマンドラインアプリケーションに既に慣れている場合は、「新しいプロジェクトを開始する」まで読み進めることができます。そうでない場合はこの後のセクションを読みながら、この説明を手元に置いてください。</p><p>Natural Docsへのショートカットを作成することにより、アイコンからNatural Docsを実行することができます。デスクトップの空の部分を右クリックし、新規 &gt; ショートカットを選択します。場所フィールドに引用符で囲んだNaturalDocs.exeのフルパスを入力し（例えば「C:¥Program Files (x86)¥Natural Docs¥NaturalDocs.exe 」）、引用符の外に必要なパラメータを入力します。どのパラメータを使用するかについては後に説明します。このような感じになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;C:¥Program Files (x86)¥Natural Docs¥Natural Docs¥NaturalDocs.exe&quot; C:¥My Project¥ND Config --pause-before-exit</span></span></code></pre></div><p>Nextをクリックし、名前を付けて、Finishをクリックします。これでダブルクリックできるアイコンができ、これらのパラメータで Natural Docsを実行することができます。変更する必要がある場合は、ショートカットを右クリックして、プロパティを選択し、ターゲットフィールドのパラメータを変更します。</p><p>Natural Docsをこの方法で実行する場合、パラメータリストに--pause-before-exitを常に追加して、コンソールウィンドウが自動的に閉じないようにしてステータスメッセージを見ることができるようにすることをお勧めします。すべてが思い通りに動作するようになったら、-pause-on-errorに変更し、問題がある場合にのみ開いたままにすることができます。</p><h3 id="macosとlinuxの説明" tabindex="-1">macOSとLinuxの説明 <a class="header-anchor" href="#macosとlinuxの説明" aria-label="Permalink to &quot;macOSとLinuxの説明&quot;">​</a></h3><p>Natural Docsは、macOSとLinuxで動作するためにMono 4.0以降が必要です。<a href="http://www.mono-project.com/download" target="_blank" rel="noreferrer">ここからダウンロードしてください</a>。</p><p>以下のすべての例では、コマンドラインの前に &quot;mono&quot; を追加し、Unixパスを使用することになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NaturalDocs.exe C:\\My Project\\ND Config</span></span></code></pre></div><p>このように使用します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mono NaturalDocs.exe /My Project/ND Config</span></span></code></pre></div><p>Natural Docs はコマンドライン（ターミナル）アプリケーションなので、開発環境やビルドプロセスに統合することができます。つまり、グラフィカルインターフェースはありません。手動で実行する場合は、ターミナルウィンドウから実行する必要があります。</p><h2 id="新規プロジェクトの開始" tabindex="-1">新規プロジェクトの開始 <a class="header-anchor" href="#新規プロジェクトの開始" aria-label="Permalink to &quot;新規プロジェクトの開始&quot;">​</a></h2><p>コードで既に古いバージョンのNatural Docsを使用している場合は、「1.x プロジェクトのアップグレード」に進んでください。</p><p>まず、2つのフォルダーを作成する必要があります。そのうちの1つは生成されたドキュメント用で、もう1つはNatural Docsの構成と作業データ用になります。後者はプロジェクト構成フォルダと呼ばれます。</p><p>プロジェクト構成フォルダをパラメータとしてNatural Docsを実行します。ちょうどこのようなものです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NaturalDocs.exe C:\\My Project\\ND Config</span></span></code></pre></div><p>すると、3つの設定ファイルが作成されるので、それを編集します。Comments.txtとLanguages.txtは今は気にする必要はなく、Project.txtだけが必要です。開いてみてください。</p><p>すべての設定ファイルにはオプションの説明が含まれているので、覚える必要はありません。プロジェクト情報のセクションが最初に表示されるので、プロジェクトの名前を書いたタイトル行を追加してください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Title: My Project</span></span></code></pre></div><p>次にSource Codeセクションまでスクロールダウンします。ここでNatural Docsにスキャンするフォルダを指定します。Source Folder行にそれらを追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Source Folder: C:\\My Project\\Source</span></span></code></pre></div><p>複数持つこともできますが数が多い場合は、親フォルダを置き、代わりに不要なものを除外するオプションもあります。ソースフィルタリングのセクションまでスクロールすれば、その方法がわかります。</p><p>次に、Generated Documentationセクションまでスクロールし、HTML Output Folder行を追加して、Natural Docsにその場所を知らせます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTML Output Folder: C:\\My Project\\Documentation</span></span></code></pre></div><p>これだけです。これでコマンドラインでプロジェクト構成フォルダ名を指定してNatural Docsを実行するたびに、これらのフォルダを検索してコードを探し、そのためのドキュメントを構築します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NaturalDocs.exe C:\\My Project\\ND Config</span></span></code></pre></div><p>もし、あなたが使っている言語が完全にサポートされていれば、すぐに使えるドキュメントを得ることができます。基本的なサポートしかない場合は、コードを文書化するまで出力に何も表示されないでしょう。</p><h2 id="_1-xプロジェクトのアップグレード" tabindex="-1">1.xプロジェクトのアップグレード <a class="header-anchor" href="#_1-xプロジェクトのアップグレード" aria-label="Permalink to &quot;1.xプロジェクトのアップグレード&quot;">​</a></h2><p>コードで既に Natural Docs 1.x を使用している場合、アップグレードは簡単です。まず、古いファイルが混ざらないようにドキュメントフォルダの中身を削除します。また、プロジェクト構成フォルダのDataフォルダを削除します。このフォルダには.ndファイルだけが含まれているはずで、プロジェクト構成フォルダ内の.txtファイルは削除しないでください。</p><p>あとは、新しいバージョンを以前と同じコマンドラインで実行するだけです。このようなことは、今でも有効です。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NaturalDocs.exe -i c:\\My Project\\Source</span></span>
<span class="line"><span>                -p c:\\My Project\\ND Config</span></span>
<span class="line"><span>                -o HTML C:\\My Project\\Documentation</span></span></code></pre></div><p>これで終わりです。今後、コマンドラインを使用し続けるか、Project.txt を使用するように切り替えることができます。これはプロジェクト構成フォルダ内のファイルで、以前はコマンドラインで行っていたすべての設定を保存するため、将来はこの方法でNatural Docsを実行できます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NaturalDocs.exe c:\\My Project\\ND Config</span></span></code></pre></div><p>コマンドラインでプロジェクトの設定フォルダを指定するだけで、もう-pは必要ありません。変更を加えるにはProject.txtを編集するだけです。また、プロジェクトのタイトルや著作権など、いくつかの設定をMenu.txtからコピーしています。Menu.txtはもう使われないので、初回実行後に削除してもかまいません。Topics.txtも同様で、その設定は初回実行時にComments.txtにコピーされ、今後使用されることはないでしょう。</p>`,42)]))}const g=e(n,[["render",p]]);export{h as __pageData,g as default};
