import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.fec3dccb.js";const u=JSON.parse('{"title":"プラグインの作成","description":"","frontmatter":{},"headers":[],"relativePath":"wiki/plugin.md","filePath":"wiki/plugin.md"}'),p={name:"wiki/plugin.md"},o=l(`<h1 id="プラグインの作成" tabindex="-1">プラグインの作成 <a class="header-anchor" href="#プラグインの作成" aria-label="Permalink to &quot;プラグインの作成&quot;">​</a></h1><p>RaiaEngineはCインターフェースを用いた共有ライブラリをプラグインとして使用します。共有ライブラリを作成できる環境であればプログラミング言語を問わずプラグインを作成することができます。</p><p>現在、C, C++, Rust, Zig, Go, D, V でプラグインを作成できることを確認しています。</p><h2 id="c言語でプラグインを作成する" tabindex="-1">C言語でプラグインを作成する <a class="header-anchor" href="#c言語でプラグインを作成する" aria-label="Permalink to &quot;C言語でプラグインを作成する&quot;">​</a></h2><h3 id="cmakeを使用する場合" tabindex="-1">CMakeを使用する場合: <a class="header-anchor" href="#cmakeを使用する場合" aria-label="Permalink to &quot;CMakeを使用する場合:&quot;">​</a></h3><p>以下のコマンドをターミナルで実行します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># プロジェクトを格納するためのディレクトリを作成します。ディレクトリ名は任意です。</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 移動します</span></span>
<span class="line"><span style="color:#B392F0;">touch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library.c</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># C言語のソースファイルを作成します。ファイル名は任意です。</span></span>
<span class="line"><span style="color:#B392F0;">touch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CMakeLists.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># CMakeに必要なファイルを作成します</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># プロジェクトを格納するためのディレクトリを作成します。ディレクトリ名は任意です。</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 移動します</span></span>
<span class="line"><span style="color:#6F42C1;">touch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library.c</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># C言語のソースファイルを作成します。ファイル名は任意です。</span></span>
<span class="line"><span style="color:#6F42C1;">touch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CMakeLists.txt</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># CMakeに必要なファイルを作成します</span></span></code></pre></div><p>C言語のソースファイル<code>library.c</code>を編集します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__WINDOWS__</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RAIA_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__declspec</span><span style="color:#E1E4E8;">(dllexport)</span></span>
<span class="line"><span style="color:#F97583;">#else</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RAIA_EXPORT</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">RAIA_EXPORT </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__WINDOWS__</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RAIA_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__declspec</span><span style="color:#24292E;">(dllexport)</span></span>
<span class="line"><span style="color:#D73A49;">#else</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RAIA_EXPORT</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">RAIA_EXPORT </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, s);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>CMakeLists.txtを編集します。</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">cmake_minimum_required</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">VERSION</span><span style="color:#E1E4E8;"> 3.25)</span></span>
<span class="line"><span style="color:#F97583;">project</span><span style="color:#E1E4E8;">(library C)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">set</span><span style="color:#E1E4E8;">(CMAKE_C_STANDARD 11)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">add_library</span><span style="color:#E1E4E8;">(library SHARED library.c)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">cmake_minimum_required</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">VERSION</span><span style="color:#24292E;"> 3.25)</span></span>
<span class="line"><span style="color:#D73A49;">project</span><span style="color:#24292E;">(library C)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">set</span><span style="color:#24292E;">(CMAKE_C_STANDARD 11)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">add_library</span><span style="color:#24292E;">(library SHARED library.c)</span></span></code></pre></div><p>ビルドします。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">make</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cmake</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">make</span></span></code></pre></div><h3 id="todo-makefileを使用する" tabindex="-1">TODO Makefileを使用する <a class="header-anchor" href="#todo-makefileを使用する" aria-label="Permalink to &quot;TODO Makefileを使用する&quot;">​</a></h3><h2 id="rustでプラグインを作成する" tabindex="-1">Rustでプラグインを作成する <a class="header-anchor" href="#rustでプラグインを作成する" aria-label="Permalink to &quot;Rustでプラグインを作成する&quot;">​</a></h2><p>まず新しいプロジェクトを作成します。ターミナルで次のコマンドを実行してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--lib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--lib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library</span></span></code></pre></div><p>プロジェクトディレクトリ内の Cargo.toml ファイルを開き、<code>[lib]</code>セクションを追加し、crate-type を設定して共有ライブラリとしてコンパイルされるように指定します。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">lib</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">name = </span><span style="color:#9ECBFF;">&quot;library&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">crate-type = [</span><span style="color:#9ECBFF;">&quot;cdylib&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">libc = </span><span style="color:#9ECBFF;">&quot;0.2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">serde = { version = </span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">, features = [</span><span style="color:#9ECBFF;">&quot;derive&quot;</span><span style="color:#E1E4E8;">] }</span></span>
<span class="line"><span style="color:#E1E4E8;">serde_json = </span><span style="color:#9ECBFF;">&quot;1.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">lib</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;library&quot;</span></span>
<span class="line"><span style="color:#24292E;">crate-type = [</span><span style="color:#032F62;">&quot;cdylib&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">libc = </span><span style="color:#032F62;">&quot;0.2&quot;</span></span>
<span class="line"><span style="color:#24292E;">serde = { version = </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">, features = [</span><span style="color:#032F62;">&quot;derive&quot;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">serde_json = </span><span style="color:#032F62;">&quot;1.0&quot;</span></span></code></pre></div><p>src/lib.rs ファイルを開き、共有ライブラリからエクスポートする関数を定義します。ここで、<code>#[no_mangle]</code> 属性を使用して、Rustコンパイラが関数名をマングリングしないように指示します。また、pub extern を使用して、関数が外部からアクセス可能になるように指定します。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">ffi</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">CString</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">CStr</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">os</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">raw</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{c_char, c_void};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serde_json</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">c_json_to_json</span><span style="color:#E1E4E8;">(s</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*const</span><span style="color:#E1E4E8;"> c_char) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> src_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsafe</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">CStr</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_ptr</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">to_str</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">() };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parsed_data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serde_json</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_str</span><span style="color:#E1E4E8;">(src_str)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parsed_data;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">json_to_c_ptr</span><span style="color:#E1E4E8;">(s</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*const</span><span style="color:#E1E4E8;"> c_char {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c_result_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CString</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> c_result_str</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into_raw</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[no_mangle]</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function_name</span><span style="color:#E1E4E8;">(src</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*const</span><span style="color:#E1E4E8;"> c_char) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*const</span><span style="color:#E1E4E8;"> c_char {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parsed_data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">c_json_to_json</span><span style="color:#E1E4E8;">(src);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">format!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Result: {}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">serde_json</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">to_string_pretty</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">parsed_data)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">json_to_c_ptr</span><span style="color:#E1E4E8;">(result_str);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">ffi</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">CString</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">CStr</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">os</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">raw</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{c_char, c_void};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serde_json</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">c_json_to_json</span><span style="color:#24292E;">(s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*const</span><span style="color:#24292E;"> c_char) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> src_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsafe</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">CStr</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_ptr</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">to_str</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">() };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parsed_data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serde_json</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_str</span><span style="color:#24292E;">(src_str)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parsed_data;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">json_to_c_ptr</span><span style="color:#24292E;">(s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*const</span><span style="color:#24292E;"> c_char {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c_result_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CString</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> c_result_str</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into_raw</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[no_mangle]</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function_name</span><span style="color:#24292E;">(src</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*const</span><span style="color:#24292E;"> c_char) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*const</span><span style="color:#24292E;"> c_char {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parsed_data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">c_json_to_json</span><span style="color:#24292E;">(src);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">format!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Result: {}&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">serde_json</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">to_string_pretty</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">parsed_data)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">json_to_c_ptr</span><span style="color:#24292E;">(result_str);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>プロジェクトディレクトリで、次のコマンドを実行して共有ライブラリをビルドします:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--release</span></span></code></pre></div><h2 id="zigでプラグインを作成する" tabindex="-1">Zigでプラグインを作成する <a class="header-anchor" href="#zigでプラグインを作成する" aria-label="Permalink to &quot;Zigでプラグインを作成する&quot;">​</a></h2><p>まず、共有ライブラリに含めるソースファイルを作成します。例として、my_shared_lib.zigというファイルを作成し、次のようなコードを記述します。</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">std</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@cImport</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">@cInclude</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;stddef.h&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function_name</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">src</span><span style="color:#E1E4E8;">: [</span><span style="color:#F97583;">*c]const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">) [</span><span style="color:#F97583;">*c]u8</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ここで、src、data、sizeを使って処理を行います。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// この例では、単純にsrcを返すだけです。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">src</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">std</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@cImport</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">@cInclude</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;stddef.h&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function_name</span><span style="color:#24292E;">(</span><span style="color:#E36209;">src</span><span style="color:#24292E;">: [</span><span style="color:#D73A49;">*c]const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">) [</span><span style="color:#D73A49;">*c]u8</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ここで、src、data、sizeを使って処理を行います。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// この例では、単純にsrcを返すだけです。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">src</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>次に、zig build-libコマンドを使って共有ライブラリをビルドします。以下のコマンドを実行して、共有ライブラリをビルドしてください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">zig</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build-lib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_shared_lib.zig</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-dynamic</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">zig</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build-lib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_shared_lib.zig</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-dynamic</span></span></code></pre></div><h2 id="goでプラグインを作成する" tabindex="-1">Goでプラグインを作成する <a class="header-anchor" href="#goでプラグインを作成する" aria-label="Permalink to &quot;Goでプラグインを作成する&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library</span></span></code></pre></div><p>go.modとgo.sumが作成されます</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">C</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/json</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">runtime</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">unsafe</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cCharToJSON</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">C.char) </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{} {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> goJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> C.</span><span style="color:#79B8FF;">GoString</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parsed </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Unmarshal</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(goJson), </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">parsed)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parsed</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONtoCPtr</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) unsafe.Pointer {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bytes, _ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> cStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> C.</span><span style="color:#79B8FF;">CString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(bytes))</span></span>
<span class="line"><span style="color:#E1E4E8;">	runtime.</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">(cStr)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> unsafe.</span><span style="color:#79B8FF;">Pointer</span><span style="color:#E1E4E8;">(cStr)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//export goFunc</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">goFunc</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">C.char) unsafe.Pointer {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cCharToJSON</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSONtoCPtr</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;result&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {} </span><span style="color:#6A737D;">// Required but does nothing</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">C</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/json</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">runtime</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">unsafe</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cCharToJSON</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">C.char) </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{} {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> goJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> C.</span><span style="color:#005CC5;">GoString</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> parsed </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Unmarshal</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(goJson), </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">parsed)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parsed</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONtoCPtr</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) unsafe.Pointer {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bytes, _ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> cStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> C.</span><span style="color:#005CC5;">CString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(bytes))</span></span>
<span class="line"><span style="color:#24292E;">	runtime.</span><span style="color:#005CC5;">KeepAlive</span><span style="color:#24292E;">(cStr)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> unsafe.</span><span style="color:#005CC5;">Pointer</span><span style="color:#24292E;">(cStr)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//export goFunc</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">goFunc</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">C.char) unsafe.Pointer {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> parsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cCharToJSON</span><span style="color:#24292E;">(s)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSONtoCPtr</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;result&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {} </span><span style="color:#6A737D;">// Required but does nothing</span></span></code></pre></div><p>ビルドします</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library.dylib</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-buildmode=c-shared</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library.dylib</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-buildmode=c-shared</span></span></code></pre></div><h2 id="v言語" tabindex="-1">V言語 <a class="header-anchor" href="#v言語" aria-label="Permalink to &quot;V言語&quot;">​</a></h2><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mylib</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[export]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s </span><span style="color:#6A737D;">// あるいは他の文字列を返す</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mylib</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[export]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s </span><span style="color:#6A737D;">// あるいは他の文字列を返す</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-shared</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library.dylib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library.v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-shared</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library.dylib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library.v</span></span></code></pre></div><h2 id="d言語" tabindex="-1">D言語 <a class="header-anchor" href="#d言語" aria-label="Permalink to &quot;D言語&quot;">​</a></h2><div class="language-d vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">d</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">core.stdc.stdlib</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">malloc</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">free</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">C</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_func</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">s</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">p</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ここに具体的な処理を記述します</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">core.stdc.string</span><span style="color:#E1E4E8;"> : </span><span style="color:#FFAB70;">strlen</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">strcpy</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">strlen</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">cast(char</span><span style="color:#E1E4E8;">*</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">strcpy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#E36209;">core.stdc.stdlib</span><span style="color:#24292E;">: </span><span style="color:#E36209;">malloc</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> </span><span style="color:#E36209;">free</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">C</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">s</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">p</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ここに具体的な処理を記述します</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#E36209;">core.stdc.string</span><span style="color:#24292E;"> : </span><span style="color:#E36209;">strlen</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> </span><span style="color:#E36209;">strcpy</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">cast(char</span><span style="color:#24292E;">*</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#E36209;">len</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> </span><span style="color:#E36209;">s</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">res</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ldc2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-shared</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library.d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-of=library.dylib</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ldc2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-shared</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library.d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-of=library.dylib</span></span></code></pre></div>`,40),e=[o];function c(t,r,y,E,i,F){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{u as __pageData,C as default};
