import{_ as i,c as s,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"io.read","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/io/read.md","filePath":"reference/built_in/io/read.md","lastUpdated":1730041717000}'),l={name:"reference/built_in/io/read.md"};function n(h,a,r,o,d,p){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="io-read" tabindex="-1">io.read <a class="header-anchor" href="#io-read" aria-label="Permalink to &quot;io.read&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">io.read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (···)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>デフォルトの入力ファイルからデータを指定されたフォーマットで読み取ります。フォーマットには <code>&quot;n&quot;</code>（数値の読み込み）、<code>&quot;l&quot;</code>（行の読み込み）、数字（読み取るバイト数の指定）などがあります。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">io.input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1行を読み込む</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line)</span></span></code></pre></div><p>この例では、ファイルから1行を読み取って出力しています。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><ul><li>64ビットファイルオフセットを扱う。</li><li>先頭に*があるかないかにかかわらずフォーマットを受け入れる。(Lua5.3から)</li></ul><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.3</li><li>LuaJIT</li></ul>`,11)]))}const u=i(l,[["render",n]]);export{c as __pageData,u as default};
