import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.CuCbyi2k.js";const E=JSON.parse('{"title":"クラスの継承","description":"","frontmatter":{},"headers":[],"relativePath":"resource/dart/language/classes_and_objects/extend_a_class.md","filePath":"resource/dart/language/classes_and_objects/extend_a_class.md","lastUpdated":1732376957000}'),t={name:"resource/dart/language/classes_and_objects/extend_a_class.md"};function e(h,s,p,k,d,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="クラスの継承" tabindex="-1">クラスの継承 <a class="header-anchor" href="#クラスの継承" aria-label="Permalink to &quot;クラスの継承&quot;">​</a></h1><p>サブクラスを作成するには extends を使い、スーパークラスを参照するには super を使う：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Television</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> turnOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _illuminateDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _activateIrSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ···</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SmartTelevision</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Television</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> turnOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">turnOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _bootNetworkInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _initializeMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _upgradeApps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ···</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>extendsの別の使い方については、ジェネリクスのページのパラメータ化された型の議論を参照のこと。</p><h2 id="オーバーライド・メンバー" tabindex="-1">オーバーライド・メンバー <a class="header-anchor" href="#オーバーライド・メンバー" aria-label="Permalink to &quot;オーバーライド・メンバー&quot;">​</a></h2><p>サブクラスは、インスタンス・メソッド (演算子を含む)、ゲッター、およびセッターをオーバーライドできます。オーバーライド・アノテーションを使用すると、メンバを意図的にオーバーライドしていることを示すことができます：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Television</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ···</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contrast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value) {...}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SmartTelevision</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Television</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contrast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value) {...}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ···</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>オーバーライド・メソッド宣言は、いくつかの点でオーバーライドするメソッドと一致しなければならない：</p><ul><li>リターン・タイプは、オーバーライドされたメソッドのリターン・タイプと同じタイプ (またはそのサブタイプ) でなければなりません。</li><li>パラメータ型は、オーバーライドされたメソッドのパラメータ型と同じ型 (またはそのスーパー型) である必要があります。前述の例では、SmartTelevision の contrast セッタは、パラメータ・タイプを int からスーパータイプの num に変更しています。</li><li>オーバーライドされるメソッドが n 個の位置パラメータを受け入れる場合、オーバーライドされるメソッドも n 個の位置パラメータを受け入れなければなりません。</li><li>ジェネリック・メソッドは非ジェネリック・メソッドをオーバーライドできず、非ジェネリック・メソッドはジェネリック・メソッドをオーバーライドできません。</li></ul><p>メソッド・パラメーターやインスタンス変数の型を絞り込みたい場合があります。これは通常のルールに反し、実行時に型エラーを引き起こす可能性があるという点で、ダウンキャストと似ている。それでも、型エラーが発生しないことを保証できるコードであれば、型を狭めることは可能です。この場合、パラメータ宣言で covariant キーワードを使用できます。詳細については、Dart言語仕様を参照してください。</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p><code>==</code>をオーバーライドする場合は、ObjectのhashCodeゲッターもオーバーライドする必要があります。<code>==</code>とhashCodeをオーバーライドする例については、マップ・キーの実装を参照してください。</p></div><h2 id="nosuchmethod" tabindex="-1">noSuchMethod() <a class="header-anchor" href="#nosuchmethod" aria-label="Permalink to &quot;noSuchMethod()&quot;">​</a></h2><p>存在しないメソッドやインスタンス変数を使おうとするコードを検出したり反応させたりするには、noSuchMethod() をオーバーライドします：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Unless you override noSuchMethod, using a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // non-existent member results in a NoSuchMethodError.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> noSuchMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Invocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invocation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;You tried to use a non-existent member: &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">invocation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">memberName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下のいずれかが真でない限り、未実装のメソッドを呼び出すことはできない：</p><ul><li>レシーバは静的型 dynamic を持つ。</li><li>レシーバーは未実装のメソッドを定義した静的型（abstractでOK）を持ち、レシーバーの動的型はクラスObjectのものとは異なるnoSuchMethod()の実装を持つ。</li></ul><p>詳細については、非公式のnoSuchMethod転送仕様を参照のこと。</p>`,17)]))}const o=i(t,[["render",e]]);export{E as __pageData,o as default};
