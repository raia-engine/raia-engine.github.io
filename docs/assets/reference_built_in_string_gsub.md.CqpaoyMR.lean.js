import{_ as s,c as i,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"string.gsub","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/string/gsub.md","filePath":"reference/built_in/string/gsub.md","lastUpdated":1730090475000}'),l={name:"reference/built_in/string/gsub.md"};function n(r,a,h,o,d,p){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="string-gsub" tabindex="-1">string.gsub <a class="header-anchor" href="#string-gsub" aria-label="Permalink to &quot;string.gsub&quot;">​</a></h1><p>文字列内でパターンに一致する部分を置換する</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string.gsub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s, pattern, repl [, n])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>文字列 <code>s</code> の中で、パターン <code>pattern</code> に一致する部分を <code>repl</code> で置き換えた新しい文字列を返します。<code>repl</code> には、文字列、関数、またはテーブルを指定できます。オプションの <code>n</code> を指定すると、最初の <code>n</code> 回だけ置換が行われます。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li>LuaJITではLua5.2から文字列マッチングパターン <code>%g</code> を取り入れています。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string.gsub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Lua is great&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;great&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;awesome&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &quot;Lua is awesome&quot;</span></span></code></pre></div><p>この例では、<code>&quot;great&quot;</code>を<code>&quot;awesome&quot;</code>に置き換えています。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><ul><li>文字列マッチングパターン<code>%g</code>が追加された。(Lua5.2から)</li></ul><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./find.html"><code>string.find</code></a></li><li><a href="./sub.html"><code>string.sub</code></a></li></ul>`,16)]))}const k=s(l,[["render",n]]);export{c as __pageData,k as default};
