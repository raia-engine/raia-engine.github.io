import{_ as i,c as a,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"Lua 5.2 リファレンスマニュアル","description":"","frontmatter":{},"headers":[],"relativePath":"resource/lua/5.2_manual.md","filePath":"resource/lua/5.2_manual.md","lastUpdated":1729914702000}'),n={name:"resource/lua/5.2_manual.md"};function l(h,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="lua-5-2-リファレンスマニュアル" tabindex="-1">Lua 5.2 リファレンスマニュアル <a class="header-anchor" href="#lua-5-2-リファレンスマニュアル" aria-label="Permalink to &quot;Lua 5.2 リファレンスマニュアル&quot;">​</a></h1><p>執筆者: Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes<br> 著作権 © 2011–2013 Lua.org, PUC-Rio. Luaライセンスの条件のもと、無料で提供されています。</p><nav class="table-of-contents"><ul><li><a href="#_1-はじめに">1 - はじめに</a></li><li><a href="#_2-基本概念">2 - 基本概念</a><ul><li><a href="#_2-1-値と型">2.1 - 値と型</a></li><li><a href="#_2-2-環境とグローバル環境">2.2 - 環境とグローバル環境</a></li><li><a href="#_2-3-エラーハンドリング">2.3 - エラーハンドリング</a></li><li><a href="#_2-4-メタテーブルとメタメソッド">2.4 - メタテーブルとメタメソッド</a></li><li><a href="#_2-5-ガベージコレクション">2.5 - ガベージコレクション</a></li><li><a href="#_2-5-2-弱テーブル">2.5.2 - 弱テーブル</a></li><li><a href="#_2-6-コルーチン">2.6 - コルーチン</a></li></ul></li><li><a href="#_3-–-言語">3 – 言語</a><ul><li><a href="#_3-1-–-字句規則">3.1 – 字句規則</a></li><li><a href="#_3-2-–-変数">3.2 – 変数</a></li><li><a href="#_3-3-–-文-statements">3.3 – 文（Statements）</a></li><li><a href="#_3-4-–-式-expressions">3.4 – 式（Expressions）</a></li><li><a href="#_3-5-–-可視性ルール">3.5 – 可視性ルール</a></li></ul></li><li><a href="#_4-–-アプリケーションプログラムインターフェース-api">4 – アプリケーションプログラムインターフェース（API）</a><ul><li><a href="#_4-1-–-スタック">4.1 – スタック</a></li><li><a href="#_4-2-–-スタックサイズ">4.2 – スタックサイズ</a></li><li><a href="#_4-3-–-有効なインデックスと許容インデックス">4.3 – 有効なインデックスと許容インデックス</a></li><li><a href="#_4-4-–-cクロージャ">4.4 – Cクロージャ</a></li><li><a href="#_4-5-–-レジストリ">4.5 – レジストリ</a></li><li><a href="#_4-6-–-cでのエラーハンドリング">4.6 – Cでのエラーハンドリング</a></li><li><a href="#_4-7-–-cでのコルーチンのyield処理">4.7 – Cでのコルーチンのyield処理</a></li><li><a href="#_4-8-–-関数と型">4.8 – 関数と型</a></li><li><a href="#_4-9-–-デバッグインターフェース">4.9 – デバッグインターフェース</a></li></ul></li><li><a href="#_5-–-補助ライブラリ">5 – 補助ライブラリ</a><ul><li><a href="#_5-1-–-関数と型">5.1 – 関数と型</a></li></ul></li><li><a href="#_6-–-標準ライブラリ">6 – 標準ライブラリ</a><ul><li><a href="#_6-1-–-基本関数">6.1 – 基本関数</a></li></ul></li></ul></nav><h2 id="_1-はじめに" tabindex="-1">1 - はじめに <a class="header-anchor" href="#_1-はじめに" aria-label="Permalink to &quot;1 - はじめに&quot;">​</a></h2><p>Luaは、データ記述の機能を備えた汎用的な手続き型プログラミングをサポートする拡張プログラミング言語です。また、オブジェクト指向プログラミング、関数型プログラミング、データ駆動型プログラミングにも優れたサポートを提供しています。Luaは、スクリプト言語を必要とする任意のプログラムのための、強力かつ軽量で埋め込み可能なスクリプト言語として設計されています。LuaはクリーンなCコードで書かれたライブラリとして実装されており、Standard CとC++の共通部分で構成されています。</p><p>Luaは拡張言語であるため、「メイン」プログラムという概念はありません。常にホストとなるクライアントプログラム内で埋め込まれ、その中で動作します。ホストプログラムはLuaコードを実行するために関数を呼び出したり、Luaの変数を読み書きしたり、Luaコードから呼び出されるC関数を登録したりすることができます。C関数を使用することで、Luaは多様な領域に対応できるように拡張でき、同じ構文フレームワークを共有するカスタマイズされたプログラミング言語を作成できます。Luaの配布には、Luaライブラリを利用して対話型またはバッチ処理に対応する完全な独立したLuaインタプリタである「lua」というサンプルホストプログラムが含まれています。</p><p>Luaはフリーソフトウェアであり、通常の保証はなく、ライセンスに明記された通り提供されます。このマニュアルで説明されている実装は、Luaの公式ウェブサイト <a href="http://www.lua.org" target="_blank" rel="noreferrer">www.lua.org</a> で入手可能です。</p><p>この文書は他のリファレンスマニュアルと同様、読みにくい箇所があるかもしれません。Luaの設計に関する決定については、Luaのウェブサイトにある技術論文を参照してください。また、Luaでのプログラミングに関する詳細な入門書として、Robertoの著書『Programming in Lua』があります。</p><h2 id="_2-基本概念" tabindex="-1">2 - 基本概念 <a class="header-anchor" href="#_2-基本概念" aria-label="Permalink to &quot;2 - 基本概念&quot;">​</a></h2><p>このセクションでは、Lua言語の基本的な概念について説明します。</p><h3 id="_2-1-値と型" tabindex="-1">2.1 - 値と型 <a class="header-anchor" href="#_2-1-値と型" aria-label="Permalink to &quot;2.1 - 値と型&quot;">​</a></h3><p>Luaは動的型付け言語です。これは、変数自体に型がないことを意味し、型は値にのみ関連付けられます。言語内に型の定義は存在せず、すべての値はその型情報を持っています。</p><p>Luaのすべての値は「第一級の値」です。つまり、すべての値は変数に格納でき、他の関数への引数として渡したり、結果として返したりすることができます。</p><p>Luaには8つの基本的な型があります: <code>nil</code>、<code>boolean</code>、<code>number</code>、<code>string</code>、<code>function</code>、<code>userdata</code>、<code>thread</code>、および <code>table</code> です。<code>nil</code>は、他のすべての値と異なる特性を持ち、通常は有効な値がないことを示します。<code>boolean</code>は<code>false</code>と<code>true</code>の値を持つ型で、<code>nil</code>と<code>false</code>は条件を<code>false</code>にし、他の値はすべて<code>true</code>にします。<code>number</code>は実数（倍精度浮動小数点数）を表します。数値に対する操作は、通常IEEE 754規格に準拠しているCの実装ルールに従います。（単精度浮動小数点数や長整数など、他の内部表現を使用するLuaインタプリタも簡単に作成できます。詳細は<code>luaconf.h</code>ファイルを参照してください）。<code>string</code>は不変のバイト列を表します。Luaは8ビットに対応しているため、文字列には埋め込みゼロ（<code>\\0</code>）を含む任意の8ビット値が含まれます。</p><p>Luaは、Luaで書かれた関数とCで書かれた関数の両方を呼び出し操作できます（詳細は§3.4.9を参照してください）。</p><p><code>userdata</code>型は、任意のCデータをLua変数に格納するために提供されており、<code>userdata</code>値は生のメモリブロックへのポインタです。<code>userdata</code>には、Luaによって管理されるフル<code>userdata</code>と、ホストによって管理される軽量<code>userdata</code>の2種類があります。<code>userdata</code>にはLua内で事前定義された操作はなく、代入と同一性テストのみがサポートされています。メタテーブルを使用することで、プログラマはフル<code>userdata</code>に対する操作を定義できます（詳細は§2.4を参照してください）。<code>userdata</code>はLua内で生成または変更できず、C APIを通じてのみ操作可能です。これにより、ホストプログラムが所有するデータの整合性が保証されます。</p><p><code>thread</code>型は独立した実行スレッドを表し、コルーチンを実装するために使用されます（詳細は§2.6を参照してください）。Luaのスレッドとオペレーティングシステムのスレッドは異なるものです。Luaは、OSのスレッドサポートがないシステムでもコルーチンを利用できます。</p><p><code>table</code>型は、連想配列（配列のインデックスに数字だけでなく、任意のLua値（ただし<code>nil</code>と<code>NaN</code>を除く）を使用できる配列）を実装します。<code>table</code>は異種データ（異なる型の値）を含むことができ、キーの値が<code>nil</code>のエントリはテーブルの一部とみなされません。反対に、テーブルの一部でないキーには<code>nil</code>の値が関連付けられます。</p><p>Luaにおける<code>table</code>は唯一のデータ構造化機構であり、通常の配列、シーケンス、シンボルテーブル、集合、レコード、グラフ、ツリーなどを表現できます。レコードを表現するために、Luaではフィールド名をインデックスとして使用します。この言語では<code>a.name</code>という記法を<code>a[&quot;name&quot;]</code>の簡略形として提供しています。Luaにはテーブルを作成するための便利な方法がいくつかあります（詳細は§3.4.8を参照してください）。</p><p><code>シーケンス</code>という用語は、{1..n}という形で全ての正の数値キーを持つテーブルを指し、nはシーケンスの長さと呼ばれます（詳細は§3.4.6を参照してください）。</p><p>テーブルのフィールドの値は、関数が第一級の値であるため、任意の型であることができます。したがって、テーブルにはメソッド（関数）を含めることができます（詳細は§3.4.10を参照してください）。</p><p>テーブルのインデックスは、Luaの生の等価性定義に従います。式<code>a[i]</code>と<code>a[j]</code>は、iとjが生で等しい（メタメソッドを使用しない等価である）場合にのみ同じテーブル要素を指します。</p><p>テーブル、関数、スレッド、そして（フル）userdataの値は「オブジェクト」です。これらの値を変数に直接含むのではなく、参照として扱います。代入、パラメータの受け渡し、および関数の戻り値は常に参照を操作し、これらの操作はコピーを伴いません。</p><p>ライブラリ関数<code>type</code>は、指定された値の型を示す文字列を返します（詳細は§6.1を参照してください）。</p><h3 id="_2-2-環境とグローバル環境" tabindex="-1">2.2 - 環境とグローバル環境 <a class="header-anchor" href="#_2-2-環境とグローバル環境" aria-label="Permalink to &quot;2.2 - 環境とグローバル環境&quot;">​</a></h3><p>§3.2と§3.3.3で詳しく説明されるように、グローバル名 <code>var</code> への参照は、構文的に <code>_ENV.var</code> へと変換されます。また、すべてのチャンク（Luaコードの一塊）は、外部のローカル変数 <code>_ENV</code> のスコープ内でコンパイルされるため（§3.3.2参照）、チャンク内で <code>_ENV</code> 自体がグローバル名になることはありません。</p><p>この外部変数 <code>_ENV</code> の存在やグローバル名の変換にもかかわらず、<code>_ENV</code> は通常の変数名として扱えます。具体的には、この名前で新しい変数やパラメータを定義することができます。プログラム内でグローバル名にアクセスするときには、Luaの通常の可視性ルールに従って、その時点で見える <code>_ENV</code> が使用されます（§3.5参照）。</p><p><code>_ENV</code> に割り当てられたテーブルは「環境」と呼ばれます。</p><p>Luaは「グローバル環境」と呼ばれる特別な環境を保持しています。この値は、Cレジストリ内の特別なインデックスに保持されます（§4.5参照）。Luaでは、このグローバル環境と同じ値で変数 <code>_G</code> が初期化されます。</p><p>Luaがチャンクをコンパイルする際、そのチャンクの <code>_ENV</code> アップバリュー（上位値）をグローバル環境で初期化します（<code>load</code> 参照）。したがって、デフォルトでは、Luaコード内のグローバル変数はグローバル環境のエントリを参照します。また、すべての標準ライブラリはグローバル環境にロードされており、いくつかの関数はこの環境で操作を行います。<code>load</code> や <code>loadfile</code> を使用すると、異なる環境でチャンクを読み込むことができます。（C言語では、チャンクを読み込んだ後で最初のアップバリューの値を変更する必要があります）。</p><p>Cコードやデバッグライブラリを通じてレジストリ内のグローバル環境を変更すると、変更後に読み込まれたチャンクは新しい環境を取得します。しかし、以前に読み込まれたチャンクには影響がありません。これは、それぞれが自身の <code>_ENV</code> 変数内に環境への参照を持っているためです。また、Luaは変数 <code>_G</code>（元のグローバル環境に格納されている）を更新しません。</p><h3 id="_2-3-エラーハンドリング" tabindex="-1">2.3 - エラーハンドリング <a class="header-anchor" href="#_2-3-エラーハンドリング" aria-label="Permalink to &quot;2.3 - エラーハンドリング&quot;">​</a></h3><p>Luaは埋め込み型の拡張言語であるため、すべてのLuaの動作はホストプログラム内のCコードがLuaライブラリからの関数を呼び出すことから始まります（<code>lua_pcall</code>参照）。Luaチャンクのコンパイルや実行中にエラーが発生すると、制御はホストプログラムに戻され、適切な処理（例: エラーメッセージの表示）を行うことができます。</p><p>Luaコード内で明示的にエラーを発生させるには、<code>error</code> 関数を使用します。Luaでエラーをキャッチする必要がある場合、<code>pcall</code> または <code>xpcall</code> を使って特定の関数を保護モードで呼び出すことができます。</p><p>エラーが発生すると、エラーに関する情報を持ったエラーオブジェクト（エラーメッセージとも呼ばれます）が伝播されます。Lua自体はエラーオブジェクトが文字列のエラーのみを生成しますが、プログラムはエラーオブジェクトに任意の値を使用してエラーを生成することが可能です。</p><p><code>xpcall</code> または <code>lua_pcall</code> を使用する際、エラー発生時に呼び出されるメッセージハンドラを指定することができます。この関数は元のエラーメッセージを受け取り、新しいエラーメッセージを返します。この関数はエラーがスタックを巻き戻す前に呼び出されるため、スタックのトレースバックを生成するなど、エラーに関するさらなる情報を収集できます。このメッセージハンドラも保護された呼び出しによって保護されるため、メッセージハンドラ内でエラーが発生すると再びメッセージハンドラが呼ばれます。このループが続くと、Luaはそれを停止し、適切なメッセージを返します。</p><h3 id="_2-4-メタテーブルとメタメソッド" tabindex="-1">2.4 - メタテーブルとメタメソッド <a class="header-anchor" href="#_2-4-メタテーブルとメタメソッド" aria-label="Permalink to &quot;2.4 - メタテーブルとメタメソッド&quot;">​</a></h3><p>Luaのすべての値はメタテーブルを持つことができます。メタテーブルは通常のLuaテーブルで、特定の操作時に元の値の動作を定義します。メタテーブルの特定のフィールドを設定することで、値に対する操作のいくつかの挙動を変更できます。例えば、数値でない値を足し算の演算子のオペランドとして使用すると、Luaはその値のメタテーブルの&quot;__add&quot;フィールドに関数があるかどうかを確認します。関数が見つかれば、その関数が足し算を実行します。</p><p>メタテーブルのキーはイベント名から派生しており、対応する値はメタメソッドと呼ばれます。前述の例では、イベントは&quot;add&quot;で、メタメソッドは足し算を行う関数です。</p><p>メタテーブルは<code>getmetatable</code>関数で確認できます。</p><p>テーブルのメタテーブルは<code>setmetatable</code>関数で置き換えることができますが、他の型のメタテーブルはLuaから変更できません（デバッグライブラリを除く）。これにはC APIを使用する必要があります。</p><p>テーブルとフルユーザデータは個別のメタテーブルを持つことができますが、他のすべての型は同じ型の値で1つのメタテーブルを共有します。つまり、すべての数値や文字列に対して1つのメタテーブルが存在します。デフォルトでは値にメタテーブルはありませんが、文字列ライブラリは文字列型にメタテーブルを設定します（§6.4参照）。</p><p>メタテーブルは、算術演算、順序比較、連結、長さ操作、インデックス参照時のオブジェクトの挙動を制御できます。また、ユーザデータやテーブルがガベージコレクションされる際に呼び出される関数も定義できます。Luaがこれらの操作を値に対して実行する際、その値に対応するイベントのメタメソッドがあるメタテーブルが存在するかを確認します。存在する場合、Luaはそのメタメソッドを使用して操作を行います。</p><p>以下に挙げる操作はメタテーブルによって制御されます。各操作には対応する名前があり、キーにはその名前の前に2つのアンダースコア「__」が付けられています。例えば、「add」操作のキーは文字列&quot;__add&quot;です。</p><p>操作の詳細な説明として、Luaインタープリタが操作をどのように実行するかを示すLua関数を用います。ここに示すLuaコードはあくまで説明用で、実際の動作はインタープリタにハードコードされており、はるかに効率的です。説明で使用する関数（<code>rawget</code>、<code>tonumber</code>など）は§6.1で説明されています。特に、あるオブジェクトのメタメソッドを取得するには以下の表現を使用します：</p><pre><code> metatable(obj)[event]
</code></pre><p>これは次のように解釈されます：</p><pre><code> rawget(getmetatable(obj) or {}, event)
</code></pre><p>これにより、メタメソッドへのアクセスが他のメタメソッドを呼び出さず、メタテーブルのないオブジェクトへのアクセスがエラーとならずに<code>nil</code>を返します。</p><p>単項の「-」や「#」演算子の場合、メタメソッドはダミーの第2引数と共に呼び出されます。この追加引数はLuaの内部処理を簡素化するためのものであり、将来のバージョンで削除される可能性があるため、以下のコードには含まれていません。（ほとんどの場合、この追加引数は無関係です。）</p><ul><li><p><strong>&quot;add&quot;</strong>: <code>+</code> 演算。以下の<code>getbinhandler</code>関数は、Luaが二項演算のためのハンドラをどのように選択するかを定義します。最初に第1オペランドを確認し、その型にハンドラが定義されていない場合は第2オペランドを確認します。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getbinhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (op1, op2, event)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1)[event] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2)[event]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>この関数を使用すると、<code>op1 + op2</code> の動作は次のようになります：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1, o2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- 両方のオペランドが数値か？</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o2   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &quot;+&quot; はここで基本の &quot;add&quot; 演算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- 少なくとも一方のオペランドが数値でない場合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getbinhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      -- 両オペランドを引数にしてハンドラを呼び出す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- ハンドラが見つからない場合: デフォルトの挙動</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div></li><li><p><strong>&quot;sub&quot;</strong>: <code>-</code> 演算。<code>add</code>演算と同様の動作です。</p></li><li><p><strong>&quot;mul&quot;</strong>: <code>*</code> 演算。<code>add</code>演算と同様の動作です。</p></li><li><p><strong>&quot;div&quot;</strong>: <code>/</code> 演算。<code>add</code>演算と同様の動作です。</p></li><li><p><strong>&quot;mod&quot;</strong>: <code>%</code> 演算。<code>add</code>演算と同様ですが、基本の演算は <code>o1 - floor(o1 / o2) * o2</code> です。</p></li><li><p><strong>&quot;pow&quot;</strong>: <code>^</code>（べき乗）演算。<code>add</code>演算と同様ですが、基本の演算はCのmathライブラリにある<code>pow</code>関数です。</p></li><li><p><strong>&quot;unm&quot;</strong>: 単項<code>-</code>演算。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unm_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- オペランドが数値か？</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &#39;-&#39; はここで基本の &quot;unm&quot; 演算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- オペランドが数値でない場合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__unm</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      -- オペランドを引数にしてハンドラを呼び出す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- ハンドラが見つからない場合: デフォルトの挙動</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div></li><li><p><strong>&quot;concat&quot;</strong>: <code>..</code>（連結）演算。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> concat_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op2  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基本の文字列連結</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getbinhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__concat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div></li><li><p><strong>&quot;len&quot;</strong>: <code>#</code>（長さ）演算。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> len_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> strlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基本の文字列長</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__len</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op))       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ハンドラをオペランドと共に呼び出す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elseif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;table&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> #</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">op           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基本のテーブルの長さ</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- ハンドラが見つからない場合: エラー</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>テーブルの長さに関する詳細は、§3.4.6を参照してください。</p></li><li><p><strong>&quot;eq&quot;</strong>: <code>==</code>（等価）演算。<code>getequalhandler</code>関数はLuaが等価のためのメタメソッドをどのように選択するかを定義します。比較される両方の値が同じ型を持ち、比較される操作に同じメタメソッドを持つ場合のみ、メタメソッドが選択されます。また、比較対象の値はテーブルまたはフルユーザデータでなければなりません。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getequalhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;table&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;userdata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     -- 異なる値</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__eq</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__eq</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>**&quot;eq&quot;**イベントは以下のように定義されています：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eq_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   -- 基本の等価判定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        -- 値が等しい</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- メタメソッドを試す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getequalhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>結果は常にブール値です。</p></li><li><p><strong>&quot;lt&quot;</strong>: <code>&lt;</code>（小なり）演算。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lt_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;number&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;number&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op2   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 数値の比較</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  elseif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op2   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 辞書順比較</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getbinhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__lt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>結果は常にブール値です。</p></li><li><p><strong>&quot;le&quot;</strong>: <code>&lt;=</code>（小なりまたは等しい）演算。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> le_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;number&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;number&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op2   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 数値の比較</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  elseif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op2   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 辞書順比較</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getbinhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__le&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getbinhandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op1, op2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__lt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op2, op1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>&quot;le&quot;メタメソッドが存在しない場合、Luaは&quot;lt&quot;メタメソッドを試み、<code>a &lt;= b</code> を<code>not (b &lt; a)</code>として扱います。他の比較演算子と同様、結果は常にブール値です。</p></li><li><p><strong>&quot;index&quot;</strong>: インデックス参照 <code>table[key]</code>。<code>key</code>がテーブルに存在しない場合のみメタメソッドが呼ばれます。（<code>table</code>がテーブルでない場合、どのキーも存在しないためメタメソッドは常に試行されます。）</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gettable_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;table&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rawget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    -- キーが存在すれば、未加工の値を返す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__index</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__index</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(h) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;function&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ハンドラを呼び出す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h[key]        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- またはハンドラに対して操作を繰り返す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div></li><li><p><strong>&quot;newindex&quot;</strong>: インデックス代入 <code>table[key] = value</code>。<code>key</code>がテーブルに存在しない場合のみメタメソッドが呼ばれます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> settable_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key, value)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;table&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rawget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    -- キーが存在すれば、未加工の代入を行う</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rawset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key, value); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__newindex</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rawset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key, value); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__newindex</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(h) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;function&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, key, value)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ハンドラを呼び出す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- またはハンドラに対して操作を繰り返す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div></li><li><p><strong>&quot;call&quot;</strong>: Luaが値を呼び出すときに使用されます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func, ...)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;function&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基本の呼び出し</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__call</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div></li></ul><h3 id="_2-5-ガベージコレクション" tabindex="-1">2.5 - ガベージコレクション <a class="header-anchor" href="#_2-5-ガベージコレクション" aria-label="Permalink to &quot;2.5 - ガベージコレクション&quot;">​</a></h3><p>Luaは自動メモリ管理を行います。つまり、新しいオブジェクトのためにメモリを割り当てたり、不要になったオブジェクトのメモリを解放したりすることを気にする必要はありません。Luaはガベージコレクタを実行して、不要なオブジェクト（Luaからアクセスできなくなったオブジェクト）をすべて収集することでメモリを自動管理します。Luaが使用するすべてのメモリ（文字列、テーブル、ユーザデータ、関数、スレッド、内部構造など）は、自動管理の対象です。</p><p>Luaは増分マーク＆スイープ方式のガベージコレクタを実装しています。このガベージコレクションサイクルを制御するために、ガベージコレクタの「ポーズ」と「ステップ倍率」という2つの数値を使用します。どちらも単位はパーセントで表されます（例: 値100は内部的に1を意味します）。</p><p>ガベージコレクタのポーズは、新しいサイクルを開始する前にガベージコレクタが待機する時間を制御します。値が大きいほどガベージコレクタは控えめに動作します。100未満の値ではガベージコレクタが待機せずに新しいサイクルを開始します。値が200の場合、使用メモリが2倍になるまで待機してから新しいサイクルを開始します。</p><p>ガベージコレクタのステップ倍率は、メモリ割り当てに対するガベージコレクタの相対速度を制御します。値が大きいほどガベージコレクタは積極的に動作しますが、各増分ステップのサイズも大きくなります。100未満の値ではガベージコレクタが遅くなりすぎ、サイクルを完了できない可能性があります。デフォルトは200で、これはガベージコレクタがメモリ割り当ての「2倍」の速度で実行されることを意味します。</p><p>ステップ倍率を非常に大きな数値（プログラムで使用可能な最大バイト数の10%以上）に設定すると、ガベージコレクタはストップ・ザ・ワールド（全停止）コレクタのように動作します。さらにポーズを200に設定すると、ガベージコレクタは古いLuaバージョンのように動作し、Luaがメモリ使用量を2倍にするたびに完全なコレクションを実行します。</p><p>これらの数値は、C言語の<code>lua_gc</code>またはLuaの<code>collectgarbage</code>関数を使って変更できます。また、これらの関数を使用してガベージコレクタを直接制御することも可能です（例: 停止や再開など）。</p><p>Lua 5.2では実験的な機能として、コレクタの動作モードを増分型から世代別型に変更することができます。世代別ガベージコレクタは、大半のオブジェクトが生成後すぐに不要になると仮定し、新しい（最近生成された）オブジェクトだけを処理します。この動作によりガベージコレクタの使用時間が減少する可能性がありますが、メモリ使用量は増加する場合があります（古い不要なオブジェクトが蓄積される可能性があるためです）。この問題を軽減するため、世代別ガベージコレクタは定期的に完全なコレクションを実行します。この機能は実験的なものであることを忘れず、試してみることは可能ですが、その効果を確認してください。</p><h4 id="_2-5-1-ガベージコレクションのメタメソッド" tabindex="-1">2.5.1 - ガベージコレクションのメタメソッド <a class="header-anchor" href="#_2-5-1-ガベージコレクションのメタメソッド" aria-label="Permalink to &quot;2.5.1 - ガベージコレクションのメタメソッド&quot;">​</a></h4><p>テーブルや、C APIを使用したフルユーザデータ（§2.4参照）にガベージコレクションのメタメソッドを設定することができます。これらのメタメソッドは「ファイナライザ」とも呼ばれます。ファイナライザを使用すると、Luaのガベージコレクションと外部リソース管理（例: ファイル、ネットワークやデータベース接続の終了、自分で確保したメモリの解放など）を連携させることができます。</p><p>オブジェクト（テーブルまたはユーザデータ）をコレクション時にファイナライズ（終了処理）するためには、ファイナライズ用にマークする必要があります。ファイナライズ用にオブジェクトをマークするには、メタテーブルを設定し、そのメタテーブルに<code>&quot;__gc&quot;</code>というインデックスのフィールドを持たせます。なお、<code>__gc</code>フィールドがないメタテーブルを設定し、その後でそのフィールドをメタテーブルに追加した場合、オブジェクトはファイナライズ用にマークされません。しかし、一度オブジェクトがマークされると、そのメタテーブルの<code>__gc</code>フィールドは自由に変更できます。</p><p>マークされたオブジェクトがガベージになったとき、ガベージコレクタによってすぐに回収されるわけではありません。Luaはそのオブジェクトをリストに追加し、コレクション後にリスト内の各オブジェクトに対して以下のような関数を実行します：</p><pre><code> \`\`\`lua
 function gc_event (obj)
   local h = metatable(obj).__gc
   if type(h) == &quot;function&quot; then
     h(obj)
   end
 end
 \`\`\`
</code></pre><p>各ガベージコレクションサイクルの終了時に、ファイナライズが必要なオブジェクトのファイナライザが、サイクル内で回収された順に逆順で呼び出されます。つまり、プログラム内で最後にマークされたオブジェクトに関連するファイナライザが最初に呼び出されます。各ファイナライザの実行は、通常のコードの実行中の任意のポイントで行われることがあります。</p><p>収集されているオブジェクトはファイナライザで使用されるため、（およびファイナライザを通じてのみアクセス可能な他のオブジェクトも）一時的にLuaによって復活（リザレクション）されなければなりません。通常、この復活は一時的であり、次のガベージコレクションサイクルでオブジェクトメモリは解放されます。しかし、ファイナライザがオブジェクトをグローバルな場所（例: グローバル変数）に格納した場合は、オブジェクトが永続的に復活します。いずれの場合も、オブジェクトが完全にアクセスできなくなったときにのみメモリが解放され、ファイナライザが2回呼び出されることはありません。</p><p>状態を閉じるとき（<code>lua_close</code>参照）、Luaはファイナライズ対象にマークされたすべてのオブジェクトのファイナライザを、マークされた順序の逆順で呼び出します。この段階でファイナライザが新しいオブジェクトを収集対象にマークした場合、それらの新しいオブジェクトはファイナライズされません。</p><h3 id="_2-5-2-弱テーブル" tabindex="-1">2.5.2 - 弱テーブル <a class="header-anchor" href="#_2-5-2-弱テーブル" aria-label="Permalink to &quot;2.5.2 - 弱テーブル&quot;">​</a></h3><p>弱テーブルとは、要素が弱参照であるテーブルのことです。弱参照はガベージコレクタによって無視されます。つまり、オブジェクトへの参照が弱参照のみの場合、ガベージコレクタはそのオブジェクトを回収します。</p><p>弱テーブルには、キーが弱参照のもの、値が弱参照のもの、または両方が弱参照のものがあります。キーが弱いテーブルではキーの回収が可能になりますが、値の回収は防止されます。一方、キーと値の両方が弱いテーブルでは、どちらも回収可能です。いずれの場合も、キーまたは値のいずれかが回収されると、そのペア全体がテーブルから削除されます。テーブルの弱さはメタテーブルの<code>__mode</code>フィールドで制御されます。<code>__mode</code>フィールドが文字<code>&#39;k&#39;</code>を含む文字列であれば、テーブルのキーは弱くなります。<code>__mode</code>が<code>&#39;v&#39;</code>を含む場合、テーブルの値は弱くなります。</p><p>キーが弱く値が強いテーブルは「エフェメロンテーブル」とも呼ばれます。エフェメロンテーブルでは、キーが到達可能な場合のみその値が到達可能と見なされます。特に、キーへの唯一の参照が値からの場合、そのペアは削除されます。</p><p>テーブルの弱さを変更しても、その効果が現れるのは次のコレクションサイクルからです。特に、弱さを強く変更した場合でも、変更が反映される前にLuaがそのテーブルからいくつかの項目を回収する可能性があります。</p><p>明示的な構築があるオブジェクトのみが弱テーブルから削除されます。数値や軽量C関数のような値はガベージコレクションの対象ではないため、弱テーブルから削除されません（ただし、関連する値が回収された場合は例外です）。文字列はガベージコレクションの対象ですが、明示的な構築がないため、弱テーブルからは削除されません。</p><p>復活したオブジェクト（ファイナライズ中のオブジェクトや、ファイナライズ中のオブジェクトを介してのみアクセス可能なオブジェクト）は、弱テーブルにおいて特別な挙動を示します。これらは、ファイナライザの実行前に弱値から削除されますが、弱キーからはファイナライザの実行後の次のコレクションサイクルまで削除されません。この動作により、ファイナライザが弱テーブルを通じてオブジェクトに関連するプロパティにアクセスできるようになります。</p><p>あるコレクションサイクルで復活したオブジェクトの中に弱テーブルが含まれている場合、そのテーブルのクリアが次のサイクルまで適切に行われないことがあります。</p><h3 id="_2-6-コルーチン" tabindex="-1">2.6 - コルーチン <a class="header-anchor" href="#_2-6-コルーチン" aria-label="Permalink to &quot;2.6 - コルーチン&quot;">​</a></h3><p>Luaはコルーチン、または協調的マルチスレッドをサポートしています。Luaにおけるコルーチンは、独立した実行スレッドを表します。ただし、マルチスレッドシステムのスレッドとは異なり、コルーチンは<code>yield</code>関数を明示的に呼び出すことでのみ実行を中断します。</p><p>コルーチンは<code>coroutine.create</code>を呼び出して作成します。この関数の唯一の引数は、コルーチンのメイン関数となる関数です。<code>create</code>関数は新しいコルーチンを作成し、そのハンドル（スレッド型のオブジェクト）を返すだけで、コルーチンを開始するわけではありません。</p><p>コルーチンを実行するには、<code>coroutine.resume</code>を呼び出します。最初に<code>coroutine.resume</code>を呼び出す際には、最初の引数に<code>coroutine.create</code>で返されたスレッドを渡します。すると、コルーチンのメイン関数の最初の行から実行が始まります。<code>coroutine.resume</code>に渡された追加の引数は、コルーチンのメイン関数に引き継がれます。コルーチンが実行を開始すると、終了または中断するまで動作を続けます。</p><p>コルーチンが実行を終了するのは、以下の2通りです：通常の終了（メイン関数が戻り値を返すか、最後の命令を実行した後）または保護されていないエラーの発生による異常終了です。通常終了の場合、<code>coroutine.resume</code>は<code>true</code>と、コルーチンのメイン関数から返された任意の値を返します。エラーが発生した場合は、<code>coroutine.resume</code>は<code>false</code>とエラーメッセージを返します。</p><p>コルーチンは<code>coroutine.yield</code>を呼び出すことで実行を中断します。コルーチンが中断すると、対応する<code>coroutine.resume</code>は即座に戻り、中断がネストされた関数呼び出しの中で（つまり、メイン関数ではなく、メイン関数から直接または間接的に呼び出された関数内で）発生していても、その場所で戻ります。<code>yield</code>の場合、<code>coroutine.resume</code>も<code>true</code>を返し、さらに<code>coroutine.yield</code>に渡された任意の値も返されます。次に同じコルーチンを再開すると、中断した場所から続行され、<code>coroutine.yield</code>に戻り、<code>coroutine.resume</code>に渡された追加の引数が返されます。</p><p><code>coroutine.create</code>と同様に、<code>coroutine.wrap</code>関数もコルーチンを作成しますが、コルーチン自体を返す代わりに、それを再開する関数を返します。この関数に渡された任意の引数は、追加の引数として<code>coroutine.resume</code>に渡されます。<code>coroutine.wrap</code>は<code>coroutine.resume</code>の返り値をすべて返しますが、最初のブール型のエラーフラグは除きます。<code>coroutine.resume</code>とは異なり、<code>coroutine.wrap</code>はエラーをキャッチしないため、エラーは呼び出し元に伝播されます。</p><p>以下は、コルーチンがどのように動作するかを示す例です：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coroutine.yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coroutine.create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a, b)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;co-body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a, b)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;co-body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r, s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coroutine.yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b, a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;co-body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r, s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;end&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coroutine.resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(co, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coroutine.resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(co, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coroutine.resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(co, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coroutine.resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(co, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>上記のコードを実行すると、以下の出力が得られます：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>co-body 1       10</span></span>
<span class="line"><span>foo     2</span></span>
<span class="line"><span>main    true    4</span></span>
<span class="line"><span>co-body r</span></span>
<span class="line"><span>main    true    11      -9</span></span>
<span class="line"><span>co-body x       y</span></span>
<span class="line"><span>main    true    10      end</span></span>
<span class="line"><span>main    false   cannot resume dead coroutine</span></span></code></pre></div><p>また、コルーチンはC APIを通じて作成および操作することも可能です。具体的には、<code>lua_newthread</code>、<code>lua_resume</code>、および<code>lua_yield</code>関数を使用します。</p><h2 id="_3-–-言語" tabindex="-1">3 – 言語 <a class="header-anchor" href="#_3-–-言語" aria-label="Permalink to &quot;3 – 言語&quot;">​</a></h2><p>このセクションでは、Luaの字句（lexis）、構文（syntax）、および意味（semantics）について説明します。言い換えると、このセクションでは有効なトークンがどれか、それらがどのように組み合わせられるか、およびその組み合わせが何を意味するかについて解説します。</p><p>言語の構造は、一般的な拡張BNF記法を使って説明されます。この記法では、<code>{a}</code>は「0回以上のa」、<code>[a]</code>は「任意のa（ある場合とない場合の両方が許容される）」を意味します。非終端記号は<code>non-terminal</code>のように、キーワードは<code>kword</code>のように、その他の終端記号は<code>&#39;=&#39;</code>のように表示されます。Luaの完全な構文については、このマニュアルの末尾にある§9で確認できます。</p><h3 id="_3-1-–-字句規則" tabindex="-1">3.1 – 字句規則 <a class="header-anchor" href="#_3-1-–-字句規則" aria-label="Permalink to &quot;3.1 – 字句規則&quot;">​</a></h3><p>Luaは自由形式の言語で、スペース（改行も含む）やコメントは字句要素（トークン）間の区切りとして使用される場合を除き無視されます。</p><p>Luaの名前（識別子とも呼ばれます）は、文字、数字、およびアンダースコアの組み合わせで構成されますが、最初の文字に数字は使用できません。識別子は変数、テーブルのフィールド、ラベルの名前を定義するために使用されます。</p><p>以下のキーワードは予約されており、名前として使用することはできません。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>and       break     do        else      elseif    end</span></span>
<span class="line"><span>false     for       function  goto      if        in</span></span>
<span class="line"><span>local     nil       not       or        repeat    return</span></span>
<span class="line"><span>then      true      until     while</span></span></code></pre></div><p>Luaは大文字と小文字を区別します。たとえば、<code>and</code>は予約語ですが、<code>And</code>や<code>AND</code>は別の有効な名前として認識されます。また、慣例として、アンダースコアと大文字で始まる名前（例：<code>_VERSION</code>）はLuaで使用される変数のために予約されています。</p><p>以下の文字列はその他のトークンを表します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+     -     *     /     %     ^     #</span></span>
<span class="line"><span>==    ~=    &lt;=    &gt;=    &lt;     &gt;     =</span></span>
<span class="line"><span>(     )     {     }     [     ]     ::</span></span>
<span class="line"><span>;     :     ,     .     ..    ...</span></span></code></pre></div><p>リテラル文字列はシングルクォートまたはダブルクォートで囲むことができ、次のC言語風のエスケープシーケンスを含むことができます：</p><ul><li><code>\\a</code>（ベル）</li><li><code>\\b</code>（バックスペース）</li><li><code>\\f</code>（改ページ）</li><li><code>\\n</code>（改行）</li><li><code>\\r</code>（キャリッジリターン）</li><li><code>\\t</code>（水平タブ）</li><li><code>\\v</code>（垂直タブ）</li><li><code>\\\\</code>（バックスラッシュ）</li><li><code>\\&quot;</code>（ダブルクォート）</li><li><code>\\&#39;</code>（シングルクォート）</li></ul><p>バックスラッシュの後に改行を置くと、文字列内に改行が挿入されます。エスケープシーケンス <code>\\z</code> は後に続く空白文字（改行を含む）をスキップします。これは、長いリテラル文字列を複数行に分けてインデントする際、改行やスペースを含めずに見やすくするために便利です。</p><p>リテラル文字列内のバイトを数値で指定することも可能です。16進数の2桁を使ったエスケープシーケンス <code>\\xXX</code>（例：<code>\\x41</code>はASCIIコードの&#39;A&#39;）や、最大3桁の10進数を使ったエスケープシーケンス <code>\\ddd</code>（例：<code>\\065</code>も&#39;A&#39;）で指定します。ただし、10進エスケープの後にさらに数字が続く場合は、必ず3桁で指定する必要があります。Luaの文字列は埋め込みゼロ（<code>\\0</code>）を含む任意の8ビット値を含むことができます。</p><p>リテラル文字列は、長い形式で長い角括弧を使用して定義することもできます。レベルnの開き長角括弧は、開き角括弧<code>[</code>の後にn個の等号<code>=</code>を置き、さらにもう一つの開き角括弧<code>[</code>で囲む形式です。レベル0の開き長角括弧は<code>[[</code>と書き、レベル1は<code>[=[</code>、レベル4なら<code>[====[</code>のように書きます。同様に閉じる角括弧も指定され、例えばレベル4では<code>]====]</code>となります。長いリテラル文字列は、任意のレベルの開き長角括弧で始まり、同じレベルの閉じ長角括弧で終わります。この形式のリテラルは複数行にわたり、エスケープシーケンスを解釈せず、異なるレベルの長角括弧を無視します。行末の改行コード（キャリッジリターンや改行、もしくはそれらの組み合わせ）は単純な改行に変換されます。</p><p>リテラル文字列内のバイトは、前述のルールに該当しない限り、そのままの値として扱われます。ただし、Luaはファイルをテキストモードで開いて解析するため、システムのファイル関数が一部の制御文字に問題を起こす可能性があります。そのため、テキスト以外のデータを扱う場合は、引用符で囲んだリテラルに明示的なエスケープシーケンスを使用する方が安全です。</p><p>開き長角括弧の直後に改行が続く場合、その改行は文字列に含まれません。以下に示す5つのリテラル文字列は、ASCIIを使用するシステム（例：<code>&#39;a&#39;</code>は97、改行は10、<code>&#39;1&#39;</code>は49としてコード化されている）において、同じ内容を表します。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">123&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;alo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">123</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\97</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\10\\049</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">23&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [[alo</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">123&quot;]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [==[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">alo</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">123&quot;]==]</span></span></code></pre></div><p>数値定数は、小数部や10進数の指数部（<code>e</code>または<code>E</code>で示される）を含めることができます。Luaでは16進定数も受け付け、<code>0x</code>または<code>0X</code>で始まります。16進定数には小数部および2進指数部（<code>p</code>または<code>P</code>で示される）も含められます。以下は有効な数値定数の例です。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     3.1416</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     314.16e-2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0.31416E1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0x0.1E</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0xA23p-4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0X1.921FB54442D18P+1</span></span></code></pre></div><p>コメントは、文字列外で<code>--</code>から始まります。<code>--</code>の直後に開き長角括弧がなければ、そのコメントは短いコメントとして行の終わりまで続きます。そうでなければ、それは長いコメントとなり、対応する閉じ長角括弧が現れるまで続きます。長いコメントはコードの一時的な無効化によく使われます。</p><h3 id="_3-2-–-変数" tabindex="-1">3.2 – 変数 <a class="header-anchor" href="#_3-2-–-変数" aria-label="Permalink to &quot;3.2 – 変数&quot;">​</a></h3><p>変数は値を格納する場所です。Luaには、グローバル変数、ローカル変数、およびテーブルフィールドの3種類の変数があります。</p><p>単一の名前は、グローバル変数やローカル変数（または関数の仮引数、特定のローカル変数）を表すことができます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Name</span></span></code></pre></div><p><code>Name</code>は§3.1で定義されている識別子を指します。変数名は特に指定しない限りグローバル変数とみなされます（§3.3.7を参照）。ローカル変数はレキシカルスコープを持ち、そのスコープ内で定義された関数から自由にアクセスできます（§3.5参照）。</p><p>変数に最初に値が代入される前の初期値は<code>nil</code>です。</p><p>テーブルのインデックス付けには角括弧を使用します。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefixexp ‘[’ exp ‘]’</span></span></code></pre></div><p>テーブルフィールドへのアクセスの意味はメタテーブルを使って変更できます。インデックス付き変数<code>t[i]</code>へのアクセスは、<code>gettable_event(t, i)</code>の呼び出しと同等です（<code>gettable_event</code>関数はLuaで定義や呼び出しができませんが、説明のために用いています。§2.4を参照）。</p><p>構文<code>var.Name</code>は単に<code>var[&quot;Name&quot;]</code>の構文糖（書き方の簡略化）です。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefixexp ‘.’ Name</span></span></code></pre></div><p>グローバル変数<code>x</code>へのアクセスは<code>_ENV.x</code>と同等です。チャンクのコンパイル方法により、<code>_ENV</code>はグローバル名にはなりません（§2.2を参照）。</p><h3 id="_3-3-–-文-statements" tabindex="-1">3.3 – 文（Statements） <a class="header-anchor" href="#_3-3-–-文-statements" aria-label="Permalink to &quot;3.3 – 文（Statements）&quot;">​</a></h3><p>Luaは、PascalやCに似た一般的な文セットをサポートしています。このセットには、代入、制御構造、関数呼び出し、変数宣言が含まれます。</p><h4 id="_3-3-1-–-ブロック-blocks" tabindex="-1">3.3.1 – ブロック（Blocks） <a class="header-anchor" href="#_3-3-1-–-ブロック-blocks" aria-label="Permalink to &quot;3.3.1 – ブロック（Blocks）&quot;">​</a></h4><p>ブロックは一連の文のリストで、これらは順番に実行されます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {stat}</span></span></code></pre></div><p>Luaには空の文があり、これにより文をセミコロンで区切ったり、ブロックをセミコロンで始めたり、セミコロンを2つ連続して書くことができます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘;’</span></span></code></pre></div><p>関数呼び出しや代入は開き括弧から始めることができます。このため、Luaの文法には曖昧さが生じる場合があります。次のコードを例にとります。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>このコードは、次のように解釈できます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>または</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c; (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>現在のパーサーは、開き括弧を関数呼び出しの引数の始まりと解釈するため、常に最初のように解釈されます。この曖昧さを避けるために、括弧で始まる文の前には常にセミコロンを置くのが良い習慣です。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>ブロックは、単一の文として明示的に区切ることもできます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>明示的なブロックは、変数宣言のスコープを制御するのに役立ちます。また、別のブロックの途中に<code>return</code>文を挿入する場合にも使用されます（§3.3.4を参照）。</p><h4 id="_3-3-2-–-チャンク-chunks" tabindex="-1">3.3.2 – チャンク（Chunks） <a class="header-anchor" href="#_3-3-2-–-チャンク-chunks" aria-label="Permalink to &quot;3.3.2 – チャンク（Chunks）&quot;">​</a></h4><p>Luaのコンパイル単位は「チャンク」と呼ばれます。文法的には、チャンクは単なるブロックです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block</span></span></code></pre></div><p>Luaはチャンクを、可変引数を持つ無名関数の本体として扱います（§3.4.10を参照）。そのため、チャンクはローカル変数を定義し、引数を受け取り、値を返すことができます。この無名関数は、外部ローカル変数である<code>_ENV</code>のスコープでコンパイルされます（§2.2を参照）。結果として生成される関数には、たとえ使用しなくても<code>_ENV</code>が唯一のアップバリューとして含まれます。</p><p>チャンクは、ファイル内またはホストプログラム内の文字列として保存できます。チャンクを実行するには、Luaがまず仮想マシン用の命令に事前コンパイルし、次にそのコンパイルされたコードを仮想マシン用のインタープリタで実行します。</p><p>チャンクはバイナリ形式に事前コンパイルすることもできます。詳細は<code>luac</code>プログラムを参照してください。ソース形式とコンパイル済み形式のプログラムは相互に交換可能であり、Luaはファイルの種類を自動的に検出し、それに応じた動作を行います。</p><h4 id="_3-3-3-–-代入-assignment" tabindex="-1">3.3.3 – 代入（Assignment） <a class="header-anchor" href="#_3-3-3-–-代入-assignment" aria-label="Permalink to &quot;3.3.3 – 代入（Assignment）&quot;">​</a></h4><p>Luaでは複数の代入が可能です。そのため、代入の構文では、左側に変数リスト、右側に式のリストを定義します。両リストの要素はコンマで区切ります。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> varlist ‘</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’ explist</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {‘,’ var}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">explist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {‘,’ exp}</span></span></code></pre></div><p>式については§3.4で説明します。</p><p>代入の前に、値のリストは変数リストの長さに合わせて調整されます。必要な変数より多くの値がある場合、余剰の値は破棄されます。必要な値が不足している場合、リストは必要なだけ<code>nil</code>で拡張されます。式リストが関数呼び出しで終わっている場合、その呼び出しによって返されるすべての値が値リストに含まれた後、リストの調整が行われます（関数呼び出しが括弧で囲まれている場合を除きます。詳細は§3.4を参照）。</p><p>代入文は、まずすべての式を評価し、その後で代入が実行されます。したがって、次のコードでは</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i, a[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span></code></pre></div><p><code>a[3]</code>が20に設定され、<code>a[4]</code>には影響がありません。これは、<code>a[i]</code>内の<code>i</code>が評価される（3に評価）前に<code>4</code>が代入されるためです。同様に、次のコードは</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y, x</span></span></code></pre></div><p><code>x</code>と<code>y</code>の値を入れ替え、次のコード</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, y, z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y, z, x</span></span></code></pre></div><p>は<code>x</code>、<code>y</code>、<code>z</code>の値を循環的に入れ替えます。</p><p>グローバル変数やテーブルフィールドへの代入の意味は、メタテーブルを使用して変更できます。インデックス付き変数<code>t[i] = val</code>への代入は、<code>settable_event(t, i, val)</code>の呼び出しと同等です（<code>settable_event</code>関数はLuaで定義や呼び出しができませんが、説明のために使用しています。§2.4を参照）。</p><p>グローバル変数<code>x = val</code>への代入は、<code>_ENV.x = val</code>の代入と同等です（§2.2を参照）。</p><h4 id="_3-3-4-–-制御構造" tabindex="-1">3.3.4 – 制御構造 <a class="header-anchor" href="#_3-3-4-–-制御構造" aria-label="Permalink to &quot;3.3.4 – 制御構造&quot;">​</a></h4><p><code>if</code>、<code>while</code>、<code>repeat</code>の制御構造は、通常の意味とおなじみの構文を持っています。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">until</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block} [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Luaには<code>for</code>文もあり、2種類の形式があります（§3.3.5を参照）。</p><p>制御構造の条件式は任意の値を返すことができます。<code>false</code>と<code>nil</code>は「偽」と見なされます。それ以外のすべての値は「真」と見なされます（特に数値0や空文字列も「真」として扱われます）。</p><p><code>repeat–until</code>ループでは、内部ブロックは<code>until</code>キーワードで終了せず、条件の後まで続きます。このため、条件はループブロック内で宣言されたローカル変数を参照できます。</p><p><code>goto</code>文はプログラムの制御をラベルへ移します。構文上の理由から、Luaのラベルも文として扱われます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> goto</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘::’ Name ‘::’</span></span></code></pre></div><p>ラベルは、そのブロック内で定義されている間は全体で可視です。ただし、同じ名前のラベルが定義されているネストされたブロックや、ネストされた関数内では可視ではありません。<code>goto</code>はローカル変数のスコープに入らない限り、可視なラベルにジャンプできます。</p><p>ラベルや空の文は何の動作も行わないため、「無効文」と呼ばれます。</p><p><code>break</code>文は、<code>while</code>、<code>repeat</code>、または<code>for</code>ループの実行を終了し、ループの後の次の文に進みます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span></span></code></pre></div><p><code>break</code>は最も内側のループを終了させます。</p><p><code>return</code>文は、関数またはチャンク（見かけ上の関数）から値を返すために使用されます。関数は複数の値を返すことができるため、<code>return</code>文の構文は次のようになります。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [explist] [‘;’]</span></span></code></pre></div><p><code>return</code>文はブロックの最後の文としてのみ書くことができます。ブロックの途中で値を返す必要がある場合は、<code>do return end</code>のように明示的な内部ブロックを使うことができます。これにより、<code>return</code>がその（内部）ブロックの最後の文となります。</p><h4 id="_3-3-5-–-for文" tabindex="-1">3.3.5 – For文 <a class="header-anchor" href="#_3-3-5-–-for文" aria-label="Permalink to &quot;3.3.5 – For文&quot;">​</a></h4><p><code>for</code>文には数値形式と一般形式の2つの形式があります。</p><p>数値形式の<code>for</code>ループは、制御変数が算術的な進行で進む間、ブロックを繰り返します。構文は次の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Name ‘</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’ exp ‘,’ exp [‘,’ exp] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>ブロックは、<code>name</code>が最初の<code>exp</code>の値から始まり、第3の<code>exp</code>のステップごとに進み、第2の<code>exp</code>を超えるまで繰り返されます。より正確には、次のような<code>for</code>文</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e1, e2, e3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>は以下のコードと等価です。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var, limit, step </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e1), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e2), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e3)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> step) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (step </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> limit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (step </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> limit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> step</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>注意点は次の通りです。</p><ul><li>制御式の3つの式は、ループの開始前に一度だけ評価されます。すべての式は数値である必要があります。</li><li><code>var</code>、<code>limit</code>、<code>step</code>は不可視の変数です。ここでの名前は説明用に使われています。</li><li>第3の式（<code>step</code>）が省略されると、ステップは1が使用されます。</li><li><code>break</code>を使って<code>for</code>ループを終了できます。</li><li>ループ変数<code>v</code>はループ内でローカルです。<code>for</code>が終了するか中断された後はその値を使用できません。値が必要な場合は、ループを終了する前に他の変数に代入してください。</li></ul><p>一般形式の<code>for</code>文は、イテレータと呼ばれる関数で動作します。各反復で、イテレータ関数が呼び出され、新しい値が生成され、<code>nil</code>が返された時に停止します。一般形式の<code>for</code>ループの構文は次の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> namelist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">namelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {‘,’ Name}</span></span></code></pre></div><p>次のような<code>for</code>文</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var_1, ···, var_n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>は以下のコードと等価です。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f, s, var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explist</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var_1, ···, var_n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s, var)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var_1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    block</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>注意点は次の通りです。</p><ul><li><code>explist</code>は一度だけ評価され、イテレータ関数、状態、および最初のイテレータ変数の初期値が結果として得られます。</li><li><code>f</code>、<code>s</code>、<code>var</code>は不可視の変数です。ここでの名前は説明用に使われています。</li><li><code>break</code>を使って<code>for</code>ループを終了できます。</li><li>ループ変数<code>var_i</code>はループ内でローカルです。<code>for</code>が終了する後はその値を使用できません。値が必要な場合は、ループを終了する前に他の変数に代入してください。</li></ul><h4 id="_3-3-6-–-文としての関数呼び出し" tabindex="-1">3.3.6 – 文としての関数呼び出し <a class="header-anchor" href="#_3-3-6-–-文としての関数呼び出し" aria-label="Permalink to &quot;3.3.6 – 文としての関数呼び出し&quot;">​</a></h4><p>副作用が生じる可能性を考慮して、関数呼び出しは文として実行することができます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functioncall</span></span></code></pre></div><p>この場合、すべての戻り値は破棄されます。関数呼び出しについては§3.4.9で説明されています。</p><h4 id="_3-3-7-–-ローカル変数の宣言" tabindex="-1">3.3.7 – ローカル変数の宣言 <a class="header-anchor" href="#_3-3-7-–-ローカル変数の宣言" aria-label="Permalink to &quot;3.3.7 – ローカル変数の宣言&quot;">​</a></h4><p>ローカル変数は、ブロック内の任意の場所で宣言できます。宣言には初期値の代入を含めることができます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> namelist [‘</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’ explist]</span></span></code></pre></div><p>初期代入がある場合、その動作は複数代入と同じです（§3.3.3を参照）。ない場合、すべての変数は<code>nil</code>で初期化されます。</p><p>チャンクもブロックであるため（§3.3.2を参照）、ローカル変数は明示的なブロック外のチャンク内でも宣言できます。</p><p>ローカル変数の可視性ルールについては§3.5で説明されています。</p><h3 id="_3-4-–-式-expressions" tabindex="-1">3.4 – 式（Expressions） <a class="header-anchor" href="#_3-4-–-式-expressions" aria-label="Permalink to &quot;3.4 – 式（Expressions）&quot;">​</a></h3><p>Luaの基本的な式は次の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefixexp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Number</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functiondef</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableconstructor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exp binop exp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unop exp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prefixexp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var | functioncall | ‘(’ exp ‘)’</span></span></code></pre></div><p>数値とリテラル文字列は§3.1で説明され、変数は§3.2で、関数定義は§3.4.10で、関数呼び出しは§3.4.9で、テーブルコンストラクタは§3.4.8で説明されています。可変引数式（<code>...</code>で示される）は、可変引数を持つ関数内で直接使用する場合にのみ有効です（§3.4.10を参照）。</p><p>二項演算子には、算術演算子（§3.4.1参照）、関係演算子（§3.4.3参照）、論理演算子（§3.4.4参照）、および連結演算子（§3.4.5参照）が含まれます。単項演算子には、単項マイナス（§3.4.1参照）、単項否定（<code>not</code>、§3.4.4参照）、および単項長さ演算子（<code>#</code>、§3.4.6参照）が含まれます。</p><p>関数呼び出しと可変引数式は、複数の値を返す場合があります。関数呼び出しが文として使用される場合（§3.3.6を参照）、戻り値のリストは0要素に調整され、すべての戻り値が破棄されます。式が式リストの最後の要素（または唯一の要素）として使用される場合、調整は行われません（式が括弧で囲まれている場合を除く）。それ以外のすべての状況で、Luaは戻り値のリストを1つの要素に調整し、最初の値以外を破棄するか、値がない場合は<code>nil</code>を追加します。</p><p>以下にいくつかの例を示します。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 0個の結果に調整</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), x)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- f()は1個の結果に調整される</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- gはxとf()のすべての結果を取得</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, b, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), x   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- f()は1個の結果に調整され、cにはnilが代入される</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         -- aには最初の可変引数、bには2番目が入る（可変引数がなければaやbにはnilが入る）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, b, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- f()は2個の結果に調整される</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, b, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- f()は3個の結果に調整される</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- f()のすべての結果を返す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         -- 受け取った可変引数をすべて返す</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, y, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- x, yとf()のすべての結果を返す</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()}              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- f()のすべての結果を含むリストを作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- すべての可変引数を含むリストを作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- f()は1個の結果に調整される</span></span></code></pre></div><p>括弧で囲まれた任意の式は、常に1つの値のみを返します。したがって、<code>(f(x, y, z))</code>は<code>f</code>が複数の値を返す場合でも常に単一の値です。（<code>(f(x, y, z))</code>の値は、<code>f</code>が返す最初の値、または<code>f</code>が何も返さない場合は<code>nil</code>です。）</p><h4 id="_3-4-1-–-算術演算子" tabindex="-1">3.4.1 – 算術演算子 <a class="header-anchor" href="#_3-4-1-–-算術演算子" aria-label="Permalink to &quot;3.4.1 – 算術演算子&quot;">​</a></h4><p>Luaは一般的な算術演算子をサポートしています。二項演算子の<code>+</code>（加算）、<code>-</code>（減算）、<code>*</code>（乗算）、<code>/</code>（除算）、<code>%</code>（剰余）、<code>^</code>（べき乗）と、単項演算子の<code>-</code>（数学的な否定）です。オペランドが数値または数値に変換できる文字列（§3.4.2を参照）であれば、すべての演算子は通常の意味で動作します。べき乗は任意の指数に対応し、例えば<code>x^(-0.5)</code>は<code>x</code>の平方根の逆数を計算します。剰余演算は次のように定義されます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> math.floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span></span></code></pre></div><p>これは、商をマイナス無限大に向かって丸めた除算の余りに相当します。</p><h4 id="_3-4-2-–-型変換" tabindex="-1">3.4.2 – 型変換 <a class="header-anchor" href="#_3-4-2-–-型変換" aria-label="Permalink to &quot;3.4.2 – 型変換&quot;">​</a></h4><p>Luaは、実行時に文字列と数値の間の自動変換を提供します。文字列に対して算術演算が適用される場合、その文字列はLuaの字句解析器の規則に従って数値に変換されます（文字列には前後のスペースや符号が含まれていても構いません）。逆に、文字列が必要な箇所で数値が使われた場合、数値は適切な形式で文字列に変換されます。数値の文字列への変換を完全に制御するには、文字列ライブラリの<code>format</code>関数を使用してください（<code>string.format</code>を参照）。</p><h4 id="_3-4-3-–-関係演算子" tabindex="-1">3.4.3 – 関係演算子 <a class="header-anchor" href="#_3-4-3-–-関係演算子" aria-label="Permalink to &quot;3.4.3 – 関係演算子&quot;">​</a></h4><p>Luaの関係演算子は以下の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ~=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     &gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     &lt;=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;=</span></span></code></pre></div><p>これらの演算子は常に<code>false</code>または<code>true</code>を返します。</p><p>等価演算子<code>==</code>は、まずオペランドの型を比較します。型が異なる場合、結果は<code>false</code>になります。型が同じであれば、オペランドの値を比較します。数値と文字列は通常通り比較され、テーブル、ユーザデータ、スレッドは参照によって比較されます。つまり、2つのオブジェクトが同じオブジェクトである場合にのみ等しいと見なされます。新しいオブジェクト（テーブル、ユーザデータ、スレッド）を作成するたびに、それは既存のオブジェクトとは異なります。同じ参照を持つクロージャは常に等しいと見なされ、異なる動作や定義を持つクロージャは常に異なると見なされます。</p><p>テーブルやユーザデータの比較方法は、<code>&quot;eq&quot;</code>メタメソッドを使用して変更できます（§2.4を参照）。</p><p>§3.4.2の変換ルールは等価比較には適用されません。したがって、<code>&quot;0&quot; == 0</code>は<code>false</code>を返し、<code>t[0]</code>と<code>t[&quot;0&quot;]</code>はテーブル内の異なるエントリを示します。</p><p>演算子<code>~=</code>は等価演算子<code>==</code>の否定です。</p><p>順序演算子は次のように動作します。両方の引数が数値であれば、数値として比較されます。両方の引数が文字列であれば、現在のロケールに従って値を比較します。それ以外の場合、Luaは<code>&quot;lt&quot;</code>または<code>&quot;le&quot;</code>メタメソッドを呼び出そうとします（§2.4を参照）。比較<code>a &gt; b</code>は<code>b &lt; a</code>に、<code>a &gt;= b</code>は<code>b &lt;= a</code>に変換されます。</p><h4 id="_3-4-4-–-論理演算子" tabindex="-1">3.4.4 – 論理演算子 <a class="header-anchor" href="#_3-4-4-–-論理演算子" aria-label="Permalink to &quot;3.4.4 – 論理演算子&quot;">​</a></h4><p>Luaの論理演算子には<code>and</code>、<code>or</code>、<code>not</code>があります。制御構造と同様（§3.3.4参照）、論理演算子は<code>false</code>と<code>nil</code>を「偽」とし、それ以外を「真」と見なします。</p><p>否定演算子<code>not</code>は常に<code>false</code>または<code>true</code>を返します。論理積演算子<code>and</code>は、最初の引数が<code>false</code>または<code>nil</code>の場合、その引数を返し、それ以外の場合は2番目の引数を返します。論理和演算子<code>or</code>は、最初の引数が<code>nil</code>および<code>false</code>以外であればその引数を返し、それ以外の場合は2番目の引数を返します。<code>and</code>と<code>or</code>は短絡評価を行い、2番目のオペランドは必要な場合にのみ評価されます。いくつかの例を以下に示します。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            --&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; &quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          --&gt; nil</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       --&gt; false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        --&gt; nil</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           --&gt; 20</span></span></code></pre></div><p>（このマニュアルでは、<code>--&gt;</code>は前の式の結果を示しています。）</p><h4 id="_3-4-5-–-連結" tabindex="-1">3.4.5 – 連結 <a class="header-anchor" href="#_3-4-5-–-連結" aria-label="Permalink to &quot;3.4.5 – 連結&quot;">​</a></h4><p>Luaの文字列連結演算子は2つのドット（<code>..</code>）で示されます。両方のオペランドが文字列または数値であれば、§3.4.2で説明されている規則に従って文字列に変換されます。それ以外の場合、<code>__concat</code>メタメソッドが呼び出されます（§2.4を参照）。</p><h4 id="_3-4-6-–-長さ演算子" tabindex="-1">3.4.6 – 長さ演算子 <a class="header-anchor" href="#_3-4-6-–-長さ演算子" aria-label="Permalink to &quot;3.4.6 – 長さ演算子&quot;">​</a></h4><p>長さ演算子は単項の接頭辞演算子<code>#</code>で表されます。文字列の長さは、そのバイト数です（つまり、各文字が1バイトの場合の通常の文字列の長さの意味になります）。</p><p>文字列以外の値に対して長さ演算子の動作を変更するには、<code>__len</code>メタメソッドを使用できます（§2.4を参照）。</p><p><code>__len</code>メタメソッドが指定されていない場合、テーブル<code>t</code>の長さは、テーブルが「シーケンス」（正の数値キーの集合が{1..n}と一致する非負整数<code>n</code>が存在する）である場合にのみ定義されます。この場合、<code>n</code>がそのテーブルの長さです。例えば、以下のようなテーブル</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>はキー4を持ちますが、キー3がないためシーケンスではありません（つまり、このテーブルの正の数値キーの集合が{1..n}と一致するような<code>n</code>は存在しません）。ただし、数値でないキーはテーブルがシーケンスであるかどうかには影響を与えません。</p><h4 id="_3-4-7-–-優先順位" tabindex="-1">3.4.7 – 優先順位 <a class="header-anchor" href="#_3-4-7-–-優先順位" aria-label="Permalink to &quot;3.4.7 – 優先順位&quot;">​</a></h4><p>Luaにおける演算子の優先順位は次の表に示されており、下から上に向かって優先順位が高くなります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>or</span></span>
<span class="line"><span>and</span></span>
<span class="line"><span>&lt;     &gt;     &lt;=    &gt;=    ~=    ==</span></span>
<span class="line"><span>..</span></span>
<span class="line"><span>+     -</span></span>
<span class="line"><span>*     /     %</span></span>
<span class="line"><span>not   #     - (単項)</span></span>
<span class="line"><span>^</span></span></code></pre></div><p>通常、式の優先順位を変更するには括弧を使用します。連結演算子（<code>..</code>）およびべき乗演算子（<code>^</code>）は右結合です。それ以外の二項演算子は左結合です。</p><h4 id="_3-4-8-–-テーブルコンストラクタ" tabindex="-1">3.4.8 – テーブルコンストラクタ <a class="header-anchor" href="#_3-4-8-–-テーブルコンストラクタ" aria-label="Permalink to &quot;3.4.8 – テーブルコンストラクタ&quot;">​</a></h4><p>テーブルコンストラクタはテーブルを作成する式です。コンストラクタが評価されるたびに新しいテーブルが作成されます。コンストラクタを使用して空のテーブルを作成したり、いくつかのフィールドを初期化したテーブルを作成したりできます。コンストラクタの一般的な構文は次の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tableconstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘{’ [fieldlist] ‘}’</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fieldlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {fieldsep field} [fieldsep]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘[’ exp ‘]’ ‘</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’ exp | Name ‘</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’ exp | exp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fieldsep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘,’ | ‘;’</span></span></code></pre></div><p><code>[exp1] = exp2</code>形式の各フィールドは、新しいテーブルにキー<code>exp1</code>と値<code>exp2</code>を持つエントリを追加します。<code>name = exp</code>形式のフィールドは<code>[&quot;name&quot;] = exp</code>と等価です。最後に、<code>exp</code>形式のフィールドは、<code>i</code>が1から始まる連続する数値インデックスで<code>[i] = exp</code>と等価です。その他の形式のフィールドはこのカウントに影響しません。例えば、</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>は以下のコードと等価です。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  t[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  t[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x&quot;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1番目のexp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  t[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;y&quot;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 2番目のexp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            -- t[&quot;x&quot;] = 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  t[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 3番目のexp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  t[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  t[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 45</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          -- 4番目のexp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>リストの最後のフィールドが<code>exp</code>形式で、式が関数呼び出しや可変引数式である場合、その式が返すすべての値がリストに連続して追加されます（§3.4.9を参照）。</p><p>フィールドリストには、機械生成コードの便宜のため、末尾の区切り記号を省略可能にすることができます。</p><h4 id="_3-4-9-–-関数呼び出し" tabindex="-1">3.4.9 – 関数呼び出し <a class="header-anchor" href="#_3-4-9-–-関数呼び出し" aria-label="Permalink to &quot;3.4.9 – 関数呼び出し&quot;">​</a></h4><p>Luaにおける関数呼び出しの構文は次の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">functioncall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefixexp args</span></span></code></pre></div><p>関数呼び出しでは、まず<code>prefixexp</code>と<code>args</code>が評価されます。<code>prefixexp</code>の値が関数型であれば、その関数が指定された引数で呼び出されます。そうでない場合は、<code>prefixexp</code>の<code>&quot;call&quot;</code>メタメソッドが呼び出され、最初のパラメータとして<code>prefixexp</code>の値が渡され、続いて元の呼び出し引数が渡されます（§2.4を参照）。</p><p>次の形式</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">functioncall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefixexp ‘:’ Name args</span></span></code></pre></div><p>は「メソッド」を呼び出すために使用されます。<code>v:name(args)</code>という呼び出しは<code>v.name(v, args)</code>の構文糖にすぎませんが、<code>v</code>は一度だけ評価されます。</p><p>引数の構文は以下の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘(’ [explist] ‘)’</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableconstructor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span></code></pre></div><p>すべての引数式は呼び出し前に評価されます。<code>f{fields}</code>形式の呼び出しは<code>f({fields})</code>の構文糖であり、引数リストが1つの新しいテーブルになります。同様に、<code>f&#39;string&#39;</code>（または<code>f&quot;string&quot;</code>や<code>f[[string]]</code>）形式の呼び出しは<code>f(&#39;string&#39;)</code>の構文糖で、引数リストは1つのリテラル文字列になります。</p><p><code>return functioncall</code>形式の呼び出しは「末尾呼び出し」と呼ばれます。Luaは適切な末尾呼び出し（または適切な末尾再帰）を実装しています。末尾呼び出しでは、呼び出される関数が呼び出し元の関数のスタックエントリを再利用するため、プログラムで実行できる末尾呼び出しのネスト数に制限はありません。ただし、末尾呼び出しは呼び出し元のデバッグ情報を消去します。末尾呼び出しは特定の構文でのみ行われ、<code>return</code>が1つの関数呼び出しだけを引数として持つ場合に、呼び出し元の関数が呼び出される関数の戻り値をそのまま返します。したがって、以下の例は末尾呼び出しにはなりません。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x))        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 結果は1つに調整される</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 追加の結果がある</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         -- 結果が破棄される</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 結果は1つに調整される</span></span></code></pre></div><h4 id="_3-4-10-–-関数定義" tabindex="-1">3.4.10 – 関数定義 <a class="header-anchor" href="#_3-4-10-–-関数定義" aria-label="Permalink to &quot;3.4.10 – 関数定義&quot;">​</a></h4><p>関数定義の構文は次の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">functiondef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> funcbody</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">funcbody </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::= ‘(’ [parlist] ‘)’ block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>関数定義を簡略化する構文糖は以下の通りです。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> funcname</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> funcbody</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stat </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::= </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> funcbody</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">funcname </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::= </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {‘.’ Name} [‘:’ Name]</span></span></code></pre></div><p>次の文</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>は、以下のように変換されます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>また、次の文</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>は、以下のように変換されます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>さらに、次の文</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>は以下に変換されますが、</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>次のようには変換されません。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>（これは、関数本体が<code>f</code>への参照を含む場合にのみ違いが生じます。）</p><p>関数定義は実行可能な式で、その値は<code>function</code>型を持ちます。Luaがチャンクを事前コンパイルすると、その中のすべての関数本体も事前コンパイルされます。そして、Luaが関数定義を実行するたびに、関数がインスタンス化（またはクローズ）されます。この関数インスタンス（クロージャ）が式の最終的な値となります。</p><p>パラメータは、引数の値で初期化されるローカル変数として機能します。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> namelist [‘,’ ‘</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’] | ‘</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’</span></span></code></pre></div><p>関数が呼び出されると、引数リストはパラメータリストの長さに合わせて調整されます。ただし、パラメータリストの末尾に3つのドット（<code>...</code>）がある可変引数関数の場合、引数リストの調整は行われません。その代わりに、すべての追加の引数が可変引数式（<code>...</code>で表されます）を通じて関数に渡されます。この式の値は、追加の引数すべてを含むリストとなり、複数の戻り値を持つ関数と似ています。可変引数式が他の式内や式リストの途中で使用される場合、その戻り値リストは1つの要素に調整されます。式リストの最後の要素として使用される場合は、調整は行われません（ただし、その最後の式が括弧で囲まれている場合を除きます）。</p><p>例として、以下の定義を考えます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, ...) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>このとき、引数とパラメータおよび可変引数式への対応は以下のようになります。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CALL            PARAMETERS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)             a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)       a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)       a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())           a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)             a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --&gt;  (なし)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --&gt;  (なし)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --&gt;  5  8</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())        a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --&gt;  2  3</span></span></code></pre></div><p>戻り値は<code>return</code>文を使用して返されます（§3.3.4参照）。<code>return</code>文に遭遇しないまま関数の終わりに達すると、関数は戻り値なしで終了します。</p><p>システム依存で、関数が返すことのできる値の数には制限があります。この制限は1000以上であることが保証されています。</p><p>コロン構文はメソッド（暗黙的に追加のパラメータ<code>self</code>を持つ関数）を定義するために使用されます。したがって、次の文</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (params) body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>は、以下の構文糖として扱われます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (self, params) body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="_3-5-–-可視性ルール" tabindex="-1">3.5 – 可視性ルール <a class="header-anchor" href="#_3-5-–-可視性ルール" aria-label="Permalink to &quot;3.5 – 可視性ルール&quot;">​</a></h3><p>Luaは字句スコープを持つ言語です。ローカル変数のスコープは、その宣言の後の最初の文から始まり、その宣言を含む最も内側のブロックの最後の有効な（空でない）文まで続きます。次の例を見てみましょう。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                -- グローバル変数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    -- 新しいブロック</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 新しい&#39;x&#39;、値は10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  -- 別のブロック</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     -- 別の&#39;x&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 11</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 10  (グローバルの&#39;x&#39;)</span></span></code></pre></div><p>この例では、<code>local x = x</code>のような宣言の場合、宣言されている新しい<code>x</code>はまだスコープ内にないため、2番目の<code>x</code>は外側の変数を参照しています。</p><p>字句スコープの規則により、ローカル変数はそのスコープ内で定義された関数から自由にアクセスできます。内部関数で使用されるローカル変数は、内部関数内では「アップバリュー」または「外部ローカル変数」と呼ばれます。</p><p>また、ローカル文が実行されるたびに新しいローカル変数が定義される点にも注意が必要です。以下の例を見てみましょう。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>このループは10個のクロージャ（つまり無名関数の10個のインスタンス）を作成します。これらのクロージャはそれぞれ異なる<code>y</code>変数を使用し、すべてが同じ<code>x</code>変数を共有しています。</p><h2 id="_4-–-アプリケーションプログラムインターフェース-api" tabindex="-1">4 – アプリケーションプログラムインターフェース（API） <a class="header-anchor" href="#_4-–-アプリケーションプログラムインターフェース-api" aria-label="Permalink to &quot;4 – アプリケーションプログラムインターフェース（API）&quot;">​</a></h2><p>このセクションでは、LuaのC API、つまりLuaとの通信に使用できるホストプログラム向けのC関数セットについて説明します。すべてのAPI関数および関連する型や定数は、ヘッダーファイル<code>lua.h</code>に宣言されています。</p><p>「関数」という用語を使用していますが、API内の機能はマクロとして提供される場合もあります。特に明記されていない限り、これらのマクロは、引数を一度だけ使用します（最初の引数は常にLuaの状態を指します）。したがって、隠れた副作用を生成しません。</p><p>多くのCライブラリと同様に、Lua API関数は引数の有効性や整合性をチェックしません。ただし、Luaを<code>LUA_USE_APICHECK</code>マクロを定義してコンパイルすることで、この動作を変更することができます。</p><h3 id="_4-1-–-スタック" tabindex="-1">4.1 – スタック <a class="header-anchor" href="#_4-1-–-スタック" aria-label="Permalink to &quot;4.1 – スタック&quot;">​</a></h3><p>Luaは、Cとの間で値をやり取りするために仮想スタックを使用します。このスタックの各要素は、Luaの値（<code>nil</code>、数値、文字列など）を表します。</p><p>LuaがCを呼び出すたびに、呼び出された関数は新しいスタックを受け取ります。このスタックは、以前のスタックや依然としてアクティブなC関数のスタックとは独立しています。このスタックには最初にC関数への引数が含まれており、C関数が結果をプッシュして呼び出し元に返す場所でもあります（<code>lua_CFunction</code>を参照）。</p><p>便宜上、APIの多くのクエリ操作では厳密なスタック規律に従う必要はありません。代わりに、スタック内の任意の要素にインデックスを使って参照できます。正のインデックスは絶対的なスタック位置を表し（1から始まります）、負のインデックスはスタックのトップからの相対的なオフセットを表します。具体的には、スタックに<code>n</code>個の要素がある場合、インデックス1は最初の要素（最初にプッシュされた要素）を、インデックス<code>n</code>は最後の要素を表します。また、インデックス<code>-1</code>も最後の要素（つまりトップの要素）を、インデックス<code>-n</code>は最初の要素を表します。</p><h3 id="_4-2-–-スタックサイズ" tabindex="-1">4.2 – スタックサイズ <a class="header-anchor" href="#_4-2-–-スタックサイズ" aria-label="Permalink to &quot;4.2 – スタックサイズ&quot;">​</a></h3><p>Lua APIと対話する際には、一貫性を保つ責任がユーザーにあります。特に、スタックのオーバーフローを制御する責任があります。新しい要素をプッシュする際には、<code>lua_checkstack</code>関数を使ってスタックに追加のスロットがあることを確認できます。</p><p>LuaがCを呼び出すたびに、スタックには少なくとも<code>LUA_MINSTACK</code>の追加スロットが確保されます。<code>LUA_MINSTACK</code>は20として定義されており、通常、コードにスタックへの要素のプッシュを伴うループがない限り、スタックのスペースについて心配する必要はありません。</p><p>結果の数が固定されていない状態でLua関数を呼び出すとき（<code>lua_call</code>を参照）、Luaはすべての結果に対してスタックサイズが十分であることを保証しますが、追加のスペースは保証しません。したがって、そのような呼び出し後にスタックに新しい要素をプッシュする前には、<code>lua_checkstack</code>を使用する必要があります。</p><h3 id="_4-3-–-有効なインデックスと許容インデックス" tabindex="-1">4.3 – 有効なインデックスと許容インデックス <a class="header-anchor" href="#_4-3-–-有効なインデックスと許容インデックス" aria-label="Permalink to &quot;4.3 – 有効なインデックスと許容インデックス&quot;">​</a></h3><p>APIでスタックインデックスを受け取る関数は、有効なインデックスまたは許容インデックスのみで動作します。</p><p><strong>有効なインデックス</strong>とは、スタック内の実際の位置を指すインデックスのことで、その位置は1からスタックトップまでの間にあります（1 ≤ abs(index) ≤ top）。通常、インデックスで値を変更できる関数は有効なインデックスを要求します。</p><p>特に記載がない限り、有効なインデックスを受け入れる関数は擬似インデックスも受け入れます。擬似インデックスは、スタックには存在しないもののCコードからアクセス可能なLuaの値を表します。擬似インデックスは、レジストリやC関数のアップバリューにアクセスするために使用されます（§4.4参照）。</p><p>特定のスタック位置を必要とせず、スタック内の値のみを必要とする関数（クエリ関数など）は、許容インデックスで呼び出すことができます。許容インデックスは、有効なインデックス（擬似インデックスを含む）であるほか、スタックトップの後のスタックサイズ内の任意の正のインデックスであることもできます（スタックサイズまでのインデックスです）。ただし、0は許容インデックスにはなりません。特に記載がない限り、APIの関数は許容インデックスで動作します。</p><p>許容インデックスは、スタックトップとの余分なチェックを省略するために役立ちます。たとえば、C関数は第3引数を取得する際、3が有効なインデックスかを事前に確認する必要なく、直接アクセスできます。</p><p>許容インデックスで呼び出せる関数において、有効でないインデックスは仮想タイプ<code>LUA_TNONE</code>の値が入っているかのように扱われ、これは<code>nil</code>値のように振る舞います。</p><h3 id="_4-4-–-cクロージャ" tabindex="-1">4.4 – Cクロージャ <a class="header-anchor" href="#_4-4-–-cクロージャ" aria-label="Permalink to &quot;4.4 – Cクロージャ&quot;">​</a></h3><p>C関数が作成される際に、いくつかの値を関連付けることができ、これによりCクロージャが作成されます（<code>lua_pushcclosure</code>参照）。これらの値はアップバリューと呼ばれ、関数が呼び出されるたびにアクセス可能です。</p><p>C関数が呼び出されるたびに、そのアップバリューは特定の擬似インデックスに配置されます。これらの擬似インデックスはマクロ<code>lua_upvalueindex</code>によって生成されます。関数に関連付けられた最初の値は<code>lua_upvalueindex(1)</code>の位置にあり、以下同様です。現在の関数のアップバリューの数を超える<code>lua_upvalueindex(n)</code>へのアクセス（ただし256以下）は、許容されるが無効なインデックスを生成します。</p><h3 id="_4-5-–-レジストリ" tabindex="-1">4.5 – レジストリ <a class="header-anchor" href="#_4-5-–-レジストリ" aria-label="Permalink to &quot;4.5 – レジストリ&quot;">​</a></h3><p>Luaは「レジストリ」と呼ばれる事前定義されたテーブルを提供しており、Cコードが必要なLuaの値を格納するために使用できます。レジストリテーブルは常に擬似インデックス<code>LUA_REGISTRYINDEX</code>に位置し、これは有効なインデックスです。任意のCライブラリがこのテーブルにデータを格納できますが、他のライブラリとの衝突を避けるため、異なるキーを選択することが推奨されます。通常、キーとしてはライブラリ名を含む文字列、Cオブジェクトのアドレスを持つライトユーザーデータ、またはコード内で生成した任意のLuaオブジェクトを使用するのが良いでしょう。グローバル名と同様、アンダースコアと大文字で始まる文字列キー（例：<code>_VERSION</code>）はLuaで予約されています。</p><p>レジストリの整数キーは、補助ライブラリで実装されている参照機構やいくつかの事前定義された値に使用されています。したがって、整数キーは他の目的には使用しないでください。</p><p>新しいLua状態を作成すると、そのレジストリにはいくつかの事前定義された値が含まれます。これらの事前定義値は、<code>lua.h</code>に定数として定義された整数キーでインデックスされています。定義されている定数は以下の通りです。</p><ul><li><strong>LUA_RIDX_MAINTHREAD</strong>: このインデックスには、状態のメインスレッドがレジストリに格納されています（メインスレッドは状態とともに作成されるスレッドです）。</li><li><strong>LUA_RIDX_GLOBALS</strong>: このインデックスにはグローバル環境がレジストリに格納されています。</li></ul><h3 id="_4-6-–-cでのエラーハンドリング" tabindex="-1">4.6 – Cでのエラーハンドリング <a class="header-anchor" href="#_4-6-–-cでのエラーハンドリング" aria-label="Permalink to &quot;4.6 – Cでのエラーハンドリング&quot;">​</a></h3><p>Lua内部では、エラー処理にCの<code>longjmp</code>機能を使用しています（LuaをC++としてコンパイルする場合は、例外処理を使用することもできます。詳細はソースコード内の<code>LUAI_THROW</code>を参照してください）。Luaがエラーに遭遇した場合（例えばメモリ割り当てエラー、型エラー、構文エラー、実行時エラー）、エラーを発生させて<code>long jump</code>を行います。保護環境では<code>setjmp</code>を使用して復旧ポイントを設定し、エラーが発生すると最新のアクティブな復旧ポイントにジャンプします。</p><p>保護環境の外でエラーが発生した場合、Luaはパニック関数（<code>lua_atpanic</code>参照）を呼び出してから<code>abort</code>を実行し、ホストアプリケーションを終了します。パニック関数は、終了せずに（例えば自分で設定した復旧ポイントに<code>long jump</code>するなどして）この終了を回避できます。</p><p>パニック関数は、メッセージハンドラとして実行され（§2.3参照）、エラーメッセージがスタックのトップにあります。ただし、スタックのスペースに関しては保証がないため、スタックに何かをプッシュする前に空きスペースを確認する必要があります（§4.2参照）。</p><p>API内のほとんどの関数は、メモリ割り当てエラーなどの理由でエラーをスローする可能性があります。各関数のドキュメントには、エラーをスローする可能性があるかどうかが記載されています。</p><p>C関数内でエラーをスローするには、<code>lua_error</code>を呼び出します。</p><h3 id="_4-7-–-cでのコルーチンのyield処理" tabindex="-1">4.7 – Cでのコルーチンのyield処理 <a class="header-anchor" href="#_4-7-–-cでのコルーチンのyield処理" aria-label="Permalink to &quot;4.7 – Cでのコルーチンのyield処理&quot;">​</a></h3><p>Lua内部では、コルーチンをyieldするためにCの<code>longjmp</code>機能を使用します。このため、関数<code>foo</code>がAPI関数を呼び出し、そのAPI関数がyield（直接または他のyieldを呼び出す関数を介して）する場合、<code>longjmp</code>によりCスタックからそのフレームが削除されるため、Luaは<code>foo</code>に戻れなくなります。</p><p>この問題を回避するため、LuaはAPI呼び出しをまたいでyieldしようとする際にエラーを発生させます。ただし、例外として<code>lua_yieldk</code>、<code>lua_callk</code>、および<code>lua_pcallk</code>の3つの関数はこのエラーをスローしません。これらの関数はすべて、yield後の実行を続けるための継続関数（<code>k</code>という名前のパラメータとして）を受け取ります。</p><p>継続を説明するために、いくつかの用語を定義する必要があります。Luaから呼び出されるC関数を「元の関数」と呼びます。この元の関数は、C API内の3つの関数のいずれか（「被呼び出し関数」と呼びます）を呼び出し、現在のスレッドをyieldします（被呼び出し関数が<code>lua_yieldk</code>である場合、または被呼び出し関数が<code>lua_callk</code>または<code>lua_pcallk</code>で、それらによって呼び出された関数がyieldした場合にこの状況が発生します）。</p><p>被呼び出し関数の実行中にスレッドがyieldするとします。スレッドが再開された後、最終的に被呼び出し関数の実行が終了します。しかし、yieldによってCスタックのフレームが破棄されているため、被呼び出し関数は元の関数に戻ることができません。代わりに、Luaは被呼び出し関数に引数として渡された継続関数を呼び出します。名前が示す通り、継続関数は元の関数のタスクを継続すべきものです。</p><p>Luaは継続関数を元の関数として扱います。継続関数は元の関数と同じLuaスタックを受け取り、被呼び出し関数が戻った場合と同じ状態になります（例えば、<code>lua_callk</code>の後では、関数とその引数がスタックから取り除かれ、呼び出しの結果に置き換えられます）。また、同じアップバリューも持ちます。Luaは継続関数が返すものを元の関数の返り値として扱います。</p><p>元の関数とその継続関数のLuaの状態の唯一の違いは、<code>lua_getctx</code>を呼び出した際の結果です。</p><h3 id="_4-8-–-関数と型" tabindex="-1">4.8 – 関数と型 <a class="header-anchor" href="#_4-8-–-関数と型" aria-label="Permalink to &quot;4.8 – 関数と型&quot;">​</a></h3><p>ここでは、C APIのすべての関数と型をアルファベット順にリストします。各関数には次のような指標が付いています：<code>[-o, +p, x]</code></p><ul><li>最初の項目<code>o</code>は、関数がスタックから取り出す（ポップする）要素の数です。</li><li>2番目の項目<code>p</code>は、関数がスタックにプッシュする要素の数です。（すべての関数は、引数をポップした後で結果をプッシュします。）</li><li><code>x|y</code>のような形式の項目は、状況に応じて<code>x</code>または<code>y</code>の要素をプッシュ（またはポップ）することを意味し、<code>?</code>は引数だけではポップ/プッシュする要素数を特定できないことを示します（例えば、スタックの内容によって変わる場合など）。</li><li>3番目の項目<code>x</code>は、関数がエラーをスローする可能性を示します。<code>-</code>はエラーを決してスローしないこと、<code>e</code>はエラーをスローする可能性があること、<code>v</code>は意図的にエラーをスローする可能性があることを意味します。</li></ul><h4 id="lua-absindex" tabindex="-1">lua_absindex <a class="header-anchor" href="#lua-absindex" aria-label="Permalink to &quot;lua_absindex&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_absindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> idx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>受け入れ可能なインデックス<code>idx</code>を絶対インデックス（スタックトップに依存しないもの）に変換します。</p><h4 id="lua-alloc" tabindex="-1">lua_Alloc <a class="header-anchor" href="#lua-alloc" aria-label="Permalink to &quot;lua_Alloc&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Alloc) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ud,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> osize,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nsize);</span></span></code></pre></div><p>Lua状態が使用するメモリ割り当て関数の型です。アロケータ関数は<code>realloc</code>と似た機能を提供する必要がありますが、完全に同じである必要はありません。この関数の引数は以下の通りです：</p><ul><li><code>ud</code>: <code>lua_newstate</code>に渡される不透明なポインタ</li><li><code>ptr</code>: 割り当て/再割り当て/解放されるブロックを指すポインタ</li><li><code>osize</code>: ブロックの元のサイズ、または割り当てるものに関するコード</li><li><code>nsize</code>: ブロックの新しいサイズ</li></ul><p><code>ptr</code>がNULLでない場合、<code>osize</code>は<code>ptr</code>が指すブロックのサイズ（割り当てまたは再割り当て時に指定されたサイズ）です。</p><p><code>ptr</code>がNULLの場合、<code>osize</code>はLuaが割り当てようとしているオブジェクトの種類を表します。このとき、<code>osize</code>は<code>LUA_TSTRING</code>、<code>LUA_TTABLE</code>、<code>LUA_TFUNCTION</code>、<code>LUA_TUSERDATA</code>、または<code>LUA_TTHREAD</code>のいずれかです。<code>osize</code>がこれら以外の値の場合、Luaは他の用途のためにメモリを割り当てています。</p><p>Luaはアロケータ関数に以下の動作を期待します：</p><ul><li><code>nsize</code>が0の場合、アロケータは<code>free</code>のように動作し、NULLを返すべきです。</li><li><code>nsize</code>が0でない場合、アロケータは<code>realloc</code>のように動作し、要求を満たせない場合のみNULLを返します。Luaは、<code>osize &gt;= nsize</code>のとき、アロケータが失敗しないと想定しています。</li></ul><p>以下は、補助ライブラリ内で<code>luaL_newstate</code>に使用されるシンプルなアロケータ関数の実装例です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">l_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> osize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)ud;  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)osize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 使用しない */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ptr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> realloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ptr, nsize);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>標準Cは、<code>free(NULL)</code>が何の影響も及ぼさないことと、<code>realloc(NULL, size)</code>が<code>malloc(size)</code>と同等であることを保証しています。このコードは、<code>realloc</code>がブロックを縮小する際に失敗しないことを前提としています（標準Cはこの動作を保証していませんが、安全な前提と考えられています）。</p><h4 id="lua-arith" tabindex="-1">lua_arith <a class="header-anchor" href="#lua-arith" aria-label="Permalink to &quot;lua_arith&quot;">​</a></h4><p><code>[-(2|1), +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_arith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックトップの2つの値（または、単項の否定の場合は1つの値）に対して算術演算を行います。スタックトップの値が2番目のオペランドとして扱われ、これらの値をポップして、演算結果をプッシュします。この関数は対応するLua演算子のセマンティクスに従います（つまり、メタメソッドを呼び出す場合もあります）。</p><p><code>op</code>の値は以下の定数のいずれかである必要があります：</p><ul><li><code>LUA_OPADD</code>: 加算（<code>+</code>）</li><li><code>LUA_OPSUB</code>: 減算（<code>-</code>）</li><li><code>LUA_OPMUL</code>: 乗算（<code>*</code>）</li><li><code>LUA_OPDIV</code>: 除算（<code>/</code>）</li><li><code>LUA_OPMOD</code>: 剰余（<code>%</code>）</li><li><code>LUA_OPPOW</code>: べき乗（<code>^</code>）</li><li><code>LUA_OPUNM</code>: 数学的な否定（単項の<code>-</code>）</li></ul><h4 id="lua-atpanic" tabindex="-1">lua_atpanic <a class="header-anchor" href="#lua-atpanic" aria-label="Permalink to &quot;lua_atpanic&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_CFunction </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_atpanic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">panicf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しいパニック関数を設定し、以前のパニック関数を返します（§4.6参照）。</p><h4 id="lua-call" tabindex="-1">lua_call <a class="header-anchor" href="#lua-call" aria-label="Permalink to &quot;lua_call&quot;">​</a></h4><p><code>[-(nargs+1), +nresults, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数を呼び出します。</p><p>関数を呼び出すには、次のプロトコルに従う必要があります。まず、呼び出す関数をスタックにプッシュし、次に引数を順番にプッシュします。最初の引数が最初にプッシュされます。最後に<code>lua_call</code>を呼び出します。<code>nargs</code>はスタックにプッシュされた引数の数です。呼び出された関数の引数と関数自体はスタックからポップされ、関数の戻り値がスタックにプッシュされます。戻り値の数は<code>nresults</code>に調整され、<code>nresults</code>が<code>LUA_MULTRET</code>の場合、すべての戻り値がプッシュされます。Luaは戻り値がスタックに収まるように調整します。戻り値は順番にスタックにプッシュされるため、呼び出し後、最後の結果がスタックトップにあります。</p><p>呼び出された関数内でエラーが発生すると、そのエラーは上位に伝播されます（<code>longjmp</code>で処理）。</p><p>次の例は、ホストプログラムが以下のLuaコードに相当する操作を行う方法を示します：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;how&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Cでの実装例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getglobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  /* 呼び出す関数 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;how&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               /* 1番目の引数 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getglobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  /* インデックスされるテーブル */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getfield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               /* t.xの結果（2番目の引数）をプッシュ */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      /* スタックから&#39;t&#39;を削除 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushinteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 /* 3番目の引数 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      /* &#39;f&#39;を3つの引数で呼び出し、1つの結果を取得 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_setglobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  /* グローバル変数&#39;a&#39;を設定 */</span></span></code></pre></div><p>上記のコードは「バランスが取れている」状態で、終了時にスタックは元の構成に戻ります。これは良いプログラミングの習慣とされています。</p><h4 id="lua-callk" tabindex="-1">lua_callk <a class="header-anchor" href="#lua-callk" aria-label="Permalink to &quot;lua_callk&quot;">​</a></h4><p><code>[-(nargs + 1), +nresults, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_callk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>この関数は<code>lua_call</code>と同様に動作しますが、呼び出された関数がyieldできるようにします（§4.7参照）。</p><h4 id="lua-cfunction" tabindex="-1">lua_CFunction <a class="header-anchor" href="#lua-cfunction" aria-label="Permalink to &quot;lua_CFunction&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_CFunction) (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L);</span></span></code></pre></div><p>C関数の型。</p><p>Luaと適切に通信するために、C関数はパラメータと結果の渡し方を定義する次のプロトコルを使用する必要があります。C関数はスタック上に直接順序でLuaから引数を受け取ります（最初の引数が最初にプッシュされます）。関数が開始されると、<code>lua_gettop(L)</code>が受け取った引数の数を返します。最初の引数（存在する場合）はインデックス1にあり、最後の引数は<code>lua_gettop(L)</code>にあります。Luaに戻り値を返すには、C関数は直接順序でスタックにプッシュするだけです（最初の結果が最初にプッシュされます）。結果以外のスタック内の他の値はLuaによって適切に破棄されます。Lua関数と同様に、Luaから呼び出されたC関数も複数の結果を返すことができます。</p><p>以下の例は、数値引数の可変個を受け取り、その平均と合計を返す関数です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_gettop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 引数の数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lua_Number sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_isnumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, i)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      lua_pushstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;incorrect argument&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      lua_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lua_pushnumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 1番目の結果 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lua_pushnumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, sum);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /* 2番目の結果 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        /* 結果の数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="lua-checkstack" tabindex="-1">lua_checkstack <a class="header-anchor" href="#lua-checkstack" aria-label="Permalink to &quot;lua_checkstack&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_checkstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> extra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックに最低でも<code>extra</code>個の空きスロットがあることを保証します。スタックが最大サイズ（通常は数千の要素）を超えるか、新しいスタックサイズのメモリを確保できない場合、この関数は要求を満たせずに<code>false</code>を返します。この関数はスタックを縮小することはありません。スタックがすでに新しいサイズよりも大きい場合、変更されません。</p><h4 id="lua-close" tabindex="-1">lua_close <a class="header-anchor" href="#lua-close" aria-label="Permalink to &quot;lua_close&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたLua状態のすべてのオブジェクトを破棄し（対応するガベージコレクションメタメソッドがある場合は呼び出します）、この状態で使用されたすべての動的メモリを解放します。いくつかのプラットフォームでは、ホストプログラムが終了するときにすべてのリソースが自然に解放されるため、この関数を呼び出す必要はありません。一方で、デーモンやWebサーバーのように長期間動作するプログラムで複数の状態を作成する場合は、不要になった状態をすぐに閉じることが必要です。</p><h4 id="lua-compare" tabindex="-1">lua_compare <a class="header-anchor" href="#lua-compare" aria-label="Permalink to &quot;lua_compare&quot;">​</a></h4><p><code>[-0, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>2つのLua値を比較します。<code>index1</code>の位置にある値が<code>index2</code>の位置にある値と比較して<code>op</code>を満たす場合、1を返します。そうでなければ0を返します。また、どちらかのインデックスが無効な場合も0を返します。比較は対応するLua演算子のセマンティクスに従います（つまり、メタメソッドを呼び出す場合もあります）。</p><p><code>op</code>の値は次の定数のいずれかでなければなりません：</p><ul><li><code>LUA_OPEQ</code>: 等価比較（<code>==</code>）</li><li><code>LUA_OPLT</code>: 小なり比較（<code>&lt;</code>）</li><li><code>LUA_OPLE</code>: 以下比較（<code>&lt;=</code>）</li></ul><h4 id="lua-concat" tabindex="-1">lua_concat <a class="header-anchor" href="#lua-concat" aria-label="Permalink to &quot;lua_concat&quot;">​</a></h4><p><code>[-n, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックトップの<code>n</code>個の値を連結し、それらをポップして結果をトップに残します。<code>n</code>が1の場合、結果はスタック上の単一の値です（つまり、関数は何もしません）。<code>n</code>が0の場合、結果は空文字列になります。連結は通常のLuaのセマンティクスに従います（§3.4.5参照）。</p><h4 id="lua-copy" tabindex="-1">lua_copy <a class="header-anchor" href="#lua-copy" aria-label="Permalink to &quot;lua_copy&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fromidx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> toidx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>fromidx</code>の位置にある要素を有効なインデックス<code>toidx</code>に移動し、他の要素をシフトせずにその位置の値を置き換えます。</p><h4 id="lua-createtable" tabindex="-1">lua_createtable <a class="header-anchor" href="#lua-createtable" aria-label="Permalink to &quot;lua_createtable&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_createtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> narr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nrec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しい空のテーブルを作成し、スタックにプッシュします。パラメータ<code>narr</code>はテーブルがシーケンスとして持つ要素数の予想、<code>nrec</code>はその他の要素数の予想です。Luaはこれらのヒントを使って新しいテーブルのメモリを事前に割り当てる場合があります。事前割り当ては、テーブルの要素数が事前にわかっている場合にパフォーマンス上の利点があります。それ以外の場合、<code>lua_newtable</code>関数を使用できます。</p><h4 id="lua-dump" tabindex="-1">lua_dump <a class="header-anchor" href="#lua-dump" aria-label="Permalink to &quot;lua_dump&quot;">​</a></h4><p><code>[-0, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_dump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Writer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">writer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数をバイナリチャンクとしてダンプします。スタックのトップにあるLua関数を受け取り、それをバイナリチャンクとして出力します。このチャンクを再度ロードすると、ダンプされた関数と同等の関数が得られます。チャンクの各部分が生成されると、<code>lua_dump</code>は指定された<code>data</code>を使用して書き込み関数<code>writer</code>（<code>lua_Writer</code>参照）を呼び出します。</p><p>返される値は、<code>writer</code>の最後の呼び出しで返されたエラーコードです。0はエラーがないことを意味します。</p><p>この関数は、Lua関数をスタックからポップしません。</p><h4 id="lua-error" tabindex="-1">lua_error <a class="header-anchor" href="#lua-error" aria-label="Permalink to &quot;lua_error&quot;">​</a></h4><p><code>[-1, +0, v]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Luaエラーを生成します。エラーメッセージ（任意のLua型の値で構いません）はスタックトップにある必要があります。この関数は<code>long jump</code>を行うため、戻ることはありません（<code>luaL_error</code>参照）。</p><h4 id="lua-gc" tabindex="-1">lua_gc <a class="header-anchor" href="#lua-gc" aria-label="Permalink to &quot;lua_gc&quot;">​</a></h4><p><code>[-0, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>ガベージコレクタを制御します。</p><p><code>what</code>の値に応じて、この関数は以下のタスクを実行します：</p><ul><li><code>LUA_GCSTOP</code>: ガベージコレクタを停止します。</li><li><code>LUA_GCRESTART</code>: ガベージコレクタを再開します。</li><li><code>LUA_GCCOLLECT</code>: 完全なガベージコレクションサイクルを実行します。</li><li><code>LUA_GCCOUNT</code>: Luaが使用中のメモリの現在量（Kバイト単位）を返します。</li><li><code>LUA_GCCOUNTB</code>: Luaが使用中のメモリ量（バイト単位）を1024で割った余りを返します。</li><li><code>LUA_GCSTEP</code>: ガベージコレクションの増分ステップを実行します。ステップ「サイズ」は<code>data</code>で制御されます（大きい値ほど多くのステップが実行されます）。この値は実験的に調整する必要があります。サイクルが完了した場合、関数は1を返します。</li><li><code>LUA_GCSETPAUSE</code>: コレクタの停止値を新しい<code>data</code>値に設定し、以前の値を返します（§2.5参照）。</li><li><code>LUA_GCSETSTEPMUL</code>: コレクタのステップ乗数を新しい<code>data</code>値に設定し、以前の値を返します（§2.5参照）。</li><li><code>LUA_GCISRUNNING</code>: コレクタが動作中（停止していない）かを示すブール値を返します。</li><li><code>LUA_GCGEN</code>: コレクタを世代別モードに切り替えます（§2.5参照）。</li><li><code>LUA_GCINC</code>: コレクタを増分モードに切り替えます。これはデフォルトのモードです。</li></ul><p>これらのオプションの詳細については<code>collectgarbage</code>を参照してください。</p><h4 id="lua-getallocf" tabindex="-1">lua_getallocf <a class="header-anchor" href="#lua-getallocf" aria-label="Permalink to &quot;lua_getallocf&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Alloc </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getallocf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定された状態のメモリ割り当て関数を返します。<code>ud</code>がNULLでない場合、Luaは<code>*ud</code>に<code>lua_newstate</code>に渡された不透明なポインタを格納します。</p><h4 id="lua-getctx" tabindex="-1">lua_getctx <a class="header-anchor" href="#lua-getctx" aria-label="Permalink to &quot;lua_getctx&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>継続関数（§4.7参照）がスレッドの状態とコンテキスト情報を取得するために呼び出されます。</p><p>元の関数内で呼び出されると、<code>lua_getctx</code>は常に<code>LUA_OK</code>を返し、引数<code>ctx</code>の値を変更しません。継続関数内で呼び出されると、<code>lua_getctx</code>は<code>LUA_YIELD</code>を返し、<code>ctx</code>にコンテキスト情報（継続関数と共に被呼び出し関数に渡された<code>ctx</code>引数の値）を設定します。</p><p>被呼び出し関数が<code>lua_pcallk</code>の場合、Luaは呼び出し中のエラー処理にも継続関数を呼び出すことがあります。つまり、<code>lua_pcallk</code>によって呼び出された関数でエラーが発生した場合、Luaは元の関数に戻らず継続関数を呼び出す場合があります。この場合、<code>lua_getctx</code>の呼び出しはエラーコードを返し（<code>lua_pcallk</code>が返す値）、<code>ctx</code>の値はyieldの場合と同様にコンテキスト情報が設定されます。</p><h4 id="lua-getfield" tabindex="-1">lua_getfield <a class="header-anchor" href="#lua-getfield" aria-label="Permalink to &quot;lua_getfield&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getfield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値<code>t</code>に対し<code>t[k]</code>の値をスタックにプッシュします。この関数はLua内と同様に「インデックス」イベントのメタメソッドをトリガーすることがあります（§2.4参照）。</p><h4 id="lua-getglobal" tabindex="-1">lua_getglobal <a class="header-anchor" href="#lua-getglobal" aria-label="Permalink to &quot;lua_getglobal&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getglobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたグローバル<code>name</code>の値をスタックにプッシュします。</p><h4 id="lua-getmetatable" tabindex="-1">lua_getmetatable <a class="header-anchor" href="#lua-getmetatable" aria-label="Permalink to &quot;lua_getmetatable&quot;">​</a></h4><p><code>[-0, +(0|1), –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getmetatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値のメタテーブルをスタックにプッシュします。値がメタテーブルを持たない場合、関数は0を返し、スタックには何もプッシュされません。</p><h4 id="lua-gettable" tabindex="-1">lua_gettable <a class="header-anchor" href="#lua-gettable" aria-label="Permalink to &quot;lua_gettable&quot;">​</a></h4><p><code>[-1, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_gettable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値<code>t</code>に対し、スタックトップにあるキー<code>k</code>で<code>t[k]</code>の値をスタックにプッシュします。</p><p>この関数はキーをスタックからポップし、その場所に結果の値を配置します。Lua内と同様に、この関数は「インデックス」イベントのメタメソッドをトリガーすることがあります（§2.4参照）。</p><h4 id="lua-gettop" tabindex="-1">lua_gettop <a class="header-anchor" href="#lua-gettop" aria-label="Permalink to &quot;lua_gettop&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_gettop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタック内のトップ要素のインデックスを返します。インデックスは1から始まるため、この結果はスタック内の要素数と同じで、0は空のスタックを意味します。</p><h4 id="lua-getuservalue" tabindex="-1">lua_getuservalue <a class="header-anchor" href="#lua-getuservalue" aria-label="Permalink to &quot;lua_getuservalue&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getuservalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにあるユーザーデータに関連付けられたLuaの値をスタックにプッシュします。この値はテーブルまたは<code>nil</code>でなければなりません。</p><h4 id="lua-insert" tabindex="-1">lua_insert <a class="header-anchor" href="#lua-insert" aria-label="Permalink to &quot;lua_insert&quot;">​</a></h4><p><code>[-1, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックトップの要素を指定された有効なインデックスに移動し、このインデックス上の要素を上にシフトしてスペースを確保します。この関数は、擬似インデックスをスタック位置として使用できないため、擬似インデックスでは呼び出せません。</p><h4 id="lua-integer" tabindex="-1">lua_Integer <a class="header-anchor" href="#lua-integer" aria-label="Permalink to &quot;lua_Integer&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ptrdiff_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lua_Integer;</span></span></code></pre></div><p>Lua APIで符号付き整数値を表すために使用される型です。</p><p>デフォルトでは<code>ptrdiff_t</code>で、通常、マシンが「快適に」扱える最大の符号付き整数型です。</p><h4 id="lua-isboolean" tabindex="-1">lua_isboolean <a class="header-anchor" href="#lua-isboolean" aria-label="Permalink to &quot;lua_isboolean&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isboolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値がブール値であれば1を、そうでなければ0を返します。</p><h4 id="lua-iscfunction" tabindex="-1">lua_iscfunction <a class="header-anchor" href="#lua-iscfunction" aria-label="Permalink to &quot;lua_iscfunction&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_iscfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値がC関数であれば1を、そうでなければ0を返します。</p><h4 id="lua-isfunction" tabindex="-1">lua_isfunction <a class="header-anchor" href="#lua-isfunction" aria-label="Permalink to &quot;lua_isfunction&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値が関数（CまたはLua関数）であれば1を、そうでなければ0を返します。</p><h4 id="lua-islightuserdata" tabindex="-1">lua_islightuserdata <a class="header-anchor" href="#lua-islightuserdata" aria-label="Permalink to &quot;lua_islightuserdata&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_islightuserdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値がライトユーザーデータであれば1を、そうでなければ0を返します。</p><h4 id="lua-isnil" tabindex="-1">lua_isnil <a class="header-anchor" href="#lua-isnil" aria-label="Permalink to &quot;lua_isnil&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isnil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値が<code>nil</code>であれば1を、そうでなければ0を返します。</p><h4 id="lua-isnone" tabindex="-1">lua_isnone <a class="header-anchor" href="#lua-isnone" aria-label="Permalink to &quot;lua_isnone&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isnone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスが無効であれば1を、そうでなければ0を返します。</p><h4 id="lua-isnoneornil" tabindex="-1">lua_isnoneornil <a class="header-anchor" href="#lua-isnoneornil" aria-label="Permalink to &quot;lua_isnoneornil&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isnoneornil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスが無効であるか、またはそのインデックスの値が<code>nil</code>であれば1を、そうでなければ0を返します。</p><h4 id="lua-isnumber" tabindex="-1">lua_isnumber <a class="header-anchor" href="#lua-isnumber" aria-label="Permalink to &quot;lua_isnumber&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isnumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値が数値、または数値に変換可能な文字列であれば1を、そうでなければ0を返します。</p><h4 id="lua-isstring" tabindex="-1">lua_isstring <a class="header-anchor" href="#lua-isstring" aria-label="Permalink to &quot;lua_isstring&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値が文字列、または文字列に変換可能な数値であれば1を、そうでなければ0を返します。</p><h4 id="lua-istable" tabindex="-1">lua_istable <a class="header-anchor" href="#lua-istable" aria-label="Permalink to &quot;lua_istable&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_istable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値がテーブルであれば1を、そうでなければ0を返します。</p><h4 id="lua-isthread" tabindex="-1">lua_isthread <a class="header-anchor" href="#lua-isthread" aria-label="Permalink to &quot;lua_isthread&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isthread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値がスレッドであれば1を、そうでなければ0を返します。</p><h4 id="lua-isuserdata" tabindex="-1">lua_isuserdata <a class="header-anchor" href="#lua-isuserdata" aria-label="Permalink to &quot;lua_isuserdata&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_isuserdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値がユーザーデータ（フルまたはライト）であれば1を、そうでなければ0を返します。</p><h4 id="lua-len" tabindex="-1">lua_len <a class="header-anchor" href="#lua-len" aria-label="Permalink to &quot;lua_len&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値の「長さ」を返します。これはLuaの<code>#</code>演算子と同等です（§3.4.6参照）。結果はスタックにプッシュされます。</p><h4 id="lua-load" tabindex="-1">lua_load <a class="header-anchor" href="#lua-load" aria-label="Permalink to &quot;lua_load&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              lua_Reader </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Luaチャンクをロードします（実行はしません）。エラーがなければ、<code>lua_load</code>はコンパイル済みのチャンクをLua関数としてスタックトップにプッシュします。エラーがあれば、エラーメッセージをプッシュします。</p><p><code>lua_load</code>の戻り値は以下の通りです：</p><ul><li><code>LUA_OK</code>: エラーなし</li><li><code>LUA_ERRSYNTAX</code>: 構文エラー（前処理中のエラー）</li><li><code>LUA_ERRMEM</code>: メモリ割り当てエラー</li><li><code>LUA_ERRGCMM</code>: <code>__gc</code>メタメソッド実行中のエラー（ロードされるチャンクとは無関係で、ガベージコレクタが生成します）</li></ul><p><code>lua_load</code>関数は、ユーザーが提供するリーダー関数を使用してチャンクを読み込みます（<code>lua_Reader</code>参照）。<code>data</code>引数はリーダー関数に渡される不透明な値です。</p><p><code>source</code>引数は、エラーメッセージやデバッグ情報（§4.9参照）で使用されるチャンク名を指定します。</p><p><code>lua_load</code>は、チャンクがテキストかバイナリかを自動的に検出し、それに応じてロードします（<code>luac</code>プログラム参照）。文字列<code>mode</code>は<code>load</code>関数と同様に動作し、<code>NULL</code>は文字列<code>&quot;bt&quot;</code>と同等です。</p><p><code>lua_load</code>は内部でスタックを使用するため、リーダー関数は戻り時にスタックを変更しないようにする必要があります。</p><p>結果の関数が1つのアップバリューを持つ場合、このアップバリューはレジストリ内のインデックス<code>LUA_RIDX_GLOBALS</code>に保存されたグローバル環境の値に設定されます（§4.5参照）。メインチャンクをロードする場合、このアップバリューは<code>_ENV</code>変数になります（§2.2参照）。</p><h4 id="lua-newstate" tabindex="-1">lua_newstate <a class="header-anchor" href="#lua-newstate" aria-label="Permalink to &quot;lua_newstate&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_newstate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_Alloc </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しい、独立した状態で動作するスレッドを作成します。メモリ不足によりスレッドまたは状態を作成できない場合はNULLを返します。引数<code>f</code>はメモリ割り当て関数であり、Luaはこの関数を通じてメモリ割り当てを行います。2番目の引数<code>ud</code>は、Luaが呼び出しごとにアロケータに渡す不透明なポインタです。</p><h4 id="lua-newtable" tabindex="-1">lua_newtable <a class="header-anchor" href="#lua-newtable" aria-label="Permalink to &quot;lua_newtable&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_newtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しい空のテーブルを作成してスタックにプッシュします。これは<code>lua_createtable(L, 0, 0)</code>と同等です。</p><h4 id="lua-newthread" tabindex="-1">lua_newthread <a class="header-anchor" href="#lua-newthread" aria-label="Permalink to &quot;lua_newthread&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_newthread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しいスレッドを作成し、スタックにプッシュして、この新しいスレッドを表す<code>lua_State</code>へのポインタを返します。この関数で返される新しいスレッドは、元のスレッドとグローバル環境を共有しますが、独立した実行スタックを持っています。</p><p>スレッドを明示的に閉じたり破棄したりする関数はありません。スレッドは他のLuaオブジェクトと同様にガベージコレクションの対象になります。</p><h4 id="lua-newuserdata" tabindex="-1">lua_newuserdata <a class="header-anchor" href="#lua-newuserdata" aria-label="Permalink to &quot;lua_newuserdata&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_newuserdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたサイズの新しいメモリブロックを割り当て、ブロックのアドレスを持つ新しいフルユーザーデータをスタックにプッシュし、そのアドレスを返します。このメモリはホストプログラムが自由に使用できます。</p><h4 id="lua-next" tabindex="-1">lua_next <a class="header-anchor" href="#lua-next" aria-label="Permalink to &quot;lua_next&quot;">​</a></h4><p><code>[-1, +(2|0), e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックからキーをポップし、指定されたインデックスのテーブルからキー–値のペアをプッシュします（指定したキーの「次の」ペア）。テーブルに要素が残っていない場合、<code>lua_next</code>は0を返し、何もプッシュしません。</p><p>典型的なテーブルの走査は次のようになります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* テーブルはインデックス&#39;t&#39;のスタックにあります */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushnil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 最初のキー */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* &#39;key&#39;（インデックス-2）と &#39;value&#39;（インデックス-1）を使用 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         lua_typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         lua_typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* &#39;value&#39;を削除し、次の反復のために &#39;key&#39;を保持 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lua_pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>テーブルを走査中に、キーに直接<code>lua_tolstring</code>を呼び出さないでください。キーが実際に文字列であることが分かっている場合を除きます。<code>lua_tolstring</code>は指定されたインデックスの値を変更する可能性があるため、次の<code>lua_next</code>呼び出しが混乱する原因になります。</p><p>テーブル走査中にテーブルを変更する際の注意点については、<code>next</code>関数を参照してください。</p><h4 id="lua-number" tabindex="-1">lua_Number <a class="header-anchor" href="#lua-number" aria-label="Permalink to &quot;lua_Number&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lua_Number;</span></span></code></pre></div><p>Luaで使用される数値の型です。デフォルトでは<code>double</code>ですが、<code>luaconf.h</code>で変更可能です。この設定ファイルを通じて、Luaの数値型を別の型（例えば<code>float</code>や<code>long</code>）に変更することができます。</p><h4 id="lua-pcall" tabindex="-1">lua_pcall <a class="header-anchor" href="#lua-pcall" aria-label="Permalink to &quot;lua_pcall&quot;">​</a></h4><p><code>[-(nargs + 1), +(nresults|1), –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msgh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>保護モードで関数を呼び出します。</p><p><code>nargs</code>と<code>nresults</code>は<code>lua_call</code>と同じ意味を持ちます。呼び出し中にエラーがなければ、<code>lua_pcall</code>は<code>lua_call</code>と同様に動作します。しかし、エラーが発生した場合、<code>lua_pcall</code>はそのエラーをキャッチしてエラーメッセージをスタックにプッシュし、エラーコードを返します。<code>lua_call</code>と同様、関数とその引数はスタックから取り除かれます。</p><p><code>msgh</code>が0の場合、スタックに返されるエラーメッセージは元のエラーメッセージと同じです。それ以外の場合、<code>msgh</code>はメッセージハンドラのスタックインデックスです（現在の実装では、このインデックスは擬似インデックスにはできません）。実行時エラーが発生すると、この関数はエラーメッセージを伴って呼び出され、その戻り値が<code>lua_pcall</code>によってスタックに返されるメッセージになります。</p><p>通常、メッセージハンドラはエラーメッセージにスタックトレースバックなどのデバッグ情報を追加するために使用されます。こうした情報は、<code>lua_pcall</code>の戻り後には収集できません。戻り時にはスタックが巻き戻されるためです。</p><p><code>lua_pcall</code>関数は次のコードのいずれかを返します（<code>lua.h</code>で定義されています）：</p><ul><li><code>LUA_OK</code>（0）：成功</li><li><code>LUA_ERRRUN</code>: 実行時エラー</li><li><code>LUA_ERRMEM</code>: メモリ割り当てエラー。この場合、Luaはメッセージハンドラを呼び出しません。</li><li><code>LUA_ERRERR</code>: メッセージハンドラの実行中に発生したエラー</li><li><code>LUA_ERRGCMM</code>: <code>__gc</code>メタメソッドの実行中に発生したエラー（通常、このエラーは呼び出される関数とは関係なく、ガベージコレクタによって生成されます）</li></ul><h4 id="lua-pcallk" tabindex="-1">lua_pcallk <a class="header-anchor" href="#lua-pcallk" aria-label="Permalink to &quot;lua_pcallk&quot;">​</a></h4><p><code>[-(nargs + 1), +(nresults|1), –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pcallk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> errfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>この関数は<code>lua_pcall</code>と同様に動作しますが、呼び出された関数がyieldできるようにします（§4.7参照）。</p><h4 id="lua-pop" tabindex="-1">lua_pop <a class="header-anchor" href="#lua-pop" aria-label="Permalink to &quot;lua_pop&quot;">​</a></h4><p><code>[-n, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックから<code>n</code>個の要素をポップします。</p><h4 id="lua-pushboolean" tabindex="-1">lua_pushboolean <a class="header-anchor" href="#lua-pushboolean" aria-label="Permalink to &quot;lua_pushboolean&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushboolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>ブール値<code>b</code>を持つ値をスタックにプッシュします。</p><h4 id="lua-pushcclosure" tabindex="-1">lua_pushcclosure <a class="header-anchor" href="#lua-pushcclosure" aria-label="Permalink to &quot;lua_pushcclosure&quot;">​</a></h4><p><code>[-n, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushcclosure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しいCクロージャをスタックにプッシュします。</p><p>C関数を作成する際にいくつかの値を関連付けることが可能で、これによりCクロージャを作成できます（§4.4参照）。これらの値は関数が呼び出されるときにアクセスできます。C関数に値を関連付けるには、まずこれらの値をスタックにプッシュします（複数の値がある場合、最初の値を最初にプッシュします）。次に、<code>lua_pushcclosure</code>を呼び出し、C関数をスタックにプッシュし、引数<code>n</code>で関数に関連付ける値の数を指定します。<code>lua_pushcclosure</code>はこれらの値をスタックからポップします。</p><p><code>n</code>の最大値は255です。</p><p><code>n</code>がゼロの場合、この関数はライトC関数を作成します。これは単なるC関数へのポインタです。この場合、メモリエラーをスローすることはありません。</p><h4 id="lua-pushcfunction" tabindex="-1">lua_pushcfunction <a class="header-anchor" href="#lua-pushcfunction" aria-label="Permalink to &quot;lua_pushcfunction&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushcfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>C関数をスタックにプッシュします。この関数はC関数へのポインタを受け取り、スタックに関数タイプのLua値をプッシュします。この値が呼び出されると、対応するC関数が実行されます。</p><p>Luaに登録される関数は、パラメータの受け取り方と結果の返し方について正しいプロトコルに従う必要があります（<code>lua_CFunction</code>参照）。</p><p><code>lua_pushcfunction</code>は以下のようにマクロとして定義されています：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushcfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushcclosure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L,f,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>このマクロでは、<code>f</code>が2回使用されます。</p><h4 id="lua-pushfstring" tabindex="-1">lua_pushfstring <a class="header-anchor" href="#lua-pushfstring" aria-label="Permalink to &quot;lua_pushfstring&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushfstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span></code></pre></div><p>フォーマットされた文字列をスタックにプッシュし、この文字列へのポインタを返します。これはISO Cの<code>sprintf</code>関数に似ていますが、いくつかの重要な違いがあります：</p><ul><li>結果のメモリを確保する必要はありません。結果はLua文字列として扱われ、メモリの確保と解放（ガベージコレクションによる）はLuaが行います。</li><li>変換指定子は非常に制限されています。フラグ、幅、精度はなく、使用可能な指定子は次の通りです：<code>%%</code>（文字列に<code>%</code>を挿入）、<code>%s</code>（サイズ制限のないゼロ終端文字列を挿入）、<code>%f</code>（<code>lua_Number</code>を挿入）、<code>%p</code>（ポインタを16進数で挿入）、<code>%d</code>（intを挿入）、および<code>%c</code>（intをバイトとして挿入）。</li></ul><h4 id="lua-pushglobaltable" tabindex="-1">lua_pushglobaltable <a class="header-anchor" href="#lua-pushglobaltable" aria-label="Permalink to &quot;lua_pushglobaltable&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushglobaltable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>グローバル環境をスタックにプッシュします。</p><h4 id="lua-pushinteger" tabindex="-1">lua_pushinteger <a class="header-anchor" href="#lua-pushinteger" aria-label="Permalink to &quot;lua_pushinteger&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushinteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Integer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>値<code>n</code>を持つ整数をスタックにプッシュします。</p><h4 id="lua-pushlightuserdata" tabindex="-1">lua_pushlightuserdata <a class="header-anchor" href="#lua-pushlightuserdata" aria-label="Permalink to &quot;lua_pushlightuserdata&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushlightuserdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>ライトユーザーデータをスタックにプッシュします。</p><p>ユーザーデータはLua内でCの値を表現します。ライトユーザーデータは<code>void*</code>型のポインタで、個別のメタテーブルはなく、生成もされないためガベージコレクションの対象にはなりません。同じCアドレスを持つライトユーザーデータは等価とみなされます。</p><h4 id="lua-pushliteral" tabindex="-1">lua_pushliteral <a class="header-anchor" href="#lua-pushliteral" aria-label="Permalink to &quot;lua_pushliteral&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushliteral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>このマクロは<code>lua_pushlstring</code>と同等ですが、<code>s</code>がリテラル文字列である場合にのみ使用できます。文字列の長さは自動的に計算されます。</p><h4 id="lua-pushlstring" tabindex="-1">lua_pushlstring <a class="header-anchor" href="#lua-pushlstring" aria-label="Permalink to &quot;lua_pushlstring&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushlstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>サイズ<code>len</code>の<code>char</code>配列<code>s</code>が指す文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成するため、関数の戻り後、<code>s</code>のメモリを解放または再利用できます。文字列は埋め込みのゼロを含む任意のバイナリデータが可能です。</p><p>内部コピーのポインタを返します。</p><h4 id="lua-pushnil" tabindex="-1">lua_pushnil <a class="header-anchor" href="#lua-pushnil" aria-label="Permalink to &quot;lua_pushnil&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushnil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>nil</code>値をスタックにプッシュします。</p><h4 id="lua-pushnumber" tabindex="-1">lua_pushnumber <a class="header-anchor" href="#lua-pushnumber" aria-label="Permalink to &quot;lua_pushnumber&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushnumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Number </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>値<code>n</code>を持つ数値をスタックにプッシュします。</p><h4 id="lua-pushstring" tabindex="-1">lua_pushstring <a class="header-anchor" href="#lua-pushstring" aria-label="Permalink to &quot;lua_pushstring&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>ゼロ終端文字列<code>s</code>が指す文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成するため、関数の戻り後、<code>s</code>のメモリを解放または再利用できます。</p><p>内部コピーのポインタを返します。</p><p><code>s</code>が<code>NULL</code>の場合、<code>nil</code>をプッシュして<code>NULL</code>を返します。</p><h4 id="lua-pushthread" tabindex="-1">lua_pushthread <a class="header-anchor" href="#lua-pushthread" aria-label="Permalink to &quot;lua_pushthread&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushthread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>L</code>が表すスレッドをスタックにプッシュします。このスレッドがその状態のメインスレッドであれば1を返します。</p><h4 id="lua-pushunsigned" tabindex="-1">lua_pushunsigned <a class="header-anchor" href="#lua-pushunsigned" aria-label="Permalink to &quot;lua_pushunsigned&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushunsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Unsigned </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>値<code>n</code>を持つ符号なし整数をスタックにプッシュします。</p><h4 id="lua-pushvalue" tabindex="-1">lua_pushvalue <a class="header-anchor" href="#lua-pushvalue" aria-label="Permalink to &quot;lua_pushvalue&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushvalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにある要素のコピーをスタックにプッシュします。</p><h4 id="lua-pushvfstring" tabindex="-1">lua_pushvfstring <a class="header-anchor" href="#lua-pushvfstring" aria-label="Permalink to &quot;lua_pushvfstring&quot;">​</a></h4><p><code>[-0, +1, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushvfstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              va_list </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_pushfstring</code>と同等ですが、可変長引数の代わりに<code>va_list</code>を受け取ります。</p><h4 id="lua-rawequal" tabindex="-1">lua_rawequal <a class="header-anchor" href="#lua-rawequal" aria-label="Permalink to &quot;lua_rawequal&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawequal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>インデックス<code>index1</code>と<code>index2</code>の2つの値が、メタメソッドを使用せずに素の等価であれば1を返します。それ以外の場合は0を返します。いずれかのインデックスが無効な場合も0を返します。</p><h4 id="lua-rawget" tabindex="-1">lua_rawget <a class="header-anchor" href="#lua-rawget" aria-label="Permalink to &quot;lua_rawget&quot;">​</a></h4><p><code>[-1, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_gettable</code>に似ていますが、メタメソッドを使用せずに生のアクセスを行います。</p><h4 id="lua-rawgeti" tabindex="-1">lua_rawgeti <a class="header-anchor" href="#lua-rawgeti" aria-label="Permalink to &quot;lua_rawgeti&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawgeti</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにあるテーブル<code>t</code>に対し<code>t[n]</code>の値をスタックにプッシュします。アクセスはメタメソッドを呼び出さない生のアクセスです。</p><h4 id="lua-rawgetp" tabindex="-1">lua_rawgetp <a class="header-anchor" href="#lua-rawgetp" aria-label="Permalink to &quot;lua_rawgetp&quot;">​</a></h4><p><code>[-0, +1, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawgetp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにあるテーブル<code>t</code>に対し、ポインタ<code>p</code>をライトユーザーデータとして表現し、それをキーとする<code>t[k]</code>の値をスタックにプッシュします。アクセスはメタメソッドを呼び出さない生のアクセスです。</p><h4 id="lua-rawlen" tabindex="-1">lua_rawlen <a class="header-anchor" href="#lua-rawlen" aria-label="Permalink to &quot;lua_rawlen&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにある値の生の「長さ」を返します。文字列の場合は文字列の長さ、テーブルの場合はメタメソッドを使用せずに長さ演算子（<code>#</code>）で得られる結果、ユーザーデータの場合は割り当てられたメモリブロックのサイズ、その他の値の場合は0を返します。</p><h4 id="lua-rawset" tabindex="-1">lua_rawset <a class="header-anchor" href="#lua-rawset" aria-label="Permalink to &quot;lua_rawset&quot;">​</a></h4><p><code>[-2, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_settable</code>に似ていますが、メタメソッドを使用せずに生の代入を行います。</p><h4 id="lua-rawseti" tabindex="-1">lua_rawseti <a class="header-anchor" href="#lua-rawseti" aria-label="Permalink to &quot;lua_rawseti&quot;">​</a></h4><p><code>[-1, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawseti</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにあるテーブル<code>t</code>に対し、スタックトップの値<code>v</code>で<code>t[n] = v</code>を実行します。この関数は値をスタックからポップします。代入はメタメソッドを呼び出さない生の代入です。</p><h4 id="lua-rawsetp" tabindex="-1">lua_rawsetp <a class="header-anchor" href="#lua-rawsetp" aria-label="Permalink to &quot;lua_rawsetp&quot;">​</a></h4><p><code>[-1, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_rawsetp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにあるテーブル<code>t</code>に対し、ポインタ<code>p</code>をライトユーザーデータとして表現し、スタックトップの値<code>v</code>で<code>t[k] = v</code>を実行します。この関数は値をスタックからポップします。代入はメタメソッドを呼び出さない生の代入です。</p><h4 id="lua-reader" tabindex="-1">lua_Reader <a class="header-anchor" href="#lua-reader" aria-label="Permalink to &quot;lua_Reader&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Reader) (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    size_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size);</span></span></code></pre></div><p><code>lua_load</code>で使用されるリーダー関数です。チャンクの別の部分が必要になるたびに、<code>lua_load</code>はリーダーを呼び出し、その<code>data</code>パラメータを渡します。リーダーはチャンクの新しい部分を含むメモリブロックへのポインタを返し、<code>size</code>にブロックのサイズを設定しなければなりません。チャンクの終了を知らせるには、リーダーは<code>NULL</code>を返すか、<code>size</code>を0に設定します。リーダー関数は、ゼロより大きい任意のサイズの部分を返すことができます。</p><h4 id="lua-register" tabindex="-1">lua_register <a class="header-anchor" href="#lua-register" aria-label="Permalink to &quot;lua_register&quot;">​</a></h4><p><code>[-0, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>C関数<code>f</code>をグローバル<code>name</code>の新しい値として設定します。これはマクロとして定義されています：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushcfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, f), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_setglobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, n))</span></span></code></pre></div><h4 id="lua-remove" tabindex="-1">lua_remove <a class="header-anchor" href="#lua-remove" aria-label="Permalink to &quot;lua_remove&quot;">​</a></h4><p><code>[-1, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにある要素を削除し、そのインデックスより上の要素を下にシフトして空きを埋めます。この関数は、スタック位置ではない擬似インデックスでは呼び出せません。</p><h4 id="lua-replace" tabindex="-1">lua_replace <a class="header-anchor" href="#lua-replace" aria-label="Permalink to &quot;lua_replace&quot;">​</a></h4><p><code>[-1, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックトップの要素を指定されたインデックスに移動し、他の要素をシフトせずにそのインデックスの値を置き換えます。その後、スタックトップの要素をポップします。</p><h4 id="lua-resume" tabindex="-1">lua_resume <a class="header-anchor" href="#lua-resume" aria-label="Permalink to &quot;lua_resume&quot;">​</a></h4><p><code>[-?, +?, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたスレッドでコルーチンを開始および再開します。</p><p>コルーチンを開始するには、スレッドスタックにメイン関数と引数をプッシュし、引数の数を<code>nargs</code>に指定して<code>lua_resume</code>を呼び出します。この呼び出しはコルーチンが一時停止または実行を完了した時点で戻ります。戻り時のスタックには<code>lua_yield</code>で渡されたすべての値、または本体関数から返されたすべての値が含まれます。<code>lua_resume</code>は、コルーチンが一時停止した場合は<code>LUA_YIELD</code>を、エラーなく実行を完了した場合は<code>LUA_OK</code>を、エラーが発生した場合はエラーコードを返します（<code>lua_pcall</code>参照）。</p><p>エラーが発生した場合、スタックは巻き戻されないため、デバッグAPIを使用してエラーを調査できます。エラーメッセージはスタックのトップにあります。</p><p>コルーチンを再開するには、前回の<code>lua_yield</code>の結果を削除し、スタックに<code>yield</code>から返される値のみをプッシュしてから<code>lua_resume</code>を呼び出します。</p><p><code>from</code>パラメータは、<code>L</code>を再開するコルーチンを表します。コルーチンがない場合、このパラメータは<code>NULL</code>にできます。</p><h4 id="lua-setallocf" tabindex="-1">lua_setallocf <a class="header-anchor" href="#lua-setallocf" aria-label="Permalink to &quot;lua_setallocf&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_setallocf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Alloc </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定された状態のメモリアロケータ関数を<code>f</code>に変更し、ユーザーデータ<code>ud</code>を設定します。</p><h4 id="lua-setfield" tabindex="-1">lua_setfield <a class="header-anchor" href="#lua-setfield" aria-label="Permalink to &quot;lua_setfield&quot;">​</a></h4><p><code>[-1, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_setfield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにある<code>t</code>に対して<code>t[k] = v</code>を実行します。ここで<code>v</code>はスタックトップの値です。</p><p>この関数はスタックから値をポップします。Luaと同様、この関数は<code>newindex</code>イベントのメタメソッドを呼び出す可能性があります（§2.4参照）。</p><h4 id="lua-setglobal" tabindex="-1">lua_setglobal <a class="header-anchor" href="#lua-setglobal" aria-label="Permalink to &quot;lua_setglobal&quot;">​</a></h4><p><code>[-1, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_setglobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックから値をポップし、それをグローバル<code>name</code>の新しい値として設定します。</p><h4 id="lua-setmetatable" tabindex="-1">lua_setmetatable <a class="header-anchor" href="#lua-setmetatable" aria-label="Permalink to &quot;lua_setmetatable&quot;">​</a></h4><p><code>[-1, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_setmetatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックからテーブルをポップし、指定されたインデックスにある値の新しいメタテーブルとして設定します。</p><h4 id="lua-settable" tabindex="-1">lua_settable <a class="header-anchor" href="#lua-settable" aria-label="Permalink to &quot;lua_settable&quot;">​</a></h4><p><code>[-2, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_settable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにある<code>t</code>に対して<code>t[k] = v</code>を実行します。ここで、<code>v</code>はスタックトップの値で、<code>k</code>はその下にある値です。</p><p>この関数はスタックからキーと値をポップします。Luaと同様、この関数は<code>newindex</code>イベントのメタメソッドを呼び出す可能性があります（§2.4参照）。</p><h4 id="lua-settop" tabindex="-1">lua_settop <a class="header-anchor" href="#lua-settop" aria-label="Permalink to &quot;lua_settop&quot;">​</a></h4><p><code>[-?, +?, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_settop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>任意のインデックスまたは0を受け取り、スタックトップをこのインデックスに設定します。新しいトップが古いトップよりも大きい場合、新しい要素は<code>nil</code>で埋められます。<code>index</code>が0の場合、スタックのすべての要素が削除されます。</p><h4 id="lua-setuservalue" tabindex="-1">lua_setuservalue <a class="header-anchor" href="#lua-setuservalue" aria-label="Permalink to &quot;lua_setuservalue&quot;">​</a></h4><p><code>[-1, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_setuservalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックからテーブルまたは<code>nil</code>をポップし、指定されたインデックスにあるユーザーデータに関連付けられた新しい値として設定します。</p><h4 id="lua-state" tabindex="-1">lua_State <a class="header-anchor" href="#lua-state" aria-label="Permalink to &quot;lua_State&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lua_State lua_State;</span></span></code></pre></div><p>Luaインタプリタ全体の状態を間接的に指すスレッドを表す不透明な構造体です。Luaライブラリは完全に再入可能で、グローバル変数を持ちません。状態に関するすべての情報はこの構造体を介してアクセスできます。</p><p>この構造体へのポインタは、<code>lua_newstate</code>（新しいLua状態を作成する関数）を除き、ライブラリ内のすべての関数の第一引数として渡される必要があります。</p><h4 id="lua-status" tabindex="-1">lua_status <a class="header-anchor" href="#lua-status" aria-label="Permalink to &quot;lua_status&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スレッド<code>L</code>の状態を返します。</p><p>状態は0（<code>LUA_OK</code>）であれば通常のスレッド、<code>lua_resume</code>の実行完了時にエラーが発生した場合はエラーコード、スレッドが一時停止中であれば<code>LUA_YIELD</code>です。</p><p><code>LUA_OK</code>状態のスレッドでのみ関数を呼び出せます。<code>LUA_OK</code>または<code>LUA_YIELD</code>状態のスレッドは再開できます（新しいコルーチンの開始またはコルーチンの再開）。</p><h4 id="lua-toboolean" tabindex="-1">lua_toboolean <a class="header-anchor" href="#lua-toboolean" aria-label="Permalink to &quot;lua_toboolean&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_toboolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにあるLuaの値をCのブール値（0または1）に変換します。Luaにおけるすべてのテストと同様、<code>false</code>と<code>nil</code>以外の値であれば<code>lua_toboolean</code>は真を返し、<code>false</code>または<code>nil</code>であれば偽を返します。（実際のブール値のみを受け入れる場合は、値の型をテストするために<code>lua_isboolean</code>を使用してください。）</p><h4 id="lua-tocfunction" tabindex="-1">lua_tocfunction <a class="header-anchor" href="#lua-tocfunction" aria-label="Permalink to &quot;lua_tocfunction&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_CFunction </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tocfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値をC関数に変換します。その値がC関数でなければ、<code>NULL</code>を返します。</p><h4 id="lua-tointeger" tabindex="-1">lua_tointeger <a class="header-anchor" href="#lua-tointeger" aria-label="Permalink to &quot;lua_tointeger&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Integer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tointeger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_tointegerx</code>と同等で、<code>isnum</code>が<code>NULL</code>と等しい場合の動作です。</p><h4 id="lua-tointegerx" tabindex="-1">lua_tointegerx <a class="header-anchor" href="#lua-tointegerx" aria-label="Permalink to &quot;lua_tointegerx&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Integer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tointegerx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスのLuaの値を符号付き整数型<code>lua_Integer</code>に変換します。Luaの値が数値または数値に変換可能な文字列でなければ、<code>lua_tointegerx</code>は0を返します（§3.4.2参照）。</p><p>数値が整数でない場合は、非指定の方法で切り捨てられます。</p><p><code>isnum</code>が<code>NULL</code>でない場合、変換が成功したかどうかを示すブール値が設定されます。</p><h4 id="lua-tolstring" tabindex="-1">lua_tolstring <a class="header-anchor" href="#lua-tolstring" aria-label="Permalink to &quot;lua_tolstring&quot;">​</a></h4><p><code>[-0, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tolstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスのLuaの値をC文字列に変換します。<code>len</code>が<code>NULL</code>でない場合、文字列の長さが<code>*len</code>に設定されます。Luaの値が文字列または数値でなければ、この関数は<code>NULL</code>を返します。値が数値の場合、<code>lua_tolstring</code>はスタック上の実際の値を文字列に変更します（テーブルトラバーサル中にキーに対して<code>lua_tolstring</code>を適用すると、<code>lua_next</code>が混乱する可能性があります）。</p><p><code>lua_tolstring</code>はLua状態内の文字列への完全に整列されたポインタを返します。この文字列は、最後の文字の後に必ずゼロ（<code>&#39;\\0&#39;</code>）が付きますが、内部に他のゼロを含むこともあります。Luaはガベージコレクションを行うため、対応する値がスタックから削除された後も<code>lua_tolstring</code>が返すポインタが有効である保証はありません。</p><h4 id="lua-tonumber" tabindex="-1">lua_tonumber <a class="header-anchor" href="#lua-tonumber" aria-label="Permalink to &quot;lua_tonumber&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Number </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_tonumberx</code>と同等で、<code>isnum</code>が<code>NULL</code>と等しい場合の動作です。</p><h4 id="lua-tonumberx" tabindex="-1">lua_tonumberx <a class="header-anchor" href="#lua-tonumberx" aria-label="Permalink to &quot;lua_tonumberx&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Number </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tonumberx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスのLuaの値をC型<code>lua_Number</code>に変換します（<code>lua_Number</code>参照）。Luaの値が数値または数値に変換可能な文字列でなければ、<code>lua_tonumberx</code>は0を返します（§3.4.2参照）。</p><p><code>isnum</code>が<code>NULL</code>でない場合、変換が成功したかどうかを示すブール値が設定されます。</p><h4 id="lua-topointer" tabindex="-1">lua_topointer <a class="header-anchor" href="#lua-topointer" aria-label="Permalink to &quot;lua_topointer&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_topointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値を汎用Cポインタ（<code>void*</code>）に変換します。値はユーザーデータ、テーブル、スレッド、または関数である必要があります。それ以外の場合、<code>lua_topointer</code>は<code>NULL</code>を返します。異なるオブジェクトは異なるポインタを生成します。このポインタを元の値に戻す方法はありません。</p><p>この関数は通常、デバッグ情報にのみ使用されます。</p><h4 id="lua-tostring" tabindex="-1">lua_tostring <a class="header-anchor" href="#lua-tostring" aria-label="Permalink to &quot;lua_tostring&quot;">​</a></h4><p><code>[-0, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_tolstring</code>と同等で、<code>len</code>が<code>NULL</code>と等しい場合の動作です。</p><h4 id="lua-tothread" tabindex="-1">lua_tothread <a class="header-anchor" href="#lua-tothread" aria-label="Permalink to &quot;lua_tothread&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tothread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値をLuaスレッド（<code>lua_State*</code>として表現）に変換します。この値がスレッドでなければ、関数は<code>NULL</code>を返します。</p><h4 id="lua-tounsigned" tabindex="-1">lua_tounsigned <a class="header-anchor" href="#lua-tounsigned" aria-label="Permalink to &quot;lua_tounsigned&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Unsigned </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tounsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_tounsignedx</code>と同等で、<code>isnum</code>が<code>NULL</code>と等しい場合の動作です。</p><h4 id="lua-tounsignedx" tabindex="-1">lua_tounsignedx <a class="header-anchor" href="#lua-tounsignedx" aria-label="Permalink to &quot;lua_tounsignedx&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Unsigned </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tounsignedx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスのLuaの値を符号なし整数型<code>lua_Unsigned</code>に変換します。Luaの値が数値または数値に変換可能な文字列でなければ、<code>lua_tounsignedx</code>は0を返します（§3.4.2参照）。</p><p>数値が整数でない場合は、非指定の方法で切り捨てられます。数値が表現可能な範囲外である場合、最大表現値に1を加えた値で割った余りに正規化されます。</p><p><code>isnum</code>が<code>NULL</code>でない場合、変換が成功したかどうかを示すブール値が設定されます。</p><h4 id="lua-touserdata" tabindex="-1">lua_touserdata <a class="header-anchor" href="#lua-touserdata" aria-label="Permalink to &quot;lua_touserdata&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_touserdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値がフルユーザーデータの場合、そのブロックアドレスを返します。値がライトユーザーデータである場合、そのポインタを返します。それ以外の場合は<code>NULL</code>を返します。</p><h4 id="lua-type" tabindex="-1">lua_type <a class="header-anchor" href="#lua-type" aria-label="Permalink to &quot;lua_type&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定された有効なインデックスの値の型を返します。インデックスが無効（ただし許容範囲）であれば<code>LUA_TNONE</code>を返します。<code>lua_type</code>が返す型は、<code>lua.h</code>で定義された以下の定数で表されます：<code>LUA_TNIL</code>、<code>LUA_TNUMBER</code>、<code>LUA_TBOOLEAN</code>、<code>LUA_TSTRING</code>、<code>LUA_TTABLE</code>、<code>LUA_TFUNCTION</code>、<code>LUA_TUSERDATA</code>、<code>LUA_TTHREAD</code>、および<code>LUA_TLIGHTUSERDATA</code>。</p><h4 id="lua-typename" tabindex="-1">lua_typename <a class="header-anchor" href="#lua-typename" aria-label="Permalink to &quot;lua_typename&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>lua_type</code>が返す値のうち<code>tp</code>でエンコードされた型の名前を返します。</p><h4 id="lua-unsigned" tabindex="-1">lua_Unsigned <a class="header-anchor" href="#lua-unsigned" aria-label="Permalink to &quot;lua_Unsigned&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lua_Unsigned;</span></span></code></pre></div><p>Lua APIで符号なし整数値を表すために使用される型です。少なくとも32ビットの範囲を持つ必要があります。</p><p>デフォルトでは<code>unsigned int</code>または<code>unsigned long</code>のいずれかで、32ビットの値を保持できる方が選択されます。</p><h4 id="lua-upvalueindex" tabindex="-1">lua_upvalueindex <a class="header-anchor" href="#lua-upvalueindex" aria-label="Permalink to &quot;lua_upvalueindex&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_upvalueindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>実行中の関数の<code>i</code>番目のアップバリューを表す擬似インデックスを返します（§4.4参照）。</p><h4 id="lua-version" tabindex="-1">lua_version <a class="header-anchor" href="#lua-version" aria-label="Permalink to &quot;lua_version&quot;">​</a></h4><p><code>[-0, +0, v]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lua_Number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Luaコアに格納されたバージョン番号のアドレスを返します。<code>lua_State</code>が有効である場合、作成された状態のバージョンのアドレスを返します。<code>NULL</code>で呼び出すと、呼び出しを行っているバージョンのアドレスを返します。</p><h4 id="lua-writer" tabindex="-1">lua_Writer <a class="header-anchor" href="#lua-writer" aria-label="Permalink to &quot;lua_Writer&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Writer) (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sz,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ud);</span></span></code></pre></div><p><code>lua_dump</code>で使用されるライター関数の型です。チャンクの別の部分が生成されるたびに、<code>lua_dump</code>はバッファ<code>p</code>とそのサイズ<code>sz</code>、および<code>lua_dump</code>に渡されたデータパラメータをライターに渡します。</p><p>ライターはエラーコードを返します。0はエラーがないことを示し、他の値はエラーが発生したことを示し、<code>lua_dump</code>がライターを再度呼び出さないようにします。</p><h4 id="lua-xmove" tabindex="-1">lua_xmove <a class="header-anchor" href="#lua-xmove" aria-label="Permalink to &quot;lua_xmove&quot;">​</a></h4><p><code>[-?, +?, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_xmove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>同じ状態の異なるスレッド間で値を交換します。</p><p>この関数は<code>from</code>のスタックから<code>n</code>個の値をポップし、それらを<code>to</code>のスタックにプッシュします。</p><h4 id="lua-yield" tabindex="-1">lua_yield <a class="header-anchor" href="#lua-yield" aria-label="Permalink to &quot;lua_yield&quot;">​</a></h4><p><code>[-?, +?, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>この関数は<code>lua_yieldk</code>と同等ですが、継続関数は持ちません（§4.7参照）。したがって、スレッドが再開されると、<code>lua_yield</code>を呼び出した関数を呼び出した関数に戻ります。</p><h4 id="lua-yieldk" tabindex="-1">lua_yieldk <a class="header-anchor" href="#lua-yieldk" aria-label="Permalink to &quot;lua_yieldk&quot;">​</a></h4><p><code>[-?, +?, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_yieldk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>コルーチンを一時停止させます。</p><p>この関数はC関数の戻り値としてのみ呼び出す必要があります。以下のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_yieldk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (L, n, i, k);</span></span></code></pre></div><p>C関数がこのように<code>lua_yieldk</code>を呼び出すと、実行中のコルーチンは実行を一時停止し、このコルーチンを開始した<code>lua_resume</code>の呼び出しが戻ります。<code>nresults</code>は、<code>lua_resume</code>に結果として渡されるスタック上の値の数です。</p><p>コルーチンが再開されると、Luaは指定された継続関数<code>k</code>を呼び出し、<code>lua_yieldk</code>を呼び出したC関数の実行を再開します（§4.7参照）。継続関数は、前の関数のスタックと同じスタックを受け取り、結果が削除され、<code>lua_resume</code>に渡された引数が代わりに置かれます。さらに、継続関数は<code>lua_getctx</code>を呼び出して<code>ctx</code>の値にアクセスできます。</p><h3 id="_4-9-–-デバッグインターフェース" tabindex="-1">4.9 – デバッグインターフェース <a class="header-anchor" href="#_4-9-–-デバッグインターフェース" aria-label="Permalink to &quot;4.9 – デバッグインターフェース&quot;">​</a></h3><p>Luaには組み込みのデバッグ機能はありませんが、関数とフックを介して特別なインターフェースを提供しています。このインターフェースにより、デバッガー、プロファイラー、その他のインタープリタから「内部情報」を取得するツールを構築することができます。</p><h4 id="lua-debug" tabindex="-1">lua_Debug <a class="header-anchor" href="#lua-debug" aria-label="Permalink to &quot;lua_Debug&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lua_Debug {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           /* (n) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">namewhat;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* (n) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">what;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           /* (S) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /* (S) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentline;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /* (l) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linedefined;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /* (S) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastlinedefined;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* (S) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nups;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /* (u) アップバリューの数 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nparams;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* (u) パラメータの数 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isvararg;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              /* (u) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> istailcall;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /* (t) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> short_src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[LUA_IDSIZE];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* (S) */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* プライベート部分 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  other fields</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} lua_Debug;</span></span></code></pre></div><p><code>lua_Debug</code>は、関数やアクティベーションレコードに関するさまざまな情報を保持するための構造体です。<code>lua_getstack</code>は、この構造体のプライベート部分のみを後で使用するために設定します。<code>lua_Debug</code>の他のフィールドに有用な情報を設定するには、<code>lua_getinfo</code>を呼び出します。</p><p><code>lua_Debug</code>のフィールドの意味は以下のとおりです：</p><ul><li><strong>source</strong>: 関数を作成したチャンクのソースです。<code>source</code>が<code>@</code>で始まる場合、その関数がファイル内で定義されており、<code>@</code>の後にファイル名が続きます。<code>source</code>が<code>=</code>で始まる場合、それ以降の内容がユーザーに依存する形でソースを説明します。それ以外の場合、関数は文字列内で定義されており、<code>source</code>はその文字列になります。</li><li><strong>short_src</strong>: エラーメッセージに使用される<code>source</code>の「表示可能な」バージョンです。</li><li><strong>linedefined</strong>: 関数定義が始まる行番号です。</li><li><strong>lastlinedefined</strong>: 関数定義が終わる行番号です。</li><li><strong>what</strong>: 関数がLua関数の場合は&quot;Lua&quot;、C関数の場合は&quot;C&quot;、チャンクのメイン部分の場合は&quot;main&quot;という文字列です。</li><li><strong>currentline</strong>: 指定された関数が現在実行している行です。行情報がない場合、<code>currentline</code>は-1に設定されます。</li><li><strong>name</strong>: 指定された関数の適切な名前です。Luaでは関数は第一級の値であるため、固定された名前がありません。ある関数は複数のグローバル変数の値であったり、テーブルフィールドにのみ格納されていることがあります。<code>lua_getinfo</code>は関数がどのように呼び出されたかを調べ、適切な名前を見つけようとします。名前が見つからない場合、<code>name</code>は<code>NULL</code>に設定されます。</li><li><strong>namewhat</strong>: <code>name</code>フィールドの説明です。関数が呼び出された方法に応じて、<code>namewhat</code>の値は&quot;global&quot;、&quot;local&quot;、&quot;method&quot;、&quot;field&quot;、&quot;upvalue&quot;、または&quot;&quot;（空文字列）になります（Luaは他のオプションが適用できない場合に空文字列を使用します）。</li><li><strong>istailcall</strong>: この関数呼び出しが末尾呼び出しであれば<code>true</code>です。この場合、このレベルの呼び出し元はスタックにありません。</li><li><strong>nups</strong>: 関数のアップバリューの数です。</li><li><strong>nparams</strong>: 関数の固定パラメータの数（C関数の場合は常に0）です。</li><li><strong>isvararg</strong>: 関数が可変引数関数であれば<code>true</code>です（C関数の場合は常に<code>true</code>）。</li></ul><h4 id="lua-gethook" tabindex="-1">lua_gethook <a class="header-anchor" href="#lua-gethook" aria-label="Permalink to &quot;lua_gethook&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Hook </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_gethook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>現在のフック関数を返します。</p><h4 id="lua-gethookcount" tabindex="-1">lua_gethookcount <a class="header-anchor" href="#lua-gethookcount" aria-label="Permalink to &quot;lua_gethookcount&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_gethookcount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>現在のフックカウントを返します。</p><h4 id="lua-gethookmask" tabindex="-1">lua_gethookmask <a class="header-anchor" href="#lua-gethookmask" aria-label="Permalink to &quot;lua_gethookmask&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_gethookmask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>現在のフックマスクを返します。</p><h4 id="lua-getinfo" tabindex="-1">lua_getinfo <a class="header-anchor" href="#lua-getinfo" aria-label="Permalink to &quot;lua_getinfo&quot;">​</a></h4><p><code>[-(0|1), +(0|1|2), e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>特定の関数や関数の呼び出しに関する情報を取得します。</p><p>関数呼び出しに関する情報を得るには、<code>ar</code>パラメータは<code>lua_getstack</code>の以前の呼び出しによって設定された有効なアクティベーションレコードである必要があります。または、フックに引数として渡されたものである必要があります（<code>lua_Hook</code>参照）。</p><p>関数に関する情報を取得するには、その関数をスタックにプッシュし、<code>what</code>文字列を<code>&gt;</code>で始めます。（この場合、<code>lua_getinfo</code>はスタックのトップから関数をポップします）。例えば、関数<code>f</code>がどの行で定義されているかを知りたい場合、以下のコードを記述します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Debug ar;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getglobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* グローバル &#39;f&#39; を取得 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;S&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ar.linedefined);</span></span></code></pre></div><p>文字列<code>what</code>の各文字は、構造体<code>ar</code>のフィールドを設定するか、スタックに値をプッシュするために使用されます：</p><ul><li><code>&#39;n&#39;</code>: フィールド<code>name</code>と<code>namewhat</code>を設定します。</li><li><code>&#39;S&#39;</code>: フィールド<code>source</code>、<code>short_src</code>、<code>linedefined</code>、<code>lastlinedefined</code>、および<code>what</code>を設定します。</li><li><code>&#39;l&#39;</code>: フィールド<code>currentline</code>を設定します。</li><li><code>&#39;t&#39;</code>: フィールド<code>istailcall</code>を設定します。</li><li><code>&#39;u&#39;</code>: フィールド<code>nups</code>、<code>nparams</code>、および<code>isvararg</code>を設定します。</li><li><code>&#39;f&#39;</code>: 指定されたレベルで実行中の関数をスタックにプッシュします。</li><li><code>&#39;L&#39;</code>: インデックスがその関数で有効な行番号を示すテーブルをスタックにプッシュします。（有効な行とは、ブレークポイントを設定できるコードが関連付けられている行を指します。空行やコメントは非有効行です）</li></ul><p>エラーが発生した場合（例えば<code>what</code>に無効なオプションがある場合）、この関数は<code>0</code>を返します。</p><h4 id="lua-getlocal" tabindex="-1">lua_getlocal <a class="header-anchor" href="#lua-getlocal" aria-label="Permalink to &quot;lua_getlocal&quot;">​</a></h4><p><code>[-0, +(0|1), –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getlocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたアクティベーションレコードまたは関数のローカル変数に関する情報を取得します。</p><p>最初のケースでは、<code>ar</code>パラメータは<code>lua_getstack</code>の以前の呼び出しによって設定された有効なアクティベーションレコードである必要があります。または、フックに引数として渡されたものである必要があります（<code>lua_Hook</code>参照）。インデックス<code>n</code>は調べるローカル変数を選択します。変数のインデックスと名前に関する詳細は<code>debug.getlocal</code>を参照してください。</p><p><code>lua_getlocal</code>は変数の値をスタックにプッシュし、その名前を返します。</p><p>第2のケースでは、<code>ar</code>は<code>NULL</code>である必要があり、調査する関数はスタックのトップになければなりません。この場合、可視なのはLua関数のパラメータのみで（どの変数がアクティブであるかの情報がないため）、スタックには何もプッシュされません。</p><p>インデックスがアクティブなローカル変数の数を超える場合、<code>NULL</code>を返し（かつ何もプッシュされません）。</p><h4 id="lua-getstack" tabindex="-1">lua_getstack <a class="header-anchor" href="#lua-getstack" aria-label="Permalink to &quot;lua_getstack&quot;">​</a></h4><p><code>[-0, +0, –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_getstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>インタプリタの実行時スタックに関する情報を取得します。</p><p>この関数は、指定されたレベルで実行中の関数のアクティベーションレコードを識別するための情報を<code>lua_Debug</code>構造体に設定します。レベル<code>0</code>は現在実行中の関数を指し、レベル<code>n+1</code>はレベル<code>n</code>を呼び出した関数を指します（ただし、末尾呼び出しはスタックにカウントされません）。エラーがない場合、<code>lua_getstack</code>は<code>1</code>を返します。スタック深度を超えるレベルで呼び出すと、<code>0</code>を返します。</p><h4 id="lua-getupvalue" tabindex="-1">lua_getupvalue <a class="header-anchor" href="#lua-getupvalue" aria-label="Permalink to &quot;lua_getupvalue&quot;">​</a></h4><p><code>[-0, +(0|1), –]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_getupvalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> funcindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>クロージャのアップバリューに関する情報を取得します。（Lua関数において、アップバリューは関数が使用する外部のローカル変数であり、結果としてクロージャに含まれます）。<code>lua_getupvalue</code>はアップバリューのインデックス<code>n</code>を取得し、その値をスタックにプッシュして名前を返します。<code>funcindex</code>はスタック内のクロージャを指します。（アップバリューは特定の順序を持たず、関数全体でアクティブなため、任意の順序で番号が付けられます）。</p><p>インデックスがアップバリューの数を超える場合、<code>NULL</code>を返し（かつ何もプッシュされません）。C関数の場合、すべてのアップバリューに対して空文字列<code>&quot;&quot;</code>が名前として使用されます。</p><h4 id="lua-hook" tabindex="-1">lua_Hook <a class="header-anchor" href="#lua-hook" aria-label="Permalink to &quot;lua_Hook&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Hook) (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ar);</span></span></code></pre></div><p>デバッグフック関数のための型。</p><p>フックが呼び出されると、<code>ar</code>引数のフィールド<code>event</code>にはフックを引き起こした特定のイベントが設定されます。Luaはこれらのイベントを次の定数で識別します：<code>LUA_HOOKCALL</code>、<code>LUA_HOOKRET</code>、<code>LUA_HOOKTAILCALL</code>、<code>LUA_HOOKLINE</code>、および<code>LUA_HOOKCOUNT</code>。さらに、行イベントの場合、フィールド<code>currentline</code>も設定されます。他のフィールドの値を取得するには、フックが<code>lua_getinfo</code>を呼び出す必要があります。</p><p>呼び出しイベントにおいて、<code>event</code>は通常の値である<code>LUA_HOOKCALL</code>か、または末尾呼び出しの<code>LUA_HOOKTAILCALL</code>になります。この場合、対応する戻りイベントは発生しません。</p><p>Luaがフックを実行中のときは、他のフックへの呼び出しを無効にします。したがって、フックが関数またはチャンクを実行するためにLuaを再度呼び出す場合、この実行中には他のフックは呼び出されません。</p><p>フック関数には継続（continuations）はありません。つまり、<code>lua_yieldk</code>、<code>lua_pcallk</code>、または<code>lua_callk</code>を非NULLの<code>k</code>と共に呼び出すことはできません。</p><p>フック関数は以下の条件でのみyieldできます。カウントと行イベントのみがyieldでき、いかなる値もyieldできません。フック関数がyieldするには、<code>nresults</code>をゼロに設定して<code>lua_yield</code>を呼び出して実行を終了する必要があります。</p><h4 id="lua-sethook" tabindex="-1">lua_sethook <a class="header-anchor" href="#lua-sethook" aria-label="Permalink to &quot;lua_sethook&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_sethook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Hook </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>デバッグフック関数を設定します。</p><p>引数<code>f</code>はフック関数です。<code>mask</code>はフックが呼び出されるイベントを指定します。<code>mask</code>は、<code>LUA_MASKCALL</code>、<code>LUA_MASKRET</code>、<code>LUA_MASKLINE</code>、および<code>LUA_MASKCOUNT</code>のビットごとの論理和で構成されます。<code>count</code>引数は、<code>mask</code>に<code>LUA_MASKCOUNT</code>が含まれる場合にのみ意味を持ちます。各イベントに対するフックの呼び出しは以下のように行われます：</p><ul><li><strong>呼び出しフック</strong>：インタプリタが関数を呼び出すときに呼び出されます。フックはLuaが新しい関数に入った直後、関数が引数を受け取る前に呼び出されます。</li><li><strong>戻りフック</strong>：インタプリタが関数から戻るときに呼び出されます。フックはLuaが関数を終了する直前に呼び出されます。戻り値にアクセスする標準的な方法はありません。</li><li><strong>行フック</strong>：インタプリタが新しい行のコードを実行しようとしているとき、またはコードが同じ行に戻るときに呼び出されます。（このイベントは、LuaがLua関数を実行中のときにのみ発生します）。</li><li><strong>カウントフック</strong>：インタプリタが<code>count</code>回の命令を実行した後に呼び出されます。（このイベントもLua関数の実行中にのみ発生します）。</li></ul><p>フックを無効にするには、<code>mask</code>をゼロに設定します。</p><h4 id="lua-setlocal" tabindex="-1">lua_setlocal <a class="header-anchor" href="#lua-setlocal" aria-label="Permalink to &quot;lua_setlocal&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_setlocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたアクティベーションレコードのローカル変数の値を設定します。パラメータ<code>ar</code>と<code>n</code>は<code>lua_getlocal</code>と同様です（<code>lua_getlocal</code>参照）。<code>lua_setlocal</code>はスタックのトップにある値を変数に割り当て、その名前を返します。また、値をスタックからポップします。</p><p>インデックスがアクティブなローカル変数の数を超える場合、<code>NULL</code>を返し（何もポップしません）。</p><h4 id="lua-setupvalue" tabindex="-1">lua_setupvalue <a class="header-anchor" href="#lua-setupvalue" aria-label="Permalink to &quot;lua_setupvalue&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_setupvalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> funcindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>クロージャのアップバリューの値を設定します。<code>lua_setupvalue</code>はスタックのトップにある値をアップバリューに割り当て、その名前を返します。また、値をスタックからポップします。パラメータ<code>funcindex</code>と<code>n</code>は<code>lua_getupvalue</code>と同様です（<code>lua_getupvalue</code>参照）。</p><p>インデックスがアップバリューの数を超える場合、<code>NULL</code>を返し（何もポップしません）。</p><h4 id="lua-upvalueid" tabindex="-1">lua_upvalueid <a class="header-anchor" href="#lua-upvalueid" aria-label="Permalink to &quot;lua_upvalueid&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_upvalueid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> funcindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>インデックス<code>funcindex</code>のクロージャからアップバリュー番号<code>n</code>の一意な識別子を返します。パラメータ<code>funcindex</code>と<code>n</code>は<code>lua_getupvalue</code>と同様です（<code>lua_getupvalue</code>参照）（ただし、<code>n</code>はアップバリューの数を超えてはなりません）。</p><p>この一意な識別子により、プログラムは異なるクロージャがアップバリューを共有しているかどうかを確認できます。Luaクロージャがアップバリュー（同一の外部ローカル変数を参照）を共有している場合、これらのアップバリューインデックスに対して同一のIDが返されます。</p><h4 id="lua-upvaluejoin" tabindex="-1">lua_upvaluejoin <a class="header-anchor" href="#lua-upvaluejoin" aria-label="Permalink to &quot;lua_upvaluejoin&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_upvaluejoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> funcindex1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> funcindex2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>インデックス<code>funcindex1</code>のLuaクロージャの<code>n1</code>番目のアップバリューを、インデックス<code>funcindex2</code>のLuaクロージャの<code>n2</code>番目のアップバリューに関連付けます。</p><h2 id="_5-–-補助ライブラリ" tabindex="-1">5 – 補助ライブラリ <a class="header-anchor" href="#_5-–-補助ライブラリ" aria-label="Permalink to &quot;5 – 補助ライブラリ&quot;">​</a></h2><p>補助ライブラリは、CとLuaのインターフェースをとるための便利な関数をいくつか提供します。基本APIがCとLua間の全てのやりとりのための基本的な関数を提供しているのに対し、補助ライブラリは一般的なタスクを簡便に行うための高レベルな関数を提供します。</p><p>補助ライブラリの全ての関数や型は、ヘッダファイル<code>lauxlib.h</code>に定義されており、<code>luaL_</code>というプレフィックスが付けられています。</p><p>補助ライブラリ内の全ての関数は基本APIの上に構築されており、基本APIで実行できる全ての操作を行えます。とはいえ、補助ライブラリを使用することでコードに一貫性がもたらされます。</p><p>補助ライブラリのいくつかの関数は、内部で追加のスタックスロットを使用します。補助ライブラリの関数が5つ未満のスロットを使用する場合、スタックサイズをチェックせず、十分なスロットがあると仮定して動作します。</p><p>補助ライブラリ内の関数のいくつかは、C関数の引数チェックに使用されます。これらの関数は、引数に対してフォーマットされたエラーメッセージ（例えば「不正な引数 #1」）を表示するため、他のスタック値には使用しないようにしてください。</p><p><code>luaL_check*</code>という名前の関数は、チェックが満たされない場合、必ずエラーを発生させます。</p><h3 id="_5-1-–-関数と型" tabindex="-1">5.1 – 関数と型 <a class="header-anchor" href="#_5-1-–-関数と型" aria-label="Permalink to &quot;5.1 – 関数と型&quot;">​</a></h3><p>以下に、補助ライブラリの関数と型をアルファベット順で一覧表示します。</p><h4 id="lual-addchar" tabindex="-1">luaL_addchar <a class="header-anchor" href="#lual-addchar" aria-label="Permalink to &quot;luaL_addchar&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_addchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファ<code>B</code>（<code>luaL_Buffer</code>を参照）にバイト<code>c</code>を追加します。</p><h4 id="lual-addlstring" tabindex="-1">luaL_addlstring <a class="header-anchor" href="#lual-addlstring" aria-label="Permalink to &quot;luaL_addlstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_addlstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファ<code>B</code>（<code>luaL_Buffer</code>を参照）に長さ<code>l</code>の文字列<code>s</code>を追加します。この文字列にはゼロ（<code>\\0</code>）が含まれていても構いません。</p><h4 id="lual-addsize" tabindex="-1">luaL_addsize <a class="header-anchor" href="#lual-addsize" aria-label="Permalink to &quot;luaL_addsize&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_addsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファ<code>B</code>（<code>luaL_Buffer</code>を参照）に、<code>luaL_prepbuffer</code>を使用して事前にバッファ領域にコピーされた長さ<code>n</code>の文字列を追加します。</p><h4 id="lual-addstring" tabindex="-1">luaL_addstring <a class="header-anchor" href="#lual-addstring" aria-label="Permalink to &quot;luaL_addstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_addstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファ<code>B</code>（<code>luaL_Buffer</code>を参照）にヌル終端文字列<code>s</code>を追加します。この文字列にはゼロ（<code>\\0</code>）が含まれていない必要があります。</p><h4 id="lual-addvalue" tabindex="-1">luaL_addvalue <a class="header-anchor" href="#lual-addvalue" aria-label="Permalink to &quot;luaL_addvalue&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_addvalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックのトップにある値をバッファ<code>B</code>（<code>luaL_Buffer</code>を参照）に追加します。この関数は値をポップします。</p><p>この関数は文字列バッファに対して、スタック上に追加する値がある状態で唯一呼び出すことができる（そして呼び出さなければならない）関数です。</p><h4 id="lual-argcheck" tabindex="-1">luaL_argcheck <a class="header-anchor" href="#lual-argcheck" aria-label="Permalink to &quot;luaL_argcheck&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_argcheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">extramsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>条件<code>cond</code>が真かどうかをチェックします。真でない場合、標準のエラーメッセージを表示してエラーを発生させます。</p><h4 id="lual-argerror" tabindex="-1">luaL_argerror <a class="header-anchor" href="#lual-argerror" aria-label="Permalink to &quot;luaL_argerror&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_argerror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">extramsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>標準メッセージに<code>extramsg</code>を追加したエラーを発生させます。</p><p>この関数は決して戻りませんが、C関数内で<code>return luaL_argerror(args)</code>のように使用するのが一般的です。</p><h4 id="lual-buffer" tabindex="-1">luaL_Buffer <a class="header-anchor" href="#lual-buffer" aria-label="Permalink to &quot;luaL_Buffer&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Buffer luaL_Buffer;</span></span></code></pre></div><p>文字列バッファの型です。</p><p>文字列バッファを使用すると、CコードでLuaの文字列を部分ごとに構築することができます。使用パターンは以下の通りです：</p><ol><li><code>luaL_Buffer</code>型の変数<code>b</code>を宣言します。</li><li><code>luaL_buffinit(L, &amp;b)</code>を呼び出して初期化します。</li><li><code>luaL_add*</code>関数を使ってバッファに文字列のパーツを追加します。</li><li><code>luaL_pushresult(&amp;b)</code>を呼び出して、最終的な文字列をスタックのトップにプッシュします。</li></ol><p>もし事前に結果の文字列の合計サイズがわかっている場合は、以下のように使用できます：</p><ol><li><code>luaL_Buffer</code>型の変数<code>b</code>を宣言します。</li><li><code>luaL_buffinitsize(L, &amp;b, sz)</code>を呼び出して初期化し、サイズ<code>sz</code>のスペースを事前に確保します。</li><li>そのスペースに文字列をコピーします。</li><li><code>luaL_pushresultsize(&amp;b, sz)</code>を呼び出し、コピーされた結果の文字列の合計サイズ<code>sz</code>を指定します。</li></ol><p>通常の操作中、文字列バッファは変動する数のスタックスロットを使用します。そのため、バッファを使用中は、スタックのトップがどこにあるかを把握しているとは限りません。バッファ操作の間にスタックを使うことは可能ですが、それはバランスが取れている場合に限られます。つまり、バッファ操作を呼び出した際、直前のバッファ操作直後のスタックレベルと同じレベルである必要があります（このルールの唯一の例外は<code>luaL_addvalue</code>です）。<code>luaL_pushresult</code>を呼び出した後、スタックはバッファが初期化されたときのレベルに戻り、そのトップに最終的な文字列がプッシュされます。</p><h4 id="lual-buffinit" tabindex="-1">luaL_buffinit <a class="header-anchor" href="#lual-buffinit" aria-label="Permalink to &quot;luaL_buffinit&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_buffinit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファ<code>B</code>を初期化します。この関数はスペースを割り当てません。バッファは変数として宣言する必要があります（<code>luaL_Buffer</code>を参照）。</p><h4 id="lual-buffinitsize" tabindex="-1">luaL_buffinitsize <a class="header-anchor" href="#lual-buffinitsize" aria-label="Permalink to &quot;luaL_buffinitsize&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_buffinitsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>luaL_buffinit</code>と<code>luaL_prepbuffsize</code>のシーケンスに相当します。</p><h4 id="lual-callmeta" tabindex="-1">luaL_callmeta <a class="header-anchor" href="#lual-callmeta" aria-label="Permalink to &quot;luaL_callmeta&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_callmeta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>メタメソッドを呼び出します。</p><p>インデックス<code>obj</code>のオブジェクトがメタテーブルを持ち、そのメタテーブルにフィールド<code>e</code>がある場合、このフィールドを呼び出し、オブジェクトを唯一の引数として渡します。この場合、この関数は<code>true</code>を返し、呼び出しの結果をスタックにプッシュします。メタテーブルやメタメソッドがない場合、この関数は<code>false</code>を返し（スタックには何もプッシュしません）。</p><h4 id="lual-checkany" tabindex="-1">luaL_checkany <a class="header-anchor" href="#lual-checkany" aria-label="Permalink to &quot;luaL_checkany&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_checkany</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数が位置<code>arg</code>に任意の型（<code>nil</code>を含む）の引数を持っているかをチェックします。</p><h4 id="lual-checkint" tabindex="-1">luaL_checkint <a class="header-anchor" href="#lual-checkint" aria-label="Permalink to &quot;luaL_checkint&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_checkint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値かどうかをチェックし、この数値を<code>int</code>にキャストして返します。</p><h4 id="lual-checkinteger" tabindex="-1">luaL_checkinteger <a class="header-anchor" href="#lual-checkinteger" aria-label="Permalink to &quot;luaL_checkinteger&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Integer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_checkinteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値かどうかをチェックし、この数値を<code>lua_Integer</code>にキャストして返します。</p><h4 id="lual-checklong" tabindex="-1">luaL_checklong <a class="header-anchor" href="#lual-checklong" aria-label="Permalink to &quot;luaL_checklong&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_checklong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値かどうかをチェックし、この数値を<code>long</code>にキャストして返します。</p><h4 id="lual-checklstring" tabindex="-1">luaL_checklstring <a class="header-anchor" href="#lual-checklstring" aria-label="Permalink to &quot;luaL_checklstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_checklstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が文字列かどうかをチェックし、この文字列を返します。<code>l</code>が<code>NULL</code>でない場合は、<code>*l</code>に文字列の長さを格納します。</p><p>この関数は<code>lua_tolstring</code>を使用して結果を取得するため、その関数の変換や注意点が適用されます。</p><h4 id="lual-checknumber" tabindex="-1">luaL_checknumber <a class="header-anchor" href="#lual-checknumber" aria-label="Permalink to &quot;luaL_checknumber&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Number </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_checknumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値かどうかをチェックし、この数値を返します。</p><h4 id="lual-checkoption" tabindex="-1">luaL_checkoption <a class="header-anchor" href="#lual-checkoption" aria-label="Permalink to &quot;luaL_checkoption&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_checkoption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">def</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> lst</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が文字列かどうかをチェックし、この文字列が配列<code>lst</code>（NULLで終端されている必要があります）にあるかを検索します。文字列が見つかった場合、配列のインデックスを返します。引数が文字列でないか、文字列が見つからない場合はエラーを発生させます。</p><p><code>def</code>が<code>NULL</code>でない場合、引数<code>arg</code>が存在しない、またはこの引数が<code>nil</code>の場合にデフォルト値として<code>def</code>を使用します。</p><p>これは文字列をCの列挙型（enum）にマッピングするのに便利な関数です（Luaライブラリでは通常、数値の代わりにオプションの選択に文字列を使用するのが一般的です）。</p><h4 id="lual-checkstack" tabindex="-1">luaL_checkstack <a class="header-anchor" href="#lual-checkstack" aria-label="Permalink to &quot;luaL_checkstack&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_checkstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックサイズを<code>top + sz</code>要素まで拡張します。スタックがそのサイズまで拡張できない場合、エラーを発生させます。<code>msg</code>はエラーメッセージに追加されるテキストで、追加のテキストが不要な場合は<code>NULL</code>に設定します。</p><h4 id="lual-checkstring" tabindex="-1">luaL_checkstring <a class="header-anchor" href="#lual-checkstring" aria-label="Permalink to &quot;luaL_checkstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_checkstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が文字列かどうかをチェックし、この文字列を返します。この関数は<code>lua_tolstring</code>を使用して結果を取得するため、その関数の変換や注意点が適用されます。</p><h4 id="lual-checktype" tabindex="-1">luaL_checktype <a class="header-anchor" href="#lual-checktype" aria-label="Permalink to &quot;luaL_checktype&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_checktype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が型<code>t</code>を持っているかどうかをチェックします。型<code>t</code>のエンコードは<code>lua_type</code>を参照してください。</p><h4 id="lual-checkudata" tabindex="-1">luaL_checkudata <a class="header-anchor" href="#lual-checkudata" aria-label="Permalink to &quot;luaL_checkudata&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_checkudata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が型<code>tname</code>のユーザデータかどうかをチェックし、ユーザデータのアドレスを返します（<code>luaL_newmetatable</code>および<code>lua_touserdata</code>を参照してください）。</p><h4 id="lual-checkunsigned" tabindex="-1">luaL_checkunsigned <a class="header-anchor" href="#lual-checkunsigned" aria-label="Permalink to &quot;luaL_checkunsigned&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Unsigned </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_checkunsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値かどうかをチェックし、この数値を<code>lua_Unsigned</code>にキャストして返します。</p><h4 id="lual-checkversion" tabindex="-1">luaL_checkversion <a class="header-anchor" href="#lual-checkversion" aria-label="Permalink to &quot;luaL_checkversion&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_checkversion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>呼び出しを行っているコア、Luaステートを作成したコア、および呼び出しを行っているコードが同じバージョンのLuaを使用しているかどうかをチェックします。また、呼び出しを行っているコアとLuaステートを作成したコアが同じアドレス空間を使用しているかもチェックします。</p><h4 id="lual-dofile" tabindex="-1">luaL_dofile <a class="header-anchor" href="#lual-dofile" aria-label="Permalink to &quot;luaL_dofile&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_dofile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたファイルをロードして実行します。この関数は次のマクロとして定義されています：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_loadfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, filename) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LUA_MULTRET, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>エラーがなければ<code>false</code>を、エラーがあれば<code>true</code>を返します。</p><h4 id="lual-dostring" tabindex="-1">luaL_dostring <a class="header-anchor" href="#lual-dostring" aria-label="Permalink to &quot;luaL_dostring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_dostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定された文字列をロードして実行します。この関数は次のマクロとして定義されています：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, str) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LUA_MULTRET, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>エラーがなければ<code>false</code>を、エラーがあれば<code>true</code>を返します。</p><h4 id="lual-error" tabindex="-1">luaL_error <a class="header-anchor" href="#lual-error" aria-label="Permalink to &quot;luaL_error&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span></code></pre></div><p>エラーを発生させます。エラーメッセージのフォーマットは<code>fmt</code>および追加の引数によって指定され、<code>lua_pushfstring</code>と同じ規則に従います。また、ファイル名とエラーが発生した行番号が利用可能であれば、メッセージの先頭に追加されます。この関数は返値を持たず、通常はC関数内で<code>return luaL_error(args);</code>という形で使用されます。</p><h4 id="lual-execresult" tabindex="-1">luaL_execresult <a class="header-anchor" href="#lual-execresult" aria-label="Permalink to &quot;luaL_execresult&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_execresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>標準ライブラリのプロセス関連関数（<code>os.execute</code>や<code>io.close</code>）に対する戻り値を生成します。</p><h4 id="lual-fileresult" tabindex="-1">luaL_fileresult <a class="header-anchor" href="#lual-fileresult" aria-label="Permalink to &quot;luaL_fileresult&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_fileresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>標準ライブラリのファイル関連関数（<code>io.open</code>、<code>os.rename</code>、<code>file:seek</code>など）に対する戻り値を生成します。</p><h4 id="lual-getmetafield" tabindex="-1">luaL_getmetafield <a class="header-anchor" href="#lual-getmetafield" aria-label="Permalink to &quot;luaL_getmetafield&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_getmetafield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>インデックス<code>obj</code>のオブジェクトのメタテーブルからフィールド<code>e</code>をスタックにプッシュします。オブジェクトにメタテーブルがない場合や、そのフィールドがメタテーブルに存在しない場合は<code>false</code>を返し、何もプッシュしません。</p><h4 id="lual-getmetatable" tabindex="-1">luaL_getmetatable <a class="header-anchor" href="#lual-getmetatable" aria-label="Permalink to &quot;luaL_getmetatable&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_getmetatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>レジストリ内で名前<code>tname</code>に関連付けられたメタテーブルをスタックにプッシュします（<code>luaL_newmetatable</code>を参照してください）。</p><h4 id="lual-getsubtable" tabindex="-1">luaL_getsubtable <a class="header-anchor" href="#lual-getsubtable" aria-label="Permalink to &quot;luaL_getsubtable&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_getsubtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> idx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>インデックス<code>idx</code>の値<code>t</code>において<code>t[fname]</code>がテーブルであることを保証し、そのテーブルをスタックにプッシュします。既存のテーブルが見つかった場合は<code>true</code>を返し、新しいテーブルを作成した場合は<code>false</code>を返します。</p><h4 id="lual-gsub" tabindex="-1">luaL_gsub <a class="header-anchor" href="#lual-gsub" aria-label="Permalink to &quot;luaL_gsub&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_gsub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                       const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                       const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                       const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>文字列<code>s</code>内で文字列<code>p</code>が出現する箇所をすべて文字列<code>r</code>に置き換えたコピーを作成します。結果の文字列をスタックにプッシュし、これを返します。</p><h4 id="lual-len" tabindex="-1">luaL_len <a class="header-anchor" href="#lual-len" aria-label="Permalink to &quot;luaL_len&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスの値の「長さ」を数値として返します。これはLuaの<code>#</code>演算子と同等です（§3.4.6参照）。操作結果が数値でない場合、エラーを発生させます（この場合はメタメソッドを介した場合のみ発生します）。</p><h4 id="lual-loadbuffer" tabindex="-1">luaL_loadbuffer <a class="header-anchor" href="#lual-loadbuffer" aria-label="Permalink to &quot;luaL_loadbuffer&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_loadbuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>luaL_loadbufferx</code>と同等で、<code>mode</code>が<code>NULL</code>です。</p><h4 id="lual-loadbufferx" tabindex="-1">luaL_loadbufferx <a class="header-anchor" href="#lual-loadbufferx" aria-label="Permalink to &quot;luaL_loadbufferx&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_loadbufferx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファをLuaチャンクとしてロードします。この関数は<code>lua_load</code>を使用して、<code>buff</code>が指すバッファのサイズ<code>sz</code>を持つチャンクをロードします。</p><p>この関数は<code>lua_load</code>と同じ結果を返します。<code>name</code>はチャンクの名前で、デバッグ情報やエラーメッセージに使用されます。<code>mode</code>文字列は<code>lua_load</code>と同様に動作します。</p><h4 id="lual-loadfile" tabindex="-1">luaL_loadfile <a class="header-anchor" href="#lual-loadfile" aria-label="Permalink to &quot;luaL_loadfile&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_loadfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>luaL_loadfilex</code>と同等で、<code>mode</code>が<code>NULL</code>です。</p><h4 id="lual-loadfilex" tabindex="-1">luaL_loadfilex <a class="header-anchor" href="#lual-loadfilex" aria-label="Permalink to &quot;luaL_loadfilex&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_loadfilex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                            const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>ファイルをLuaチャンクとしてロードします。この関数は<code>lua_load</code>を使用して、指定されたファイル名<code>filename</code>のファイル内のチャンクをロードします。<code>filename</code>が<code>NULL</code>の場合は標準入力からロードします。ファイルの最初の行が<code>#</code>で始まる場合、その行は無視されます。</p><p><code>mode</code>文字列は<code>lua_load</code>と同様に動作します。</p><p>この関数は<code>lua_load</code>と同じ結果を返しますが、ファイルを開いたり読み取ったりできない場合、またはファイルのモードが正しくない場合には追加のエラーコード<code>LUA_ERRFILE</code>を返します。</p><p><code>lua_load</code>と同様に、この関数はチャンクをロードするだけで、実行はしません。</p><h4 id="lual-loadstring" tabindex="-1">luaL_loadstring <a class="header-anchor" href="#lual-loadstring" aria-label="Permalink to &quot;luaL_loadstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>文字列をLuaチャンクとしてロードします。この関数は<code>lua_load</code>を使用して、ヌル終端文字列<code>s</code>のチャンクをロードします。</p><p>この関数は<code>lua_load</code>と同じ結果を返します。また、<code>lua_load</code>と同様に、この関数はチャンクをロードするだけで、実行はしません。</p><h4 id="lual-newlib" tabindex="-1">luaL_newlib <a class="header-anchor" href="#lual-newlib" aria-label="Permalink to &quot;luaL_newlib&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_newlib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しいテーブルを作成し、リスト<code>l</code>にある関数を登録します。これは次のマクロとして実装されています：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_newlibtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L,l), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_setfuncs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L,l,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h4 id="lual-newlibtable" tabindex="-1">luaL_newlibtable <a class="header-anchor" href="#lual-newlibtable" aria-label="Permalink to &quot;luaL_newlibtable&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_newlibtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Reg </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>配列<code>l</code>内のすべてのエントリを格納するのに最適なサイズの新しいテーブルを作成しますが、実際にはエントリは格納しません。これは<code>luaL_setfuncs</code>と組み合わせて使用されることを意図しています（<code>luaL_newlib</code>参照）。</p><p>これはマクロとして実装されています。配列<code>l</code>は実際の配列でなければならず、ポインタではありません。</p><h4 id="lual-newmetatable" tabindex="-1">luaL_newmetatable <a class="header-anchor" href="#lual-newmetatable" aria-label="Permalink to &quot;luaL_newmetatable&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_newmetatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>レジストリに<code>tname</code>キーが既にある場合は<code>0</code>を返します。それ以外の場合、ユーザデータのメタテーブルとして使用する新しいテーブルを作成し、それを<code>tname</code>キーでレジストリに追加して<code>1</code>を返します。</p><p>どちらの場合も、最終的に<code>tname</code>に関連付けられた値をスタックにプッシュします。</p><h4 id="lual-newstate" tabindex="-1">luaL_newstate <a class="header-anchor" href="#lual-newstate" aria-label="Permalink to &quot;luaL_newstate&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_newstate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>新しいLuaステートを作成します。標準のC<code>realloc</code>関数に基づいたアロケータを使用して<code>lua_newstate</code>を呼び出し、致命的エラーが発生した場合にエラーメッセージを標準エラー出力に出力するパニック関数を設定します（§4.6参照）。</p><p>新しいステートを返しますが、メモリアロケーションエラーが発生した場合は<code>NULL</code>を返します。</p><h4 id="lual-openlibs" tabindex="-1">luaL_openlibs <a class="header-anchor" href="#lual-openlibs" aria-label="Permalink to &quot;luaL_openlibs&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_openlibs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたステートにすべての標準Luaライブラリを開きます。</p><h4 id="lual-optint" tabindex="-1">luaL_optint <a class="header-anchor" href="#lual-optint" aria-label="Permalink to &quot;luaL_optint&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_optint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値の場合、その数値を<code>int</code>にキャストして返します。この引数が存在しないか<code>nil</code>の場合は<code>d</code>を返します。その他の場合はエラーを発生させます。</p><h4 id="lual-optinteger" tabindex="-1">luaL_optinteger <a class="header-anchor" href="#lual-optinteger" aria-label="Permalink to &quot;luaL_optinteger&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Integer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_optinteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             lua_Integer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値の場合、その数値を<code>lua_Integer</code>にキャストして返します。この引数が存在しないか<code>nil</code>の場合は<code>d</code>を返します。その他の場合はエラーを発生させます。</p><h4 id="lual-optlong" tabindex="-1">luaL_optlong <a class="header-anchor" href="#lual-optlong" aria-label="Permalink to &quot;luaL_optlong&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_optlong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値の場合、その数値を<code>long</code>型にキャストして返します。この引数が存在しないか<code>nil</code>の場合は<code>d</code>を返します。その他の場合はエラーを発生させます。</p><h4 id="lual-optlstring" tabindex="-1">luaL_optlstring <a class="header-anchor" href="#lual-optlstring" aria-label="Permalink to &quot;luaL_optlstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_optlstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             size_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が文字列の場合、その文字列を返します。この引数が存在しないか<code>nil</code>の場合は<code>d</code>を返します。その他の場合はエラーを発生させます。</p><p><code>l</code>が<code>NULL</code>でない場合、結果の文字列の長さを<code>*l</code>に格納します。</p><h4 id="lual-optnumber" tabindex="-1">luaL_optnumber <a class="header-anchor" href="#lual-optnumber" aria-label="Permalink to &quot;luaL_optnumber&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Number </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_optnumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Number </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値の場合、その数値を返します。この引数が存在しないか<code>nil</code>の場合は<code>d</code>を返します。その他の場合はエラーを発生させます。</p><h4 id="lual-optstring" tabindex="-1">luaL_optstring <a class="header-anchor" href="#lual-optstring" aria-label="Permalink to &quot;luaL_optstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_optstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が文字列の場合、その文字列を返します。この引数が存在しないか<code>nil</code>の場合は<code>d</code>を返します。その他の場合はエラーを発生させます。</p><h4 id="lual-optunsigned" tabindex="-1">luaL_optunsigned <a class="header-anchor" href="#lual-optunsigned" aria-label="Permalink to &quot;luaL_optunsigned&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Unsigned </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_optunsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               lua_Unsigned </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数引数<code>arg</code>が数値の場合、その数値を<code>lua_Unsigned</code>型にキャストして返します。この引数が存在しないか<code>nil</code>の場合は<code>u</code>を返します。その他の場合はエラーを発生させます。</p><h4 id="lual-prepbuffer" tabindex="-1">luaL_prepbuffer <a class="header-anchor" href="#lual-prepbuffer" aria-label="Permalink to &quot;luaL_prepbuffer&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_prepbuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>luaL_prepbuffsize</code>と同等で、定義済みのサイズ<code>LUAL_BUFFERSIZE</code>を使用します。</p><h4 id="lual-prepbuffsize" tabindex="-1">luaL_prepbuffsize <a class="header-anchor" href="#lual-prepbuffsize" aria-label="Permalink to &quot;luaL_prepbuffsize&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_prepbuffsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファ<code>B</code>（<code>luaL_Buffer</code>参照）に追加する文字列をコピーできるサイズ<code>sz</code>のスペースのアドレスを返します。このスペースに文字列をコピーした後、<code>luaL_addsize</code>を呼び出して文字列をバッファに実際に追加する必要があります。</p><h4 id="lual-pushresult" tabindex="-1">luaL_pushresult <a class="header-anchor" href="#lual-pushresult" aria-label="Permalink to &quot;luaL_pushresult&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_pushresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファ<code>B</code>の使用を終了し、最終的な文字列をスタックのトップに残します。</p><h4 id="lual-pushresultsize" tabindex="-1">luaL_pushresultsize <a class="header-anchor" href="#lual-pushresultsize" aria-label="Permalink to &quot;luaL_pushresultsize&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_pushresultsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>luaL_addsize</code>と<code>luaL_pushresult</code>のシーケンスと同等です。</p><h4 id="lual-ref" tabindex="-1">luaL_ref <a class="header-anchor" href="#lual-ref" aria-label="Permalink to &quot;luaL_ref&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックのトップにあるオブジェクトに対して、インデックス<code>t</code>にあるテーブル内で参照を作成して返します（オブジェクトはポップされます）。</p><p>参照は一意の整数キーです。テーブル<code>t</code>に手動で整数キーを追加しない限り、<code>luaL_ref</code>は一意のキーを保証します。参照<code>r</code>で参照されるオブジェクトは、<code>lua_rawgeti(L, t, r)</code>を呼び出すことで取得できます。関数<code>luaL_unref</code>は参照とその関連オブジェクトを解放します。</p><p>スタックのトップのオブジェクトが<code>nil</code>の場合、<code>luaL_ref</code>は定数<code>LUA_REFNIL</code>を返します。定数<code>LUA_NOREF</code>は、<code>luaL_ref</code>によって返される参照とは異なることが保証されています。</p><h4 id="lual-reg" tabindex="-1">luaL_Reg <a class="header-anchor" href="#lual-reg" aria-label="Permalink to &quot;luaL_Reg&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Reg {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lua_CFunction func;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} luaL_Reg;</span></span></code></pre></div><p><code>luaL_setfuncs</code>によって登録される関数の配列の型です。<code>name</code>は関数名で、<code>func</code>は関数へのポインタです。<code>luaL_Reg</code>の配列は、<code>name</code>と<code>func</code>の両方が<code>NULL</code>である番兵エントリで終了する必要があります。</p><h4 id="lual-requiref" tabindex="-1">luaL_requiref <a class="header-anchor" href="#lual-requiref" aria-label="Permalink to &quot;luaL_requiref&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_requiref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">openf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> glb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>関数<code>openf</code>を引数として文字列<code>modname</code>で呼び出し、その呼び出し結果を<code>package.loaded[modname]</code>に設定します。これはその関数が<code>require</code>を通じて呼び出されたかのように動作します。</p><p><code>glb</code>が真の場合、結果もグローバル<code>modname</code>に格納されます。</p><p>その結果のコピーをスタックに残します。</p><h4 id="lual-setfuncs" tabindex="-1">luaL_setfuncs <a class="header-anchor" href="#lual-setfuncs" aria-label="Permalink to &quot;luaL_setfuncs&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_setfuncs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>配列<code>l</code>（<code>luaL_Reg</code>参照）内のすべての関数をスタックのトップにあるテーブルに登録します（オプションのアップバリューの下に配置します。次を参照）。</p><p><code>nup</code>がゼロでない場合、すべての関数は<code>nup</code>個のアップバリューを共有して作成され、それらの値はライブラリテーブルの上にスタックに事前にプッシュされる必要があります。登録後、これらの値はスタックからポップされます。</p><h4 id="lual-setmetatable" tabindex="-1">luaL_setmetatable <a class="header-anchor" href="#lual-setmetatable" aria-label="Permalink to &quot;luaL_setmetatable&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_setmetatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタックのトップにあるオブジェクトのメタテーブルを、レジストリに<code>tname</code>として登録されているメタテーブルに設定します（<code>luaL_newmetatable</code>参照）。</p><h4 id="lual-testudata" tabindex="-1">luaL_testudata <a class="header-anchor" href="#lual-testudata" aria-label="Permalink to &quot;luaL_testudata&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_testudata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>この関数は<code>luaL_checkudata</code>と同様に動作しますが、テストが失敗した場合にエラーを発生させる代わりに<code>NULL</code>を返します。</p><h4 id="lual-tolstring" tabindex="-1">luaL_tolstring <a class="header-anchor" href="#lual-tolstring" aria-label="Permalink to &quot;luaL_tolstring&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_tolstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> idx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにある任意のLua値を、適切な形式でC文字列に変換します。変換結果の文字列はスタックにプッシュされ、この関数の戻り値としても返されます。<code>len</code>が<code>NULL</code>でない場合、文字列の長さも<code>*len</code>に設定されます。</p><p>値にメタテーブルがあり、そのメタテーブルに<code>&quot;__tostring&quot;</code>フィールドがある場合、<code>luaL_tolstring</code>は対応するメタメソッドを引数として呼び出し、その結果を返り値として使用します。</p><h4 id="lual-traceback" tabindex="-1">luaL_traceback <a class="header-anchor" href="#lual-traceback" aria-label="Permalink to &quot;luaL_traceback&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_traceback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>スタック<code>L1</code>のトレースバックを作成してプッシュします。<code>msg</code>が<code>NULL</code>でない場合、それがトレースバックの先頭に追加されます。<code>level</code>パラメータはトレースバックの開始レベルを指定します。</p><h4 id="lual-typename" tabindex="-1">luaL_typename <a class="header-anchor" href="#lual-typename" aria-label="Permalink to &quot;luaL_typename&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>指定されたインデックスにある値の型名を返します。</p><h4 id="lual-unref" tabindex="-1">luaL_unref <a class="header-anchor" href="#lual-unref" aria-label="Permalink to &quot;luaL_unref&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_unref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>インデックス<code>t</code>のテーブルから参照<code>ref</code>を解放します（<code>luaL_ref</code>参照）。エントリはテーブルから削除されるため、参照されたオブジェクトはガベージコレクションの対象となります。また、参照<code>ref</code>は再利用可能として解放されます。</p><p><code>ref</code>が<code>LUA_NOREF</code>または<code>LUA_REFNIL</code>の場合、<code>luaL_unref</code>は何も行いません。</p><h4 id="lual-where" tabindex="-1">luaL_where <a class="header-anchor" href="#lual-where" aria-label="Permalink to &quot;luaL_where&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> lvl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>現在のコールスタックにおけるレベル<code>lvl</code>での位置を示す文字列をスタックにプッシュします。この文字列は通常、次の形式を持ちます：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>chunkname:currentline:</span></span></code></pre></div><p>レベル0は実行中の関数で、レベル1は実行中の関数を呼び出した関数です。</p><p>この関数はエラーメッセージのプレフィックスを作成するために使用されます。</p><h2 id="_6-–-標準ライブラリ" tabindex="-1">6 – 標準ライブラリ <a class="header-anchor" href="#_6-–-標準ライブラリ" aria-label="Permalink to &quot;6 – 標準ライブラリ&quot;">​</a></h2><p>Luaの標準ライブラリは、C APIを通じて直接実装された便利な関数を提供します。これらの関数の一部は、言語にとって不可欠なサービス（例：<code>type</code>や<code>getmetatable</code>）を提供し、他は「外部」サービス（例：I/O）にアクセスする機能を提供します。また、Luaで実装可能ですが、非常に有用であるか、重要なパフォーマンス要件があるためにCでの実装が望まれるもの（例：<code>table.sort</code>）もあります。</p><p>すべてのライブラリは公式のC APIを通じて実装され、個別のCモジュールとして提供されます。現在、Luaには以下の標準ライブラリがあります：</p><ul><li>基本ライブラリ（§6.1）</li><li>コルーチンライブラリ（§6.2）</li><li>パッケージライブラリ（§6.3）</li><li>文字列操作（§6.4）</li><li>テーブル操作（§6.5）</li><li>数学関数（例：<code>sin</code>、<code>log</code>など）（§6.6）</li><li>ビット演算（§6.7）</li><li>入出力（§6.8）</li><li>OS関連機能（§6.9）</li><li>デバッグ機能（§6.10）</li></ul><p>基本ライブラリとパッケージライブラリを除き、各ライブラリはそのすべての関数をグローバルテーブルのフィールドまたはオブジェクトのメソッドとして提供します。</p><p>これらのライブラリにアクセスするには、Cホストプログラムが<code>luaL_openlibs</code>関数を呼び出し、すべての標準ライブラリを開く必要があります。または、ホストプログラムが個別に開くこともでき、<code>luaL_requiref</code>を使用して、<code>luaopen_base</code>（基本ライブラリ用）、<code>luaopen_package</code>（パッケージライブラリ用）、<code>luaopen_coroutine</code>（コルーチンライブラリ用）、<code>luaopen_string</code>（文字列ライブラリ用）、<code>luaopen_table</code>（テーブルライブラリ用）、<code>luaopen_math</code>（数学ライブラリ用）、<code>luaopen_bit32</code>（ビットライブラリ用）、<code>luaopen_io</code>（I/Oライブラリ用）、<code>luaopen_os</code>（OSライブラリ用）、および<code>luaopen_debug</code>（デバッグライブラリ用）を呼び出します。これらの関数は<code>lualib.h</code>で宣言されています。</p><h3 id="_6-1-–-基本関数" tabindex="-1">6.1 – 基本関数 <a class="header-anchor" href="#_6-1-–-基本関数" aria-label="Permalink to &quot;6.1 – 基本関数&quot;">​</a></h3><p>基本ライブラリはLuaにおけるコア機能を提供します。このライブラリをアプリケーションに含めない場合、いくつかの機能について独自の実装が必要かどうかを慎重に確認する必要があります。</p><h4 id="assert-v-message" tabindex="-1"><strong>assert (v [, message])</strong> <a class="header-anchor" href="#assert-v-message" aria-label="Permalink to &quot;**assert (v [, message])**&quot;">​</a></h4><p>引数<code>v</code>が<code>false</code>（つまり、<code>nil</code>または<code>false</code>）の場合にエラーを発生させます。そうでない場合は、すべての引数をそのまま返します。<code>message</code>はエラーメッセージとして使用され、不在の場合はデフォルトで「assertion failed!」が表示されます。</p><h4 id="collectgarbage-opt-arg" tabindex="-1"><strong>collectgarbage ([opt [, arg]])</strong> <a class="header-anchor" href="#collectgarbage-opt-arg" aria-label="Permalink to &quot;**collectgarbage ([opt [, arg]])**&quot;">​</a></h4><p>この関数はガベージコレクタへの汎用インターフェースです。最初の引数<code>opt</code>に応じて異なる動作を行います。</p><ul><li><p><code>&quot;collect&quot;</code>：完全なガベージコレクションサイクルを実行します（デフォルトのオプション）。</p></li><li><p><code>&quot;stop&quot;</code>：ガベージコレクタの自動実行を停止します。再開されるまで、明示的に呼び出された場合のみ実行されます。</p></li><li><p><code>&quot;restart&quot;</code>：ガベージコレクタの自動実行を再開します。</p></li><li><p><code>&quot;count&quot;</code>：Luaが使用中のメモリ量（Kバイト単位）と、メモリ量のバイト単位の1024での剰余を2つの値で返します。最初の値には小数部分が含まれるため、次の等式が常に成り立ちます。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">k, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> collectgarbage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> math.floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(k)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span></code></pre></div><p>（2番目の結果は、Luaが非浮動小数点型でコンパイルされた場合に有用です。）</p></li><li><p><code>&quot;step&quot;</code>：ガベージコレクションのステップを実行します。ステップ「サイズ」は<code>arg</code>によって制御されますが、値が大きいほど多くのステップを実行します。適切なステップサイズを調整するには<code>arg</code>の値を実験的に調整する必要があります。この関数は、コレクションサイクルが終了した場合に<code>true</code>を返します。</p></li><li><p><code>&quot;setpause&quot;</code>：コレクタの一時停止値として新しい値<code>arg</code>を設定します（§2.5参照）。前の一時停止値を返します。</p></li><li><p><code>&quot;setstepmul&quot;</code>：コレクタのステップ倍率として新しい値<code>arg</code>を設定します（§2.5参照）。前のステップ倍率を返します。</p></li><li><p><code>&quot;isrunning&quot;</code>：コレクタが実行中かどうかを示すブール値を返します（停止していない場合は<code>true</code>）。</p></li><li><p><code>&quot;generational&quot;</code>：コレクタを世代別モードに変更します（これは実験的な機能です。§2.5参照）。</p></li><li><p><code>&quot;incremental&quot;</code>：コレクタをインクリメンタルモードに変更します（デフォルトモード）。</p></li></ul><h4 id="dofile-filename" tabindex="-1"><strong>dofile ([filename])</strong> <a class="header-anchor" href="#dofile-filename" aria-label="Permalink to &quot;**dofile ([filename])**&quot;">​</a></h4><p>指定されたファイルを開き、その内容をLuaチャンクとして実行します。引数なしで呼び出された場合、標準入力（stdin）の内容を実行します。チャンクが返すすべての値を返します。エラーが発生した場合は、そのエラーを呼び出し元に伝搬させます（つまり、dofileは保護モードで実行されません）。</p><h4 id="error-message-level" tabindex="-1"><strong>error (message [, level])</strong> <a class="header-anchor" href="#error-message-level" aria-label="Permalink to &quot;**error (message [, level])**&quot;">​</a></h4><p>最後に呼び出された保護された関数を終了し、<code>message</code>をエラーメッセージとして返します。<code>error</code>関数は決して戻り値を返しません。</p><p>通常、<code>message</code>が文字列の場合、エラーの位置情報がメッセージの先頭に追加されます。<code>level</code>引数はエラー位置の特定方法を指定します。デフォルトの<code>1</code>では<code>error</code>関数が呼ばれた位置がエラー位置となり、<code>2</code>では<code>error</code>を呼び出した関数の位置がエラー位置となります。<code>level</code>に<code>0</code>を指定すると、エラーメッセージに位置情報が追加されません。</p><h4 id="g" tabindex="-1"><strong>_G</strong> <a class="header-anchor" href="#g" aria-label="Permalink to &quot;**_G**&quot;">​</a></h4><p>グローバル変数（関数ではありません）で、グローバル環境を保持します（§2.2参照）。Lua自体はこの変数を使用せず、その値を変更しても環境には影響しませんし、その逆もありません。</p><h4 id="getmetatable-object" tabindex="-1"><strong>getmetatable (object)</strong> <a class="header-anchor" href="#getmetatable-object" aria-label="Permalink to &quot;**getmetatable (object)**&quot;">​</a></h4><p><code>object</code>にメタテーブルがなければ<code>nil</code>を返します。それ以外の場合、<code>object</code>のメタテーブルに<code>&quot;__metatable&quot;</code>フィールドがある場合はその値を返し、ない場合は指定されたオブジェクトのメタテーブルを返します。</p><h4 id="ipairs-t" tabindex="-1"><strong>ipairs (t)</strong> <a class="header-anchor" href="#ipairs-t" aria-label="Permalink to &quot;**ipairs (t)**&quot;">​</a></h4><p><code>t</code>が<code>__ipairs</code>というメタメソッドを持っている場合、そのメタメソッドを<code>t</code>を引数にして呼び出し、その結果の最初の3つの値を返します。</p><p>それ以外の場合は、以下の3つの値を返します：反復関数、テーブル<code>t</code>、および<code>0</code>。これにより、次の構文で</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ipairs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>テーブルのキー<code>1, t[1]</code>、<code>2, t[2]</code>、... など、最初に見つからなかった整数キーまで反復処理が行われます。</p><h4 id="load-ld-source-mode-env" tabindex="-1"><strong>load (ld [, source [, mode [, env]]])</strong> <a class="header-anchor" href="#load-ld-source-mode-env" aria-label="Permalink to &quot;**load (ld [, source [, mode [, env]]])**&quot;">​</a></h4><p>チャンクを読み込みます。</p><p><code>ld</code>が文字列の場合、チャンクはその文字列です。<code>ld</code>が関数の場合、<code>load</code>はこの関数を繰り返し呼び出してチャンクを取得します。各呼び出しでは、前回の結果と連結できる文字列を返す必要があります。空の文字列、<code>nil</code>、または何も返さない場合はチャンクの終了を意味します。</p><p>構文エラーがなければ、コンパイル済みのチャンクを関数として返します。エラーがある場合は<code>nil</code>とエラーメッセージを返します。</p><p>結果の関数にアップバリューがある場合、最初のアップバリューは<code>env</code>の値に設定されます。<code>env</code>が指定されていない場合はグローバル環境の値が使用されます。（メインチャンクをロードする場合、結果の関数は常に1つのアップバリュー、つまり<code>_ENV</code>変数（§2.2参照）を持ちます。<code>string.dump</code>で関数から生成されたバイナリチャンクをロードする場合、任意の数のアップバリューを持つことができます。）</p><p><code>source</code>はエラーメッセージやデバッグ情報でチャンクのソースとして使用されます（§4.9参照）。省略時には<code>ld</code>が文字列の場合は<code>ld</code>が使用され、それ以外の場合は&quot;=(load)&quot;が使用されます。</p><p>文字列<code>mode</code>はチャンクがテキストかバイナリ（プリコンパイルされたチャンク）かを制御します。&quot;b&quot;（バイナリのみ）、&quot;t&quot;（テキストのみ）、&quot;bt&quot;（両方）を指定できます。デフォルトは&quot;bt&quot;です。</p><h4 id="loadfile-filename-mode-env" tabindex="-1"><strong>loadfile ([filename [, mode [, env]]])</strong> <a class="header-anchor" href="#loadfile-filename-mode-env" aria-label="Permalink to &quot;**loadfile ([filename [, mode [, env]]])**&quot;">​</a></h4><p><code>load</code>と似ていますが、チャンクをファイル<code>filename</code>またはファイル名が指定されていない場合は標準入力から取得します。</p><h4 id="next-table-index" tabindex="-1"><strong>next (table [, index])</strong> <a class="header-anchor" href="#next-table-index" aria-label="Permalink to &quot;**next (table [, index])**&quot;">​</a></h4><p>テーブルのすべてのフィールドを順に処理するための関数です。最初の引数はテーブルで、2番目の引数はそのテーブルのインデックスです。<code>next</code>はテーブルの次のインデックスとその関連する値を返します。2番目の引数として<code>nil</code>を指定すると、<code>next</code>は最初のインデックスとその値を返します。最後のインデックス、または空のテーブルに<code>nil</code>を指定すると、<code>next</code>は<code>nil</code>を返します。2番目の引数が省略されると、<code>nil</code>として扱われます。特に、<code>next(t)</code>を使用してテーブルが空かどうかを確認できます。</p><p>インデックスの列挙順は指定されていません（数値インデックスで処理する場合は、数値用の<code>for</code>ループを使用してください）。</p><p>テーブルの処理中に存在しないフィールドに値を割り当てると、<code>next</code>の動作は未定義になります。ただし、既存のフィールドの変更は可能です。特に、既存のフィールドをクリアすることができます。</p><h4 id="pairs-t" tabindex="-1"><strong>pairs (t)</strong> <a class="header-anchor" href="#pairs-t" aria-label="Permalink to &quot;**pairs (t)**&quot;">​</a></h4><p><code>t</code>が<code>__pairs</code>というメタメソッドを持っている場合、そのメタメソッドを<code>t</code>を引数にして呼び出し、その結果の最初の3つの値を返します。</p><p>それ以外の場合は、<code>next</code>関数、テーブル<code>t</code>、および<code>nil</code>の3つの値を返し、以下の構文で</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k, v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pairs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>テーブル<code>t</code>のすべてのキーと値のペアを反復処理できます。</p><p>テーブルの処理中にテーブルを変更する際の注意点については<code>next</code>関数を参照してください。</p><h4 id="pcall-f-arg1-···" tabindex="-1"><strong>pcall (f [, arg1, ···])</strong> <a class="header-anchor" href="#pcall-f-arg1-···" aria-label="Permalink to &quot;**pcall (f [, arg1, ···])**&quot;">​</a></h4><p>指定された引数で関数<code>f</code>を保護モードで呼び出します。これにより、<code>f</code>内で発生するエラーは伝播されず、<code>pcall</code>がエラーをキャッチして状態コードを返します。最初の戻り値は状態コード（ブール値）で、エラーがなく正常に終了した場合は<code>true</code>です。この場合、<code>pcall</code>はこの最初の戻り値に続けて関数呼び出しの結果をすべて返します。エラーが発生した場合、<code>pcall</code>は<code>false</code>とエラーメッセージを返します。</p><h4 id="print-···" tabindex="-1"><strong>print (···)</strong> <a class="header-anchor" href="#print-···" aria-label="Permalink to &quot;**print (···)**&quot;">​</a></h4><p>任意の数の引数を受け取り、それらの値を標準出力（stdout）に表示します。各引数は<code>tostring</code>関数を使用して文字列に変換されます。<code>print</code>は、フォーマットされた出力を意図したものではなく、デバッグなどで値を素早く表示するために使用されます。出力を完全に制御するには、<code>string.format</code>と<code>io.write</code>を使用してください。</p><h4 id="rawequal-v1-v2" tabindex="-1"><strong>rawequal (v1, v2)</strong> <a class="header-anchor" href="#rawequal-v1-v2" aria-label="Permalink to &quot;**rawequal (v1, v2)**&quot;">​</a></h4><p>メタメソッドを呼び出さずに、<code>v1</code>と<code>v2</code>が等しいかを確認します。ブール値を返します。</p><h4 id="rawget-table-index" tabindex="-1"><strong>rawget (table, index)</strong> <a class="header-anchor" href="#rawget-table-index" aria-label="Permalink to &quot;**rawget (table, index)**&quot;">​</a></h4><p>メタメソッドを呼び出さずに、<code>table[index]</code>の実際の値を取得します。<code>table</code>はテーブルでなければならず、<code>index</code>は任意の値です。</p><h4 id="rawlen-v" tabindex="-1"><strong>rawlen (v)</strong> <a class="header-anchor" href="#rawlen-v" aria-label="Permalink to &quot;**rawlen (v)**&quot;">​</a></h4><p>オブジェクト<code>v</code>の長さを返します。<code>v</code>はテーブルまたは文字列でなければなりません。メタメソッドを呼び出さずに、整数値として返します。</p><h4 id="rawset-table-index-value" tabindex="-1"><strong>rawset (table, index, value)</strong> <a class="header-anchor" href="#rawset-table-index-value" aria-label="Permalink to &quot;**rawset (table, index, value)**&quot;">​</a></h4><p>メタメソッドを呼び出さずに、<code>table[index]</code>に<code>value</code>を設定します。<code>table</code>はテーブル、<code>index</code>は<code>nil</code>や<code>NaN</code>以外の任意の値、<code>value</code>は任意のLuaの値です。この関数は<code>table</code>を返します。</p><p>select (index, ···)</p><p>If index is a number, returns all arguments after argument number index; a negative number indexes from the end (-1 is the last argument). Otherwise, index must be the string &quot;#&quot;, and select returns the total number of extra arguments it received.</p><p>setmetatable (table, metatable)</p><p>Sets the metatable for the given table. (You cannot change the metatable of other types from Lua, only from C.) If metatable is nil, removes the metatable of the given table. If the original metatable has a &quot;__metatable&quot; field, raises an error.</p><p>This function returns table.</p><p>tonumber (e [, base])</p><p>When called with no base, tonumber tries to convert its argument to a number. If the argument is already a number or a string convertible to a number (see §3.4.2), then tonumber returns this number; otherwise, it returns nil.</p><p>When called with base, then e should be a string to be interpreted as an integer numeral in that base. The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter &#39;A&#39; (in either upper or lower case) represents 10, &#39;B&#39; represents 11, and so forth, with &#39;Z&#39; representing 35. If the string e is not a valid numeral in the given base, the function returns nil.</p><p>tostring (v)</p><p>Receives a value of any type and converts it to a string in a reasonable format. (For complete control of how numbers are converted, use string.format.) If the metatable of v has a &quot;__tostring&quot; field, then tostring calls the corresponding value with v as argument, and uses the result of the call as its result.</p><p>type (v)</p><p>Returns the type of its only argument, coded as a string. The possible results of this function are &quot;nil&quot; (a string, not the value nil), &quot;number&quot;, &quot;string&quot;, &quot;boolean&quot;, &quot;table&quot;, &quot;function&quot;, &quot;thread&quot;, and &quot;userdata&quot;. _VERSION</p><p>A global variable (not a function) that holds a string containing the current interpreter version. The current contents of this variable is &quot;Lua 5.2&quot;. xpcall (f, msgh [, arg1, ···])</p><p>This function is similar to pcall, except that it sets a new message handler msgh.</p><p>6.2 – Coroutine Manipulation</p><p>The operations related to coroutines comprise a sub-library of the basic library and come inside the table coroutine. See §2.6 for a general description of coroutines.</p><p>coroutine.create (f)</p><p>Creates a new coroutine, with body f. f must be a Lua function. Returns this new coroutine, an object with type &quot;thread&quot;.</p><p>coroutine.resume (co [, val1, ···])</p><p>Starts or continues the execution of coroutine co. The first time you resume a coroutine, it starts running its body. The values val1, ... are passed as the arguments to the body function. If the coroutine has yielded, resume restarts it; the values val1, ... are passed as the results from the yield.</p><p>If the coroutine runs without any errors, resume returns true plus any values passed to yield (if the coroutine yields) or any values returned by the body function (if the coroutine terminates). If there is any error, resume returns false plus the error message.</p><p>coroutine.running ()</p><p>Returns the running coroutine plus a boolean, true when the running coroutine is the main one.</p><p>coroutine.status (co)</p><p>Returns the status of coroutine co, as a string: &quot;running&quot;, if the coroutine is running (that is, it called status); &quot;suspended&quot;, if the coroutine is suspended in a call to yield, or if it has not started running yet; &quot;normal&quot; if the coroutine is active but not running (that is, it has resumed another coroutine); and &quot;dead&quot; if the coroutine has finished its body function, or if it has stopped with an error.</p><p>coroutine.wrap (f)</p><p>Creates a new coroutine, with body f. f must be a Lua function. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to resume. Returns the same values returned by resume, except the first boolean. In case of error, propagates the error.</p><p>coroutine.yield (···)</p><p>Suspends the execution of the calling coroutine. Any arguments to yield are passed as extra results to resume.</p><p>6.3 – Modules</p><p>The package library provides basic facilities for loading modules in Lua. It exports one function directly in the global environment: require. Everything else is exported in a table package.</p><p>require (modname)</p><p>Loads the given module. The function starts by looking into the package.loaded table to determine whether modname is already loaded. If it is, then require returns the value stored at package.loaded[modname]. Otherwise, it tries to find a loader for the module.</p><p>To find a loader, require is guided by the package.searchers sequence. By changing this sequence, we can change how require looks for a module. The following explanation is based on the default configuration for package.searchers.</p><p>First require queries package.preload[modname]. If it has a value, this value (which should be a function) is the loader. Otherwise require searches for a Lua loader using the path stored in package.path. If that also fails, it searches for a C loader using the path stored in package.cpath. If that also fails, it tries an all-in-one loader (see package.searchers).</p><p>Once a loader is found, require calls the loader with two arguments: modname and an extra value dependent on how it got the loader. (If the loader came from a file, this extra value is the file name.) If the loader returns any non-nil value, require assigns the returned value to package.loaded[modname]. If the loader does not return a non-nil value and has not assigned any value to package.loaded[modname], then require assigns true to this entry. In any case, require returns the final value of package.loaded[modname].</p><p>If there is any error loading or running the module, or if it cannot find any loader for the module, then require raises an error.</p><p>package.config</p><p>A string describing some compile-time configurations for packages. This string is a sequence of lines:</p><p>The first line is the directory separator string. Default is &#39;&#39; for Windows and &#39;/&#39; for all other systems. The second line is the character that separates templates in a path. Default is &#39;;&#39;. The third line is the string that marks the substitution points in a template. Default is &#39;?&#39;. The fourth line is a string that, in a path in Windows, is replaced by the executable&#39;s directory. Default is &#39;!&#39;. The fifth line is a mark to ignore all text before it when building the luaopen_ function name. Default is &#39;-&#39;. package.cpath</p><p>The path used by require to search for a C loader.</p><p>Lua initializes the C path package.cpath in the same way it initializes the Lua path package.path, using the environment variable LUA_CPATH_5_2 or the environment variable LUA_CPATH or a default path defined in luaconf.h.</p><p>package.loaded</p><p>A table used by require to control which modules are already loaded. When you require a module modname and package.loaded[modname] is not false, require simply returns the value stored there.</p><p>This variable is only a reference to the real table; assignments to this variable do not change the table used by require.</p><p>package.loadlib (libname, funcname)</p><p>Dynamically links the host program with the C library libname.</p><p>If funcname is &quot;*&quot;, then it only links with the library, making the symbols exported by the library available to other dynamically linked libraries. Otherwise, it looks for a function funcname inside the library and returns this function as a C function. So, funcname must follow the lua_CFunction prototype (see lua_CFunction).</p><p>This is a low-level function. It completely bypasses the package and module system. Unlike require, it does not perform any path searching and does not automatically adds extensions. libname must be the complete file name of the C library, including if necessary a path and an extension. funcname must be the exact name exported by the C library (which may depend on the C compiler and linker used).</p><p>This function is not supported by Standard C. As such, it is only available on some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus other Unix systems that support the dlfcn standard).</p><p>package.path</p><p>The path used by require to search for a Lua loader.</p><p>At start-up, Lua initializes this variable with the value of the environment variable LUA_PATH_5_2 or the environment variable LUA_PATH or with a default path defined in luaconf.h, if those environment variables are not defined. Any &quot;;;&quot; in the value of the environment variable is replaced by the default path.</p><p>package.preload</p><p>A table to store loaders for specific modules (see require).</p><p>This variable is only a reference to the real table; assignments to this variable do not change the table used by require.</p><p>package.searchers</p><p>A table used by require to control how to load modules.</p><p>Each entry in this table is a searcher function. When looking for a module, require calls each of these searchers in ascending order, with the module name (the argument given to require) as its sole parameter. The function can return another function (the module loader) plus an extra value that will be passed to that loader, or a string explaining why it did not find that module (or nil if it has nothing to say).</p><p>Lua initializes this table with four searcher functions.</p><p>The first searcher simply looks for a loader in the package.preload table.</p><p>The second searcher looks for a loader as a Lua library, using the path stored at package.path. The search is done as described in function package.searchpath.</p><p>The third searcher looks for a loader as a C library, using the path given by the variable package.cpath. Again, the search is done as described in function package.searchpath. For instance, if the C path is the string</p><pre><code> &quot;./?.so;./?.dll;/usr/local/?/init.so&quot;
</code></pre><p>the searcher for module foo will try to open the files ./foo.so, ./foo.dll, and /usr/local/foo/init.so, in that order. Once it finds a C library, this searcher first uses a dynamic link facility to link the application with the library. Then it tries to find a C function inside the library to be used as the loader. The name of this C function is the string &quot;luaopen_&quot; concatenated with a copy of the module name where each dot is replaced by an underscore. Moreover, if the module name has a hyphen, its prefix up to (and including) the first hyphen is removed. For instance, if the module name is a.v1-b.c, the function name will be luaopen_b_c.</p><p>The fourth searcher tries an all-in-one loader. It searches the C path for a library for the root name of the given module. For instance, when requiring a.b.c, it will search for a C library for a. If found, it looks into it for an open function for the submodule; in our example, that would be luaopen_a_b_c. With this facility, a package can pack several C submodules into one single library, with each submodule keeping its original open function.</p><p>All searchers except the first one (preload) return as the extra value the file name where the module was found, as returned by package.searchpath. The first searcher returns no extra value.</p><p>package.searchpath (name, path [, sep [, rep]])</p><p>Searches for the given name in the given path.</p><p>A path is a string containing a sequence of templates separated by semicolons. For each template, the function replaces each interrogation mark (if any) in the template with a copy of name wherein all occurrences of sep (a dot, by default) were replaced by rep (the system&#39;s directory separator, by default), and then tries to open the resulting file name.</p><p>For instance, if the path is the string</p><pre><code> &quot;./?.lua;./?.lc;/usr/local/?/init.lua&quot;
</code></pre><p>the search for the name foo.a will try to open the files ./foo/a.lua, ./foo/a.lc, and /usr/local/foo/a/init.lua, in that order.</p><p>Returns the resulting name of the first file that it can open in read mode (after closing the file), or nil plus an error message if none succeeds. (This error message lists all file names it tried to open.)</p><p>6.4 – String Manipulation</p><p>This library provides generic functions for string manipulation, such as finding and extracting substrings, and pattern matching. When indexing a string in Lua, the first character is at position 1 (not at 0, as in C). Indices are allowed to be negative and are interpreted as indexing backwards, from the end of the string. Thus, the last character is at position -1, and so on.</p><p>The string library provides all its functions inside the table string. It also sets a metatable for strings where the __index field points to the string table. Therefore, you can use the string functions in object-oriented style. For instance, string.byte(s,i) can be written as s:byte(i).</p><p>The string library assumes one-byte character encodings.</p><p>string.byte (s [, i [, j]])</p><p>Returns the internal numerical codes of the characters s[i], s[i+1], ..., s[j]. The default value for i is 1; the default value for j is i. These indices are corrected following the same rules of function string.sub. Numerical codes are not necessarily portable across platforms.</p><p>string.char (···)</p><p>Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numerical code equal to its corresponding argument. Numerical codes are not necessarily portable across platforms.</p><p>string.dump (function)</p><p>Returns a string containing a binary representation of the given function, so that a later load on this string returns a copy of the function (but with new upvalues).</p><p>string.find (s, pattern [, init [, plain]])</p><p>Looks for the first match of pattern in the string s. If it finds a match, then find returns the indices of s where this occurrence starts and ends; otherwise, it returns nil. A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative. A value of true as a fourth, optional argument plain turns off the pattern matching facilities, so the function does a plain &quot;find substring&quot; operation, with no characters in pattern being considered magic. Note that if plain is given, then init must be given as well.</p><p>If the pattern has captures, then in a successful match the captured values are also returned, after the two indices.</p><p>string.format (formatstring, ···)</p><p>Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the ISO C function sprintf. The only differences are that the options/modifiers *, h, L, l, n, and p are not supported and that there is an extra option, q. The q option formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter. For instance, the call</p><pre><code> string.format(&#39;%q&#39;, &#39;a string with &quot;quotes&quot; and \\n new line&#39;)
</code></pre><p>may produce the string:</p><pre><code> &quot;a string with \\&quot;quotes\\&quot; and \\
  new line&quot;
</code></pre><p>Options A and a (when available), E, e, f, G, and g all expect a number as argument. Options c, d, i, o, u, X, and x also expect a number, but the range of that number may be limited by the underlying C implementation. For options o, u, X, and x, the number cannot be negative. Option q expects a string; option s expects a string without embedded zeros. If the argument to option s is not a string, it is converted to one following the same rules of tostring.</p><p>string.gmatch (s, pattern)</p><p>Returns an iterator function that, each time it is called, returns the next captures from pattern over the string s. If pattern specifies no captures, then the whole match is produced in each call. As an example, the following loop will iterate over all the words from string s, printing one per line:</p><pre><code> s = &quot;hello world from Lua&quot;
 for w in string.gmatch(s, &quot;%a+&quot;) do
   print(w)
 end
</code></pre><p>The next example collects all pairs key=value from the given string into a table:</p><pre><code> t = {}
 s = &quot;from=world, to=Lua&quot;
 for k, v in string.gmatch(s, &quot;(%w+)=(%w+)&quot;) do
   t[k] = v
 end
</code></pre><p>For this function, a caret &#39;^&#39; at the start of a pattern does not work as an anchor, as this would prevent the iteration.</p><p>string.gsub (s, pattern, repl [, n])</p><p>Returns a copy of s in which all (or the first n, if given) occurrences of the pattern have been replaced by a replacement string specified by repl, which can be a string, a table, or a function. gsub also returns, as its second value, the total number of matches that occurred. The name gsub comes from Global SUBstitution. If repl is a string, then its value is used for replacement. The character % works as an escape character: any sequence in repl of the form %d, with d between 1 and 9, stands for the value of the d-th captured substring. The sequence %0 stands for the whole match. The sequence %% stands for a single %.</p><p>If repl is a table, then the table is queried for every match, using the first capture as the key.</p><p>If repl is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order.</p><p>In any case, if the pattern specifies no captures, then it behaves as if the whole pattern was inside a capture.</p><p>If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is false or nil, then there is no replacement (that is, the original match is kept in the string).</p><p>Here are some examples:</p><pre><code> x = string.gsub(&quot;hello world&quot;, &quot;(%w+)&quot;, &quot;%1 %1&quot;)
 --&gt; x=&quot;hello hello world world&quot;
 
 x = string.gsub(&quot;hello world&quot;, &quot;%w+&quot;, &quot;%0 %0&quot;, 1)
 --&gt; x=&quot;hello hello world&quot;
 
 x = string.gsub(&quot;hello world from Lua&quot;, &quot;(%w+)%s*(%w+)&quot;, &quot;%2 %1&quot;)
 --&gt; x=&quot;world hello Lua from&quot;
 
 x = string.gsub(&quot;home = $HOME, user = $USER&quot;, &quot;%$(%w+)&quot;, os.getenv)
 --&gt; x=&quot;home = /home/roberto, user = roberto&quot;
 
 x = string.gsub(&quot;4+5 = $return 4+5$&quot;, &quot;%$(.-)%$&quot;, function (s)
       return load(s)()
     end)
 --&gt; x=&quot;4+5 = 9&quot;
 
 local t = {name=&quot;lua&quot;, version=&quot;5.2&quot;}
 x = string.gsub(&quot;$name-$version.tar.gz&quot;, &quot;%$(%w+)&quot;, t)
 --&gt; x=&quot;lua-5.2.tar.gz&quot;
</code></pre><p>string.len (s)</p><p>Receives a string and returns its length. The empty string &quot;&quot; has length 0. Embedded zeros are counted, so &quot;a\\000bc\\000&quot; has length 5. string.lower (s)</p><p>Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale. string.match (s, pattern [, init])</p><p>Looks for the first match of pattern in the string s. If it finds one, then match returns the captures from the pattern; otherwise it returns nil. If pattern specifies no captures, then the whole match is returned. A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative. string.rep (s, n [, sep])</p><p>Returns a string that is the concatenation of n copies of the string s separated by the string sep. The default value for sep is the empty string (that is, no separator). string.reverse (s)</p><p>Returns a string that is the string s reversed. string.sub (s, i [, j])</p><p>Returns the substring of s that starts at i and continues until j; i and j can be negative. If j is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call string.sub(s,1,j) returns a prefix of s with length j, and string.sub(s, -i) returns a suffix of s with length i. If, after the translation of negative indices, i is less than 1, it is corrected to 1. If j is greater than the string length, it is corrected to that length. If, after these corrections, i is greater than j, the function returns the empty string.</p><p>string.upper (s)</p><p>Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale. 6.4.1 – Patterns</p><p>Character Class:</p><p>A character class is used to represent a set of characters. The following combinations are allowed in describing a character class:</p><p>x: (where x is not one of the magic characters ^$()%.[]*+-?) represents the character x itself. .: (a dot) represents all characters. %a: represents all letters. %c: represents all control characters. %d: represents all digits. %g: represents all printable characters except space. %l: represents all lowercase letters. %p: represents all punctuation characters. %s: represents all space characters. %u: represents all uppercase letters. %w: represents all alphanumeric characters. %x: represents all hexadecimal digits. %x: (where x is any non-alphanumeric character) represents the character x. This is the standard way to escape the magic characters. Any punctuation character (even the non magic) can be preceded by a &#39;%&#39; when used to represent itself in a pattern. [set]: represents the class which is the union of all characters in set. A range of characters can be specified by separating the end characters of the range, in ascending order, with a &#39;-&#39;, All classes %x described above can also be used as components in set. All other characters in set represent themselves. For example, [%w_] (or [_%w]) represents all alphanumeric characters plus the underscore, [0-7] represents the octal digits, and [0-7%l%-] represents the octal digits plus the lowercase letters plus the &#39;-&#39; character. The interaction between ranges and classes is not defined. Therefore, patterns like [%a-z] or [a-%%] have no meaning.</p><p>[^set]: represents the complement of set, where set is interpreted as above. For all classes represented by single letters (%a, %c, etc.), the corresponding uppercase letter represents the complement of the class. For instance, %S represents all non-space characters.</p><p>The definitions of letter, space, and other character groups depend on the current locale. In particular, the class [a-z] may not be equivalent to %l.</p><p>Pattern Item:</p><p>A pattern item can be</p><p>a single character class, which matches any single character in the class; a single character class followed by &#39;<em>&#39;, which matches 0 or more repetitions of characters in the class. These repetition items will always match the longest possible sequence; a single character class followed by &#39;+&#39;, which matches 1 or more repetitions of characters in the class. These repetition items will always match the longest possible sequence; a single character class followed by &#39;-&#39;, which also matches 0 or more repetitions of characters in the class. Unlike &#39;</em>&#39;, these repetition items will always match the shortest possible sequence; a single character class followed by &#39;?&#39;, which matches 0 or 1 occurrence of a character in the class; %n, for n between 1 and 9; such item matches a substring equal to the n-th captured string (see below); %bxy, where x and y are two distinct characters; such item matches strings that start with x, end with y, and where the x and y are balanced. This means that, if one reads the string from left to right, counting +1 for an x and -1 for a y, the ending y is the first y where the count reaches 0. For instance, the item %b() matches expressions with balanced parentheses. %f[set], a frontier pattern; such item matches an empty string at any position such that the next character belongs to set and the previous character does not belong to set. The set set is interpreted as previously described. The beginning and the end of the subject are handled as if they were the character &#39;\\0&#39;. Pattern:</p><p>A pattern is a sequence of pattern items. A caret &#39;^&#39; at the beginning of a pattern anchors the match at the beginning of the subject string. A &#39;$&#39; at the end of a pattern anchors the match at the end of the subject string. At other positions, &#39;^&#39; and &#39;$&#39; have no special meaning and represent themselves.</p><p>Captures:</p><p>A pattern can contain sub-patterns enclosed in parentheses; they describe captures. When a match succeeds, the substrings of the subject string that match captures are stored (captured) for future use. Captures are numbered according to their left parentheses. For instance, in the pattern &quot;(a*(.)%w(%s*))&quot;, the part of the string matching &quot;a*(.)%w(%s*)&quot; is stored as the first capture (and therefore has number 1); the character matching &quot;.&quot; is captured with number 2, and the part matching &quot;%s*&quot; has number 3.</p><p>As a special case, the empty capture () captures the current string position (a number). For instance, if we apply the pattern &quot;()aa()&quot; on the string &quot;flaaap&quot;, there will be two captures: 3 and 5.</p><p>6.5 – Table Manipulation</p><p>This library provides generic functions for table manipulation. It provides all its functions inside the table table.</p><p>Remember that, whenever an operation needs the length of a table, the table should be a proper sequence or have a __len metamethod (see §3.4.6). All functions ignore non-numeric keys in tables given as arguments.</p><p>For performance reasons, all table accesses (get/set) performed by these functions are raw.</p><p>table.concat (list [, sep [, i [, j]]])</p><p>Given a list where all elements are strings or numbers, returns the string list[i]..sep..list[i+1] ··· sep..list[j]. The default value for sep is the empty string, the default for i is 1, and the default for j is #list. If i is greater than j, returns the empty string.</p><p>table.insert (list, [pos,] value)</p><p>Inserts element value at position pos in list, shifting up the elements list[pos], list[pos+1], ···, list[#list]. The default value for pos is #list+1, so that a call table.insert(t,x) inserts x at the end of list t.</p><p>table.pack (···)</p><p>Returns a new table with all parameters stored into keys 1, 2, etc. and with a field &quot;n&quot; with the total number of parameters. Note that the resulting table may not be a sequence.</p><p>table.remove (list [, pos])</p><p>Removes from list the element at position pos, returning the value of the removed element. When pos is an integer between 1 and #list, it shifts down the elements list[pos+1], list[pos+2], ···, list[#list] and erases element list[#list]; The index pos can also be 0 when #list is 0, or #list + 1; in those cases, the function erases the element list[pos].</p><p>The default value for pos is #list, so that a call table.remove(t) removes the last element of list t.</p><p>table.sort (list [, comp])</p><p>Sorts list elements in a given order, in-place, from list[1] to list[#list]. If comp is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that not comp(list[i+1],list[i]) will be true after the sort). If comp is not given, then the standard Lua operator &lt; is used instead.</p><p>The sort algorithm is not stable; that is, elements considered equal by the given order may have their relative positions changed by the sort.</p><p>table.unpack (list [, i [, j]])</p><p>Returns the elements from the given table. This function is equivalent to</p><pre><code> return list[i], list[i+1], ···, list[j]
</code></pre><p>By default, i is 1 and j is #list.</p><p>6.6 – Mathematical Functions</p><p>This library is an interface to the standard C math library. It provides all its functions inside the table math.</p><p>math.abs (x)</p><p>Returns the absolute value of x.</p><p>math.acos (x)</p><p>Returns the arc cosine of x (in radians).</p><p>math.asin (x)</p><p>Returns the arc sine of x (in radians).</p><p>math.atan (x)</p><p>Returns the arc tangent of x (in radians).</p><p>math.atan2 (y, x)</p><p>Returns the arc tangent of y/x (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of x being zero.)</p><p>math.ceil (x)</p><p>Returns the smallest integer larger than or equal to x.</p><p>math.cos (x)</p><p>Returns the cosine of x (assumed to be in radians).</p><p>math.cosh (x)</p><p>Returns the hyperbolic cosine of x.</p><p>math.deg (x)</p><p>Returns the angle x (given in radians) in degrees.</p><p>math.exp (x)</p><p>Returns the value ex.</p><p>math.floor (x)</p><p>Returns the largest integer smaller than or equal to x.</p><p>math.fmod (x, y)</p><p>Returns the remainder of the division of x by y that rounds the quotient towards zero.</p><p>math.frexp (x)</p><p>Returns m and e such that x = m2e, e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero).</p><p>math.huge</p><p>The value HUGE_VAL, a value larger than or equal to any other numerical value.</p><p>math.ldexp (m, e)</p><p>Returns m2e (e should be an integer).</p><p>math.log (x [, base])</p><p>Returns the logarithm of x in the given base. The default for base is e (so that the function returns the natural logarithm of x).</p><p>math.max (x, ···)</p><p>Returns the maximum value among its arguments.</p><p>math.min (x, ···)</p><p>Returns the minimum value among its arguments.</p><p>math.modf (x)</p><p>Returns two numbers, the integral part of x and the fractional part of x.</p><p>math.pi</p><p>The value of π.</p><p>math.pow (x, y)</p><p>Returns xy. (You can also use the expression x^y to compute this value.)</p><p>math.rad (x)</p><p>Returns the angle x (given in degrees) in radians.</p><p>math.random ([m [, n]])</p><p>This function is an interface to the simple pseudo-random generator function rand provided by Standard C. (No guarantees can be given for its statistical properties.)</p><p>When called without arguments, returns a uniform pseudo-random real number in the range [0,1). When called with an integer number m, math.random returns a uniform pseudo-random integer in the range [1, m]. When called with two integer numbers m and n, math.random returns a uniform pseudo-random integer in the range [m, n].</p><p>math.randomseed (x)</p><p>Sets x as the &quot;seed&quot; for the pseudo-random generator: equal seeds produce equal sequences of numbers.</p><p>math.sin (x)</p><p>Returns the sine of x (assumed to be in radians).</p><p>math.sinh (x)</p><p>Returns the hyperbolic sine of x.</p><p>math.sqrt (x)</p><p>Returns the square root of x. (You can also use the expression x^0.5 to compute this value.)</p><p>math.tan (x)</p><p>Returns the tangent of x (assumed to be in radians).</p><p>math.tanh (x)</p><p>Returns the hyperbolic tangent of x.</p><p>6.7 – Bitwise Operations</p><p>This library provides bitwise operations. It provides all its functions inside the table bit32.</p><p>Unless otherwise stated, all functions accept numeric arguments in the range (-251,+251); each argument is normalized to the remainder of its division by 232 and truncated to an integer (in some unspecified way), so that its final value falls in the range [0,232 - 1]. Similarly, all results are in the range [0,232 - 1]. Note that bit32.bnot(0) is 0xFFFFFFFF, which is different from -1.</p><p>bit32.arshift (x, disp)</p><p>Returns the number x shifted disp bits to the right. The number disp may be any representable integer. Negative displacements shift to the left.</p><p>This shift operation is what is called arithmetic shift. Vacant bits on the left are filled with copies of the higher bit of x; vacant bits on the right are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero or 0xFFFFFFFF (all original bits are shifted out).</p><p>bit32.band (···)</p><p>Returns the bitwise and of its operands.</p><p>bit32.bnot (x)</p><p>Returns the bitwise negation of x. For any integer x, the following identity holds:</p><pre><code> assert(bit32.bnot(x) == (-1 - x) % 2^32)
</code></pre><p>bit32.bor (···)</p><p>Returns the bitwise or of its operands.</p><p>bit32.btest (···)</p><p>Returns a boolean signaling whether the bitwise and of its operands is different from zero.</p><p>bit32.bxor (···)</p><p>Returns the bitwise exclusive or of its operands.</p><p>bit32.extract (n, field [, width])</p><p>Returns the unsigned number formed by the bits field to field + width - 1 from n. Bits are numbered from 0 (least significant) to 31 (most significant). All accessed bits must be in the range [0, 31].</p><p>The default for width is 1.</p><p>bit32.replace (n, v, field [, width])</p><p>Returns a copy of n with the bits field to field + width - 1 replaced by the value v. See bit32.extract for details about field and width.</p><p>bit32.lrotate (x, disp)</p><p>Returns the number x rotated disp bits to the left. The number disp may be any representable integer.</p><p>For any valid displacement, the following identity holds:</p><pre><code> assert(bit32.lrotate(x, disp) == bit32.lrotate(x, disp % 32))
</code></pre><p>In particular, negative displacements rotate to the right.</p><p>bit32.lshift (x, disp)</p><p>Returns the number x shifted disp bits to the left. The number disp may be any representable integer. Negative displacements shift to the right. In any direction, vacant bits are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero (all bits are shifted out).</p><p>For positive displacements, the following equality holds:</p><pre><code> assert(bit32.lshift(b, disp) == (b * 2^disp) % 2^32)
</code></pre><p>bit32.rrotate (x, disp)</p><p>Returns the number x rotated disp bits to the right. The number disp may be any representable integer.</p><p>For any valid displacement, the following identity holds:</p><pre><code> assert(bit32.rrotate(x, disp) == bit32.rrotate(x, disp % 32))
</code></pre><p>In particular, negative displacements rotate to the left.</p><p>bit32.rshift (x, disp)</p><p>Returns the number x shifted disp bits to the right. The number disp may be any representable integer. Negative displacements shift to the left. In any direction, vacant bits are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero (all bits are shifted out).</p><p>For positive displacements, the following equality holds:</p><pre><code> assert(bit32.rshift(b, disp) == math.floor(b % 2^32 / 2^disp))
</code></pre><p>This shift operation is what is called logical shift.</p><p>6.8 – Input and Output Facilities</p><p>The I/O library provides two different styles for file manipulation. The first one uses implicit file descriptors; that is, there are operations to set a default input file and a default output file, and all input/output operations are over these default files. The second style uses explicit file descriptors.</p><p>When using implicit file descriptors, all operations are supplied by table io. When using explicit file descriptors, the operation io.open returns a file descriptor and then all operations are supplied as methods of the file descriptor.</p><p>The table io also provides three predefined file descriptors with their usual meanings from C: io.stdin, io.stdout, and io.stderr. The I/O library never closes these files.</p><p>Unless otherwise stated, all I/O functions return nil on failure (plus an error message as a second result and a system-dependent error code as a third result) and some value different from nil on success. On non-Posix systems, the computation of the error message and error code in case of errors may be not thread safe, because they rely on the global C variable errno.</p><p>io.close ([file])</p><p>Equivalent to file:close(). Without a file, closes the default output file.</p><p>io.flush ()</p><p>Equivalent to io.output():flush().</p><p>io.input ([file])</p><p>When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without parameters, it returns the current default input file.</p><p>In case of errors this function raises the error, instead of returning an error code.</p><p>io.lines ([filename ···])</p><p>Opens the given file name in read mode and returns an iterator function that works like file:lines(···) over the opened file. When the iterator function detects the end of file, it returns nil (to finish the loop) and automatically closes the file.</p><p>The call io.lines() (with no file name) is equivalent to io.input():lines(); that is, it iterates over the lines of the default input file. In this case it does not close the file when the loop ends.</p><p>In case of errors this function raises the error, instead of returning an error code.</p><p>io.open (filename [, mode])</p><p>This function opens a file, in the mode specified in the string mode. It returns a new file handle, or, in case of errors, nil plus an error message.</p><p>The mode string can be any of the following:</p><p>&quot;r&quot;: read mode (the default); &quot;w&quot;: write mode; &quot;a&quot;: append mode; &quot;r+&quot;: update mode, all previous data is preserved; &quot;w+&quot;: update mode, all previous data is erased; &quot;a+&quot;: append update mode, previous data is preserved, writing is only allowed at the end of file. The mode string can also have a &#39;b&#39; at the end, which is needed in some systems to open the file in binary mode.</p><p>io.output ([file])</p><p>Similar to io.input, but operates over the default output file.</p><p>io.popen (prog [, mode])</p><p>This function is system dependent and is not available on all platforms.</p><p>Starts program prog in a separated process and returns a file handle that you can use to read data from this program (if mode is &quot;r&quot;, the default) or to write data to this program (if mode is &quot;w&quot;).</p><p>io.read (···)</p><p>Equivalent to io.input():read(···).</p><p>io.tmpfile ()</p><p>Returns a handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.</p><p>io.type (obj)</p><p>Checks whether obj is a valid file handle. Returns the string &quot;file&quot; if obj is an open file handle, &quot;closed file&quot; if obj is a closed file handle, or nil if obj is not a file handle.</p><p>io.write (···)</p><p>Equivalent to io.output():write(···).</p><p>file:close ()</p><p>Closes file. Note that files are automatically closed when their handles are garbage collected, but that takes an unpredictable amount of time to happen.</p><p>When closing a file handle created with io.popen, file:close returns the same values returned by os.execute.</p><p>file:flush ()</p><p>Saves any written data to file.</p><p>file:lines (···)</p><p>Returns an iterator function that, each time it is called, reads the file according to the given formats. When no format is given, uses &quot;*l&quot; as a default. As an example, the construction</p><pre><code> for c in file:lines(1) do body end
</code></pre><p>will iterate over all characters of the file, starting at the current position. Unlike io.lines, this function does not close the file when the loop ends.</p><p>In case of errors this function raises the error, instead of returning an error code.</p><p>file:read (···)</p><p>Reads the file file, according to the given formats, which specify what to read. For each format, the function returns a string (or a number) with the characters read, or nil if it cannot read data with the specified format. When called without formats, it uses a default format that reads the next line (see below).</p><p>The available formats are</p><p>&quot;*n&quot;: reads a number; this is the only format that returns a number instead of a string. &quot;*a&quot;: reads the whole file, starting at the current position. On end of file, it returns the empty string. &quot;*l&quot;: reads the next line skipping the end of line, returning nil on end of file. This is the default format. &quot;*L&quot;: reads the next line keeping the end of line (if present), returning nil on end of file. number: reads a string with up to this number of bytes, returning nil on end of file. If number is zero, it reads nothing and returns an empty string, or nil on end of file. file:seek ([whence [, offset]])</p><p>Sets and gets the file position, measured from the beginning of the file, to the position given by offset plus a base specified by the string whence, as follows:</p><p>&quot;set&quot;: base is position 0 (beginning of the file); &quot;cur&quot;: base is current position; &quot;end&quot;: base is end of file; In case of success, seek returns the final file position, measured in bytes from the beginning of the file. If seek fails, it returns nil, plus a string describing the error.</p><p>The default value for whence is &quot;cur&quot;, and for offset is 0. Therefore, the call file:seek() returns the current file position, without changing it; the call file:seek(&quot;set&quot;) sets the position to the beginning of the file (and returns 0); and the call file:seek(&quot;end&quot;) sets the position to the end of the file, and returns its size.</p><p>file:setvbuf (mode [, size])</p><p>Sets the buffering mode for an output file. There are three available modes:</p><p>&quot;no&quot;: no buffering; the result of any output operation appears immediately. &quot;full&quot;: full buffering; output operation is performed only when the buffer is full or when you explicitly flush the file (see io.flush). &quot;line&quot;: line buffering; output is buffered until a newline is output or there is any input from some special files (such as a terminal device). For the last two cases, size specifies the size of the buffer, in bytes. The default is an appropriate size.</p><p>file:write (···)</p><p>Writes the value of each of its arguments to file. The arguments must be strings or numbers.</p><p>In case of success, this function returns file. Otherwise it returns nil plus a string describing the error.</p><p>6.9 – Operating System Facilities</p><p>This library is implemented through table os.</p><p>os.clock ()</p><p>Returns an approximation of the amount in seconds of CPU time used by the program.</p><p>os.date ([format [, time]])</p><p>Returns a string or a table containing date and time, formatted according to the given string format.</p><p>If the time argument is present, this is the time to be formatted (see the os.time function for a description of this value). Otherwise, date formats the current time.</p><p>If format starts with &#39;!&#39;, then the date is formatted in Coordinated Universal Time. After this optional character, if format is the string &quot;*t&quot;, then date returns a table with the following fields: year (four digits), month (1–12), day (1–31), hour (0–23), min (0–59), sec (0–61), wday (weekday, Sunday is 1), yday (day of the year), and isdst (daylight saving flag, a boolean). This last field may be absent if the information is not available.</p><p>If format is not &quot;*t&quot;, then date returns the date as a string, formatted according to the same rules as the ISO C function strftime.</p><p>When called without arguments, date returns a reasonable date and time representation that depends on the host system and on the current locale (that is, os.date() is equivalent to os.date(&quot;%c&quot;)).</p><p>On non-Posix systems, this function may be not thread safe because of its reliance on C function gmtime and C function localtime.</p><p>os.difftime (t2, t1)</p><p>Returns the number of seconds from time t1 to time t2. In POSIX, Windows, and some other systems, this value is exactly t2-t1.</p><p>os.execute ([command])</p><p>This function is equivalent to the ISO C function system. It passes command to be executed by an operating system shell. Its first result is true if the command terminated successfully, or nil otherwise. After this first result the function returns a string and a number, as follows:</p><p>&quot;exit&quot;: the command terminated normally; the following number is the exit status of the command. &quot;signal&quot;: the command was terminated by a signal; the following number is the signal that terminated the command. When called without a command, os.execute returns a boolean that is true if a shell is available.</p><p>os.exit ([code [, close])</p><p>Calls the ISO C function exit to terminate the host program. If code is true, the returned status is EXIT_SUCCESS; if code is false, the returned status is EXIT_FAILURE; if code is a number, the returned status is this number. The default value for code is true.</p><p>If the optional second argument close is true, closes the Lua state before exiting.</p><p>os.getenv (varname)</p><p>Returns the value of the process environment variable varname, or nil if the variable is not defined.</p><p>os.remove (filename)</p><p>Deletes the file (or empty directory, on POSIX systems) with the given name. If this function fails, it returns nil, plus a string describing the error and the error code.</p><p>os.rename (oldname, newname)</p><p>Renames file or directory named oldname to newname. If this function fails, it returns nil, plus a string describing the error and the error code.</p><p>os.setlocale (locale [, category])</p><p>Sets the current locale of the program. locale is a system-dependent string specifying a locale; category is an optional string describing which category to change: &quot;all&quot;, &quot;collate&quot;, &quot;ctype&quot;, &quot;monetary&quot;, &quot;numeric&quot;, or &quot;time&quot;; the default category is &quot;all&quot;. The function returns the name of the new locale, or nil if the request cannot be honored.</p><p>If locale is the empty string, the current locale is set to an implementation-defined native locale. If locale is the string &quot;C&quot;, the current locale is set to the standard C locale.</p><p>When called with nil as the first argument, this function only returns the name of the current locale for the given category.</p><p>This function may be not thread safe because of its reliance on C function setlocale.</p><p>os.time ([table])</p><p>Returns the current time when called without arguments, or a time representing the date and time specified by the given table. This table must have fields year, month, and day, and may have fields hour (default is 12), min (default is 0), sec (default is 0), and isdst (default is nil). For a description of these fields, see the os.date function.</p><p>The returned value is a number, whose meaning depends on your system. In POSIX, Windows, and some other systems, this number counts the number of seconds since some given start time (the &quot;epoch&quot;). In other systems, the meaning is not specified, and the number returned by time can be used only as an argument to os.date and os.difftime.</p><p>os.tmpname ()</p><p>Returns a string with a file name that can be used for a temporary file. The file must be explicitly opened before its use and explicitly removed when no longer needed.</p><p>On POSIX systems, this function also creates a file with that name, to avoid security risks. (Someone else might create the file with wrong permissions in the time between getting the name and creating the file.) You still have to open the file to use it and to remove it (even if you do not use it).</p><p>When possible, you may prefer to use io.tmpfile, which automatically removes the file when the program ends.</p><p>6.10 – The Debug Library</p><p>This library provides the functionality of the debug interface (§4.9) to Lua programs. You should exert care when using this library. Several of its functions violate basic assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside; that userdata metatables cannot be changed by Lua code; that Lua programs do not crash) and therefore can compromise otherwise secure code. Moreover, some functions in this library may be slow.</p><p>All functions in this library are provided inside the debug table. All functions that operate over a thread have an optional first argument which is the thread to operate over. The default is always the current thread.</p><p>debug.debug ()</p><p>Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.</p><p>Note that commands for debug.debug are not lexically nested within any function and so have no direct access to local variables.</p><p>debug.gethook ([thread])</p><p>Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the debug.sethook function).</p><p>debug.getinfo ([thread,] f [, what])</p><p>Returns a table with information about a function. You can give the function directly or you can give a number as the value of f, which means the function running at level f of the call stack of the given thread: level 0 is the current function (getinfo itself); level 1 is the function that called getinfo (except for tail calls, which do not count on the stack); and so on. If f is a number larger than the number of active functions, then getinfo returns nil.</p><p>The returned table can contain all the fields returned by lua_getinfo, with the string what describing which fields to fill in. The default for what is to get all information available, except the table of valid lines. If present, the option &#39;f&#39; adds a field named func with the function itself. If present, the option &#39;L&#39; adds a field named activelines with the table of valid lines.</p><p>For instance, the expression debug.getinfo(1,&quot;n&quot;).name returns a table with a name for the current function, if a reasonable name can be found, and the expression debug.getinfo(print) returns a table with all available information about the print function.</p><p>debug.getlocal ([thread,] f, local)</p><p>This function returns the name and the value of the local variable with index local of the function at level f of the stack. This function accesses not only explicit local variables, but also parameters, temporaries, etc.</p><p>The first parameter or local variable has index 1, and so on, until the last active variable. Negative indices refer to vararg parameters; -1 is the first vararg parameter. The function returns nil if there is no variable with the given index, and raises an error when called with a level out of range. (You can call debug.getinfo to check whether the level is valid.)</p><p>Variable names starting with &#39;(&#39; (open parenthesis) represent internal variables (loop control variables, temporaries, varargs, and C function locals).</p><p>The parameter f may also be a function. In that case, getlocal returns only the name of function parameters.</p><p>debug.getmetatable (value)</p><p>Returns the metatable of the given value or nil if it does not have a metatable.</p><p>debug.getregistry ()</p><p>Returns the registry table (see §4.5).</p><p>debug.getupvalue (f, up)</p><p>This function returns the name and the value of the upvalue with index up of the function f. The function returns nil if there is no upvalue with the given index.</p><p>debug.getuservalue (u)</p><p>Returns the Lua value associated to u. If u is not a userdata, returns nil.</p><p>debug.sethook ([thread,] hook, mask [, count])</p><p>Sets the given function as a hook. The string mask and the number count describe when the hook will be called. The string mask may have any combination of the following characters, with the given meaning:</p><p>&#39;c&#39;: the hook is called every time Lua calls a function; &#39;r&#39;: the hook is called every time Lua returns from a function; &#39;l&#39;: the hook is called every time Lua enters a new line of code. Moreover, with a count different from zero, the hook is called also after every count instructions.</p><p>When called without arguments, debug.sethook turns off the hook.</p><p>When the hook is called, its first parameter is a string describing the event that has triggered its call: &quot;call&quot; (or &quot;tail call&quot;), &quot;return&quot;, &quot;line&quot;, and &quot;count&quot;. For line events, the hook also gets the new line number as its second parameter. Inside a hook, you can call getinfo with level 2 to get more information about the running function (level 0 is the getinfo function, and level 1 is the hook function).</p><p>debug.setlocal ([thread,] level, local, value)</p><p>This function assigns the value value to the local variable with index local of the function at level level of the stack. The function returns nil if there is no local variable with the given index, and raises an error when called with a level out of range. (You can call getinfo to check whether the level is valid.) Otherwise, it returns the name of the local variable.</p><p>See debug.getlocal for more information about variable indices and names.</p><p>debug.setmetatable (value, table)</p><p>Sets the metatable for the given value to the given table (which can be nil). Returns value.</p><p>debug.setupvalue (f, up, value)</p><p>This function assigns the value value to the upvalue with index up of the function f. The function returns nil if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.</p><p>debug.setuservalue (udata, value)</p><p>Sets the given value as the Lua value associated to the given udata. value must be a table or nil; udata must be a full userdata.</p><p>Returns udata.</p><p>debug.traceback ([thread,] [message [, level]])</p><p>If message is present but is neither a string nor nil, this function returns message without further processing. Otherwise, it returns a string with a traceback of the call stack. An optional message string is appended at the beginning of the traceback. An optional level number tells at which level to start the traceback (default is 1, the function calling traceback).</p><p>debug.upvalueid (f, n)</p><p>Returns an unique identifier (as a light userdata) for the upvalue numbered n from the given function.</p><p>These unique identifiers allow a program to check whether different closures share upvalues. Lua closures that share an upvalue (that is, that access a same external local variable) will return identical ids for those upvalue indices.</p><p>debug.upvaluejoin (f1, n1, f2, n2)</p><p>Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2.</p><p>7 – Lua Standalone</p><p>Although Lua has been designed as an extension language, to be embedded in a host C program, it is also frequently used as a standalone language. An interpreter for Lua as a standalone language, called simply lua, is provided with the standard distribution. The standalone interpreter includes all standard libraries, including the debug library. Its usage is:</p><pre><code> lua [options] [script [args]]
</code></pre><p>The options are:</p><p>-e stat: executes string stat; -l mod: &quot;requires&quot; mod; -i: enters interactive mode after running script; -v: prints version information; -E: ignores environment variables; --: stops handling options; -: executes stdin as a file and stops handling options. After handling its options, lua runs the given script, passing to it the given args as string arguments. When called without arguments, lua behaves as lua -v -i when the standard input (stdin) is a terminal, and as lua - otherwise.</p><p>When called without option -E, the interpreter checks for an environment variable LUA_INIT_5_2 (or LUA_INIT if it is not defined) before running any argument. If the variable content has the format @filename, then lua executes the file. Otherwise, lua executes the string itself.</p><p>When called with option -E, besides ignoring LUA_INIT, Lua also ignores the values of LUA_PATH and LUA_CPATH, setting the values of package.path and package.cpath with the default paths defined in luaconf.h.</p><p>All options are handled in order, except -i and -E. For instance, an invocation like</p><pre><code> $ lua -e&#39;a=1&#39; -e &#39;print(a)&#39; script.lua
</code></pre><p>will first set a to 1, then print the value of a, and finally run the file script.lua with no arguments. (Here $ is the shell prompt. Your prompt may be different.)</p><p>Before starting to run the script, lua collects all arguments in the command line in a global table called arg. The script name is stored at index 0, the first argument after the script name goes to index 1, and so on. Any arguments before the script name (that is, the interpreter name plus the options) go to negative indices. For instance, in the call</p><pre><code> $ lua -la b.lua t1 t2
</code></pre><p>the interpreter first runs the file a.lua, then creates a table</p><pre><code> arg = { [-2] = &quot;lua&quot;, [-1] = &quot;-la&quot;,
         [0] = &quot;b.lua&quot;,
         [1] = &quot;t1&quot;, [2] = &quot;t2&quot; }
</code></pre><p>and finally runs the file b.lua. The script is called with arg[1], arg[2], ... as arguments; it can also access these arguments with the vararg expression &#39;...&#39;.</p><p>In interactive mode, if you write an incomplete statement, the interpreter waits for its completion by issuing a different prompt.</p><p>In case of unprotected errors in the script, the interpreter reports the error to the standard error stream. If the error object is a string, the interpreter adds a stack traceback to it. Otherwise, if the error object has a metamethod __tostring, the interpreter calls this metamethod to produce the final message. Finally, if the error object is nil, the interpreter does not report the error.</p><p>When finishing normally, the interpreter closes its main Lua state (see lua_close). The script can avoid this step by calling os.exit to terminate.</p><p>To allow the use of Lua as a script interpreter in Unix systems, the standalone interpreter skips the first line of a chunk if it starts with #. Therefore, Lua scripts can be made into executable programs by using chmod +x and the #! form, as in</p><pre><code> #!/usr/local/bin/lua
</code></pre><p>(Of course, the location of the Lua interpreter may be different in your machine. If lua is in your PATH, then</p><pre><code> #!/usr/bin/env lua
</code></pre><p>is a more portable solution.)</p><p>8 – Incompatibilities with the Previous Version</p><p>Here we list the incompatibilities that you may find when moving a program from Lua 5.1 to Lua 5.2. You can avoid some incompatibilities by compiling Lua with appropriate options (see file luaconf.h). However, all these compatibility options will be removed in the next version of Lua. Similarly, all features marked as deprecated in Lua 5.1 have been removed in Lua 5.2.</p><p>8.1 – Changes in the Language</p><p>The concept of environment changed. Only Lua functions have environments. To set the environment of a Lua function, use the variable _ENV or the function load. C functions no longer have environments. Use an upvalue with a shared table if you need to keep shared state among several C functions. (You may use luaL_setfuncs to open a C library with all functions sharing a common upvalue.)</p><p>To manipulate the &quot;environment&quot; of a userdata (which is now called user value), use the new functions lua_getuservalue and lua_setuservalue.</p><p>Lua identifiers cannot use locale-dependent letters. Doing a step or a full collection in the garbage collector does not restart the collector if it has been stopped. Weak tables with weak keys now perform like ephemeron tables. The event tail return in debug hooks was removed. Instead, tail calls generate a special new event, tail call, so that the debugger can know that there will not be a corresponding return event. Equality between function values has changed. Now, a function definition may not create a new value; it may reuse some previous value if there is no observable difference to the new function. 8.2 – Changes in the Libraries</p><p>Function module is deprecated. It is easy to set up a module with regular Lua code. Modules are not expected to set global variables. Functions setfenv and getfenv were removed, because of the changes in environments. Function math.log10 is deprecated. Use math.log with 10 as its second argument, instead. Function loadstring is deprecated. Use load instead; it now accepts string arguments and are exactly equivalent to loadstring. Function table.maxn is deprecated. Write it in Lua if you really need it. Function os.execute now returns true when command terminates successfully and nil plus error information otherwise. Function unpack was moved into the table library and therefore must be called as table.unpack. Character class %z in patterns is deprecated, as now patterns may contain &#39;\\0&#39; as a regular character. The table package.loaders was renamed package.searchers. Lua does not have bytecode verification anymore. So, all functions that load code (load and loadfile) are potentially insecure when loading untrusted binary data. (Actually, those functions were already insecure because of flaws in the verification algorithm.) When in doubt, use the mode argument of those functions to restrict them to loading textual chunks. The standard paths in the official distribution may change between versions. 8.3 – Changes in the API</p><p>Pseudoindex LUA_GLOBALSINDEX was removed. You must get the global environment from the registry (see §4.5). Pseudoindex LUA_ENVIRONINDEX and functions lua_getfenv/lua_setfenv were removed, as C functions no longer have environments. Function luaL_register is deprecated. Use luaL_setfuncs so that your module does not create globals. (Modules are not expected to set global variables anymore.) The osize argument to the allocation function may not be zero when creating a new block, that is, when ptr is NULL (see lua_Alloc). Use only the test ptr == NULL to check whether the block is new. Finalizers (__gc metamethods) for userdata are called in the reverse order that they were marked for finalization, not that they were created (see §2.5.1). (Most userdata are marked immediately after they are created.) Moreover, if the metatable does not have a __gc field when set, the finalizer will not be called, even if it is set later. luaL_typerror was removed. Write your own version if you need it. Function lua_cpcall is deprecated. You can simply push the function with lua_pushcfunction and call it with lua_pcall. Functions lua_equal and lua_lessthan are deprecated. Use the new lua_compare with appropriate options instead. Function lua_objlen was renamed lua_rawlen. Function lua_load has an extra parameter, mode. Pass NULL to simulate the old behavior. Function lua_resume has an extra parameter, from. Pass NULL or the thread doing the call. 9 – The Complete Syntax of Lua</p><p>Here is the complete syntax of Lua in extended BNF. (It does not describe operator precedences.)</p><pre><code>chunk ::= block

block ::= {stat} [retstat]

stat ::=  ‘;’ | 
	 varlist ‘=’ explist | 
	 functioncall | 
	 label | 
	 break | 
	 goto Name | 
	 do block end | 
	 while exp do block end | 
	 repeat block until exp | 
	 if exp then block {elseif exp then block} [else block] end | 
	 for Name ‘=’ exp ‘,’ exp [‘,’ exp] do block end | 
	 for namelist in explist do block end | 
	 function funcname funcbody | 
	 local function Name funcbody | 
	 local namelist [‘=’ explist] 

retstat ::= return [explist] [‘;’]

label ::= ‘::’ Name ‘::’

funcname ::= Name {‘.’ Name} [‘:’ Name]

varlist ::= var {‘,’ var}

var ::=  Name | prefixexp ‘[’ exp ‘]’ | prefixexp ‘.’ Name 

namelist ::= Name {‘,’ Name}

explist ::= exp {‘,’ exp}

exp ::=  nil | false | true | Number | String | ‘...’ | functiondef | 
	 prefixexp | tableconstructor | exp binop exp | unop exp 

prefixexp ::= var | functioncall | ‘(’ exp ‘)’

functioncall ::=  prefixexp args | prefixexp ‘:’ Name args 

args ::=  ‘(’ [explist] ‘)’ | tableconstructor | String 

functiondef ::= function funcbody

funcbody ::= ‘(’ [parlist] ‘)’ block end

parlist ::= namelist [‘,’ ‘...’] | ‘...’

tableconstructor ::= ‘{’ [fieldlist] ‘}’

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp

fieldsep ::= ‘,’ | ‘;’

binop ::= ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘^’ | ‘%’ | ‘..’ | 
	 ‘&lt;’ | ‘&lt;=’ | ‘&gt;’ | ‘&gt;=’ | ‘==’ | ‘~=’ | 
	 and | or

unop ::= ‘-’ | not | ‘#’
</code></pre>`,1661)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
