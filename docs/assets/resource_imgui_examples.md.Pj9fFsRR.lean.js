import{_ as i,c as r,a2 as a,o as l}from"./chunks/framework.DPuwY6B9.js";const d=JSON.parse('{"title":"Dear ImGui: Examples","description":"","frontmatter":{},"headers":[],"relativePath":"resource/imgui/examples.md","filePath":"resource/imgui/examples.md","lastUpdated":1731504395000}'),o={name:"resource/imgui/examples.md"};function p(s,e,n,t,m,c){return l(),r("div",null,e[0]||(e[0]=[a(`<h1 id="dear-imgui-examples" tabindex="-1">Dear ImGui: Examples <a class="header-anchor" href="#dear-imgui-examples" aria-label="Permalink to &quot;Dear ImGui: Examples&quot;">​</a></h1><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples" target="_blank" rel="noreferrer">examples/</a> フォルダには、さまざまなプラットフォームやグラフィックスAPI向けのスタンドアロンでビルド可能なサンプルアプリケーションが含まれています。</strong> これらはすべて、<a href="https://github.com/ocornut/imgui/blob/master/backends" target="_blank" rel="noreferrer">backends/</a> フォルダ内の標準的なバックエンドを使用しています（詳細は <a href="https://github.com/ocornut/imgui/blob/master/docs/BACKENDS.md" target="_blank" rel="noreferrer">BACKENDS.md</a> を参照してください）。</p><p>サンプルの目的は、バックエンドとの統合方法を示し、Dear ImGuiを試し、自分のアプリケーションやゲーム、エンジンへの統合を進めるためのガイドを提供することです。<br><strong>Dear ImGuiのセットアップと動作が完了したら、<code>ImGui::ShowDemoWindow()</code>（imgui_demo.cpp内）を実行し、エンドユーザー向けAPIの使用方法を確認してください。</strong></p><p>一部のサンプルアプリケーションのWindows用バイナリは以下で入手できます：<br><a href="https://www.dearimgui.com/binaries" target="_blank" rel="noreferrer">https://www.dearimgui.com/binaries</a></p><h2 id="初めてのセットアップ" tabindex="-1">初めてのセットアップ <a class="header-anchor" href="#初めてのセットアップ" aria-label="Permalink to &quot;初めてのセットアップ&quot;">​</a></h2><p>標準的なバックエンドを使用すれば、既存のアプリケーションに統合するのに20行未満で済みます。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">初期化時:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  各バックエンドに対して </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui_ImplXXXX_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">フレームの開始時:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  各バックエンドに対して </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui_ImplXXXX_NewFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">フレームの終了時:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  レンダラーバックエンドに対して </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui_ImplXXXX_RenderDrawData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">終了時:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  各バックエンドに対して </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui_ImplXXXX_Shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DestroyContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() を呼び出します。</span></span></code></pre></div><h3 id="主なリソース" tabindex="-1">主なリソース <a class="header-anchor" href="#主なリソース" aria-label="Permalink to &quot;主なリソース&quot;">​</a></h3><ul><li><strong><a href="https://github.com/ocornut/imgui/wiki/Getting-Started" target="_blank" rel="noreferrer">Getting Started</a></strong> Wikiガイドを読んで、既存のアプリケーションにDear ImGuiを統合する詳細な例を確認してください。</li></ul><h3 id="追加リソース" tabindex="-1">追加リソース <a class="header-anchor" href="#追加リソース" aria-label="Permalink to &quot;追加リソース&quot;">​</a></h3><ul><li>FAQ: <a href="https://www.dearimgui.com/faq" target="_blank" rel="noreferrer">https://www.dearimgui.com/faq</a> を参照してください。</li><li>imgui.cpp の &quot;PROGRAMMER GUIDE&quot; セクションを読んでください。</li><li>各ファイルの冒頭にあるコメントや説明を読んでください。</li></ul><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h3><p>提供されたバックエンドを使用する場合、<code>backends/imgui_impl_xxxx(.cpp, .h)</code> ファイルをプロジェクトに追加し、そのまま使用できます。各 <code>imgui_impl_xxxx.cpp</code> ファイルには個別の変更履歴が含まれているため、後で更新する際に変更内容を把握しやすくなります。</p><h2 id="サンプルアプリケーション" tabindex="-1">サンプルアプリケーション <a class="header-anchor" href="#サンプルアプリケーション" aria-label="Permalink to &quot;サンプルアプリケーション&quot;">​</a></h2><ul><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_allegro5/" target="_blank" rel="noreferrer">example_allegro5/</a></strong><br> Allegro 5 の例<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_allegro5.cpp</code></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_android_opengl3/" target="_blank" rel="noreferrer">example_android_opengl3/</a></strong><br> Android + OpenGL3 (ES) の例<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_android.cpp</code> + <code>imgui_impl_opengl3.cpp</code></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_metal/" target="_blank" rel="noreferrer">example_apple_metal/</a></strong><br> macOS &amp; iOS + Metal の例<br><strong>構成：</strong> <code>main.m</code> + <code>imgui_impl_osx.mm</code> + <code>imgui_impl_metal.mm</code><br> ※この例はXcode 9以降の「クロスプラットフォーム」ゲームテンプレートに基づいています。<br><strong>注意：</strong> <code>imgui_impl_osx.mm</code> は他のバックエンドほど機能が充実していません。WindowsやLinuxもサポートするGLFWやSDLのバックエンドを使用する方が良い場合があります。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_apple_opengl2/" target="_blank" rel="noreferrer">example_apple_opengl2/</a></strong><br> macOS + OpenGL2 の例<br><strong>構成：</strong> <code>main.mm</code> + <code>imgui_impl_osx.mm</code> + <code>imgui_impl_opengl2.cpp</code><br><strong>注意：</strong> 他のバックエンドと比較すると機能が制限されています。GLFWやSDLを検討してください。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/" target="_blank" rel="noreferrer">example_glfw_wgpu/</a></strong><br> GLFW + WebGPU の例（Emscripten（Web）やDawn（デスクトップ）をサポート）<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_glfw.cpp</code> + <code>imgui_impl_wgpu.cpp</code><br><strong>注記：</strong> <code>example_glfw_opengl3</code> や <code>example_sdl2_opengl3</code> の例もEmscriptenをサポートしています。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_glfw_metal/" target="_blank" rel="noreferrer">example_glfw_metal/</a></strong><br> GLFW（Mac）+ Metal の例<br><strong>構成：</strong> <code>main.mm</code> + <code>imgui_impl_glfw.cpp</code> + <code>imgui_impl_metal.mm</code></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_glfw_opengl2/" target="_blank" rel="noreferrer">example_glfw_opengl2/</a></strong><br> GLFW + OpenGL2 の例（旧式、固定パイプライン）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_glfw.cpp</code> + <code>imgui_impl_opengl2.cpp</code><br><strong>注意：モダンなOpenGLやWebGL（シェーダー、VBO、VAOなど）を使用している場合、このコードは使用しないでください。</strong><br> このコードは主にDear ImGuiの統合方法を学ぶための短い参考例として提供されています。ただし、GL3+コンテキストやモダンなOpenGL呼び出しを使用している場合、このレンダラーを使うと問題が発生しやすく、GL属性を初期状態に戻す必要があり、GPUドライバが混乱する可能性があります。評価：★1、おすすめしません。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_glfw_opengl3/" target="_blank" rel="noreferrer">example_glfw_opengl3/</a></strong><br> GLFW（Win32、Mac、Linux）+ OpenGL3+/ES2/ES3 の例（モダン、プログラマブルパイプライン）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_glfw.cpp</code> + <code>imgui_impl_opengl3.cpp</code><br> モダンなOpenGL呼び出しとカスタムシェーダーを使用します。<br> この例はEmscriptenでビルドし、WebGLをターゲットにすることをサポートしています。<br><strong>モダンなOpenGLやWebGLを使用している場合は、この例を使用してください。</strong></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_glfw_vulkan/" target="_blank" rel="noreferrer">example_glfw_vulkan/</a></strong><br> GLFW（Win32、Mac、Linux）+ Vulkan の例。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_glfw.cpp</code> + <code>imgui_impl_vulkan.cpp</code><br> この例はVulkanの特性により、コードが非常に長く、手間がかかります。<code>main.cpp</code>では例外的に <code>imgui_impl_vulkan.h/cpp</code> からヘルパー関数を使用しています。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_glut_opengl2/" target="_blank" rel="noreferrer">example_glut_opengl2/</a></strong><br> GLUT（例：Linux/WindowsのFreeGLUT、macOSのGLUTフレームワーク）+ OpenGL2 の例。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_glut.cpp</code> + <code>imgui_impl_opengl2.cpp</code><br><strong>注意：</strong> GLUT/FreeGLUTはほぼ廃止されているため、GLFWやSDLの使用を推奨します。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_null/" target="_blank" rel="noreferrer">example_null/</a></strong><br> Nullの例。imguiをコンパイルしてリンクし、コンテキストを作成し、入力やグラフィック出力なしでヘッドレスで実行します。<br><strong>構成：</strong> <code>main.cpp</code><br> この例は、できるだけ多くの設定でコアimguiファイルのコンパイルを迅速にテストするために使用されます。このアプリケーションはウィンドウやグラフィックコンテキストを作成しないため、グラフィック出力はありません。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_directx11/" target="_blank" rel="noreferrer">example_sdl2_directx11/</a></strong><br> SDL2 + DirectX11 の例（Windows専用）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_sdl2.cpp</code> + <code>imgui_impl_dx11.cpp</code><br> この例はDirectXとSDL2の使用方法を示します。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_metal/" target="_blank" rel="noreferrer">example_sdl2_metal/</a></strong><br> SDL2 + Metal の例（Mac専用）。<br><strong>構成：</strong> <code>main.mm</code> + <code>imgui_impl_sdl2.cpp</code> + <code>imgui_impl_metal.mm</code></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_opengl2/" target="_blank" rel="noreferrer">example_sdl2_opengl2/</a></strong><br> SDL2（Win32、Mac、Linuxなど）+ OpenGL の例（旧式、固定パイプライン）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_sdl2.cpp</code> + <code>imgui_impl_opengl2.cpp</code><br><strong>注意：モダンなOpenGLやWebGLを使用している場合、このコードは使用しないでください。</strong><br> このコードは主にDear ImGuiの統合方法を学ぶための短い参考例として提供されています。ただし、GL3+コンテキストやモダンなOpenGL呼び出しを使用している場合、このレンダラーは問題を引き起こしやすく、GL属性を初期状態に戻す必要があり、GPUドライバが混乱する可能性があります。評価：★1、おすすめしません。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_opengl3/" target="_blank" rel="noreferrer">example_sdl2_opengl3/</a></strong><br> SDL2（Win32、Mac、Linuxなど）+ OpenGL3+/ES2/ES3 の例。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_sdl2.cpp</code> + <code>imgui_impl_opengl3.cpp</code><br> モダンなOpenGL呼び出しとカスタムシェーダーを使用します。<br> この例はEmscriptenでビルドし、WebGLをターゲットにすることをサポートしています。<br><strong>モダンなOpenGLやWebGLを使用している場合は、この例を使用してください。</strong></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_sdlrenderer2/" target="_blank" rel="noreferrer">example_sdl2_sdlrenderer2/</a></strong><br> SDL2（Win32、Mac、Linuxなど）+ SDL_Rendererを使用した例（SDL2のほとんどのグラフィックスバックエンドをサポート）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_sdl2.cpp</code> + <code>imgui_impl_sdlrenderer.cpp</code><br><strong>要件：</strong> SDL 2.0.18以降（2021年11月リリース）</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_vulkan/" target="_blank" rel="noreferrer">example_sdl2_vulkan/</a></strong><br> SDL2（Win32、Mac、Linuxなど）+ Vulkanの例。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_sdl2.cpp</code> + <code>imgui_impl_vulkan.cpp</code><br> Vulkanを使用するため、コードが非常に長く手間がかかります。<code>main.cpp</code>では例外的に <code>imgui_impl_vulkan.h/cpp</code> のヘルパー関数を使用しています。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_win32_directx9/" target="_blank" rel="noreferrer">example_win32_directx9/</a></strong><br> DirectX9の例（Windows専用）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_win32.cpp</code> + <code>imgui_impl_dx9.cpp</code></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_win32_directx10/" target="_blank" rel="noreferrer">example_win32_directx10/</a></strong><br> DirectX10の例（Windows専用）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_win32.cpp</code> + <code>imgui_impl_dx10.cpp</code></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_win32_directx11/" target="_blank" rel="noreferrer">example_win32_directx11/</a></strong><br> DirectX11の例（Windows専用）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_win32.cpp</code> + <code>imgui_impl_dx11.cpp</code></p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_win32_directx12/" target="_blank" rel="noreferrer">example_win32_directx12/</a></strong><br> DirectX12の例（Windows専用）。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_win32.cpp</code> + <code>imgui_impl_dx12.cpp</code><br> DirectX12を使用するため、コードが非常に長く手間がかかります。</p></li><li><p><strong><a href="https://github.com/ocornut/imgui/blob/master/examples/example_win32_opengl3/" target="_blank" rel="noreferrer">example_win32_opengl3/</a></strong><br> Windowsネイティブ + OpenGL3（モダンなプログラマブルパイプライン）の例。<br><strong>構成：</strong> <code>main.cpp</code> + <code>imgui_impl_win32.cpp</code> + <code>imgui_impl_opengl3.cpp</code></p></li></ul><h2 id="その他" tabindex="-1">その他 <a class="header-anchor" href="#その他" aria-label="Permalink to &quot;その他&quot;">​</a></h2><h3 id="ビルドについて" tabindex="-1">ビルドについて <a class="header-anchor" href="#ビルドについて" aria-label="Permalink to &quot;ビルドについて&quot;">​</a></h3><p>外部ライブラリを使用して移植性の高いビルドファイルを作成・維持するのは、現在でも手間がかかります。そのため、以下の形式で提供しています：</p><ul><li>Linux/OSX向けのMakefile</li><li>Visual Studio 2008以降向けのバッチファイル</li><li>Visual Studio 2012以降向けの<code>.sln</code>プロジェクトファイル</li><li>Appleプラットフォーム向けのXcodeプロジェクトファイル</li></ul><p>これらがあなたの環境で動作しない場合はお知らせください！また、<code>imgui_impl_xxx.cpp/.h</code>ファイルを自分のコードベースにインポートするか、コマンドラインコンパイラで直接コンパイルすることもできます。</p><p>CMakeを使用して例をビルドおよびリンクする方法については、以下を参照してください：</p><ul><li><a href="https://github.com/ocornut/imgui/pull/1713" target="_blank" rel="noreferrer">Pull Request #1713</a></li><li><a href="https://github.com/ocornut/imgui/pull/3027" target="_blank" rel="noreferrer">Pull Request #3027</a></li></ul><h3 id="マウスカーソルの遅延について" tabindex="-1">マウスカーソルの遅延について <a class="header-anchor" href="#マウスカーソルの遅延について" aria-label="Permalink to &quot;マウスカーソルの遅延について&quot;">​</a></h3><p>Dear ImGuiはほとんどの動作において特別な遅延を追加していません。たとえば、<code>NewFrame()</code>の前に渡された最後の<code>io.AddMousePosEvent()</code>の値に基づいて、<code>EndFrame()</code>または<code>Render()</code>時点でウィンドウが正しい位置に移動します。60FPSで動作していれば快適な使用感が得られるはずです。</p><p>ただし、OSのマウスカーソルは特定のハードウェアアクセラレート経路で描画されるため、通常のグラフィックスAPI（Dear ImGuiウィンドウを含む）で描画されるコンテンツよりスムーズに感じられる場合があります。この違いにより、特に感覚が敏感なユーザーには違和感を与える可能性があります。</p><p>この違いを視覚化するため、<code>io.MouseDrawCursor</code>フラグを有効にしてDear ImGuiが通常のグラフィックスAPIを使用してカーソルを描画するようにすることを検討してください。ただし、60FPSでのカーソル描画は遅く感じられるため、常時有効にすることはおすすめしません。インタラクティブなドラッグ操作中のみにソフトウェアレンダリングカーソルを切り替えるのが良いかもしれません。</p><p>GPUドライバや設定により、追加の表示遅延が発生する場合があります。ウィンドウのドラッグが遅れて感じられる場合、その原因がわからない場合は、マウスカーソルの直下に単純な2D図形を描画するテストを試してみてください。</p>`,27)]))}const u=i(o,[["render",p]]);export{d as __pageData,u as default};
