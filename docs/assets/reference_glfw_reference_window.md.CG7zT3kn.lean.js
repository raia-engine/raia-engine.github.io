import{_ as i,c as t,a2 as a,o as l}from"./chunks/framework.6x3wfQve.js";const g=JSON.parse('{"title":"Window","description":"","frontmatter":{},"headers":[],"relativePath":"reference/glfw/reference/window.md","filePath":"reference/glfw/reference/window.md","lastUpdated":null}'),n={name:"reference/glfw/reference/window.md"};function p(e,s,d,h,k,o){return l(),t("div",null,s[0]||(s[0]=[a('<h1 id="window" tabindex="-1">Window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;Window&quot;">​</a></h1><p>ウィンドウの作成、削除、イベント・ポーリングなど、ウィンドウに関連する関数やタイプのリファレンス・ドキュメントです。より詳細な情報については、Windowガイドを参照してください。</p><nav class="table-of-contents"><ul><li><a href="#マクロ">マクロ</a></li><li><a href="#型定義">型定義</a></li><li><a href="#関数">関数</a></li></ul></nav><h2 id="マクロ" tabindex="-1">マクロ <a class="header-anchor" href="#マクロ" aria-label="Permalink to &quot;マクロ&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>GLFW_FOCUSED</td><td>入力フォーカスウィンドウのヒントと属性。</td></tr><tr><td>GLFW_ICONIFIED</td><td>ウィンドウのアイコン化ウィンドウ属性。</td></tr><tr><td>GLFW_RESIZABLE</td><td>ウィンドウのリサイズが可能なウィンドウのヒントと属性。</td></tr><tr><td>GLFW_VISIBLE</td><td>Window visibility ウィンドウのヒントと属性。</td></tr><tr><td>GLFW_DECORATED</td><td>ウィンドウの装飾 ウィンドウのヒントと属性</td></tr><tr><td>GLFW_AUTO_ICONIFY</td><td>ウィンドウの自動アイコン化のヒントと属性。</td></tr><tr><td>GLFW_FLOATING</td><td>ウィンドウの装飾 ウィンドウのヒントと属性</td></tr><tr><td>GLFW_MAXIMIZED</td><td>ウィンドウの最大化のヒントと属性。</td></tr><tr><td>GLFW_CENTER_CURSOR</td><td>カーソルのセンタリングウィンドウのヒント。</td></tr><tr><td>GLFW_TRANSPARENT_FRAMEBUFFER</td><td>ウィンドウのフレームバッファの透明度のヒントと属性。</td></tr><tr><td>GLFW_HOVERED</td><td>マウスカーソルのホバーウィンドウ属性。</td></tr><tr><td>GLFW_FOCUS_ON_SHOW</td><td>ショーウィンドウのヒントと属性を呼び出す際にフォーカスを入力する。</td></tr><tr><td>GLFW_RED_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_GREEN_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_BLUE_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_ALPHA_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_DEPTH_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_STENCIL_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_ACCUM_RED_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_ACCUM_GREEN_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_ACCUM_BLUE_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_ACCUM_ALPHA_BITS</td><td>フレームバッファのビット深度のヒント。</td></tr><tr><td>GLFW_AUX_BUFFERS</td><td>フレームバッファ補助バッファのヒント。</td></tr><tr><td>GLFW_STEREO</td><td>OpenGL ステレオスコピックレンダリングのヒント。</td></tr><tr><td>GLFW_SAMPLES</td><td>フレームバッファMSAAサンプルのヒント。</td></tr><tr><td>GLFW_SRGB_CAPABLE</td><td>フレームバッファのsRGBヒント。</td></tr><tr><td>GLFW_REFRESH_RATE</td><td>モニターのリフレッシュレートのヒント。</td></tr><tr><td>GLFW_DOUBLEBUFFER</td><td>フレームバッファのダブルバッファリングのヒント。</td></tr><tr><td>GLFW_CLIENT_API</td><td>コンテキスト・クライアント API のヒントと属性。</td></tr><tr><td>GLFW_CONTEXT_VERSION_MAJOR</td><td>コンテキストクライアントAPIのメジャーバージョンのヒントと属性。</td></tr><tr><td>GLFW_CONTEXT_VERSION_MINOR</td><td>コンテキストクライアントAPIのマイナーバージョンのヒントと属性。</td></tr><tr><td>GLFW_CONTEXT_REVISION</td><td>コンテキスト・クライアントAPIのリビジョン番号属性。</td></tr><tr><td>GLFW_CONTEXT_ROBUSTNESS</td><td>コンテキストの堅牢性のヒントと属性。</td></tr><tr><td>GLFW_OPENGL_FORWARD_COMPAT</td><td>OpenGLの前方互換性のヒントと属性。</td></tr><tr><td>GLFW_OPENGL_DEBUG_CONTEXT</td><td>デバッグモードのコンテキストヒントと属性。</td></tr><tr><td>GLFW_OPENGL_PROFILE</td><td>OpenGLプロファイルのヒントと属性。</td></tr><tr><td>GLFW_CONTEXT_RELEASE_BEHAVIOR</td><td>コンテキストのフラッシュオンリリースのヒントと属性。</td></tr><tr><td>GLFW_CONTEXT_NO_ERROR</td><td>コンテキストエラー抑制のヒントと属性。</td></tr><tr><td>GLFW_CONTEXT_CREATION_API</td><td>コンテキスト作成APIのヒントと属性。</td></tr><tr><td>GLFW_SCALE_TO_MONITOR</td><td>ウィンドウ内容領域のスケーリングウィンドウウィンドウのヒント。</td></tr><tr><td>GLFW_COCOA_RETINA_FRAMEBUFFER</td><td>macOS固有のウィンドウヒント。</td></tr><tr><td>GLFW_COCOA_FRAME_NAME</td><td>macOS固有のウィンドウヒント。</td></tr><tr><td>GLFW_COCOA_GRAPHICS_SWITCHING</td><td>macOS固有のウィンドウヒント。</td></tr><tr><td>GLFW_X11_CLASS_NAME</td><td>X11固有のウィンドウヒント。</td></tr><tr><td>GLFW_X11_INSTANCE_NAME</td><td>X11固有のウィンドウヒント。</td></tr></tbody></table><details class="details custom-block"><summary>GLFW_FOCUSED</summary><p>入力フォーカスのウィンドウヒントまたはウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_FOCUSED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020001</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_ICONIFIED</summary><p>ウィンドウのアイコン化ウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_ICONIFIED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020002</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_RESIZABLE</summary><p>ウィンドウのサイズ変更可能なウィンドウヒントとウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_RESIZABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020003</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_VISIBLE</summary><p>ウィンドウの可視性ウィンドウのヒントとウィンドウの属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_VISIBLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020004</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_DECORATED</summary><p>ウィンドウの装飾 ウィンドウのヒントとウィンドウの属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_DECORATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020005</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_AUTO_ICONIFY</summary><p>ウィンドウの自動アイコン化ウィンドウヒントとウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_AUTO_ICONIFY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020006</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_FLOATING</summary><p>ウィンドウの装飾 ウィンドウのヒントとウィンドウの属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_FLOATING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020007</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_MAXIMIZED</summary><p>ウィンドウの最大化ウィンドウヒントとウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_MAXIMIZED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020008</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CENTER_CURSOR</summary><p>カーソルのセンタリングウィンドウのヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CENTER_CURSOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00020009</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_TRANSPARENT_FRAMEBUFFER</summary><p>ウィンドウ・フレームバッファの透明度ウィンドウ・ヒントとウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_TRANSPARENT_FRAMEBUFFER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002000A</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_HOVERED</summary><p>マウスカーソルのホバーウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_HOVERED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002000B</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_FOCUS_ON_SHOW</summary><p>入力フォーカスのウィンドウヒントまたはウィンドウ属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_FOCUS_ON_SHOW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002000C</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_RED_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_RED_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021001</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_GREEN_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_GREEN_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021002</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_BLUE_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_BLUE_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021003</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_ALPHA_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_ALPHA_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021004</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_DEPTH_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_DEPTH_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021005</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_STENCIL_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_STENCIL_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021006</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_ACCUM_RED_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_ACCUM_RED_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021007</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_ACCUM_GREEN_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_ACCUM_GREEN_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021008</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_ACCUM_BLUE_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_ACCUM_BLUE_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021009</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_ACCUM_ALPHA_BITS</summary><p>フレームバッファのビット深度のヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_ACCUM_ALPHA_BITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002100A</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_AUX_BUFFERS</summary><p>フレームバッファ補助バッファのヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_AUX_BUFFERS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002100B</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_STEREO</summary><p>OpenGL ステレオスコピックレンダリングのヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_STEREO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002100C</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_SAMPLES</summary><p>フレームバッファMSAAサンプルのヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_SAMPLES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002100D</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_SRGB_CAPABLE</summary><p>フレームバッファのsRGBヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_SRGB_CAPABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002100E</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_REFRESH_RATE</summary><p>モニターのリフレッシュレートのヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_REFRESH_RATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002100F</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_DOUBLEBUFFER</summary><p>フレームバッファのダブルバッファリングのヒント。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_DOUBLEBUFFER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00021010</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CLIENT_API</summary><p>コンテキスト・クライアント API のヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CLIENT_API</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022001</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CONTEXT_VERSION_MAJOR</summary><p>コンテキストクライアントAPIのメジャーバージョンのヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CONTEXT_VERSION_MAJOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022002</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CONTEXT_VERSION_MINOR</summary><p>コンテキストクライアントAPIのマイナーバージョンのヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CONTEXT_VERSION_MINOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022003</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CONTEXT_REVISION</summary><p>コンテキスト・クライアントAPIのリビジョン番号属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CONTEXT_REVISION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022004</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CONTEXT_ROBUSTNESS</summary><p>コンテキスト・クライアントAPIのリビジョン番号のヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CONTEXT_ROBUSTNESS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022005</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_OPENGL_FORWARD_COMPAT</summary><p>OpenGLの前方互換性のヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_OPENGL_FORWARD_COMPAT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022006</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_OPENGL_DEBUG_CONTEXT</summary><p>デバッグモードのコンテキストヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_OPENGL_DEBUG_CONTEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022007</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_OPENGL_PROFILE</summary><p>OpenGLプロファイルのヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_OPENGL_PROFILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022008</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CONTEXT_RELEASE_BEHAVIOR</summary><p>コンテキストのフラッシュオンリリースのヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CONTEXT_RELEASE_BEHAVIOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00022009</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CONTEXT_NO_ERROR</summary><p>コンテキストエラー抑制のヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CONTEXT_NO_ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002200A</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_CONTEXT_CREATION_API</summary><p>コンテキスト作成APIのヒントと属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_CONTEXT_CREATION_API</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002200B</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_SCALE_TO_MONITOR</summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_SCALE_TO_MONITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002200C</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_COCOA_RETINA_FRAMEBUFFER</summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_COCOA_RETINA_FRAMEBUFFER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00023001</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_COCOA_FRAME_NAME</summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_COCOA_FRAME_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00023002</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_COCOA_GRAPHICS_SWITCHING</summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_COCOA_GRAPHICS_SWITCHING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00023003</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_X11_CLASS_NAME</summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_X11_CLASS_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00024001</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_X11_INSTANCE_NAME</summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_X11_INSTANCE_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00024002</span></span></code></pre></div></details><h2 id="型定義" tabindex="-1">型定義 <a class="header-anchor" href="#型定義" aria-label="Permalink to &quot;型定義&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>struct GLFWwindow</td><td>不透明なウィンドウオブジェクト。</td></tr><tr><td>void(* GLFWwindowposfun)</td><td>ウィンドウ位置コールバックの関数ポインタタイプ。</td></tr><tr><td>void(* GLFWwindowsizefun)</td><td>ウィンドウサイズ・コールバックの関数ポインタ型。</td></tr><tr><td>void(* GLFWwindowclosefun)</td><td>ウィンドウを閉じるコールバックの関数ポインタの型。</td></tr><tr><td>void(* GLFWwindowrefreshfun)</td><td>ウィンドウ内容更新コールバックの関数ポインタ型。</td></tr><tr><td>void(* GLFWwindowfocusfun)</td><td>ウィンドウフォーカスコールバック用の関数ポインタタイプ。</td></tr><tr><td>void(* GLFWwindowiconifyfun)</td><td>ウィンドウアイコン化コールバックの関数ポインタタイプ。</td></tr><tr><td>void(* GLFWwindowmaximizefun)</td><td>ウィンドウ最大化コールバックの関数ポインタタイプ。</td></tr><tr><td>void(* GLFWframebuffersizefun)</td><td>フレームバッファサイズコールバック用の関数ポインタタイプ。</td></tr><tr><td>void(* GLFWwindowcontentscalefun)</td><td>ウィンドウコンテンツスケールコールバック用の関数ポインタタイプ。</td></tr><tr><td>struct GLFWimage</td><td>画像データ。</td></tr></tbody></table><details class="details custom-block"><summary><code>struct GLFWwindow</code></summary><p>不透明なウィンドウオブジェクト。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindow GLFWwindow</span></span></code></pre></div><p><strong>参照</strong>:</p><ul><li>Window objects</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowposfun)</code></summary><p>これは、ウィンドウ位置コールバック用の関数ポインタ型である。ウィンドウ位置コールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowposfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xpos, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ypos)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 動かされたウィンドウ。</li><li><code>[in] xpos</code>: ウィンドウのコンテンツ領域の左上隅の、スクリーン座標での新しいx座標。</li><li><code>[in] ypos</code>: ウィンドウのコンテンツ領域の左上隅の、スクリーン座標での新しいy座標。</li></ul><p><strong>参照</strong>:</p><ul><li>Window position</li><li>glfwSetWindowPosCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowsizefun)</code></summary><p>これは、ウィンドウサイズ・コールバック用の関数ポインタ型である。ウィンドウサイズ・コールバック関数は以下のシグネチャを持つ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowsizefun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: リサイズされたウィンドウ。</li><li><code>[in] width</code>: ウィンドウの新しい幅をスクリーン座標で指定する。</li><li><code>[in] height</code>: ウィンドウの新しい高さをスクリーン座標で指定する。</li></ul><p><strong>参照</strong>:</p><ul><li>Window size</li><li>glfwSetWindowSizeCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowclosefun)</code></summary><p>これは、ウィンドウを閉じるコールバック用の関数ポインタ型である。ウィンドウを閉じるコールバック関数は以下のシグネチャを持つ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowclosefun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: ユーザーが閉じようとしたウィンドウ。</li></ul><p><strong>参照</strong>:</p><ul><li>Window closing and close flag</li><li>glfwSetWindowCloseCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン2.5で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowrefreshfun)</code></summary><p>これは、ウィンドウ・コンテンツ・リフレッシュ・コールバック用の関数ポインタ型である。ウィンドウ・コンテンツ更新コールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowrefreshfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 内容を更新する必要があるウィンドウ。</li></ul><p><strong>参照</strong>:</p><ul><li>Window damage and refresh</li><li>glfwSetWindowRefreshCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン2.5で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowfocusfun)</code></summary><p>これはウィンドウ・フォーカス・コールバック用の関数ポインタ型である。ウィンドウ・フォーカス・コールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> focused</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowfocusfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> focused)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 入力フォーカスを得た、または失ったウィンドウ。</li><li><code>[in] focused</code>: ウィンドウに入力フォーカスが与えられた場合はGLFW_TRUE、失われた場合はGLFW_FALSE。</li></ul><p><strong>参照</strong>:</p><ul><li>Window input focus</li><li>glfwSetWindowFocusCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowiconifyfun)</code></summary><p>これはウィンドウ・アイコニファイ・コールバック用の関数ポインタ型である。ウィンドウアイコニファイコールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> iconified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowiconifyfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iconified)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: アイコン化または復元されたウィンドウ。</li><li><code>[in] iconified</code>: ウィンドウがアイコン化された場合はGLFW_TRUE、復元された場合はGLFW_FALSE。</li></ul><p><strong>参照</strong>:</p><ul><li>Window iconification</li><li>glfwSetWindowIconifyCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowmaximizefun)</code></summary><p>これは、ウィンドウの最大化コールバック用の関数ポインタ型である。ウィンドウ最大化コールバック関数のシグネチャは以下のとおりです：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> maximized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowmaximizefun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximized)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 最大化または復元されたウィンドウ。</li><li><code>[in] maximized</code>: ウィンドウが最大化された場合はGLFW_TRUE、復元された場合はGLFW_FALSE。</li></ul><p><strong>参照</strong>:</p><ul><li>Window maximization</li><li>glfwSetWindowMaximizeCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWframebuffersizefun)</code></summary><p>これは、フレームバッファ・サイズ・コールバック用の関数ポインタ型である。フレームバッファ・サイズ・コールバック関数は以下のシグネチャを持つ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWframebuffersizefun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: フレームバッファがリサイズされたウィンドウ。</li><li><code>[in] width</code>: フレームバッファの新しい幅（ピクセル単位）。</li><li><code>[in] height</code>: フレームバッファの新しい高さ（ピクセル単位）。</li></ul><p><strong>参照</strong>:</p><ul><li>Framebuffer size</li><li>glfwSetFramebufferSizeCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWwindowcontentscalefun)</code></summary><p>これは、ウィンドウコンテンツスケールコールバック用の関数ポインタタイプです。ウィンドウコンテンツスケールコールバック関数のシグネチャは次のとおりです：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> yscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWwindowcontentscalefun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xscale, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yscale)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 内容スケールが変更されたウィンドウ。</li><li><code>[in] xscale</code>: ウィンドウの新しいX軸の内容スケール。</li><li><code>[in] yscale</code>: ウィンドウの新しいY軸の内容スケール。</li></ul><p><strong>参照</strong>:</p><ul><li>Window content scale</li><li>glfwSetWindowContentScaleCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>struct GLFWimage</code></summary><p>これは単一の2D画像を記述する。期待されるピクセルフォーマットは、各関数のドキュメントを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWimage GLFWimage</span></span></code></pre></div><p><strong>参照</strong>:</p><ul><li>Custom cursor creation</li><li>Window icon</li></ul><p><strong>追加</strong>:</p><p>バージョン2.1で追加。GLFW 3: フォーマットとピクセルあたりのバイト数のメンバーを削除。</p></details><h2 id="関数" tabindex="-1">関数 <a class="header-anchor" href="#関数" aria-label="Permalink to &quot;関数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td>glfwDefaultWindowHints</td><td>すべてのウィンドウヒントをデフォルト値にリセットする。</td></tr><tr><td>glfwWindowHint</td><td>指定されたウィンドウヒントを目的の値に設定する。</td></tr><tr><td>glfwWindowHintString</td><td>指定されたウィンドウヒントを目的の値に設定する。</td></tr><tr><td>glfwCreateWindow</td><td>ウィンドウとそれに関連するコンテキストを作成します。</td></tr><tr><td>glfwDestroyWindow</td><td>指定されたウィンドウとそのコンテキストを破棄します。</td></tr><tr><td>glfwWindowShouldClose</td><td>指定されたウィンドウのクローズフラグをチェックする。</td></tr><tr><td>glfwSetWindowShouldClose</td><td>指定したウィンドウのクローズフラグを設定する。</td></tr><tr><td>glfwSetWindowTitle</td><td>指定したウィンドウのタイトルを設定します。</td></tr><tr><td>glfwSetWindowIcon</td><td>指定したウィンドウのアイコンを設定します。</td></tr><tr><td>glfwGetWindowPos</td><td>指定されたウィンドウのコンテンツ領域の位置を取得します。</td></tr><tr><td>glfwSetWindowPos</td><td>指定したウィンドウのコンテンツエリアの位置を設定します。</td></tr><tr><td>glfwGetWindowSize</td><td>指定されたウィンドウのコンテンツ領域のサイズを取得します。</td></tr><tr><td>glfwSetWindowSizeLimits</td><td>指定したウィンドウのサイズ制限を設定する。</td></tr><tr><td>glfwSetWindowAspectRatio</td><td>指定したウィンドウのアスペクト比を設定する。</td></tr><tr><td>glfwSetWindowSize</td><td>指定されたウィンドウのコンテンツ領域のサイズを設定します。</td></tr><tr><td>glfwGetFramebufferSize</td><td>指定されたウィンドウのフレームバッファのサイズを取得します。</td></tr><tr><td>glfwGetWindowFrameSize</td><td>ウィンドウの枠のサイズを取得します。</td></tr><tr><td>glfwGetWindowContentScale</td><td>指定したウィンドウのコンテンツスケールを取得します。</td></tr><tr><td>glfwGetWindowOpacity</td><td>ウィンドウ全体の不透明度を返します。</td></tr><tr><td>glfwSetWindowOpacity</td><td>ウィンドウ全体の不透明度を設定する。</td></tr><tr><td>glfwIconifyWindow</td><td>指定したウィンドウをアイコン化する。</td></tr><tr><td>glfwRestoreWindow</td><td>指定したウィンドウを復元する。</td></tr><tr><td>glfwMaximizeWindow</td><td>指定したウィンドウを最大化する。</td></tr><tr><td>glfwShowWindow</td><td>指定したウィンドウを表示する。</td></tr><tr><td>glfwHideWindow</td><td>指定したウィンドウを非表示にします。</td></tr><tr><td>glfwFocusWindow</td><td>指定したウィンドウを前面に出し、入力フォーカスを設定する。</td></tr><tr><td>glfwRequestWindowAttention</td><td>指定されたウィンドウにユーザーの注意を促す。</td></tr><tr><td>glfwGetWindowMonitor</td><td>ウィンドウがフルスクリーンモードで使用するモニターを返します。</td></tr><tr><td>glfwSetWindowMonitor</td><td>ウィンドウのモード、モニター、ビデオモード、配置を設定する。</td></tr><tr><td>glfwGetWindowAttrib</td><td>指定されたウィンドウの属性を返します。</td></tr><tr><td>glfwSetWindowAttrib</td><td>指定したウィンドウの属性を設定します。</td></tr><tr><td>glfwSetWindowUserPointer</td><td>指定したウィンドウのユーザーポインターを設定します。</td></tr><tr><td>glfwGetWindowUserPointer</td><td>指定されたウィンドウのユーザーポインタを返します。</td></tr><tr><td>glfwSetWindowPosCallback</td><td>指定したウィンドウの位置コールバックを設定します。</td></tr><tr><td>glfwSetWindowSizeCallback</td><td>指定したウィンドウのサイズ・コールバックを設定します。</td></tr><tr><td>glfwSetWindowCloseCallback</td><td>指定したウィンドウのクローズ・コールバックを設定します。</td></tr><tr><td>glfwSetWindowRefreshCallback</td><td>指定したウィンドウのリフレッシュ・コールバックを設定します。</td></tr><tr><td>glfwSetWindowFocusCallback</td><td>指定したウィンドウのフォーカス・コールバックを設定します。</td></tr><tr><td>glfwSetWindowIconifyCallback</td><td>指定したウィンドウのiconifyコールバックを設定します。</td></tr><tr><td>glfwSetWindowMaximizeCallback</td><td>指定したウィンドウの最大化コールバックを設定します。</td></tr><tr><td>glfwSetFramebufferSizeCallback</td><td>指定したウィンドウのフレームバッファ・リサイズ・コールバックを設定します。</td></tr><tr><td>glfwSetWindowContentScaleCallback</td><td>指定したウィンドウのコンテンツ・スケールのコールバックを設定します。</td></tr><tr><td>glfwPollEvents</td><td>保留中のすべてのイベントを処理する。</td></tr><tr><td>glfwWaitEvents</td><td>イベントがキューに入るまで待機し、イベントを処理する。</td></tr><tr><td>glfwWaitEventsTimeout</td><td>イベントがキューに入るまでタイムアウトで待機し、イベントを処理する。</td></tr><tr><td>glfwPostEmptyEvent</td><td>空のイベントをイベントキューに投稿する。</td></tr><tr><td>glfwSwapBuffers</td><td>指定したウィンドウのフロントバッファとバックバッファを入れ替える。</td></tr></tbody></table><details class="details custom-block"><summary><code>glfwDefaultWindowHints()</code></summary><p>この関数は、すべてのウィンドウヒントをデフォルト値にリセットする。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwDefaultWindowHints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window creation hints</li><li>glfwWindowHint</li><li>glfwWindowHintString</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwWindowHint()</code></summary><p>この関数は、次に glfwCreateWindow を呼び出すときのヒントを設定する。一度設定されたヒントは、この関数または glfwDefaultWindowHints の呼び出しによって変更されるか、ライブラリが終了するまで、その値を保持します。</p><p>この関数で設定できるヒントは整数値のみです。文字列値のヒントは glfwWindowHintString で設定します。</p><p>この関数は、指定されたヒント値が有効かどうかをチェックしません。ヒントに無効な値を設定した場合、代わりに次の glfwCreateWindow 呼び出しで報告されます。</p><p>いくつかのヒントはプラットフォーム固有です。これらはどのプラットフォームでも設定できますが、特定のプラットフォームにのみ影響します。他のプラットフォームでは無視されます。これらのヒントを設定するのに、プラットフォーム固有のヘッダーや関数は必要ありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwWindowHint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] hint</code>: 設定するウィンドウのヒント。</li><li><code>[in] value</code>: ウィンドウヒントの新しい値。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window creation hints</li><li>glfwWindowHintString</li><li>glfwDefaultWindowHints</li></ul><p><strong>追加</strong>:</p><p>バージョン 3.0 で追加されました。glfwOpenWindowHint を置き換えます。</p></details><details class="details custom-block"><summary><code>glfwWindowHintString()</code></summary><p>この関数は、次に glfwCreateWindow を呼び出すときのヒントを設定する。一度設定されたヒントは、この関数または glfwDefaultWindowHints の呼び出しによって変更されるか、ライブラリが終了するまで、その値を保持します。</p><p>この関数で設定できるヒントは文字列型のみです。整数値のヒントは glfwWindowHint で設定します。</p><p>この関数は、指定されたヒント値が有効かどうかをチェックしません。ヒントに無効な値を設定した場合、代わりに次の glfwCreateWindow 呼び出しで報告されます。</p><p>いくつかのヒントはプラットフォーム固有です。これらはどのプラットフォームでも設定できますが、特定のプラットフォームにのみ影響します。他のプラットフォームでは無視されます。これらのヒントを設定するのに、プラットフォーム固有のヘッダーや関数は必要ありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwWindowHintString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] hint</code>: 設定するウィンドウのヒント。</li><li><code>[in] value</code>: ウィンドウヒントの新しい値。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>ポインタの寿命</strong>:</p><p>指定された文字列は、この関数が戻る前にコピーされる。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window creation hints</li><li>glfwWindowHint</li><li>glfwDefaultWindowHints</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwCreateWindow()</code></summary><p>この関数はウィンドウとそれに関連するOpenGLまたはOpenGL ESコンテキストを作成する。ウィンドウとそのコンテキストの作成方法を制御するオプションのほとんどは、ウィンドウヒントで指定されます。</p><p>作成に成功しても、現在のコンテキストは変更されない。新しく作成されたコンテキストを使用する前に、それを現在のコンテキストにする必要があります。shareパラメータについては、コンテキストオブジェクトの共有を参照してください。</p><p>すべてのパラメータとヒントがハード制約ではないため、作成されるウィンドウ、フレームバッファ、コンテキストは要求したものと異なる場合があります。これにはウィンドウのサイズ、特にフルスクリーンウィンドウのサイズも含まれます。作成されたウィンドウ、フレームバッファ、コンテキストの実際の属性を問い合わせるには、glfwGetWindowAttrib、glfwGetWindowSize、glfwGetFramebufferSizeを参照してください。</p><p>フルスクリーンウィンドウを作成するには、ウィンドウがカバーするモニタを指定する必要がある。モニターが指定されない場合、ウィンドウはウィンドウモードになります。ユーザーが特定のモニターを選択する方法がない限り、プライマリーモニターを選択することをお勧めします。接続されているモニターを問い合わせる方法については、モニターの取得を参照してください。</p><p>フルスクリーンウィンドウの場合、指定されたサイズはウィンドウの希望するビデオモードの解像度になります。フルスクリーンウィンドウがアイコン化されていない限り、希望するビデオモードに最も近いサポートされているビデオモードが指定されたモニターに設定されます。ウィンドウ付きフルスクリーンウィンドウやボーダーレスフルスクリーンウィンドウと呼ばれるウィンドウの作成を含む、フルスクリーンウィンドウに関する情報は、「ウィンドウ付きフルスクリーン」ウィンドウを参照してください。</p><p>ウィンドウを作成したら、glfwSetWindowMonitorでウィンドウモードとフルスクリーンモードを切り替えることができます。これはOpenGLやOpenGL ESのコンテキストには影響しません。</p><p>デフォルトでは、新しく作成されたウィンドウはウィンドウシステムが推奨する配置を使用します。特定の位置にウィンドウを作成するには、GLFW_VISIBLEウィンドウヒントを使用してウィンドウを最初は非表示にし、その位置を設定してから表示します。</p><p>少なくとも1つのフルスクリーンウィンドウがアイコン化されていない限り、スクリーンセーバーの起動は禁止される。</p><p>ウィンドウシステムはウィンドウサイズに制限を設けています。非常に大きいまたは非常に小さいウィンドウサイズは、作成時にウィンドウシステムによって上書きされる可能性があります。作成後に実際のサイズを確認してください。</p><p>スワップ間隔はウィンドウ作成中には設定されず、ドライバの設定やデフォルトによって初期値が異なる場合があります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwCreateWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> share</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] width</code>: ウィンドウの幅をスクリーン座標で指定する。これはゼロより大きくなければならない。</li><li><code>[in] height</code>: ウィンドウの高さをスクリーン座標で指定する。これはゼロより大きくなければならない。</li><li><code>[in] title</code>: UTF-8でエンコードされた最初のウィンドウタイトル。</li><li><code>[in] monitor</code>: フルスクリーンモードで使用するモニター、またはウィンドウモードで使用するNULL。</li><li><code>[in] share</code>: リソースを共有するコンテキストのウィンドウ、またはリソースを共有しない場合はNULL。</li></ul><p><strong>戻り値</strong>:</p><p>作成されたウィンドウのハンドル、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED, GLFW_INVALID_ENUM, GLFW_INVALID_VALUE, GLFW_API_UNAVAILABLE, GLFW_VERSION_UNAVAILABLE, GLFW_FORMAT_UNAVAILABLE, GLFW_PLATFORM_ERROR です。</p><p><strong>備考</strong>:</p><ul><li>Windows: Microsoft GDIソフトウェアOpenGL実装だけが利用可能な場合、ウィンドウの作成に失敗します。</li><li>Windows: 実行ファイルにGLFW_ICONという名前のアイコンリソースがあれば、それがウィンドウの初期アイコンとして設定される。そのようなアイコンがない場合、IDI_APPLICATIONアイコンが代わりに使用されます。別のアイコンを設定するには、glfwSetWindowIconを参照してください。</li><li>Windows: リソースを共有するコンテキストは、他のどのスレッドにも存在してはならない。</li><li>macOS: OSはOpenGLバージョン3.2以降の前方互換性のあるコアプロファイルコンテキストのみをサポートしています。バージョン3.2以降のOpenGLコンテキストを作成する前に、それに応じてGLFW_OPENGL_FORWARD_COMPATとGLFW_OPENGL_PROFILEヒントを設定する必要があります。OpenGL 3.0と3.1のコンテキストはmacOSでは全くサポートされていません。</li><li>macOS: GLFWウィンドウはドキュメントウィンドウではないのでアイコンはありませんが、ドックアイコンはアプリケーションバンドルのアイコンと同じになります。バンドルに関する情報は、Mac Developer Library の Bundle Programming Guide を参照してください。</li><li>macOS: ウィンドウが最初に作られるとき、メニューバーが作られます。GLFWがMainMenu.nibを見つけた場合、それが読み込まれ、メニューバーが含まれていると仮定されます。そうでない場合は、Hide、Quit、Aboutのような一般的なコマンドを含む最小限のメニューバーが手動で作成されます。Aboutエントリは、アプリケーションのバンドルからの情報を含む最小限のaboutダイアログを開きます。メニューバーの作成はGLFW_COCOA_MENUBAR initヒントで完全に無効にすることができる。</li><li>macOS: OS X 10.10以降では、GLFW_COCOA_RETINA_FRAMEBUFFERヒントがGLFW_TRUEで、アプリケーションバンドルのInfo.plistでNSHighResolutionCapableキーが有効になっていない限り、ウィンドウフレームはRetinaディスプレイ上でフル解像度でレンダリングされません。詳しくは、Mac Developer LibraryのHigh Resolution Guidelines for OS Xを参照してください。GLFWのテストプログラムとサンプルプログラムでは、このためにカスタムInfo.plistテンプレートを使用しています。このテンプレートはソースツリーのCMake/MacOSXBundleInfo.plist.inにあります。</li><li>macOS: GLFW_COCOA_FRAME_NAMEでフレームの自動保存を有効にする場合、指定されたウィンドウサイズと位置は、以前に保存された値で上書きされることがあります。</li><li>X11: ウィンドウ・マネージャーによっては、最初に隠されたウィンドウの配置を尊重しないものもあります。</li><li>X11: X11の非同期的な性質により、ウィンドウが要求された状態に到達するまでに時間がかかることがあります。つまり、ウィンドウの作成後、最終的なサイズや位置、その他の属性を直接問い合わせることができない可能性があります。</li><li>X11: WM_CLASSウィンドウプロパティのクラス部分は、デフォルトでこの関数に渡されたウィンドウタイトルに設定される。インスタンス部分は、環境変数RESOURCE_NAMEが存在し、空でなければ、その内容を使用するか、ウィンドウタイトルにフォールバックする。これを上書きするには、GLFW_X11_CLASS_NAME と GLFW_X11_INSTANCE_NAME ウィンドウヒントを設定する。</li><li>Wayland: コンポジターはウィンドウを適切に装飾するために、GLFW 用の xdg-decoration プロトコルを実装する必要があります。このプロトコルがサポートされていない場合、またはコンポジターがクライアントサイドの装飾を好む場合は、wp_viewporter プロトコルを使用して非常にシンプルなフォールバックフレームが描画されます。コンポジターは、例えばキーバインドメカニズムを使用して、クローズ、最大化、フルスクリーンイベントを発行することができます。これらのプロトコルがサポートされていない場合、ウィンドウは装飾されません。</li><li>Wayland: フルスクリーンウィンドウは、要求されたサイズやリフレッシュレートに関係なく、モードを変更しようとしません。</li><li>Wayland: スクリーンセーバーの禁止には、アイドル・インヒビット・プロトコルがユーザーのコンポジターに実装されている必要がある。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window creation</li><li>glfwDestroyWindow</li></ul><p><strong>追加</strong>:</p><p>バージョン 3.0 で追加されました。glfwOpenWindow を置き換える。</p></details><details class="details custom-block"><summary><code>glfwDestroyWindow()</code></summary><p>この関数は、指定されたウィンドウとそのコンテキストを破棄する。この関数を呼び出すと、そのウィンドウに対してそれ以降のコールバックは呼び出されません。</p><p>指定されたウィンドウのコンテキストがメインスレッドにある場合は、破棄される前に切り離されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwDestroyWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 破棄するウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>注釈</strong>:</p><p>この関数が呼び出されたとき、指定されたウィンドウのコンテキストは、他のスレッド上でカレントであってはならない。</p><p><strong>リエントランシー</strong>:</p><p>この関数はコールバックから呼んではならない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window creation</li><li>glfwCreateWindow</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。glfwCloseWindow を置き換える。</p></details><details class="details custom-block"><summary><code>glfwWindowShouldClose()</code></summary><p>この関数は、指定されたウィンドウのクローズフラグの値を返す。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwWindowShouldClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li></ul><p><strong>戻り値</strong>:</p><p>クローズフラグの値。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>参照</strong>:</p><ul><li>Window closing and close flag</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowShouldClose()</code></summary><p>この関数は、指定されたウィンドウのクローズフラグの値を設定する。これは、ユーザがウィンドウを閉じようとするのを上書きしたり、ウィンドウを閉じるように合図したりするために使用できます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowShouldClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: フラグを変更するウィンドウ。</li><li><code>[in] value</code>: 新しい値。</li></ul><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>参照</strong>:</p><ul><li>Window closing and close flag</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowTitle()</code></summary><p>この関数は、指定されたウィンドウのタイトルを UTF-8 でエンコードして設定する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: タイトルを変更するウィンドウ。</li><li><code>[in] title</code>: UTF-8でエンコードされたウィンドウのタイトル。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>macOS: ウィンドウのタイトルは、次にイベントを処理するまで更新されない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window title</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowIcon()</code></summary><p>この関数は、指定されたウィンドウのアイコンを設定する。候補画像の配列が渡された場合、システムが希望するサイズのもの、 あるいはそれに最も近いものが選択されます。画像が指定されない場合、ウィンドウはデフォルトのアイコンに戻ります。</p><p>ピクセルは32ビット、リトルエンディアン、非前乗算RGBA、つまり各チャンネル8ビットで、赤チャンネルが先。 これらは、左上から順番に詰め込まれた列として正規に並べられている。</p><p>希望する画像サイズは、プラットフォームやシステム設定によって異なります。選択された画像は必要に応じて拡大縮小されます。最適なサイズは16x16、32x32、48x48です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowIcon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWimage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: アイコンを設定するウィンドウ。</li><li><code>[in] count</code>: 指定した配列に含まれる画像の数。デフォルトのウィンドウアイコンに戻す場合は 0。</li><li><code>[in] images</code>: アイコンを作成する画像。countが0の場合は無視される。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_VALUE、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>指定された画像データは、この関数が戻る前にコピーされる。</p><p><strong>備考</strong>:</p><ul><li>macOS: GLFWウィンドウはドキュメントウィンドウではないのでアイコンがなく、この関数は何もしません。ドックアイコンはアプリケーションバンドルのアイコンと同じになります。バンドルに関する情報は、Mac Developer Library の Bundle Programming Guide を参照してください。</li><li>Wayland: アイコンを変更する既存のプロトコルはないので、ウィンドウはアプリケーションのデスクトップファイルで定義されたものを継承します。この関数は常にGLFW_PLATFORM_ERRORを返します。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window icon</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowPos()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域の左上隅の位置をスクリーン座標で取得する。</p><p>position 引数のいずれかまたはすべては NULL であってもよい。エラーが発生した場合、NULL 以外の位置引数はすべて 0 に設定されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li><li><code>[out] xpos</code>: コンテンツ領域の左上隅のx座標を格納する場所、またはNULL。</li><li><code>[out] ypos</code>: コンテンツ領域の左上隅のy座標を格納する場所、またはNULL。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><ul><li>Wayland: アプリケーションがウィンドウのグローバルポジションを取得する方法はありません。この関数は常にGLFW_PLATFORM_ERRORを出します。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window position</li><li>glfwSetWindowPos</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowPos()</code></summary><p>この関数は、指定されたウィンドウモードのウィンドウのコンテント領域の左上隅の位置をスクリーン座標で設定する。ウィンドウがフルスクリーンウィンドウの場合、この関数は何もしません。</p><p>ユーザを混乱させたり困らせたりするので、よほどの理由がない限り、すでに表示されているウィンドウを移動するためにこの関数を使用しないでください。</p><p>ウィンドウマネージャは許可される位置に制限を加えるかもしれません。GLFWはこれらの制限を上書きすることはできませんし、またそうすべきではありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li><li><code>[in] xpos</code>: コンテンツ領域の左上隅のx座標。</li><li><code>[in] ypos</code>: コンテンツ領域の左上隅のy座標。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><ul><li>Wayland: この関数は常にGLFW_PLATFORM_ERRORを出します。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window position</li><li>glfwGetWindowPos</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowSize()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域のサイズをスクリーン座標で取得する。ウィンドウのフレームバッファのサイズをピクセル単位で取得したい場合は、 glfwGetFramebufferSizeを参照してください。</p><p>size引数のいずれか、またはすべてがNULLであってもよい。エラーが発生した場合、NULLでないsize引数はすべて0に設定される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 取得するウィンドウのサイズ。</li><li><code>[out] width</code>: コンテンツ領域の幅をスクリーン座標で格納する場所、またはNULL。</li><li><code>[out] height</code>: コンテンツ領域の高さをスクリーン座標で格納する場所、またはNULL。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window size</li><li>glfwSetWindowSize</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowSizeLimits()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域のサイズ制限を設定する。ウィンドウがフルスクリーンの場合、サイズ制限はウィンドウ化されて初めて有効になる。ウィンドウがリサイズ可能でない場合、この関数は何もしません。</p><p>サイズ制限は、ウィンドウモードのウィンドウに即座に適用され、リサイズされる可能性があります。</p><p>最大寸法は最小寸法以上でなければならず、すべて0以上でなければならない。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowSizeLimits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> minwidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> minheight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> maxwidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> maxheight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 制限を設定するウィンドウ。</li><li><code>[in] minwidth</code>: コンテンツ領域の最小幅（スクリーン座標）、またはGLFW_DONT_CARE。</li><li><code>[in] minheight</code>: コンテンツ領域の最小の高さ（スクリーン座標）、またはGLFW_DONT_CARE。</li><li><code>[in] maxwidth</code>: コンテンツ領域のスクリーン座標での最大幅、またはGLFW_DONT_CARE。</li><li><code>[in] maxheight</code>: コンテンツ領域のスクリーン座標での最大の高さ、またはGLFW_DONT_CARE。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_VALUE、GLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>サイズ制限とアスペクト比が競合するように設定した場合、結果は不定です。</p><ul><li>Wayland: サイズ制限は、ユーザーまたはコンポジターによって実際にウィンドウのサイズが変更されるまで適用されません。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window size limits</li><li>glfwSetWindowAspectRatio</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowAspectRatio()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域に必要なアスペクト比を設定する。ウィンドウがフルスクリーンの場合、アスペクト比はウィンドウ化されて初めて有効になる。ウィンドウがリサイズ可能でない場合、この関数は何もしません。</p><p>アスペクト比は分子と分母で指定し、両方の値が0より大きくなければならない。例えば、一般的な16:9のアスペクト比は、それぞれ16と9と指定します。</p><p>分子と分母を GLFW_DONT_CARE に設定すると、アスペクト比の制限は無効になる。</p><p>アスペクト比はウィンドウモードのウィンドウに即座に適用され、リサイズされることがある。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowAspectRatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> numer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> denom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 制限を設定するウィンドウ。</li><li><code>[in] numer</code>: 希望するアスペクト比の分子、またはGLFW_DONT_CARE。</li><li><code>[in] denom</code>: 希望するアスペクト比の分母、またはGLFW_DONT_CARE。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_VALUE、GLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>サイズ制限とアスペクト比が競合するように設定した場合、結果は不定です。</p><ul><li>Wayland: アスペクト比は、ユーザーまたはコンポジターによってウィンドウのサイズが実際に変更されるまで適用されません。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window size limits</li><li>glfwSetWindowSizeLimits</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowSize()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域のサイズをスクリーン座標で設定する。</p><p>フルスクリーンウィンドウの場合、この関数は希望するビデオモードの解像度を更新し、ウィンドウのコンテキストに影響を与えることなく、最も近いビデオモードに切り替えます。コンテキストに影響がないため、フレームバッファのビット深度は変更されません。</p><p>解像度だけでなく、希望するビデオモードのリフレッシュレートも更新したい場合は、glfwSetWindowMonitorを参照してください。</p><p>ウィンドウマネージャは許可されるサイズに制限を加えるかもしれません。GLFWはこれらの制限を上書きすることはできませんし、また、上書きすべきではありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: リサイズするウィンドウ。</li><li><code>[in] width</code>: ウィンドウの内容領域の幅をスクリーン座標で指定する。</li><li><code>[in] height</code>: ウィンドウの内容領域の高さをスクリーン座標で指定する。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><ul><li>Wayland: フルスクリーンウィンドウは、要求されたサイズに関係なく、モードを変更しようとしない。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window size</li><li>glfwGetWindowSize</li><li>glfwSetWindowMonitor</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwGetFramebufferSize()</code></summary><p>この関数は、指定されたウィンドウのフレームバッファのサイズをピクセル単位で取得する。ウィンドウのサイズをスクリーン座標で取得したい場合は、 glfwGetWindowSizeを参照してください。</p><p>size引数のいずれか、またはすべてがNULLであってもよい。エラーが発生した場合、NULLでないsize引数はすべて0に設定されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetFramebufferSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: フレームバッファを問い合わせるウィンドウ。</li><li><code>[out] width</code>: フレームバッファの幅をピクセル単位で格納する場所、またはNULL。</li><li><code>[out] height</code>: フレームバッファの高さをピクセル単位で格納する場所、またはNULL。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Framebuffer size</li><li>glfwSetFramebufferSizeCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowFrameSize()</code></summary><p>この関数は、指定されたウィンドウのフレームの各辺のサイズをスクリーン座標で取得する。このサイズには、ウィンドウにタイトルバーがある場合はタイトルバーも含まれる。フレームのサイズは、それを作成するために使用されるウィンドウ関連のヒントによって異なる場合があります。</p><p>この関数は、特定の座標軸に沿ったオフセットではなく、各ウィンドウ枠の辺のサイズを取得するため、取得される値は常にゼロまたは正の値になります。</p><p>size引数のいずれか、またはすべてがNULLであってもよい。エラーが発生した場合、NULLでないsize引数はすべて0に設定されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowFrameSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: フレームサイズを問い合わせるウィンドウ。</li><li><code>[out] left</code>: ウィンドウ枠の左端のサイズをスクリーン座標で格納する場所、またはNULL。</li><li><code>[out] top</code>: ウィンドウ枠の上端のサイズをスクリーン座標で格納する場所、またはNULL。</li><li><code>[out] right</code>: ウィンドウ枠の右端のサイズをスクリーン座標で格納する場所、またはNULL。</li><li><code>[out] bottom</code>: ウィンドウ枠の下端のサイズをスクリーン座標で格納する場所、またはNULL。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window size</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowContentScale()</code></summary><p>この関数は、指定されたウィンドウのコンテンツスケールを取得します。コンテンツスケールは、現在のDPIとプラットフォームのデフォルトDPIの比率です。これはテキストやUI要素にとって特に重要です。これによってスケーリングされたUIのピクセル寸法があなたのマシンで適切に見えるなら、他のマシンではDPIやスケーリング設定に関係なく、妥当なサイズで表示されるはずです。これは、システムのDPIとスケーリング設定がある程度正しいことに依存します。</p><p>各モニターが独自のコンテンツ・スケールを持つことができるシステムでは、ウィンドウのコンテンツ・スケールは、システムがウィンドウをどのモニター上にあるとみなすかに依存します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowContentScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> yscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li><li><code>[out] xscale</code>: X軸の内容スケールを格納する場所、または NULL。</li><li><code>[out] yscale</code>: Y軸の内容スケールを格納する場所、または NULL。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window content scale</li><li>glfwSetWindowContentScaleCallback</li><li>glfwGetMonitorContentScale</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowOpacity()</code></summary><p>この関数は、装飾を含むウィンドウの不透明度を返します。</p><p>不透明度 (またはアルファ値) は 0 から 1 までの正の整数で、 0 は完全に透明、 1 は完全に不透明です。システムがウィンドウ全体の透過をサポートしていない場合、この関数は常に1を返します。</p><p>新しく作成されたウィンドウの不透明度の初期値は1です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowOpacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li></ul><p><strong>戻り値</strong>:</p><p>指定したウィンドウの不透明度。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window transparency</li><li>glfwSetWindowOpacity</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowOpacity()</code></summary><p>この関数は、装飾を含むウィンドウの不透明度を設定する。</p><p>不透明度 (またはアルファ値) は 0 から 1 までの正の整数で、0 は完全に透明、1 は完全に不透明です。</p><p>新しく作成されたウィンドウの初期値は 1 です。</p><p>フレームバッファの透明度を使用して作成されたウィンドウは、ウィンドウ全体の透明度を使用することはできません。この場合の結果は未定義です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowOpacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 不透明度を設定するウィンドウ。</li><li><code>[in] opacity</code>: 指定されたウィンドウの希望の不透明度。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window transparency</li><li>glfwGetWindowOpacity</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwIconifyWindow()</code></summary><p>この関数は、指定されたウィンドウが以前に復元されていた場合、そのウィンドウをアイコン化（最小化）する。ウィンドウが既にアイコン化されている場合、この関数は何もしない。</p><p>指定されたウィンドウがフルスクリーンウィンドウの場合、 GLFWはモニタの元のビデオモードを復元する。ウィンドウが復元されると、ウィンドウの希望するビデオモードが再び設定される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwIconifyWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: アイコン化するウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window iconification</li><li>glfwRestoreWindow</li><li>glfwMaximizeWindow</li></ul><p><strong>追加</strong>:</p><p>バージョン2.1で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwRestoreWindow()</code></summary><p>この関数は、指定されたウィンドウが以前にアイコン化（最小化）または最大化されていた場合に、そのウィンドウを復元する。ウィンドウが既に復元されている場合、この関数は何もしません。</p><p>指定されたウィンドウがアイコン化されたフルスクリーンウィンドウである場合、 ウィンドウが復元されるときに、そのモニタに対して希望するビデオモードが再び設定される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwRestoreWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 復元するウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window iconification</li><li>glfwIconifyWindow</li><li>glfwMaximizeWindow</li></ul><p><strong>追加</strong>:</p><p>バージョン2.1で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwMaximizeWindow()</code></summary><p>この関数は、指定されたウィンドウが以前に最大化されていなかった場合に、そのウィンドウを最大化する。ウィンドウが既に最大化されている場合、この関数は何もしない。</p><p>指定されたウィンドウがフルスクリーンウィンドウの場合、この関数は何もしない。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwMaximizeWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 最大化するウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Window iconification</li><li>glfwIconifyWindow</li><li>glfwRestoreWindow</li></ul><p><strong>追加</strong>:</p><p>GLFW 3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwShowWindow()</code></summary><p>この関数は、指定されたウィンドウが以前に非表示であった場合に、そのウィンドウを表示するようにする。ウィンドウがすでに表示されているか、フルスクリーンモードになっている場合、この関数は何もしません。</p><p>デフォルトでは、ウィンドウモードのウィンドウは表示されているときにフォーカスされます。 新規に作成されたすべてのウィンドウのこの動作を変更するには、GLFW_FOCUS_ON_SHOW ウィンドウヒントを設定するか、既存のウィンドウの動作を glfwSetWindowAttrib で変更します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwShowWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 可視化するウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><ul><li>Wayland: Waylandはデスクトップの各フレームが完全であることを望んでいるため、この関数はウィンドウをすぐには表示しない。その代わり、この呼び出しの次にウィンドウのフレームバッファが更新されたときに見えるようになります。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window visibility</li><li>glfwHideWindow</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwHideWindow()</code></summary><p>この関数は、指定されたウィンドウが以前に表示されていた場合、そのウィンドウを非表示にする。ウィンドウがすでに非表示になっているか、フルスクリーンモードになっている場合、この関数は何もしません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwHideWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 非表示にするウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window visibility</li><li>glfwShowWindow</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwFocusWindow()</code></summary><p>この関数は、指定されたウィンドウを前面に出し、入力フォーカスを設定する。ウィンドウはすでに表示されていて、アイコン化されていない必要があります。</p><p>デフォルトでは、ウィンドウモードとフルスクリーンモードの両方のウィンドウは、最初に作成されたときにフォーカスされます。この動作を無効にするにはGLFW_FOCUSEDを設定します。</p><p>また、デフォルトでは、ウィンドウモードのウィンドウは glfwShowWindow で表示されたときにフォーカスされる。この動作を無効にするには、GLFW_FOCUS_ON_SHOWを設定する。</p><p>この関数を使って他のアプリケーションからフォーカスを奪わないでください。フォーカスを奪うことは非常に邪魔になります。</p><p>ユーザーの注意を引くためのあまり破壊的でない方法については、注意要求を参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwFocusWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 入力フォーカスを与えるウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><ul><li>Wayland: アプリケーションがウィンドウを前面に出すことはできない。この関数は常にGLFW_PLATFORM_ERRORを出します。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window input focus</li><li>Window attention request</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwRequestWindowAttention()</code></summary><p>この関数は、指定されたウィンドウに対するユーザーの注意を要求する。これがサポートされていないプラットフォームでは、アプリケーション全体へのアテンションが要求される。</p><p>通常、ウィンドウまたはアプリケーションにフォーカスを当てることによって、ユーザーが注意を与えたら、システムは自動的に要求を終了します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwRequestWindowAttention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 注意を要求するウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><ul><li>macOS: 特定のウィンドウではなく、アプリケーション全体に注意を払うことが求められる。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window attention request</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowMonitor()</code></summary><p>この関数は、指定されたウィンドウが全画面表示されているモニタのハンドルを返します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li></ul><p><strong>戻り値</strong>:</p><p>ウィンドウがウィンドウモードの場合、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window monitor</li><li>glfwSetWindowMonitor</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowMonitor()</code></summary><p>この関数は、ウィンドウがフルスクリーンモードで使用するモニタを設定するか、モニタがNULLの場合はウィンドウモードにする。</p><p>モニタを設定するとき、この関数は希望するビデオモードの幅、高さ、リフレッシュレートを更新し、それに最も近いビデオモードに切り替えます。モニターを設定する場合、ウィンドウの位置は無視される。</p><p>モニタがNULLの場合、位置、幅、高さはウィンドウのコンテンツ領域を配置するために使用される。モニターが指定されていない場合、リフレッシュレートは無視される。</p><p>フルスクリーンウィンドウの解像度またはウィンドウモードウィンドウのサイズのみを更新したい場合は、 glfwSetWindowSizeを参照してください。</p><p>ウィンドウがフルスクリーンからウィンドウモードに遷移するとき、この関数は、装飾、フローティング、サイズ変更可能、サイズやアスペクト比の制限など、以前のウィンドウ設定を復元します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> refreshRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: モニター、サイズ、ビデオモードを設定するウィンドウ。</li><li><code>[in] monitor</code>: 希望するモニター、またはウィンドウモードに設定する場合は NULL。</li><li><code>[in] xpos</code>: コンテンツ領域の左上隅のX座標。</li><li><code>[in] ypos</code>: コンテンツ領域の左上隅のy座標。</li><li><code>[in] width</code>: コンテンツエリアまたはビデオモードの、スクリーン座標での希望の位置。</li><li><code>[in] height</code>: コンテンツエリアまたはビデオモードの高さを、スクリーン座標で指定する。</li><li><code>[in] refreshRate</code>: ビデオモードの希望リフレッシュレート（Hz）、またはGLFW_DONT_CARE。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>OpenGLやOpenGL ESのコンテキストが破壊されたり、サイズ変更やモード切り替えの影響を受けたりすることはありませんが、フレームバッファのサイズが変更された場合は、ビューポートを更新する必要があるかもしれません。</p><ul><li>Wayland: アプリケーションがこのプロパティを設定する方法がないため、希望のウィンドウ位置は無視される。</li><li>Wayland: ウィンドウをフルスクリーンに設定すると、要求されたサイズやリフレッシュ・レートに関係なく、モードを変更しようとしません。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window monitor</li><li>Full screen windows</li><li>glfwGetWindowMonitor</li><li>glfwSetWindowSize</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowAttrib()</code></summary><p>この関数は、指定されたウィンドウまたはそのOpenGLまたはOpenGL ESコンテキストの属性の値を返します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowAttrib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> attrib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li><li><code>[in] attrib</code>: 値を返すウィンドウ属性。</li></ul><p><strong>戻り値</strong>:</p><p>属性の値。エラーが発生した場合はゼロ。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>フレームバッファ関連のヒントはウィンドウ属性ではありません。詳しくはフレームバッファ関連属性を参照してください。</p><p>ゼロはウィンドウやコンテキストに関連する多くの属性で有効な値なので、ゼロの戻り値をエラーの兆候として使うことはできない。しかし、有効な引数が渡され、ライブラリが初期化されている限り、この関数が失敗することはありません。</p><ul><li>Wayland: そのためGLFW_ICONIFIEDは常にGLFW_FALSEを返します。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window attributes</li><li>glfwSetWindowAttrib</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加されました。glfwGetWindowParamとglfwGetGLVersionを置き換える。</p></details><details class="details custom-block"><summary><code>glfwSetWindowAttrib()</code></summary><p>この関数は、指定されたウィンドウの属性値を設定します。</p><p>サポートされている属性は GLFW_DECORATED, GLFW_RESIZABLE, GLFW_FLOATING, GLFW_AUTO_ICONIFY, GLFW_FOCUS_ON_SHOW です。</p><p>これらの属性のいくつかはフルスクリーンウィンドウでは無視されます。新しい値は、ウィンドウが後でウィンドウ化された場合に有効になります。</p><p>これらの属性のいくつかはウィンドウ・モードのウィンドウでは無視される。新しい値は、後にウィンドウがフルスクリーンになった場合に有効になります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowAttrib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> attrib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 属性を設定するウィンドウ。</li><li><code>[in] attrib</code>: サポートされているウィンドウ属性。</li><li><code>[in] value</code>: GLFW_TRUEまたはGLFW_FALSE。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_INVALID_VALUE、GLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>glfwGetWindowAttribを呼び出すと、たとえその値がウィンドウの現在のモードで無視されたとしても、常に最新の値が返される。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window attributes</li><li>glfwGetWindowAttrib</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowUserPointer()</code></summary><p>この関数は、指定されたウィンドウのユーザー定義ポインターを設定する。現在の値はウィンドウが破棄されるまで保持される。初期値は NULL です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetWindowUserPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: ポインタを設定するウィンドウ。</li><li><code>[in] pointer</code>: 新しい値。</li></ul><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>参照</strong>:</p><ul><li>User pointer</li><li>glfwGetWindowUserPointer</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWindowUserPointer()</code></summary><p>この関数は、指定されたウィンドウのユーザー定義ポインタの現在値を返す。初期値は NULL です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWindowUserPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: ポインタを返すウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>参照</strong>:</p><ul><li>User pointer</li><li>glfwSetWindowUserPointer</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowPosCallback()</code></summary><p>この関数は、指定されたウィンドウの位置コールバックを設定する。このコールバックには、ウィンドウのコンテント領域の左上隅の位置をスクリーン座標で指定します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowposfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowPosCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowposfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>備考</strong>:</p><ul><li>Wayland: アプリケーションがグローバルポジションを知る方法がないため、このコールバックが呼ばれることはない。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window position</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowSizeCallback()</code></summary><p>この関数は、指定されたウィンドウのサイズ変更時に呼び出されるサイズコールバックを設定します。コールバックには、ウィンドウのコンテンツ領域のサイズがスクリーン座標で指定されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowsizefun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowSizeCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowsizefun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window size</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメータと戻り値を追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowCloseCallback()</code></summary><p>この関数は、指定されたウィンドウのクローズ・コールバックを設定します。このコールバックは、ユーザーがタイトルバーのクローズ・ウィジェットをクリックするなどしてウィンドウを閉じようとしたときに呼び出されます。</p><p>クローズフラグはこのコールバックが呼ばれる前に設定されますが、glfwSetWindowShouldCloseでいつでも変更できます。</p><p>閉じるコールバックは glfwDestroyWindow によってトリガされません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowclosefun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowCloseCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowclosefun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>備考</strong>:</p><ul><li>macOS: アプリケーションメニューから終了を選択すると、すべてのウィンドウの終了コールバックがトリガーされます。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window closing and close flag</li></ul><p><strong>追加</strong>:</p><p>バージョン2.5で追加。GLFW 3: ウィンドウハンドルパラメータと戻り値を追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowRefreshCallback()</code></summary><p>この関数は、指定されたウィンドウのリフレッシュコールバックを設定します。このコールバックは、ウィンドウのコンテンツ領域を再描画する必要があるときに呼び出されます。</p><p>Aero、Compiz、Aqua、Waylandのような、ウィンドウの内容がオフスクリーンで保存されるコンポジット・ウィンドウ・システムでは、このコールバックは非常にまれにしか呼び出されないか、まったく呼び出されないかもしれません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowrefreshfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowRefreshCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowrefreshfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window damage and refresh</li></ul><p><strong>追加</strong>:</p><p>バージョン2.5で追加。GLFW 3: ウィンドウハンドルパラメータと戻り値を追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowFocusCallback()</code></summary><p>この関数は、指定されたウィンドウのフォーカスコールバックを設定します。このコールバックは、ウィンドウが入力フォーカスを得たり失ったりしたときに呼び出されます。</p><p>入力フォーカスを失ったウィンドウのフォーカスコールバックが呼ばれた後、押されていたすべての合成キーとマウスボタンのリリースイベントが生成されます。詳しくは、glfwSetKeyCallback と glfwSetMouseButtonCallback を参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowfocusfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowFocusCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowfocusfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> focused</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window input focus</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowIconifyCallback()</code></summary><p>この関数は、指定されたウィンドウのアイコン化コールバックを設定します。このコールバックは、ウィンドウがアイコン化されたときや復元されたときに呼び出されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowiconifyfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowIconifyCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowiconifyfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> iconified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>備考</strong>:</p><ul><li>Wayland: XDG-shell プロトコルにはアイコン化のイベントがないため、このコールバックが呼び出されることはありません。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window iconification</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowMaximizeCallback()</code></summary><p>この関数は、指定されたウィンドウの最大化コールバックを設定します。このコールバックは、ウィンドウが最大化または復元されたときに呼び出されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowmaximizefun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowMaximizeCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowmaximizefun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> maximized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window maximization</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwSetFramebufferSizeCallback()</code></summary><p>この関数は、指定されたウィンドウのフレームバッファがサイズ変更されたときに呼び出される、指定されたウィンドウのフレームバッファリサイズコールバックを設定します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWframebuffersizefun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetFramebufferSizeCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWframebuffersizefun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Framebuffer size</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetWindowContentScaleCallback()</code></summary><p>この関数は、指定されたウィンドウのコンテンツスケールが変更されたときに呼び出される、 指定されたウィンドウのウィンドウコンテンツスケールコールバックを設定します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWwindowcontentscalefun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetWindowContentScaleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindowcontentscalefun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> yscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータについては、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Window content scale</li><li>glfwGetWindowContentScale</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwPollEvents()</code></summary><p>この関数は、すでにイベント・キューに入っているイベントのみを処理し、すぐに戻る。イベントを処理すると、それらのイベントに関連するウィンドウ・コールバックと入力コールバックが呼び出される。</p><p>いくつかのプラットフォームでは、ウィンドウの移動、サイズ変更、メニュー操作によってイベント処理がブロックされます。これは、それらのプラットフォームでのイベント処理の設計方法によるものです。このような操作の間、必要に応じてウィンドウの内容を再描画するために、ウィンドウのリフレッシュ・コールバックを使用することができます。</p><p>設定したコールバックが、このようなイベント処理関数に応答してのみ呼び出されると思わないでください。イベントのためにポーリングすることは必要ですが、GLFWがそれ自身のコールバックを登録することを要求するウィンドウシステムは、多くのウィンドウシステム関数の呼び出しに応答してGLFWにイベントを渡すことができます。GLFWはこれらのイベントをアプリケーションのコールバックに渡してから返します。</p><p>ジョイスティック入力の動作にはイベント処理は必要ありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwPollEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>リエントランシー</strong>:</p><p>この関数はコールバックから呼んではならない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Event processing</li><li>glfwWaitEvents</li><li>glfwWaitEventsTimeout</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。</p></details><details class="details custom-block"><summary><code>glfwWaitEvents()</code></summary><p>この関数は、イベントキューで少なくとも1つのイベントが利用可能になるまで、呼び出したスレッドをスリープさせる。すなわち、キュー内のイベントが処理され、関数はすぐに戻ります。イベントを処理すると、そのイベントに関連するウィンドウと入力のコールバックが呼び出されます。</p><p>すべてのイベントがコールバックに関連付けられているわけではないので、すべてのコールバックを監視している場合でも、コールバックが呼び出されずにこの関数が戻ることがあります。</p><p>プラットフォームによっては、ウィンドウの移動、サイズ変更、メニュー操作によってイベント処理がブロックされることがあります。これは、それらのプラットフォームでのイベント処理の設計方法によるものです。このような操作の間、必要に応じてウィンドウの内容を再描画するために、ウィンドウのリフレッシュ・コールバックを使用することができます。</p><p>設定したコールバックが、このようなイベント処理関数に応答してのみ呼び出されると思わないでください。イベントのためにポーリングすることは必要ですが、GLFWがそれ自身のコールバックを登録することを要求するウィンドウシステムは、多くのウィンドウシステム関数の呼び出しに応答してGLFWにイベントを渡すことができます。GLFWはこれらのイベントをアプリケーションのコールバックに渡してから返します。</p><p>ジョイスティック入力の動作にはイベント処理は必要ありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwWaitEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>リエントランシー</strong>:</p><p>この関数はコールバックから呼んではならない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Event processing</li><li>glfwPollEvents</li><li>glfwWaitEventsTimeout</li></ul><p><strong>追加</strong>:</p><p>バージョン2.5で追加。</p></details><details class="details custom-block"><summary><code>glfwWaitEventsTimeout()</code></summary><p>この関数は、イベントキューで少なくとも1つのイベントが利用可能になるまで、あるいは指定されたタイムアウトに達するまで、呼び出し元のスレッドをスリープさせる。つまり、キュー内のイベントが処理され、関数は直ちに戻ります。イベントを処理すると、そのイベントに関連するウィンドウと入力のコールバックが呼び出されます。</p><p>タイムアウト値は正の有限の数でなければなりません。</p><p>すべてのイベントがコールバックに関連付けられているわけではないので、すべてのコールバックを監視している場合でも、コールバックが呼び出されずにこの関数が戻ることがあります。</p><p>プラットフォームによっては、ウィンドウの移動、サイズ変更、メニュー操作によってイベント処理がブロックされることがあります。これは、それらのプラットフォームでのイベント処理の設計方法によるものです。このような操作の間、必要に応じてウィンドウの内容を再描画するために、ウィンドウのリフレッシュ・コールバックを使用することができます。</p><p>設定したコールバックが、このようなイベント処理関数に応答してのみ呼び出されると思わないでください。イベントのためにポーリングすることは必要ですが、GLFWがそれ自身のコールバックを登録することを要求するウィンドウシステムは、多くのウィンドウシステム関数の呼び出しに応答してGLFWにイベントを渡すことができます。GLFWはこれらのイベントをアプリケーションのコールバックに渡してから返します。</p><p>ジョイスティック入力の動作にはイベント処理は必要ありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwWaitEventsTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] timeout</code>: 最大待機時間（秒）。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_VALUE、GLFW_PLATFORM_ERRORである。</p><p><strong>リエントランシー</strong>:</p><p>この関数はコールバックから呼んではならない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Event processing</li><li>glfwPollEvents</li><li>glfwWaitEvents</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwPostEmptyEvent()</code></summary><p>この関数は、現在のスレッドからイベントキューに空のイベントをポストし、glfwWaitEvents または glfwWaitEventsTimeout を返す。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwPostEmptyEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Event processing</li><li>glfwWaitEvents</li><li>glfwWaitEventsTimeout</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwSwapBuffers()</code></summary><p>この関数は、OpenGLまたはOpenGL ESでレンダリングするときに、指定されたウィンドウの前面バッファと背面バッファを入れ替えます。スワップ間隔が0より大きい場合、GPUドライバはバッファをスワップする前に指定された画面更新回数を待ちます。</p><p>指定されたウィンドウはOpenGLまたはOpenGL ESのコンテキストを持っていなければなりません。コンテキストのないウィンドウを指定すると GLFW_NO_WINDOW_CONTEXT エラーが発生します。</p><p>この関数はVulkanには適用されません。Vulkanでレンダリングする場合は、代わりにvkQueuePresentKHRを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSwapBuffers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: バッファを交換するウィンドウ。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED、 GLFW_NO_WINDOW_CONTEXT、 GLFW_PLATFORM_ERROR です。</p><p><strong>備考</strong>:</p><ul><li>EGL: 指定されたウィンドウのコンテキストは、呼び出し元のスレッドで最新でなければならない。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Buffer swapping</li><li>glfwSwapInterval</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details>',112)]))}const c=i(n,[["render",p]]);export{g as __pageData,c as default};
