import{_ as i,c as s,a2 as e,o as t}from"./chunks/framework.CuCbyi2k.js";const c=JSON.parse('{"title":"string.dump","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/string/dump.md","filePath":"reference/built_in/string/dump.md","lastUpdated":1730090475000}'),l={name:"reference/built_in/string/dump.md"};function n(d,a,h,p,r,o){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="string-dump" tabindex="-1">string.dump <a class="header-anchor" href="#string-dump" aria-label="Permalink to &quot;string.dump&quot;">​</a></h1><p>関数のバイトコードを返す</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string.dump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f [,mode])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>指定した関数 <code>f</code> のバイナリ表現（バイトコード）を含む文字列を返します。この文字列を後で <code>loadstring</code> 関数で読み込むと、元の関数を再現することができます。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li>LuaJIT の <code>string.dump</code> は、移植性のあるバイトコードを生成できます。オプションの <code>mode</code> 引数に <code>&quot;b&quot;</code>（移植可能なバイトコード）や <code>&quot;t&quot;</code>（ソースコードとしてダンプ）を指定できます。</li><li>ダンプされたバイトコードは、Lua のバージョンや実装が異なる環境間では互換性がない場合があります。</li><li>セキュリティ上の理由から、不信頼なソースから取得したバイトコードをロードすることは避けてください。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dumped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string.dump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dumped)</span></span></code></pre></div><p>この例では、関数のバイナリ表現が出力されます。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./../std/loadstring.html"><code>loadstring</code></a></li></ul>`,14)]))}const u=i(l,[["render",n]]);export{c as __pageData,u as default};
