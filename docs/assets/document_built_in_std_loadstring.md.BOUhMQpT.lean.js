import{_ as i,c as s,a2 as t,o as l}from"./chunks/framework.6x3wfQve.js";const c=JSON.parse('{"title":"loadstring","description":"","frontmatter":{},"headers":[],"relativePath":"document/built_in/std/loadstring.md","filePath":"document/built_in/std/loadstring.md","lastUpdated":1729067310000}'),e={name:"document/built_in/std/loadstring.md"};function n(h,a,d,o,p,r){return l(),s("div",null,a[0]||(a[0]=[t(`<h1 id="loadstring" tabindex="-1">loadstring <a class="header-anchor" href="#loadstring" aria-label="Permalink to &quot;loadstring&quot;">​</a></h1><p>文字列からLuaコードを読み込み、チャンクを返す</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (string [, chunkname])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>load</code>に似ていますが、指定された文字列からチャンクを取得します。</p><p>指定された文字列を読み込んで実行するには、次の慣用句を使用します：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s))()</span></span></code></pre></div><p>省略された場合、<code>chunkname</code>は指定された文字列にデフォルト設定されます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;return 2 + 3&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 5</span></span></code></pre></div><p>この例では、文字列内のLuaコードを<code>loadstring</code>で読み込み、実行して結果を表示します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li><li>Lua5.2で廃止（LuaJITでは使用可能）</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./load.html"><code>load</code></a></li><li><a href="./loadfile.html"><code>loadfile</code></a></li><li><a href="./dofile.html"><code>dofile</code></a></li></ul>`,15)]))}const u=i(e,[["render",n]]);export{c as __pageData,u as default};
