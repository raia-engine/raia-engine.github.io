import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.DPuwY6B9.js";const d=JSON.parse('{"title":"cosmopolitan libc","description":"","frontmatter":{},"headers":[],"relativePath":"resource/cosmopolitan/index.md","filePath":"resource/cosmopolitan/index.md","lastUpdated":null}'),e={name:"resource/cosmopolitan/index.md"};function p(l,s,h,o,k,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="cosmopolitan-libc" tabindex="-1">cosmopolitan libc <a class="header-anchor" href="#cosmopolitan-libc" aria-label="Permalink to &quot;cosmopolitan libc&quot;">​</a></h1><p>どこでもビルド、どこでも実行可能なCライブラリ</p><p>Cosmopolitan Libcは、インタプリタや仮想マシンを必要としないことを除けば、C言語をJavaのようなビルド・エニウェア・ラン・エニウェア言語にする。その代わりに、Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + AMD64とARM64のBIOS上でネイティブに動作するPOSIX公認のポリグロットフォーマットを出力するように、純正のGCCとClangを再設定し、可能な限り最高のパフォーマンスで動作します。</p><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>まず、Cosmopolitan toolchainをダウンロードする：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmocc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmocc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://cosmo.zip/pub/cosmocc/cosmocc.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmocc.zip</span></span></code></pre></div><h3 id="sanity-test" tabindex="-1">Sanity Test <a class="header-anchor" href="#sanity-test" aria-label="Permalink to &quot;Sanity Test&quot;">​</a></h3><p>次に、システム上でAPEプログラムを実行できることを確認しよう：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>もし「zsh: exec format error」と表示されたら、zsh 5.9+にアップグレードする必要があります（2年前にパッチを当てました）。Fishも同様です。</p><p>LinuxユーザーはAPE Loaderをインストールすることをお勧めします。これにより、WINEがAPEを実行しようとしたり、&quot;run-detectors: unable to find an interpreter &quot;といった問題が解決されます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># for linux users</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ape</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://cosmo.zip/pub/cosmos/bin/ape-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.elf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ape</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE:M::MZqFpD::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE-jart:M::jartsr::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span></code></pre></div><p>Windowsを使っているなら、bin/makeの名前をbin/make.exeに変更して実行してみてください。その後、名前を戻してください。cosmoccはシェルスクリプトなので、UNIXシェルが必要です。Cosmosのプログラムをダウンロードし、C:¥cosmos¥binに入れれば、bashやlessなどのプログラムが手に入る。ProTip: dashはかなり良いC:∕bin∕sh（cosmoでは/bin/shまたは/c/bin/sh）を作る。次に、WindowsストアからTerminal Previewをインストールし、C:∕bin∕bash -lがシェルになるように設定する。そうすれば、拡張子が.exeでないことは問題にならなくなる。</p><p>WSLユーザーは、このコマンドを実行して、WindowsがWSL環境内でAPEをWIN32プログラムとして実行しないようにします。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo -1 &gt;/proc/sys/fs/binfmt_misc/WSLInterop&quot;</span></span></code></pre></div><h3 id="ハローワールドのコンパイル" tabindex="-1">ハローワールドのコンパイル <a class="header-anchor" href="#ハローワールドのコンパイル" aria-label="Permalink to &quot;ハローワールドのコンパイル&quot;">​</a></h3><p>hello.cという名前のファイルを作成する：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>そして次のようにコンパイルする：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cosmocc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span></span></code></pre></div><p>おめでとう！あなたは今、実際に移植可能な最初のファットな実行ファイルを作ったところだ。これは、AMD64 および ARM64 アーキテクチャ上の Linux/MacOS/Windows/FreeBSD/NetBSD/OpenBSD で動作する。</p><h2 id="さらに読む" tabindex="-1">さらに読む <a class="header-anchor" href="#さらに読む" aria-label="Permalink to &quot;さらに読む&quot;">​</a></h2><p>さらに詳しいスタートアップのドキュメントは、こちらをご覧ください：</p><ul><li>cosmopolitan/README.md</li><li>cosmopolitan/tool/cosmocc/README.md</li></ul><p>Cosmopolitan LibcでCプログラムを開発する方法についての高品質なサンプルコードについては、こちらをご覧ください：</p><p>cosmopolitan/examples/greenbean.c</p><p>Cosmopolitan Libcでオープンソースプロジェクトを構築する方法についての高品質なサンプルコードについては、こちらをご覧ください：</p><ul><li>ahgamut/superconfigure</li></ul><h2 id="ビルド済みソフトウェア" tabindex="-1">ビルド済みソフトウェア <a class="header-anchor" href="#ビルド済みソフトウェア" aria-label="Permalink to &quot;ビルド済みソフトウェア&quot;">​</a></h2><p>人気のあるオープンソースソフトウェアのビルド済みファットバイナリについては、当社のオンラインサービスをご覧ください：</p><ul><li><a href="https://cosmo.zip/" target="_blank" rel="noreferrer">https://cosmo.zip/</a></li><li><a href="https://cosmo.zip/pub/cosmos/bin/" target="_blank" rel="noreferrer">https://cosmo.zip/pub/cosmos/bin/</a></li></ul>`,31)]))}const F=i(e,[["render",p]]);export{d as __pageData,F as default};
