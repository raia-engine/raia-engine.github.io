import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.CKGreiRV.js";const g=JSON.parse('{"title":"MetalANGLE開発","description":"","frontmatter":{},"headers":[],"relativePath":"resource/angle/metal_andle_development.md","filePath":"resource/angle/metal_andle_development.md","lastUpdated":1732720247000}'),t={name:"resource/angle/metal_andle_development.md"};function e(h,s,k,p,E,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="metalangle開発" tabindex="-1">MetalANGLE開発 <a class="header-anchor" href="#metalangle開発" aria-label="Permalink to &quot;MetalANGLE開発&quot;">​</a></h1><p><a href="https://github.com/kakashidinho/metalangle/blob/master/src/libANGLE/renderer/metal/DevSetup.md" target="_blank" rel="noreferrer">原文</a></p><p>MetalANGLEはOpenGL ES 2.0 (ES 3.0の一部をサポート) およびEGL 1.4 ライブラリを提供します。 これらを使って、MacやiOS上でMetal APIを利用したOpenGL ES 2.0アプリケーションを構築し、実行することができます。</p><h2 id="開発体制" tabindex="-1">開発体制 <a class="header-anchor" href="#開発体制" aria-label="Permalink to &quot;開発体制&quot;">​</a></h2><h3 id="バージョン管理" tabindex="-1">バージョン管理 <a class="header-anchor" href="#バージョン管理" aria-label="Permalink to &quot;バージョン管理&quot;">​</a></h3><p>ANGLEはバージョン管理にgitを使用しています。gitに慣れていない方は、<a href="http://git-scm.com/documentation" target="_blank" rel="noreferrer">http://git-scm.com/documentation</a>に有用なドキュメントがあります。</p><h3 id="xcodeプロジェクトでクイックビルド" tabindex="-1">Xcodeプロジェクトでクイックビルド <a class="header-anchor" href="#xcodeプロジェクトでクイックビルド" aria-label="Permalink to &quot;Xcodeプロジェクトでクイックビルド&quot;">​</a></h3><p>ANGLEのテストスイートやOpenGL ESのコンフォーマンステストでMetalANGLEをテストしたくない場合は、<code>mac/xcode</code> と <code>ios/xcode</code> フォルダにあるXcodeプロジェクトを使って、 <code>MetalANGLE.framework</code> といくつかのサンプルアプリを素早くビルドすることができます。</p><p>依存関係を取得する:</p><ul><li>サードパーティの依存関係を取得するために <code>ios/xcode/fetchDepedencies.sh</code> スクリプトを実行します。</li></ul><p>MacOS版:</p><ul><li><code>mac/xcode</code>フォルダにある<code>OpenGLES.xcodeproj</code>を開く。</li><li>ターゲット <code>MetalANGLE_mac</code> は <code>MetalANGLE.framework</code> という名前のOpenGL ESフレームワークをビルドします。</li><li><a href="#MGLKit">MGLKit</a>ライブラリを使ってサンプルアプリをビルドする場合。<code>OpenGLES.xcodeproj</code>ではなく、<code>MGKitSamples.xcodeproj</code>を開いてください（両方を同時に開かないでください）。<code>MGKitSamples.xcodeproj</code>はワークスペース内にある<code>OpenGLES.xcodeproj</code>を開くためです。</li><li>サンプルアプリ <code>MGLKitSampleApp_mac</code> は、<code>MGLKit</code> を使って macOS 上でビューと GL コンテキストを設定する方法を示しています。</li><li><code>EAGL</code>/<code>GLKit</code> から <code>MGLKit</code> へアプリを移植する方法については <a href="#MGLKit">MGLKit</a> の項を参照してください。</li></ul><p>iOS版:</p><ul><li><code>ios/xcode</code> フォルダにある <code>OpenGLES.xcodeproj</code> を開いてください。</li><li>ターゲット <code>MetalANGLE</code> は <code>MetalANGLE.framework</code> という名前のOpenGL ESフレームワークをビルドします。</li><li>tvOS版をビルドする場合は、<code>MetalANGLE_tvos</code>ターゲットを選択します。</li><li><strong>Note</strong>: サンプルアプリを実機でテストするために。XcodeのBundle Identifierを好きなものに変更する必要があります。しかも、これは全世界共通で制限されています。一人が自分のApple開発者プロファイルを使ってサンプルアプリをインストールすると、設定されたIDはその開発者用にのみ登録されます。他の開発者はそのIDを使用して自分のデバイスにインストールすることができなくなります。</li><li><a href="#MGLKit">MGLKit</a>ライブラリを使ってサンプルアプリをビルドする場合。<code>OpenGLES.xcodeproj</code>ではなく、<code>MGKitSamples.xcodeproj</code>を開いてください（両方を同時に開かないでください）。<code>MGKitSamples.xcodeproj</code>はワークスペース内にある<code>OpenGLES.xcodeproj</code>を開くためです。</li><li>iOS Simulatorでの実行とテストには、Xcode 11+とMacOS Catalina (10.15+)が必要です。</li><li>サンプルアプリ <code>MGLKitSampleApp</code> は、iOS 上で <code>MGLKit</code> を使ってビューと GL コンテキストを設定する方法を示している。</li><li>サンプルアプリ <code>MGLKitSampleApp_tvos</code> は、<code>MGLKit</code> を使って tvOS 上でビューと GL ontext を設定する方法を示している。</li><li>サンプルアプリ <code>MGLPaint</code> は Apple の古いサンプルアプリ <code>GLPaint</code> を移植したものです。</li></ul><h3 id="すべてのテストスイートを含む標準的なangleビルド" tabindex="-1">すべてのテストスイートを含む標準的なANGLEビルド <a class="header-anchor" href="#すべてのテストスイートを含む標準的なangleビルド" aria-label="Permalink to &quot;すべてのテストスイートを含む標準的なANGLEビルド&quot;">​</a></h3><p>以下はANGLEプロジェクトの標準的なビルドプロセスで、MetalANGLEの実装を検証するための広範なテストターゲットが含まれています。標準的なANGLEのビルドプロセスでは、<code>MetalANGLE.framework</code>の代わりに <code>libEGL.dylib</code>, <code>libGLESv2.dylib</code>, <code>libGLESv1CM.dylib</code> を生成することに注意してください。.dylib\`バージョンはフレームワーク版のように<a href="#MGLKit">MGLKit</a>のラッパークラスを含んでいません。現在のところ、MacOS版のビルドのみサポートしています。</p><h5 id="必要なツール" tabindex="-1">必要なツール <a class="header-anchor" href="#必要なツール" aria-label="Permalink to &quot;必要なツール&quot;">​</a></h5><p>すべてのプラットフォームで。</p><ul><li><a href="http://dev.chromium.org/developers/how-tos/install-depot-tools" target="_blank" rel="noreferrer">depot_tools</a><ul><li>プロジェクトを生成し、サードパーティの依存関係を取得するために必要です。</li><li>gclient, GN, ninja ツールを提供する。</li></ul></li><li><a href="https://developer.apple.com/xcode/" target="_blank" rel="noreferrer">Xcode</a> をClangと開発用ファイルとして使用します。</li><li>Bisonとflexは、Windowsでの翻訳文法生成のみをサポートするため、必要ありません。</li></ul><p>MacOSビルドの場合:</p><ul><li>GNはデフォルトのビルドシステムです。 GYPのサポートは削除されました。GNはdepot_toolsのインストールで利用できます。</li><li>Clangはビルドシステムによってセットアップされ、デフォルトで使用されます。</li></ul><h5 id="ソースの取得" tabindex="-1">ソースの取得 <a class="header-anchor" href="#ソースの取得" aria-label="Permalink to &quot;ソースの取得&quot;">​</a></h5><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/kakashidinho/metalangle</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metalangle</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/bootstrap.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gclient</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p><code>gclient sync</code> を実行すると、&quot;gs://chromium-clang-format ...&quot; の取得に失敗したというエラーが報告されることがあります。このような場合は、ルートディレクトリにある <code>DEPS</code> ファイルを開き、以下のコードスニペットを削除してください。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&#39;clang_format_mac&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &#39;pattern&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &#39;condition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&#39;host_os</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mac&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> and</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> not</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> build_with_chromium&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &#39;action&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&#39;download_from_google_storage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">                &#39;--no_resume&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">                &#39;--platform=darwin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">                &#39;--no_auth&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">                &#39;--bucket&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&#39;chromium-clang-format&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">                &#39;-s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">angle_root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/buildtools/mac/clang-format.sha</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><h5 id="macos版のビルド" tabindex="-1">MacOS版のビルド <a class="header-anchor" href="#macos版のビルド" aria-label="Permalink to &quot;MacOS版のビルド&quot;">​</a></h5><p>無事にソースを取得したら、ninjaファイルを生成する準備が整いました。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Debug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ide=xcode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mac_deployment_target=&quot;10.13&quot; angle_enable_metal=true&#39;</span></span></code></pre></div><p>GN はデフォルトで ninja ファイルを生成します。 デフォルトのビルドオプションを変更するには、 <code>gn args out/Debug</code> を実行します。 よく使われるオプションは以下の通りです。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target_cpu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (または </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x86&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_clang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (clang </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">の代わりにシステムのデフォルトコンパイラを使うようにする</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_debug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (デバッグを有効にする、trueがデフォルト)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strip_absolute_paths_from_debug_symbols</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (このフラグを無効にすると、xcodeが出力バイナリをデバッグできるようになります。)</span></span></code></pre></div><p><code>out/Debug</code>フォルダにGNが生成したXcodeワークスペースを開いてコードをブラウズしたり、テストやサンプルアプリケーションのデバッグを行うことができます。</p><p>リリースビルドの場合は、<code>gn args out/Release</code> を実行し、<code>is_debug = false</code> を設定します。</p><p>GNに関するより詳しい情報は <code>gn help</code> を実行してください。</p><p>Ninjaは、以下のいずれかのコマンドでコンパイルすることができます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Debug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Release</span></span></code></pre></div><p>Ninjaは設定を変更すると、自動的にGNを呼び出してビルドファイルを再生成します。depot_tools\` は ninja を提供するので、パスに入っていることを確認すること。</p><h2 id="angleによるアプリケーション開発" tabindex="-1">ANGLEによるアプリケーション開発 <a class="header-anchor" href="#angleによるアプリケーション開発" aria-label="Permalink to &quot;ANGLEによるアプリケーション開発&quot;">​</a></h2><p>ここでは、ANGLEを使用してOpenGL ESアプリケーションを構築する方法について説明します。</p><h3 id="バックエンドの選択" tabindex="-1">バックエンドの選択 <a class="header-anchor" href="#バックエンドの選択" aria-label="Permalink to &quot;バックエンドの選択&quot;">​</a></h3><p>ANGLEは、プラットフォームに応じて様々なバックレンダラーを使用することができます。 MacOSとiOSでは、デフォルトでMetalが使用されます。</p><p>ANGLEは <code>EGL_ANGLE_platform_angle</code> というEGL拡張を提供しており、特別な列挙型を使用してeglGetPlatformDisplayEXTを呼び出すことにより、EGL初期化時に使用するレンダラーを選択することができるようになっています。この拡張機能の詳細は <code>extensions/ANGLE_platform_angle.txt</code> と <code>extensions/ANGLE_platform_angle_*.txt</code> にある仕様書をご覧ください。また、ANGLE のサンプルやテスト、特に <code>util/EGLWindow.cpp</code> で使用例を見ることができます。現在、iOS版では、デフォルト（Metal）以外のレンダラーを選択することができません。</p><h3 id="アプリケーションでmetalangleを使用するには" tabindex="-1">アプリケーションでMetalANGLEを使用するには <a class="header-anchor" href="#アプリケーションでmetalangleを使用するには" aria-label="Permalink to &quot;アプリケーションでMetalANGLEを使用するには&quot;">​</a></h3><p>ビルド環境が <code>include</code> フォルダにアクセスできるように設定し、クロノスの標準的なEGLおよびGLES2ヘッダーファイルへのアクセスを提供します。</p><h4 id="macosの場合-標準angleビルドシステムでビルドされたlibglesv2-dylibを使用" tabindex="-1">MacOSの場合（標準ANGLEビルドシステムでビルドされた<code>libGLESv2.dylib</code>を使用） <a class="header-anchor" href="#macosの場合-標準angleビルドシステムでビルドされたlibglesv2-dylibを使用" aria-label="Permalink to &quot;MacOSの場合（標準ANGLEビルドシステムでビルドされた\`libGLESv2.dylib\`を使用）&quot;">​</a></h4><ul><li>ビルド出力ディレクトリにある <code>libEGL.dylib</code> と <code>libGLESv2.dylib</code> にアクセスできるようにビルド環境を設定する（<a href="#Building-MacOS-version">ANGLEのビルド</a> を参照）。</li><li>アプリケーションを <code>libGLESv2.dylib</code> と <code>libEGL.dylib</code> に対してリンクします。</li><li>アプリケーションをKhronos <a href="http://www.khronos.org/registry/gles/" target="_blank" rel="noreferrer">OpenGL ES 2.0</a> および <a href="http://www.khronos.org/registry/egl/" target="_blank" rel="noreferrer">EGL 1.4</a> のAPIにコーディングします。</li></ul><h4 id="iosとmacosの場合-付属のxcodeプロジェクトでビルドしたmetalangle-frameworkを使用" tabindex="-1">iOSとMacOSの場合（付属のXcodeプロジェクトでビルドした<code>MetalANGLE.framework</code>を使用） <a class="header-anchor" href="#iosとmacosの場合-付属のxcodeプロジェクトでビルドしたmetalangle-frameworkを使用" aria-label="Permalink to &quot;iOSとMacOSの場合（付属のXcodeプロジェクトでビルドした\`MetalANGLE.framework\`を使用）&quot;">​</a></h4><ul><li>アプリケーションを <code>MetalANGLE.framework</code> にリンクします。</li></ul><h5 id="mglkit" tabindex="-1">MGLKit <a class="header-anchor" href="#mglkit" aria-label="Permalink to &quot;MGLKit&quot;">​</a></h5><ul><li>また、<code>MetalANGLE.framework</code>には、<code>MGLContext</code>、<code>MGLLayer</code>、<code>MGLKView</code>、<code>MGLKViewController</code> などのMGLKitユーティリティクラスが含まれており、Appleが提供する <code>CAEAGLContext</code> 、 <code>CAEAGLLayer</code> 、 <code>GLKView</code> 、 <code>GLKViewController</code> などの GLKit クラスと同様のクラスが用意されています。このMGLKitのクラスを利用したサンプルアプリは <code>MGLKitSamples.xcodeproj</code> にありますので、ご覧ください。</li></ul><h5 id="appleのeaglとglkitからmglkitへのポーティング" tabindex="-1">AppleのEAGLとGLKitからMGLKitへのポーティング <a class="header-anchor" href="#appleのeaglとglkitからmglkitへのポーティング" aria-label="Permalink to &quot;AppleのEAGLとGLKitからMGLKitへのポーティング&quot;">​</a></h5><ul><li><p>Appleの <code>EAGL</code> と <code>GLKit</code> クラスはOpenGL ESのコンテキストとビューを管理するためのハイレベルなAPIを提供しています。Metalangleは似たようなクラスを提供していますが、名前が違うので、アプリケーションを<code>EAGL</code>と<code>GLKit</code>から<code>MGLKit</code>に移植するには、少し修正する必要があります。例えば、<code>CAEAGLLayer</code> は <code>[EAGLContext renderbufferStorage: fromDrawable:]</code> というコールによってデフォルトのフレームバッファのストレージを手動で作成する必要があります。一方、<code>MGLLayer</code>は自動的にそれを行うので、デフォルトのフレームバッファを手動で作成する必要はない。</p></li><li><p>相当するクラスです。</p></li></ul><table tabindex="0"><thead><tr><th>Apple</th><th>MetalANGLE</th></tr></thead><tbody><tr><td>EAGLContext</td><td>MGLContext</td></tr><tr><td>CAEAGLLayer</td><td>MGLLayer</td></tr><tr><td>EAGLRenderingAPI</td><td>MGLRenderingAPI</td></tr><tr><td>GLKView</td><td>MGLKView</td></tr><tr><td>GLKViewDelegate</td><td>MGLKViewDelegate</td></tr><tr><td>GLKViewController</td><td>MGLKViewController</td></tr><tr><td>GLKViewDrawableColorFormat</td><td>MGLDrawableColorFormat</td></tr><tr><td>GLKViewDrawableDepthFormat</td><td>MGLDrawableDepthFormat</td></tr><tr><td>GLKViewDrawableStencilFormat</td><td>MGLDrawableStencilFormat</td></tr><tr><td>GLKViewDrawableMultisample</td><td>MGLDrawableMultisample</td></tr></tbody></table><ul><li>典型的な古いコードでは、通常 <code>[GLKViewController viewDidLoad]</code> を <code>EAGLContext</code> と <code>GLKView</code> で構成しています。</li></ul><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)viewDidLoad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">super</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OpenGL ES コンテキストを作成し、storyboard から読み込んだビューに割り当てる。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GLKView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (GLKView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.view;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[EAGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initWithAPI:kEAGLRenderingAPIOpenGLES2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ビューが作成するレンダーバッファーの設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableColorFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLKViewDrawableColorFormatRGBA8888;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableDepthFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLKViewDrawableDepthFormat24;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableStencilFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLKViewDrawableStencilFormat8;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // マルチサンプリングの有効化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableMultisample </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLKViewDrawableMultisample4X;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>MetalANGLE<code>を移植する場合、上記を以下のように </code>[MGLKViewController viewDidLoad]\`に変更する必要があります。</li></ul><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)viewDidLoad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">super</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OpenGL ES コンテキストを作成し、storyboard から読み込んだビューに割り当てる。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MGLKView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MGLKView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.view;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[MGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initWithAPI:kMGLRenderingAPIOpenGLES2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ビューが作成するレンダーバッファーの設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableColorFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MGLDrawableColorFormatRGBA8888;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableDepthFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MGLDrawableDepthFormat24;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableStencilFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MGLDrawableStencilFormat8;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // マルチサンプリングの有効化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.drawableMultisample </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MGLDrawableMultisample4X;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>あるいは、アプリが <code>CAEAGLLayer</code> をカスタム <code>UIView</code> で直接使用する場合など。</li></ul><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaintingView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EAGLContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GLuint viewFramebuffer, viewRenderbuffer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+ (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">layerClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [CAEAGLLayer </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initWithCoder:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSCoder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)coder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">super</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> initWithCoder:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coder]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CAEAGLLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eaglLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (CAEAGLLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.layer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eaglLayer.opaque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> YES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // このアプリケーションでは、presentRenderbuffer を呼び出した後も drawable の内容を保持したい。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eaglLayer.drawableProperties </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSDictionary</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dictionaryWithObjectsAndKeys:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSNumber</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numberWithBool:YES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kEAGLDrawablePropertyRetainedBacking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                      kEAGLColorFormatRGBA8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kEAGLDrawablePropertyColorFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                      nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ビューの拡大率を任意に設定できる</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.contentScaleFactor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[UIScreen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mainScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // OpenGLコンテキストの初期化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[EAGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initWithAPI:kEAGLRenderingAPIOpenGLES2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 現在のコンテキストを設定する</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[EAGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCurrentContext:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // デフォルトのフレームバッファとレンダーバッファを割り当てる。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        glGenFramebuffers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viewFramebuffer);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        glGenRenderbuffers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viewRenderbuffer);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        glBindFramebuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_FRAMEBUFFER, viewFramebuffer);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        glBindRenderbuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_RENDERBUFFER, viewRenderbuffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [context </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">renderbufferStorage:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GL_RENDERBUFFER </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fromDrawable:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eaglLayer];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        glFramebufferRenderbuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, viewRenderbuffer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // レンダーバッファーのサイズを取得する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        GLint backingWidth, backingHeight;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        glGetRenderbufferParameteriv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_RENDERBUFFER, GL_RENDERBUFFER_WIDTH, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backingWidth);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        glGetRenderbufferParameteriv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_RENDERBUFFER, GL_RENDERBUFFER_HEIGHT, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backingHeight);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glCheckFramebufferStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_FRAMEBUFFER) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GL_FRAMEBUFFER_COMPLETE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          NSLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@&quot;Failed to make complete framebuffer objectz </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                glCheckFramebufferStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_FRAMEBUFFER));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderFunc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [EAGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCurrentContext:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バッファをクリアする</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    glBindFramebuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_FRAMEBUFFER, viewFramebuffer);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    glClearColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    glClear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_COLOR_BUFFER_BIT);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バッファを表示する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    glBindRenderbuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_RENDERBUFFER, viewRenderbuffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [context </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">presentRenderbuffer:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GL_RENDERBUFFER];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span></code></pre></div><ul><li>もし、<code>MetalANGLE</code>を使うなら、上記は以下のように変更される（注意：<code>CAEAGLLayer</code>と違って、<code>MGLLayer</code>は自動的にデフォルトのフレームバッファを作成するので、<code>[EAGLContext renderbufferStorage: fromDrawable:]</code> でカスタムレンダバッファを作る必要はない）。</li></ul><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaintingView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MGLContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+ (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">layerClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [MGLLayer </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initWithCoder:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSCoder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)coder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">super</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> initWithCoder:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coder]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MGLLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mglLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MGLLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.layer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mglLayer.opaque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> YES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 今回のアプリケーションでは、presentを呼び出した後も、EAGLDrawableの内容を保持したい。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mglLayer.retainedBacking </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> YES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mglLayer.drawableColorFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MGLDrawableColorFormatRGBA8888;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // レイヤーのスケールファクターを任意に設定する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mglLayer.contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[UIScreen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mainScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // OpenGLコンテキストの初期化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[MGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initWithAPI:kMGLRenderingAPIOpenGLES2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // アクティブなレイヤーを使用せずに、現在のコンテキストを設定します。テクスチャやバッファをアクティブなレイヤーなしで作成するのは全く問題ありません。しかし、GL描画コマンドを呼び出す前に、[MGLContext setCurrentContext: forLayer:]を呼び出す必要があります（下記のrenderFuncのコードを参照）。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCurrentContext:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // レンダーバッファーのサイズを取得する。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注意事項  - CAEAGLLayerとは異なり、デフォルトのフレームバッファとレンダーバッファを手動で作成する必要はありません。MGLLayerはすでにそれらを内部で生成しています。  - 例えば、iOSデバイスでユーザーがビューをリサイズしたり、回転させたりすると、サイズはいつでも変更される可能性があります。だから、キャッシュしない方が良い。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        GLuint backingWidth, backingHeight;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        backingWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mglLayer.drawableSize.width;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        backingHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mglLayer.drawableSize.height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderFunc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // レイヤーを描画コマンドの送信先として設定する。注：これは重要で、GL描画コマンドを発行する前に呼び出す必要があります。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MGLLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mglLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MGLLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.layer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [MGLContext </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCurrentContext:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forLayer:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mglLayer];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バッファをクリアします。次のglBindFramebuffer()呼び出しはオプションです。デフォルトのフレームバッファとは別にカスタムフレームバッファがある場合のみ必要です。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    glBindFramebuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_FRAMEBUFFER, mglLayer.defaultOpenGLFrameBufferID);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    glClearColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    glClear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GL_COLOR_BUFFER_BIT);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バッファを表示する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [context </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">present:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mglLayer];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span></code></pre></div>`,60)]))}const o=i(t,[["render",e]]);export{g as __pageData,o as default};
