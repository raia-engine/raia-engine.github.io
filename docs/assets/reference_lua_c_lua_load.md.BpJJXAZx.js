import{_ as i,c as s,a2 as l,o as e}from"./chunks/framework.DzmM640o.js";const c=JSON.parse('{"title":"lua_load","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_load.md","filePath":"reference/lua_c/lua_load.md","lastUpdated":1731828945000}'),t={name:"reference/lua_c/lua_load.md"};function h(n,a,d,p,k,r){return e(),s("div",null,a[0]||(a[0]=[l(`<h1 id="lua-load" tabindex="-1">lua_load <a class="header-anchor" href="#lua-load" aria-label="Permalink to &quot;lua_load&quot;">​</a></h1><p>Luaチャンクをロードしますが、実行はしません。</p><p><code>[-0, +1, -]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Reader </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunkname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>Luaチャンクをロードします。エラーがなければ、<code>lua_load</code>はコンパイルされたチャンクをLua関数としてスタックの上にプッシュします。そうでなければ、エラーメッセージをプッシュします。<code>lua_load</code>の戻り値は以下の通りです：</p><ul><li>0: エラーなし</li><li><code>LUA_ERRSYNTAX</code>: 前処理中の構文エラー</li><li><code>LUA_ERRMEM</code>: メモリ割り当てエラー</li></ul><p>この関数はチャンクをロードするだけで、実行はしません。</p><p><code>lua_load</code>はチャンクがテキストかバイナリかを自動的に検出し、それに応じてロードします（プログラム<code>luac</code>を参照）。</p><p><code>lua_load</code>関数はユーザー提供のリーダー関数を使用してチャンクを読み込みます（<code>lua_Reader</code>参照）。<code>data</code>引数はリーダー関数に渡される不透明な値です。</p><p><code>chunkname</code>引数はチャンクに名前を与え、エラーメッセージやデバッグ情報で使用されます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, reader_function, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chunk_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LUA_ERRSYNTAX) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stderr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;構文エラーが発生しました</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このコードは、<code>reader_function</code>を使ってLuaチャンクをロードし、構文エラーがあればメッセージを表示します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>luaL_loadfile</li><li>luaL_dofile</li></ul>`,18)]))}const u=i(t,[["render",h]]);export{c as __pageData,u as default};
