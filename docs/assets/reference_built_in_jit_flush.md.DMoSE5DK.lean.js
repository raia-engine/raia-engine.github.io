import{_ as s,c as a,a2 as e,o as t}from"./chunks/framework.CuCbyi2k.js";const c=JSON.parse('{"title":"jit.flush","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/jit/flush.md","filePath":"reference/built_in/jit/flush.md","lastUpdated":1730090475000}'),l={name:"reference/built_in/jit/flush.md"};function h(n,i,r,p,d,k){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="jit-flush" tabindex="-1">jit.flush <a class="header-anchor" href="#jit-flush" aria-label="Permalink to &quot;jit.flush&quot;">​</a></h1><p>JITコンパイル済みコードをクリアし、再コンパイルさせる</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([func|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>jit.flush</code> 関数は、指定した関数、または全てのコンパイル済みコードキャッシュ（JITコード）をクリアします。これにより、該当するコードが次回実行される際に、再度JITコンパイラによってコンパイルされます。JITコンパイラ自体の有効・無効状態には影響を与えません。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li><code>func</code> に特定の関数を指定すると、その関数に関連するJITコードのみをフラッシュします。<code>func</code> に <code>true</code> を指定すると、全てのJITコードをフラッシュします。</li><li>第2引数の <code>quiet</code> に <code>true</code> を指定すると、フラッシュ時の出力（メッセージ）を抑制します。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 全体のコンパイル済みコードをフラッシュ</span></span></code></pre></div><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>LuaJIT</li></ul>`,11)]))}const u=s(l,[["render",h]]);export{c as __pageData,u as default};
