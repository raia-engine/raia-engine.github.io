import{_ as a,c as i,a2 as n,o as t}from"./chunks/framework.CuCbyi2k.js";const y=JSON.parse('{"title":"Python (2 and 3)","description":"","frontmatter":{},"headers":[],"relativePath":"resource/antlr/python-target.md","filePath":"resource/antlr/python-target.md","lastUpdated":null}'),p={name:"resource/antlr/python-target.md"};function e(l,s,h,k,r,d){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="python-2-and-3" tabindex="-1">Python (2 and 3) <a class="header-anchor" href="#python-2-and-3" aria-label="Permalink to &quot;Python (2 and 3)&quot;">​</a></h1><p>ANTLR 4の本からPythonに変換した例はこちらです。</p><p>2つのPythonターゲットがあります：<code>Python2</code> と <code>Python3</code> です。これは、この2つのバージョン間には限られた互換性しかないためです。詳細はPythonのドキュメントを参照してください。</p><p>Pythonのレキサーやパーサーを作るには？ これはJavaのレキサーやパーサーを作るのとほとんど同じですが、例えば言語ターゲットを指定する必要があります：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ antlr4 -Dlanguage=Python2 MyGrammar.g4</span></span></code></pre></div><p>or</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ antlr4 -Dlanguage=Python3 MyGrammar.g4</span></span></code></pre></div><p>antlr4ツールオプションの完全なリストについては、ツールのドキュメントページをご覧ください。</p><h2 id="ランタイムはどこで入手できますか" tabindex="-1">ランタイムはどこで入手できますか？ <a class="header-anchor" href="#ランタイムはどこで入手できますか" aria-label="Permalink to &quot;ランタイムはどこで入手できますか？&quot;">​</a></h2><p>レキサーやパーサーのコードを生成したら、ランタイムをダウンロードする必要があります。PythonのランタイムはPyPIから入手できます：</p><ul><li><a href="https://pypi.python.org/pypi/antlr4-python2-runtime/" target="_blank" rel="noreferrer">https://pypi.python.org/pypi/antlr4-python2-runtime/</a></li><li><a href="https://pypi.python.org/pypi/antlr4-python3-runtime/" target="_blank" rel="noreferrer">https://pypi.python.org/pypi/antlr4-python3-runtime/</a></li></ul><p>ランタイムはソースコードの形で提供されるため、追加のインストールは必要ない。</p><p>Pythonプロジェクトからランタイムを参照する方法は、プロジェクトの種類やIDEによって大きく異なるため、ここでは説明しません。</p><h2 id="生成されたレキサーやパーサーを実行するにはどうすればよいですか" tabindex="-1">生成されたレキサーやパーサーを実行するにはどうすればよいですか？ <a class="header-anchor" href="#生成されたレキサーやパーサーを実行するにはどうすればよいですか" aria-label="Permalink to &quot;生成されたレキサーやパーサーを実行するにはどうすればよいですか？&quot;">​</a></h2><p>あなたの文法が上記のように &quot;MyGrammar &quot;という名前だとしよう。このパーサーは &quot;startRule &quot;という名前のルールで構成されているとする。このツールは以下のファイルを生成します：</p><ul><li>MyGrammarLexer.py</li><li>MyGrammarParser.py</li><li>MyGrammarListener.py (if you have not activated the -no-listener option)</li><li>MyGrammarVisitor.py (if you have activated the -visitor option)</li></ul><p>(Java/C#のAntLRに慣れている開発者は、生成されるベースリスナーやビジターがないことに気づくでしょう。これは、Pythonがインタフェースをサポートしていないためで、生成されるリスナーとビジターは完全なクラスです)</p><p>完全に機能するスクリプトは以下のようになります：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> antlr4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrammarLexer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrammarLexer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrammarParser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrammarParser</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argv):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FileStream(argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lexer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrammarLexer(input_stream)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CommonTokenStream(lexer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrammarParser(stream)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.startRule()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main(sys.argv)</span></span></code></pre></div><p>このプログラムは機能する。しかし、次のいずれかを実行しない限り、役に立ちません：</p><ul><li>カスタム・リスナーを使って解析ツリーを訪問する。</li><li>カスタムビジターを使って解析ツリーにアクセスする</li><li>文法が（ANTLR3のような）プロダクションコードで構成されている。</li></ul><p>(プロダクションコードはターゲットに依存するため、プロダクションコードを含むマルチターゲットの文法を作成することはできません。)</p><h2 id="カスタムリスナーを作成して実行するには" tabindex="-1">カスタムリスナーを作成して実行するには？ <a class="header-anchor" href="#カスタムリスナーを作成して実行するには" aria-label="Permalink to &quot;カスタムリスナーを作成して実行するには？&quot;">​</a></h2><p>MyGrammar文法が2つのルールで構成されているとしましょう：&quot;key &quot;と &quot;value &quot;です。antlr4ツールは以下のリスナーを生成します：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyGrammarListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseTreeListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enterKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, ctx):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exitKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, ctx):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enterValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, ctx):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exitValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, ctx):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre></div><p>カスタム・ビヘイビアを提供するために、次のようなクラスを作りたいかもしれない：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyPrinter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyGrammarListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):     </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exitKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, ctx):         </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Oh, a key!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>このリスナーを実行するには、上記のコードに以下の行を追加するだけだ：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>       ...</span></span>
<span class="line"><span>       tree = parser.startRule() - only repeated here for reference</span></span>
<span class="line"><span>   printer = KeyPrinter()</span></span>
<span class="line"><span>   walker = ParseTreeWalker()</span></span>
<span class="line"><span>   walker.walk(printer, tree)</span></span></code></pre></div><p>詳細については、ANTLR 4 決定版ガイドを参照されたい。</p><p>PythonのANTLRの実装はJavaのものにできるだけ近いので、サンプルをPythonに適応させるのは難しくないと思います。</p><h2 id="ターゲットにとらわれない文法" tabindex="-1">ターゲットにとらわれない文法 <a class="header-anchor" href="#ターゲットにとらわれない文法" aria-label="Permalink to &quot;ターゲットにとらわれない文法&quot;">​</a></h2><p>もしあなたの文法がPythonだけをターゲットにしているのであれば、以下は無視してかまいません。しかし、JavaパーサをPythonでも動作させることが目的であれば、役に立つかもしれません。</p><ol><li>プロダクション・コードを文法の中に埋め込まないでください。これはポータブルではありませんし、今後もそうなることはないでしょう。すべてのコードをリスナーかVisitorに移してください。</li><li>文法に付随して絶対に必要なプロダクション・コードは、意味述語だけであるべきだ：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ID {$text.equals(&quot;test&quot;)}?</span></span></code></pre></div><p>残念ながら、JavaとPython（および他のターゲット言語）では、最も単純な言語要素以外の構文が異なるため、これは移植性がない。 しかし、これを回避することはできる。その方法とは</p><ul><li>BaseParserのような、あなたが提供するパーサーからあなたのパーサーを派生させる。</li><li>このBaseParserで、&quot;isEqualText &quot;のようなユーティリティメソッドを、ターゲット言語ごとに異なるファイルに実装する。</li><li><code>$parser</code>オブジェクトから意味述語でユーティリティメソッドを呼び出す。</li></ul><p>上記のおかげで、上記の意味述語を次のように書き換えることができるはずだ：</p><p>File <code>MyGrammarParser.g4</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>options { superClass = MyGrammarBaseParser; }</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>ID {$parser.isEqualText($text,&quot;test&quot;)}?</span></span></code></pre></div><p>File <code>MyGrammarBaseParser.py</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> antlr4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyGrammarBaseParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEqualText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><p>File <code>MyGrammarBaseParser.java</code>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.antlr.v4.runtime.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyGrammarBaseParser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEqualText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,44)]))}const E=a(p,[["render",e]]);export{y as __pageData,E as default};
