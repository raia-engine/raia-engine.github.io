import{_ as s,c as a,a2 as t,o as n}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"Duktape APIリファレンス","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/api/index.md","filePath":"resource/duktape/api/index.md","lastUpdated":1732350347000}'),l={name:"resource/duktape/api/index.md"};function h(p,i,k,e,d,E){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="duktape-apiリファレンス" tabindex="-1">Duktape APIリファレンス <a class="header-anchor" href="#duktape-apiリファレンス" aria-label="Permalink to &quot;Duktape APIリファレンス&quot;">​</a></h1><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>バージョン: 2.6.0 (2020-10-13)</p><h3 id="ドキュメントスコープ" tabindex="-1">ドキュメントスコープ <a class="header-anchor" href="#ドキュメントスコープ" aria-label="Permalink to &quot;ドキュメントスコープ&quot;">​</a></h3><p>Duktape API（duktape.hで定義）は定数とAPIコールのセットで、C/C++プログラムがECMAScriptコードとインターフェースできるようにし、値の表現などの内部詳細から保護するものです。</p><p>この文書では、Duktape APIとそのコア・コンセプトに関する簡潔なリファレンスを提供します。Duktapeに初めて触れる方は、まず「Duktapeプログラマーズ・ガイド」をお読みください。</p><h3 id="ブラウザ検索を使った関数の検索" tabindex="-1">ブラウザ検索を使った関数の検索 <a class="header-anchor" href="#ブラウザ検索を使った関数の検索" aria-label="Permalink to &quot;ブラウザ検索を使った関数の検索&quot;">​</a></h3><p>ブラウザ検索（通常はCTRL-F）を使って、検索語の前にドットを付けることで関数定義を検索することができます。例えば、duk_example_func()を探すには、&quot;.duk_example_func &quot;を使用します。ほとんどのブラウザでは、関数を定義している実際のセクションのみが検索されるはずです。</p><h3 id="api-の安全性" tabindex="-1">API の安全性 <a class="header-anchor" href="#api-の安全性" aria-label="Permalink to &quot;API の安全性&quot;">​</a></h3><p>一般的なルールとして、APIコールはすべてのパラメータをチェックし、安全でない動作（クラッシュ）なしにNULL引数や無効な値のスタック・インデックスを許容しています。</p><p>一つの大きな例外は、Duktape コンテキストの初期引数である ctx です。特に断りのない限り、これはチェックされず、NULLでないことが要求され、さもなければ安全でない動作が発生する可能性があります。これは、この引数に対する明示的なチェックは、コードのフットプリントを増加させ、実用的な利益をほとんどもたらさないからです。</p><p>また、エラー処理のベストプラクティス、特に診断が困難な致命的なエラーにつながるキャッチされないエラーを回避するためにを参照してください。</p><h3 id="apiコールはマクロであってもよい" tabindex="-1">APIコールはマクロであってもよい <a class="header-anchor" href="#apiコールはマクロであってもよい" aria-label="Permalink to &quot;APIコールはマクロであってもよい&quot;">​</a></h3><p>Duktapeの全てのAPIコールはマクロである可能性があります。あるAPIコールの実装は、互換性のあるリリース間であっても、マクロと実際の関数の間で変更される可能性があります。詳しくは Duktape API を参照してください。</p><h3 id="最小限のduktapeプログラム" tabindex="-1">最小限のDuktapeプログラム <a class="header-anchor" href="#最小限のduktapeプログラム" aria-label="Permalink to &quot;最小限のDuktapeプログラム&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;duktape.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_create_heap_default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ctx) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_eval_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;print(&#39;Hello world from Javascript!&#39;);&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_destroy_heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="表記法" tabindex="-1">表記法 <a class="header-anchor" href="#表記法" aria-label="Permalink to &quot;表記法&quot;">​</a></h2><h3 id="バリュースタック" tabindex="-1">バリュースタック <a class="header-anchor" href="#バリュースタック" aria-label="Permalink to &quot;バリュースタック&quot;">​</a></h3><p>この文書では、以下のスタック表記を使用します。スタックは、右に行くほど大きくなるように視覚的に表現されます。</p><p>例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_push_number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_push_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_push_true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span></code></pre></div><p>スタックは次のようになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| 123 | &quot;foo&quot; | true |</span></span></code></pre></div><p>スタック上の要素のうち、操作に影響を与えないものは、1つの要素に省略記号（&quot;...&quot;）を付けて表記しています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ... |</span></span></code></pre></div><p>読み取り、書き込み、挿入、削除などアクティブに操作される要素は、背景が白になります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ... | &lt;obj&gt; | &lt;key&gt; |</span></span></code></pre></div><p>APIコールの明示的なインデックスで識別される要素は、スタックのどこにあってもよいことを強調するために、周囲を省略記号で囲んで表示されます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ... | &lt;obj&gt; | ... | &lt;key&gt; | &lt;value&gt; |</span></span></code></pre></div><p>場合によっては、要素のインデックスを括弧内の数値またはシンボル値で強調することがあります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ... | &lt;val(index)&gt; | &lt;val(index+1)&gt; | ... |</span></span></code></pre></div><p>スタック変換は矢印と2つのスタックで表現します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ... | &lt;obj&gt; | ... | &lt;key&gt; | &lt;value&gt; |  -&gt;  | ... | &lt;obj&gt; | ... |</span></span></code></pre></div><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="ヒープ" tabindex="-1">ヒープ <a class="header-anchor" href="#ヒープ" aria-label="Permalink to &quot;ヒープ&quot;">​</a></h3><p>ガベージコレクションのための単一の領域です。1つ以上のコンテキストで共有されます。</p><h3 id="コンテキスト" tabindex="-1">コンテキスト <a class="header-anchor" href="#コンテキスト" aria-label="Permalink to &quot;コンテキスト&quot;">​</a></h3><p>Duktape APIで使用されるハンドルで、Duktapeスレッド（コルーチン）およびそのコールスタックとバリュースタックに関連付けられます。</p><h3 id="コールスタック" tabindex="-1">コールスタック <a class="header-anchor" href="#コールスタック" aria-label="Permalink to &quot;コールスタック&quot;">​</a></h3><p>コンテキストのアクティブな関数呼び出しチェーンのブックキーピングです。ECMAScriptと Duktape/Cの両方の関数呼び出しが含まれます。</p><h3 id="バリュースタック-1" tabindex="-1">バリュースタック <a class="header-anchor" href="#バリュースタック-1" aria-label="Permalink to &quot;バリュースタック&quot;">​</a></h3><p>コンテキストのコールスタックで、現在のアクティブ化に属するタグ付けされた値のためのストレージです。</p><p>バリュースタックに保持される値は、伝統的なタグ付き型です。スタック・エントリーは、最も最近の関数呼び出しの下 (&gt;= 0) または上 (&lt; 0) からインデックスが付けられます。</p><h3 id="バリュースタックのインデックス" tabindex="-1">バリュースタックのインデックス <a class="header-anchor" href="#バリュースタックのインデックス" aria-label="Permalink to &quot;バリュースタックのインデックス&quot;">​</a></h3><p>非負 (&gt;= 0) のインデックスは、現在のスタックフレームのスタックエントリを、フレームの底を基準にして指します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| 0 | 1 | 2 | 3 | 4 | &lt;5&gt; |</span></span></code></pre></div><p>負（&lt; 0）のインデックスは、フレームトップからの相対的なスタックエントリを指します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| -6 | -5 | -4 | -3 | -2 | &lt;-1&gt; |</span></span></code></pre></div><p>特殊定数 DUK_INVALID_INDEX は、無効なスタックインデックスを示す負の整数ですこれは API 呼び出しから返されることがあり、また「値がない」ことを示すためにいくつかの API 呼び出しに与えられることがあります。</p><p>バリュースタックトップ(または単に「トップ」)は、最高使用インデックスのすぐ上の虚数要素の非負のインデックスです。例えば、最も使用されているインデックスの上は 5 であるので、スタックトップは 6 です。 トップは現在のスタックサイズを示し、スタックにプッシュされる次の要素のインデックスでもあります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| 0 | 1 | 2 | 3 | 4 | &lt;5&gt; | (6) |</span></span></code></pre></div><blockquote><p>API のスタック操作は、常に現在のスタックフレームに限定されます。現在のフレームより下のスタックエントリを参照する方法はない。これは、コールスタック内の関数が互いの値に影響を与えないようにするためで、意図的なものです。</p></blockquote><h3 id="スタックタイプ" tabindex="-1">スタックタイプ <a class="header-anchor" href="#スタックタイプ" aria-label="Permalink to &quot;スタックタイプ&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Type</th><th>Type constant</th><th>Type mask constant</th><th>Description</th><th>Heap alloc</th></tr></thead><tbody><tr><td>(none)</td><td>DUK_TYPE_NONE</td><td>DUK_TYPE_MASK_NONE</td><td>no type (missing value, invalid index, etc)</td><td>no</td></tr><tr><td>undefined</td><td>DUK_TYPE_UNDEFINED</td><td>DUK_TYPE_MASK_UNDEFINED</td><td>undefined</td><td>no</td></tr><tr><td>null</td><td>DUK_TYPE_NULL</td><td>DUK_TYPE_MASK_NULL</td><td>null</td><td>no</td></tr><tr><td>boolean</td><td>DUK_TYPE_BOOLEAN</td><td>DUK_TYPE_MASK_BOOLEAN</td><td>true and false</td><td>no</td></tr><tr><td>number</td><td>DUK_TYPE_NUMBER</td><td>DUK_TYPE_MASK_NUMBER</td><td>IEEE double</td><td>no</td></tr><tr><td>string</td><td>DUK_TYPE_STRING</td><td>DUK_TYPE_MASK_STRING</td><td>immutable string</td><td>yes</td></tr><tr><td>object</td><td>DUK_TYPE_OBJECT</td><td>DUK_TYPE_MASK_OBJECT</td><td>object with properties</td><td>yes</td></tr><tr><td>buffer</td><td>DUK_TYPE_BUFFER</td><td>DUK_TYPE_MASK_BUFFER</td><td>mutable byte buffer, fixed/dynamic</td><td>yes</td></tr><tr><td>pointer</td><td>DUK_TYPE_POINTER</td><td>DUK_TYPE_MASK_POINTER</td><td>opaque pointer (void *)</td><td>no</td></tr><tr><td>lightfunc</td><td>DUK_TYPE_LIGHTFUNC</td><td>DUK_TYPE_MASK_LIGHTFUNC</td><td>plain Duktape/C pointer (non-object)</td><td>no</td></tr></tbody></table><p>Heap alloc カラムは、タグ付けされた値がヒープで割り当てられたオブジェクトを指しているかどうかを示し、（オブジェクトのプロパティテーブルのように）追加で割り当てられる可能性があることを示す。</p><h3 id="スタックタイプマスク" tabindex="-1">スタックタイプマスク <a class="header-anchor" href="#スタックタイプマスク" aria-label="Permalink to &quot;スタックタイプマスク&quot;">​</a></h3><p>各スタックタイプにはビットインデックスがあり、スタックタイプのセットをビットマスクとして表現することができます。呼び出し側のコードはこのようなビットセットを使って、例えばあるスタック値があるタイプのセットに属するかどうかをチェックすることができます。</p><p>例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_get_type_mask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DUK_TYPE_MASK_NUMBER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  DUK_TYPE_MASK_STRING </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  DUK_TYPE_MASK_OBJECT)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type is number, string, or object</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>さらに便利にタイプのセットをマッチングさせるための特定のAPIコールがあります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_check_type_mask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, DUK_TYPE_MASK_NUMBER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 DUK_TYPE_MASK_STRING </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 DUK_TYPE_MASK_OBJECT)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type is number, string, or object</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="配列のインデックス" tabindex="-1">配列のインデックス <a class="header-anchor" href="#配列のインデックス" aria-label="Permalink to &quot;配列のインデックス&quot;">​</a></h3><p>ECMAScript のオブジェクトと配列のキーは文字列のみです。配列のインデックス (0, 1, 2, ...) も文字列で表現され、これは [0, 2**32-2] 範囲のすべての整数に対するそれぞれの数値の標準文字列表現 (&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, ...) として表現されます。概念的には、プロパティ・ルックアップで使われるキーは、まず文字列に強制されます。つまり、obj[123]は実際にはobj[&quot;123&quot;]の略語に過ぎないのです。</p><p>Duktapeは、可能な限り、配列へのアクセスにおいて明示的な数値から文字列への変換を避けようとします。そのため、ECMAScriptコードとDuktape APIを使用するCコードの両方で、数値配列インデックスを使用することが望ましいと言えます。文字列と数値のインデックスを受け付けるAPIコールのバリエーションが一般的に存在します。</p><h3 id="duktape-c関数" tabindex="-1">Duktape/C関数 <a class="header-anchor" href="#duktape-c関数" aria-label="Permalink to &quot;Duktape/C関数&quot;">​</a></h3><p>Duktape/C API 署名のある C 関数は、ECMAScript 関数オブジェクトまたは lightfunc 値と関連付けることができ、関連付けられた値が ECMAScript コードから呼び出されたときに呼び出されます。</p><p>例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_ret_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    duk_push_int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>バリュースタックで与えられる引数の数は、対応する ECMAScript 関数オブジェクトが作成されるときに指定されます: 引数を &quot;そのまま&quot; 取得するための DUK_VARARGS の固定数の引数のどちらかです。</p><ul><li>固定数の引数を使用する場合、余分な引数は削除され、不足する引数は必要に応じて undefined で埋められます。</li><li>DUK_VARARGS を使用する場合、実際の引数の数を決定するために duk_get_top() を使用します。</li></ul><p>関数の戻り値。</p><ul><li>戻り値1：スタックトップが戻り値を含む。</li><li>戻り値0：戻り値は未定義です。</li><li>DUK_ERR_xxx の否定形である DUK_RET_xxx 定数を使用します。</li><li>戻り値 &gt;1: 予約済み、現在は無効。</li></ul><p>エラーの省略記法を使用した場合、エラーメッセージは表示されません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_ret_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_get_top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* throw TypeError if no arguments given */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DUK_RET_TYPE_ERROR;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="スタッシュ" tabindex="-1">スタッシュ <a class="header-anchor" href="#スタッシュ" aria-label="Permalink to &quot;スタッシュ&quot;">​</a></h3><p>スタッシュとは、Duktape/C API を使用して C コードから到達可能で、ECMAScript コードから到達不可能なオブジェクトのことです。スタッシュは、C コードが ECMAScript コードから安全に分離された内部状態を保存することを可能にします。スタッシュは3つあります。</p><ul><li>ヒープ・スタッシュ：同じヒープ内のすべてのスレッドで共有されます。</li><li>グローバルスタッシュ: グローバルオブジェクトを共有するすべてのスレッドで共有されます。</li><li>スレッドキャッシュ: 特定のスレッドに固有のもの。</li></ul><h2 id="ヘッダ定義" tabindex="-1">ヘッダ定義 <a class="header-anchor" href="#ヘッダ定義" aria-label="Permalink to &quot;ヘッダ定義&quot;">​</a></h2><p>このセクションでは、duktape.h で一般的に必要とされるいくつかのヘッダ 定義を要約します。これは完全なものではなく、抜粋は読みやすさのために再 編成されています。特定の定義値には頼らず、定義名だけを頼りにしてください。疑問があれば、ヘッダを直接参照してください。</p><h3 id="duktapeバージョン" tabindex="-1">Duktapeバージョン <a class="header-anchor" href="#duktapeバージョン" aria-label="Permalink to &quot;Duktapeバージョン&quot;">​</a></h3><p>Duktape のバージョンは、DUK_VERSION 定義によって利用可能です。</p><ul><li>DUK_VERSION: 数値（メジャー * 10000 + マイナー * 100 + パッチ）。</li></ul><p>例えば、バージョン2.3.4は、値20304となります。同じ値が Duktape.version を通して ECMAScript コードで利用できます。プレリリースの場合、DUK_VERSION は実際のリリースより 1 つ少ない値です。例えば、2.4.0 プレリリースは 20399 となります。バージョニングを参照してください。</p><h3 id="git情報" tabindex="-1">Git情報 <a class="header-anchor" href="#git情報" aria-label="Permalink to &quot;Git情報&quot;">​</a></h3><p>以下のGit識別子が利用可能です（すべてDuktapeのGitHubリポジトリを参照）。</p><ul><li>DUK_GIT_DESCRIBE: DuktapeビルドのGit記述文字列です。公式リリースの場合は、&quot;v1.0.0 &quot;などですが、スナップショット・ビルドの場合は、&quot;v1.0.0-155-g5b7ef1f-dirty &quot;などの有用なバージョン情報を提供します。</li><li>DUK_GIT_COMMIT: 配布ファイルのビルド元となる正確なコミットハッシュ。</li><li>DUK_GIT_BRANCH: 配布ファイルのビルド元となったブランチ。これは、開発ブランチからビルドされたプロトタイプを識別するのに便利です。</li></ul><p>ECMAScript 環境では、これと同等の定義がありません。</p><h3 id="デバッグプロトコルバージョン" tabindex="-1">デバッグプロトコルバージョン <a class="header-anchor" href="#デバッグプロトコルバージョン" aria-label="Permalink to &quot;デバッグプロトコルバージョン&quot;">​</a></h3><p>デバッグ・プロトコルのバージョン番号です。</p><ul><li>DUK_DEBUG_PROTOCOL_VERSION デバッグプロトコルのバージョン番号 (1つの整数)。</li></ul><h3 id="構造体・型定義" tabindex="-1">構造体・型定義 <a class="header-anchor" href="#構造体・型定義" aria-label="Permalink to &quot;構造体・型定義&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duk_hthread duk_context;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duk_ret_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_c_function)(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_alloc_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_realloc_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_free_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_fatal_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_decode_char_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_codepoint_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codepoint);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duk_codepoint_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_map_char_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_codepoint_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codepoint);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duk_ret_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_safe_call_function) (duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duk_size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_debug_read_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buffer, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duk_size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_debug_write_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buffer, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duk_size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_debug_peek_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_debug_read_flush_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_debug_write_flush_function) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk_debug_detached_function) (duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duk_memory_functions {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        duk_alloc_function alloc_func;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        duk_realloc_function realloc_func;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        duk_free_function free_func;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">udata;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duk_memory_functions duk_memory_functions;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duk_function_list_entry {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	duk_c_function value;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	duk_int_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nargs;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duk_function_list_entry duk_function_list_entry;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duk_number_list_entry {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	duk_double_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duk_number_list_entry duk_number_list_entry;</span></span></code></pre></div><h3 id="エラーコード" tabindex="-1">エラーコード <a class="header-anchor" href="#エラーコード" aria-label="Permalink to &quot;エラーコード&quot;">​</a></h3><p>duk_error() などで使用されるエラーコードです。</p><ul><li>duk_err_none:エラーなし。例えば duk_get_error_code() から。</li><li>DUK_ERR_ERROR: エラー。</li><li>DUK_ERR_EVAL_ERROR: EvalError。</li><li>DUK_ERR_RANGE_ERROR:RangeError：レンジエラー</li><li>DUK_ERR_REFERENCE_ERROR:リファレンス・エラー</li><li>DUK_ERR_SYNTAX_ERROR: 構文エラー</li><li>DUK_ERR_TYPE_ERROR: TypeError (タイプエラー)</li><li>DUK_ERR_URI_ERROR: URIエラー</li></ul><h3 id="duktape-c関数のリターンコード" tabindex="-1">Duktape/C関数のリターンコード <a class="header-anchor" href="#duktape-c関数のリターンコード" aria-label="Permalink to &quot;Duktape/C関数のリターンコード&quot;">​</a></h3><p>例えば return DUK_RET_TYPE_ERROR は duk_type_error() を呼び出すのと似ていますが、より短いものです。</p><ul><li>DUK_RET_ERROR: DUK_ERR_ERROR と一緒に投げます。のと似ています。</li><li>DUK_RET_EVAL_ERROR: DUK_ERR_EVAL_ERROR での投擲と同様です。</li><li>DUK_RET_RANGE_ERROR: DUK_ERR_RANGE_ERROR でのスローイングに似ている</li><li>DUK_RET_REFERENCE_ERROR: DUK_ERR_REFERENCE_ERROR と一緒に投げます。のと似ている</li><li>DUK_RET_SYNTAX_ERROR: DUK_ERR_SYNTAX_ERROR とスローするのと似ています。</li><li>DUK_RET_TYPE_ERROR: DUK_ERR_TYPE_ERROR とスローするのと似ている</li><li>DUK_RET_URI_ERROR: DUK_ERR_URI_ERROR とスローするのと似ている</li></ul><h3 id="保護された呼び出しのためのリターンコード" tabindex="-1">保護された呼び出しのためのリターンコード <a class="header-anchor" href="#保護された呼び出しのためのリターンコード" aria-label="Permalink to &quot;保護された呼び出しのためのリターンコード&quot;">​</a></h3><p>保護された呼び出し（例：duk_safe_call()、duk_pcall()）に対するリターンコード。</p><ul><li>duk_exec_success:呼び出しはエラーなしで終了</li><li>duk_exec_error:呼び出しに失敗、エラーは捕捉された</li></ul><h3 id="duk-compileのためのコンパイルフラグ" tabindex="-1">duk_compileのためのコンパイルフラグ <a class="header-anchor" href="#duk-compileのためのコンパイルフラグ" aria-label="Permalink to &quot;duk_compileのためのコンパイルフラグ&quot;">​</a></h3><p>duk_compile() や duk_eval() などのためのコンパイルフラグです。</p><ul><li>DUK_COMPILE_EVAL: (プログラムではなく)評価コードをコンパイルする</li><li>DUK_COMPILE_FUNCTION: (プログラムの代わりに)関数コードをコンパイルする</li><li>DUK_COMPILE_STRICT:プログラム、eval、または関数に対して、厳密な（外側の）コンテキストを使用する</li></ul><h3 id="duk-def-propのフラグについて" tabindex="-1">duk_def_propのフラグについて <a class="header-anchor" href="#duk-def-propのフラグについて" aria-label="Permalink to &quot;duk_def_propのフラグについて&quot;">​</a></h3><p>duk_def_prop() とその派生型のためのフラグです。</p><ul><li>DUK_DEFPROP_WRITABLE: 書き込み可能に設定する (DUK_DEFPROP_HAVE_WRITABLE が設定されている場合のみ有効)。</li><li>DUK_DEFPROP_ENUMERABLE: 列挙可能に設定する（DUK_DEFPROP_HAVE_ENUMERABLEが設定されている場合に有効）。</li><li>DUK_DEFPROP_CONFIGURABLE: 設定可能 (DUK_DEFPROP_HAVE_CONFIGURABLE が設定されている場合のみ有効)</li><li>DUK_DEFPROP_HAVE_WRITABLE: 書き込み可能かどうかを設定/解除する</li><li>DUK_DEFPROP_HAVE_ENUMERABLE: 列挙可能を設定または解除します。</li><li>DUK_DEFPROP_HAVE_CONFIGURABLE: コンフィギュラブルを設定/解除します。</li><li>DUK_DEFPROP_HAVE_VALUE: 値を設定します (バリュースタックで指定されます)。</li><li>DUK_DEFPROP_HAVE_GETTER: ゲッターを設定します (バリュースタックに保存されます)</li><li>DUK_DEFPROP_HAVE_SETTER: (バリュースタックにある)セッターを設定する</li><li>DUK_DEFPROP_FORCE:可能であれば変更を強制。仮想プロパティなどではまだ失敗する可能性があります</li><li>DUK_DEFPROP_SET_WRITABLE: (DUK_DEFPROP_HAVE_WRITABLE | DUK_DEFPROP_WRITABLE)</li><li>DUK_DEFPROP_CLEAR_WRITABLE: DUK_DEFPROP_HAVE_WRITABLE</li><li>DUK_DEFPROP_SET_ENUMERABLE: (DUK_DEFPROP_HAVE_ENUMERABLE | DUK_DEFPROP_ENUMERABLE)</li><li>DUK_DEFPROP_CLEAR_ENUMERABLE: DUK_DEFPROP_HAVE_ENUMERABLE</li><li>DUK_DEFPROP_SET_CONFIGURABLE: (DUK_DEFPROP_HAVE_CONFIGURABLE | DUK_DEFPROP_CONFIGURABLE)</li><li>DUK_DEFPROP_CLEAR_CONFIGURABLE: DUK_DEFPROP_HAVE_CONFIGURABLE</li></ul><p>いくつかの便利なバリアントは省略され、 duk_def_prop() を参照。</p><h3 id="duk-enumの列挙型フラグ" tabindex="-1">duk_enumの列挙型フラグ <a class="header-anchor" href="#duk-enumの列挙型フラグ" aria-label="Permalink to &quot;duk_enumの列挙型フラグ&quot;">​</a></h3><p>duk_enum() の列挙フラグ。</p><ul><li>DUK_ENUM_INCLUDE_NONENUMERABLE: 列挙可能なプロパティに加え、列挙不可能なプロパティも列挙します。</li><li>DUK_ENUM_INCLUDE_HIDDEN: 隠されたシンボルも列挙する (Duktape 1.x では内部プロパティと呼ばれる)</li><li>DUK_ENUM_INCLUDE_SYMBOLS: シンボルを列挙します。Symbolのキーを列挙する (デフォルトは列挙しない)</li><li>DUK_ENUM_EXCLUDE_STRINGS: 文字列のキーを列挙しない（デフォルトは列挙する）</li><li>DUK_ENUM_OWN_PROPERTIES_ONLY: プロトタイプチェーンは歩かず、自身のプロパティのみをチェックする</li><li>DUK_ENUM_ARRAY_INDICES_ONLY: 配列のインデックスのみを列挙する</li><li>DUK_ENUM_SORT_ARRAY_INDICES: 配列インデックスのソート(継承された配列インデックスを含む全列挙結果に適用)</li><li>DUK_ENUM_NO_PROXY_BEHAVIOR: プロキシ動作を起動せず、プロキシオブジェクト自体を列挙します。</li></ul><h3 id="duk-gcのガーベッジコレクションフラグ" tabindex="-1">duk_gcのガーベッジコレクションフラグ <a class="header-anchor" href="#duk-gcのガーベッジコレクションフラグ" aria-label="Permalink to &quot;duk_gcのガーベッジコレクションフラグ&quot;">​</a></h3><p>duk_gc() のフラグ。</p><ul><li>DUK_GC_COMPACT: ヒープオブジェクトをコンパクトに</li></ul><h3 id="強制力のヒント" tabindex="-1">強制力のヒント <a class="header-anchor" href="#強制力のヒント" aria-label="Permalink to &quot;強制力のヒント&quot;">​</a></h3><p>強制力のヒント</p><ul><li>DUK_HINT_NONE: 強制入力が Date でない場合は、String を優先する（E5 8.12.8 セクション）。</li><li>DUK_HINT_STRING: 文字列を優先する</li><li>DUK_HINT_NUMBER: 数値を優先する</li></ul><h3 id="シンボルリテラルマクロ" tabindex="-1">シンボルリテラルマクロ <a class="header-anchor" href="#シンボルリテラルマクロ" aria-label="Permalink to &quot;シンボルリテラルマクロ&quot;">​</a></h3><p>以下のマクロは、C リテラルとして内部 Symbol 表現を作成するために定義されています。すべての引数は文字列リテラルでなければならず、計算値であってはなりません。</p><ul><li>DUK_HIDDEN_SYMBOL(x): Duktape固有の隠しシンボルのCリテラル。</li><li>DUK_GLOBAL_SYMBOL(x): グローバルシンボルのCリテラル。Symbol.for(x)と同等。</li><li>DUK_LOCAL_SYMBOL(x,uniq): ローカルシンボルのCリテラル、Symbol(x)と同等、&#39;uniq&#39;で提供されるユニークパートはDuktape内部フォーマットと衝突してはならない、推奨はユニークパートの前に&quot;!&quot;をつけること。</li><li>DUK_WELLKNOWN_SYMBOL(x): Symbol.iteratorのようなよく知られたシンボルを表すCリテラル</li><li>DUK_INTERNAL_SYMBOL(x): Duktape内部シンボルのCリテラル。アプリケーションは通常このマクロを全く使うべきでなく、Duktape内部シンボルのみに予約されています（バージョン保証なし）。</li></ul><h3 id="その他の定義" tabindex="-1">その他の定義 <a class="header-anchor" href="#その他の定義" aria-label="Permalink to &quot;その他の定義&quot;">​</a></h3><ul><li>DUK_INVALID_INDEX: スタックインデックスが無効、なし、またはn/aです。</li><li>DUK_VARARGS: 関数が変数の引数を取る</li><li>DUK_API_ENTRY_STACK: 関数エントリ時に確保が保証されているバリュースタックエントリ数</li></ul>`,122)]))}const u=s(l,[["render",h]]);export{o as __pageData,u as default};
