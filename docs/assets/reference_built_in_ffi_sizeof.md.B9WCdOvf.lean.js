import{_ as s,c as a,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"ffi.sizeof","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/ffi/sizeof.md","filePath":"reference/built_in/ffi/sizeof.md","lastUpdated":1729914702000}'),l={name:"reference/built_in/ffi/sizeof.md"};function n(h,i,o,d,p,r){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="ffi-sizeof" tabindex="-1">ffi.sizeof <a class="header-anchor" href="#ffi-sizeof" aria-label="Permalink to &quot;ffi.sizeof&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ct [, nelem])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>ffi.sizeof</code> 関数は、指定した型 <code>ct</code> または <code>cdata</code> オブジェクトのサイズをバイト単位で返します。配列型の場合、オプションで <code>nelem</code> を指定して要素数を決めることができます。サイズが不明な場合（例: <code>void</code> や関数型）は <code>nil</code> を返します。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li>可変長配列（VLA）や可変長構造体（VLS）のサイズを取得する場合は、要素数 <code>nelem</code> を指定する必要があります。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ffi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 4 (通常のシステム上)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;double&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 8</span></span></code></pre></div><p>このコードは、<code>int</code> 型と <code>double</code> 型のサイズをバイト単位で出力します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>ffi.alignof</li><li>ffi.offsetof</li></ul>`,13)]))}const f=s(l,[["render",n]]);export{c as __pageData,f as default};
