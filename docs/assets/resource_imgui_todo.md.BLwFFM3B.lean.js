import{_ as i,c as t,a2 as o,o as l}from"./chunks/framework.CuCbyi2k.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/imgui/todo.md","filePath":"resource/imgui/todo.md","lastUpdated":1731504395000}'),n={name:"resource/imgui/todo.md"};function a(r,e,s,p,d,u){return l(),t("div",null,e[0]||(e[0]=[o('<p>dear imgui ISSUES &amp; TODO LIST</p><p>Issue numbers (#) refer to GitHub issues listed at <a href="https://github.com/ocornut/imgui/issues/XXXX" target="_blank" rel="noreferrer">https://github.com/ocornut/imgui/issues/XXXX</a> THIS LIST IS NOT WELL MAINTAINED. MOST OF THE WORK HAPPENS ON GITHUB NOWADAYS. The list below consist mostly of ideas noted down before they are requested/discussed by users (at which point they usually exist on the github issue tracker). It&#39;s mostly a bunch of personal notes, probably incomplete. Feel free to query if you have any questions.</p><ul><li><p>doc: add a proper documentation system (maybe relying on automation? #435)</p></li><li><p>doc: checklist app to verify backends/integration of imgui (test inputs, rendering, callback, etc.).</p></li><li><p>doc/tips: tips of the day: website? applet in imgui_club?</p></li><li><p>window: preserve/restore relative focus ordering (persistent or not), and e.g. of multiple reappearing windows (#2304) -&gt; also see docking reference to same #.</p></li><li><p>window: calling SetNextWindowSize() every frame with &lt;= 0 doesn&#39;t do anything, may be useful to allow (particularly when used for a single axis). (#690)</p></li><li><p>window: add a way for very transient windows (non-saved, temporary overlay over hundreds of objects) to &quot;clean&quot; up from the global window list. perhaps a lightweight explicit cleanup pass.</p></li><li><p>window: auto-fit feedback loop when user relies on any dynamic layout (window width multiplier, column) appears weird to end-user. clarify.</p></li><li><p>window: begin with *p_open == false could return false.</p></li><li><p>window: get size/pos helpers given names (see discussion in #249)</p></li><li><p>window: when window is very small, prioritize resize button over close button.</p></li><li><p>window: double-clicking on title bar to minimize isn&#39;t consistent interaction, perhaps move to single-click on left-most collapse icon?</p></li><li><p>window: expose contents size. (#1045)</p></li><li><p>window: using SetWindowPos() inside Begin() and moving the window with the mouse reacts a very ugly glitch. We should just defer the SetWindowPos() call.</p></li><li><p>window: GetWindowSize() returns (0,0) when not calculated? (#1045)</p></li><li><p>window: investigate better auto-positioning for new windows.</p></li><li><p>window: top most window flag? more z-order contrl? (#2574)</p></li><li><p>window/size: manually triggered auto-fit (double-click on grip) shouldn&#39;t resize window down to viewport size?</p></li><li><p>window/size: how to allow to e.g. auto-size vertically to fit contents, but be horizontally resizable? Assuming SetNextWindowSize() is modified to treat -1.0f on each axis as &quot;keep as-is&quot; (would be good but might break erroneous code): Problem is UpdateWindowManualResize() and lots of code treat (window-&gt;AutoFitFramesX &gt; 0 || window-&gt;AutoFitFramesY &gt; 0) together.</p></li><li><p>window/opt: freeze window flag: if not focused/hovered, return false, render with previous ImDrawList. and/or reduce refresh rate. -&gt; this may require enforcing that it is illegal to submit contents if Begin returns false.</p></li><li><p>window/child: background options for child windows, border option (disable rounding).</p></li><li><p>window/child: allow resizing of child windows (possibly given min/max for each axis?.)</p></li><li><p>window/child: allow SetNextWindowContentSize() to work on child windows.</p></li><li><p>window/clipping: some form of clipping when DisplaySize (or corresponding viewport) is zero.</p></li><li><p>window/tabbing: add a way to signify that a window or docked window requires attention (e.g. blinking title bar, trying to click behind a modal).</p></li><li><p>window/id_stack: add e.g. window-&gt;GetIDFromPath() with support for leading / and ../ (#1390, #331) -&gt; model from test engine. ! scrolling: exposing horizontal scrolling with Shift+Wheel even when scrollbar is disabled expose lots of issues (#2424, #1463)</p></li><li><p>scrolling: while holding down a scrollbar, try to keep the same contents visible (at least while not moving mouse)</p></li><li><p>scrolling: allow immediately effective change of scroll after Begin() if we haven&#39;t appended items yet.</p></li><li><p>scrolling: forward mouse wheel scrolling to parent window when at the edge of scrolling limits? (useful for listbox,tables?)</p></li><li><p>scrolling/style: shadows on scrollable areas to denote that there is more contents (see e.g. DaVinci Resolve ui)</p></li><li><p>drawdata: make it easy to deep-copy (or swap?) a full ImDrawData so user can easily save that data if they use threaded rendering. (#1860 see ImDrawDataSnapshot) ! drawlist: add CalcTextSize() func to facilitate consistent code from user pov (currently need to use ImGui or ImFont alternatives!)</p></li><li><p>drawlist: maintaining bounding box per command would allow to merge draw command when clipping isn&#39;t relied on (typical non-scrolling window or non-overflowing column would merge with previous command). (WIP branch)</p></li><li><p>drawlist: make it easier to toggle AA per primitive, so we can use e.g. non-AA fill + AA borders more naturally</p></li><li><p>drawlist: non-AA strokes have gaps between points (#593, #288), glitch especially on RenderCheckmark() and ColorPicker4().</p></li><li><p>drawlist: callback: add an extra void* in ImDrawCallback to expose render state instead of pulling from Renderer_RenderState (would break API).</p></li><li><p>drawlist: AddRect vs AddLine position confusing (#2441)</p></li><li><p>drawlist/opt: store rounded corners in texture to use 1 quad per corner (filled and wireframe) to lower the cost of rounding. (#1962)</p></li><li><p>drawlist/opt: AddRect() axis aligned pixel aligned (no-aa) could use 8 triangles instead of 16 and no normal calculation.</p></li><li><p>drawlist/opt: thick AA line could be doable in same number of triangles as 1.0 AA line by storing gradient+full color in atlas.</p></li><li><p>items: IsItemHovered() info stored in a stack? so that &#39;if TreeNode() { Text; TreePop; } if IsHovered&#39; return the hover state of the TreeNode?</p></li><li><p>widgets: display mode: widget-label, label-widget (aligned on column or using fixed size), label-newline-tab-widget etc. (#395)</p></li><li><p>widgets: clean up widgets internal toward exposing everything and stabilizing imgui_internals.h.</p></li><li><p>widgets: add always-allow-overlap mode. This should perhaps be the default? one problem is that highlight after mouse-wheel scrolling gets deferred, makes scrolling more flickery.</p></li><li><p>widgets: start exposing PushItemFlag() and ImGuiItemFlags</p></li><li><p>widgets: alignment options in style (e.g. center Selectable, Right-Align within Button, etc.) #1260</p></li><li><p>widgets: activate by identifier (trigger button, focus given id)</p></li><li><p>widgets: custom glyph/shapes replacements for stock sapes. (also #6090 #2431 #2235 #6517)</p></li><li><p>widgets: coloredit: keep reporting as active when picker is on?</p></li><li><p>widgets: group/scalarn functions: expose more per-component information. e.g. store NextItemData.ComponentIdx set by scalarn function, groups can expose them back somehow.</p></li><li><p>selectable: using (size.x == 0.0f) and (SelectableTextAlign.x &gt; 0.0f) followed by SameLine() is currently not supported.</p></li><li><p>selectable: generic BeginSelectable()/EndSelectable() mechanism. (work out alongside range-select branch)</p></li><li><p>selectable: a way to visualize partial/mixed selection (e.g. parent tree node has children with mixed selection)</p></li><li><p>input text: preserve scrolling when unfocused?</p></li><li><p>input text: reorganize event handling, allow CharFilter to modify buffers, allow multiple events? (#541)</p></li><li><p>input text: expose CursorPos in char filter event (#816)</p></li><li><p>input text: try usage idiom of using InputText with data only exposed through get/set accessors, without extraneous copy/alloc. (#3009)</p></li><li><p>input text: access public fields via a non-callback API e.g. InputTextGetState(&quot;xxx&quot;) that may return nullptr if not active (available in internals)</p></li><li><p>input text: flag to disable live update of the user buffer (also applies to float/int text input) (#701)</p></li><li><p>input text: hover tooltip could show unclamped text</p></li><li><p>input text: support for INSERT key to toggle overwrite mode. currently disabled because stb_textedit behavior is unsatisfactory on multi-line. (#2863)</p></li><li><p>input text: option to Tab after an Enter validation.</p></li><li><p>input text: add ImGuiInputTextFlags_EnterToApply? (off #218)</p></li><li><p>input text: easier ways to update buffer (from source char*) while owned. preserve some sort of cursor position for multi-line text.</p></li><li><p>input text: add discard flag (e.g. ImGuiInputTextFlags_DiscardActiveBuffer) or make it easier to clear active focus for text replacement during edition (#725)</p></li><li><p>input text: display bug when clicking a drag/slider after an input text in a different window has all-selected text (order dependent). actually a very old bug but no one appears to have noticed it.</p></li><li><p>input text: allow centering/positioning text so that ctrl+clicking Drag or Slider keeps the textual value at the same pixel position.</p></li><li><p>input text: decorrelate display layout from inputs with custom template - e.g. what&#39;s the easiest way to implement a nice IP/Mac address input editor?</p></li><li><p>input text: global callback system so user can plug in an expression evaluator easily. (#1691)</p></li><li><p>input text: force scroll to end or scroll to a given line/contents (so user can implement a log or a search feature)</p></li><li><p>input text: a way to preview completion (e.g. disabled text completing from the cursor)</p></li><li><p>input text: a side bar that could e.g. preview where errors are. probably left to the user to draw but we&#39;d need to give them the info there.</p></li><li><p>input text: a way for the user to provide syntax coloring.</p></li><li><p>input text: Shift+TAB with ImGuiInputTextFlags_AllowTabInput could eat preceding blanks, up to tab_count.</p></li><li><p>input text multi-line: don&#39;t directly call AddText() which does an unnecessary vertex reserve for character count prior to clipping. and/or more line-based clipping to AddText(). and/or reorganize TextUnformatted/RenderText for more efficiency for large text (e.g TextUnformatted could clip and log separately, etc).</p></li><li><p>input text multi-line: support for copy/cut without selection (copy/cut current line?)</p></li><li><p>input text multi-line: line numbers? status bar? (follow up on #200)</p></li><li><p>input text multi-line: behave better when user changes input buffer while editing is active (even though it is illegal behavior). namely, the change of buffer can create a scrollbar glitch (#725)</p></li><li><p>input text multi-line: better horizontal scrolling support (#383, #1224)</p></li><li><p>input text multi-line: single call to AddText() should be coarse clipped on InputTextEx() end.</p></li><li><p>input number: optional range min/max for Input*() functions</p></li><li><p>input number: holding [-]/[+] buttons could increase the step speed non-linearly (or user-controlled)</p></li><li><p>input number: use mouse wheel to step up/down</p></li><li><p>layout: helper or a way to express ImGui::SameLine(ImGui::GetCursorStartPos().x + ImGui::CalcItemWidth() + ImGui::GetStyle().ItemInnerSpacing.x); in a simpler manner.</p></li><li><p>layout, font: horizontal tab support, A) text mode: forward only tabs (e.g. every 4 characters/N pixels from pos x1), B) manual mode: explicit tab stops acting as mini columns, no clipping (for menu items, many kind of uses, also vaguely relate to #267, #395)</p></li><li><p>layout: horizontal layout helper (#97)</p></li><li><p>layout: horizontal flow until no space left (#404)</p></li><li><p>layout: more generic alignment state (left/right/centered) for single items?</p></li><li><p>layout: clean up the InputFloatN/SliderFloatN/ColorEdit4 layout code. item width should include frame padding.</p></li><li><p>layout: vertical alignment of mixed height items (e.g. buttons) within a same line (#1284)</p></li><li><p>layout: null layout mode were items are not rendered but user can query GetItemRectMin()/Max/Size.</p></li><li><p>layout: (R&amp;D) local multi-pass layout mode.</p></li><li><p>layout: (R&amp;D) bind authored layout data (created by an off-line tool), items fetch their pos/size at submission, self-optimize data structures to stable linear access.</p></li><li><p>tables: see <a href="https://github.com/ocornut/imgui/issues/2957#issuecomment-569726095" target="_blank" rel="noreferrer">https://github.com/ocornut/imgui/issues/2957#issuecomment-569726095</a></p></li><li><p>group: BeginGroup() needs a border option. (~#1496)</p></li><li><p>group: IsItemHovered() after EndGroup() covers whole AABB rather than the intersection of individual items. Is that desirable?</p></li><li><p>group: merge deactivation/activation within same group (fwd WasEdited flag). (#2550)</p></li></ul><p>!- color: the color conversion helpers/types are a mess and needs sorting out.</p><ul><li><p>color: (api breaking) ImGui::ColorConvertXXX functions should be loose ImColorConvertXX to match imgui_internals.h</p></li><li><p>plot: full featured plot/graph api w/ scrolling, zooming etc. --&gt; promote using ImPlot</p></li><li><p>(plot: deleted all other todo lines on 2023-06-28)</p></li><li><p>clipper: ability to disable the clipping through a simple flag/bool.</p></li><li><p>clipper: ability to run without knowing full count in advance.</p></li><li><p>clipper: horizontal clipping support. (#2580)</p></li><li><p>separator: expose flags (#759)</p></li><li><p>separator: take indent into consideration (optional)</p></li><li><p>separator: width, thickness, centering (#1643, #2657)</p></li><li><p>splitter: formalize the splitter idiom into an official api (we want to handle n-way split) (#319)</p></li><li><p>docking: merge docking branch (#2109)</p></li><li><p>tabs: &quot;there is currently a problem because TabItem() will try to submit their own tooltip after 0.50 second, and this will have the effect of making your tooltip flicker once.&quot; -&gt; tooltip priority work (WIP branch)</p></li><li><p>tabs: make EndTabBar fail if users doesn&#39;t respect BeginTabBar return value, for consistency/future-proofing.</p></li><li><p>tabs: persistent order/focus in BeginTabBar() api (#261, #351)</p></li><li><p>tabs: explicit api (even if internal) to cleanly manipulate tab order.</p></li><li><p>image/image button: misalignment on padded/bordered button?</p></li><li><p>image/image button: parameters are confusing, image() has tint_col,border_col whereas imagebutton() has bg_col/tint_col. Even thou they are different parameters ordering could be more consistent. can we fix that?</p></li><li><p>slider: allow using the [-]/[+] buttons used by InputFloat()/InputInt()</p></li><li><p>slider: add dragging-based widgets to edit values with mouse (on 2 axises), saving screen real-estate.</p></li><li><p>slider: tint background based on value (e.g. v_min -&gt; v_max, or use 0.0f either side of the sign)</p></li><li><p>slider: relative dragging? + precision dragging</p></li><li><p>slider: step option (#1183)</p></li><li><p>slider: style: fill % of the bar instead of positioning a drag.</p></li><li><p>knob: rotating knob widget (#942)</p></li><li><p>drag float: support for reversed drags (min &gt; max) (removed is_locked, also see fdc526e)</p></li><li><p>drag float: up/down axis</p></li><li><p>drag float: power != 0.0f with current value being outside the range keeps the value stuck.</p></li><li><p>drag float: added leeway on edge (e.g. a few invisible steps past the clamp limits)</p></li><li><p>combo: a way/helper to customize the combo preview (#1658) -&gt; experimental BeginComboPreview()</p></li><li><p>combo/listbox: keyboard control. need InputText-like non-active focus + key handling. considering keyboard for custom listbox (pr #203)</p></li><li><p>listbox: multiple selection (WIP range-select branch)</p></li><li><p>listbox: unselect option (#1208)</p></li><li><p>listbox: make it easier/more natural to implement range-select (need some sort of info/ref about the last clicked/focused item that user can translate to an index?) (WIP range-select branch)</p></li><li><p>listbox: user may want to initial scroll to focus on the one selected value?</p></li><li><p>listbox: disable capturing mouse wheel if the listbox has no scrolling. (#1681)</p></li><li><p>listbox: scrolling should track modified selection.</p></li><li><p>listbox: future api should allow to enable horizontal scrolling (#2510)</p></li></ul><p>!- popups/menus: clarify usage of popups id, how MenuItem/Selectable closing parent popups affects the ID, etc. this is quite fishy needs improvement! (#331, #402)</p><ul><li><p>modals: make modal title bar blink when trying to click outside the modal</p></li><li><p>modals: technically speaking, we could make Begin() with ImGuiWindowFlags_Modal work without involving popup. May help untangle a few things, as modals are more like regular windows than popups.</p></li><li><p>popups: if the popup functions took explicit ImGuiID it would allow the user to manage the scope of those ID. (#331)</p></li><li><p>popups: clicking outside (to close popup) and holding shouldn&#39;t drag window below.</p></li><li><p>popups: add variant using global identifier similar to Begin/End (#402)</p></li><li><p>popups: border options. richer api like BeginChild() perhaps? (#197)</p></li><li><p>popups/modals: although it is sometimes convenient that popups/modals lifetime is owned by imgui, we could also a bool-owned-by-user api as long as Begin() return value testing is enforced.</p></li><li><p>tooltip: drag and drop with tooltip near monitor edges lose/changes its last direction instead of locking one. The drag and drop tooltip should always follow without changing direction.</p></li><li><p>tooltip: allow to set the width of a tooltip to allow TextWrapped() etc. while keeping the height automatic.</p></li><li><p>tooltip: drag tooltip hovering over source widget with IsItemHovered/SetTooltip flickers (WIP branch)</p></li><li><p>tooltip: tooltip priorities to override a stock tooltip (e.g. shortcut tooltip)</p></li><li><p>status-bar: add a per-window status bar helper similar to what menu-bar does. generalize concept of layer0 rect in window (can make _MenuBar window flag obsolete too).</p></li><li><p>shortcuts: store multiple keychords in ImGuiKeyChord</p></li><li><p>shortcuts: Hovered route (lower than Focused, higher than Global)</p></li><li><p>shortcuts: local-style shortcut api, e.g. parse &quot;&amp;Save&quot;</p></li><li><p>shortcuts,menus: global-style shortcut api e.g. &quot;Save (CTRL+S)&quot; -&gt; explicit flag for recursing into closed menu</p></li><li><p>menus: hovering from menu to menu on a menu-bar has 1 frame without any menu, which is a little annoying. ideally zero.</p></li><li><p>menus: would be nice if the Selectable() supported horizontal alignment (must be given the equivalent of WorkRect.Max.x matching the position of the shortcut column)</p></li><li><p>tree node: add treenode/treepush int variants? not there because (void*) cast from int warns on some platforms/settings?</p></li><li><p>tree node: try to apply scrolling at time of TreePop() if node was just opened and end of node is past scrolling limits?</p></li><li><p>tree node / selectable render mismatch which is visible if you use them both next to each other (e.g. cf. property viewer)</p></li><li><p>tree node: tweak color scheme to distinguish headers from selected tree node (#581)</p></li><li><p>tree node: leaf/non-leaf highlight mismatch.</p></li><li><p>tree node/opt: could avoid formatting when clipped (flag assuming we don&#39;t care about width/height, assume single line height? format only %s/%c to be able to count height?)</p></li><li><p>settings: write more decent code to allow saving/loading new fields: columns, selected tree nodes?</p></li><li><p>settings: facilitate extension lazily calling AddSettingsHandler() while running and still getting their data call the ReadXXX handlers immediately.</p></li><li><p>settings: api for per-tool simple persistent data (bool,int,float,columns sizes,etc.) in .ini file (#437)</p></li><li><p>settings/persistence: helpers to make TreeNodeBehavior persist (even during dev!) - may need to store some semantic and/or data type in ImGuiStoragePair</p></li><li><p>style: better default styles. (#707)</p></li><li><p>style: add a highlighted text color (for headers, etc.)</p></li><li><p>style: border types: out-screen, in-screen, etc. (#447)</p></li><li><p>style: add window shadow (fading away from the window. Paint-style calculation of vertices alpha after drawlist would be easier)</p></li><li><p>style: a concept of &quot;compact style&quot; that the end-user can easily rely on (e.g. PushStyleCompact()?) that maps to other settings? avoid implementing duplicate helpers such as SmallCheckbox(), etc.</p></li><li><p>style: try to make PushStyleVar() more robust to incorrect parameters (to be more friendly to edit &amp; continues situation).</p></li><li><p>style: global scale setting.</p></li><li><p>style: FramePadding could be different for up vs down (#584)</p></li><li><p>style: WindowPadding needs to be EVEN as the 0.5 multiplier used on this value probably have a subtle effect on clip rectangle</p></li><li><p>style: have a more global HSV setter (e.g. alter hue on all elements). consider replacing active/hovered by offset in HSV space? (#438, #707, #1223)</p></li><li><p>style: gradients fill (#1223) ~ 2 bg colors for each fill? tricky with rounded shapes and using textures for corners.</p></li><li><p>style editor: color child window height expressed in multiple of line height.</p></li><li><p>log: improve logging of ArrowButton, ListBox, TabItem</p></li><li><p>log: carry on indent / tree depth when opening a child window</p></li><li><p>log: enabling log ends up pushing and growing vertices buffers because we don&#39;t distinguish layout vs render clipping</p></li><li><p>log: have more control over the log scope (e.g. stop logging when leaving current tree node scope)</p></li><li><p>log: be able to log anything (e.g. right-click on a window/tree-node, shows context menu? log into tty/file/clipboard)</p></li><li><p>log: let user copy any window content to clipboard easily (CTRL+C on windows? while moving it? context menu?). code is commented because it fails with multiple Begin/End pairs.</p></li><li><p>log: obsolete LogButtons().... (was: LogButtons() options for specifying depth and/or hiding depth slider)</p></li><li><p>filters: set a current filter that certains items (e.g. tree node) can automatically query to hide themselves</p></li><li><p>filters: handle wild-cards (with implicit leading/trailing *), reg-exprs</p></li><li><p>filters: fuzzy matches (may use code at blog.forrestthewoods.com/4cffeed33fdb)</p></li><li><p>drag and drop: focus drag target window on hold (even without open)</p></li><li><p>drag and drop: releasing a drop shows the &quot;...&quot; tooltip for one frame - since e13e598 (#1725)</p></li><li><p>drag and drop: drag source on a group object (would need e.g. an invisible button covering group in EndGroup) <a href="https://twitter.com/paniq/status/1121446364909535233" target="_blank" rel="noreferrer">https://twitter.com/paniq/status/1121446364909535233</a></p></li><li><p>drag and drop: have some way to know when a drag begin from BeginDragDropSource() pov. (see 2018/01/11 post in #143)</p></li><li><p>drag and drop: allow preview tooltip to be submitted from a different place than the drag source. (#1725)</p></li><li><p>drag and drop: make it easier and provide a demo to have tooltip both are source and target site, with a more detailed one on target site (tooltip ordering problem)</p></li><li><p>drag and drop: demo with reordering nodes (in a list, or a tree node). (#143)</p></li><li><p>drag and drop: test integrating with os drag and drop (make it easy to do a naive WM_DROPFILE integration)</p></li><li><p>drag and drop: allow for multiple payload types. (#143)</p></li><li><p>drag and drop: make payload optional? payload promise? (see 2018/01/11 post in #143)</p></li><li><p>drag and drop: (#143) &quot;both an in-process pointer and a promise to generate a serialized version, for whether the drag ends inside or outside the same process&quot;</p></li><li><p>drag and drop: feedback when hovering a region blocked by modal (mouse cursor &quot;NO&quot;?)</p></li><li><p>markup: simple markup language for color change? (#902, #3130)</p></li><li><p>text: selectable text (for copy) as a generic feature (ItemFlags?)</p></li><li><p>text: proper alignment options in imgui_internal.h</p></li><li><p>text: provided a framed text helper, e.g. <a href="https://pastebin.com/1Laxy8bT" target="_blank" rel="noreferrer">https://pastebin.com/1Laxy8bT</a></p></li><li><p>text: refactor TextUnformatted (or underlying function) to more explicitly request if we need width measurement or not</p></li><li><p>text/layout/tabs: \\t pulling position from base pos + step, or offset array (e.g. could be used in text edit, menus for simple icon+text alignment, etc.)</p></li><li><p>text link/url button: underlined. should api expose an ID or use text contents as ID? which colors enum to use?</p></li><li><p>text/wrapped: should be a more first-class citizen, e.g. wrapped text within a Selectable with known width.</p></li><li><p>text/wrapped: custom separator for text wrapping. (#3002)</p></li><li><p>text/wrapped: figure out better way to use TextWrapped() in an always auto-resize context (tooltip, etc.) (#249)</p></li><li><p>font: arbitrary line spacing. (#2945)</p></li><li><p>font: MergeMode: flags to select overwriting or not (this is now very easy with refactored ImFontAtlasBuildWithStbTruetype)</p></li><li><p>font: free the Alpha buffer if user only requested RGBA. !- font: better CalcTextSizeA() API, at least for simple use cases. current one is horrible (perhaps have simple vs extended versions).</p></li><li><p>font: for the purpose of RenderTextEllipsis(), it might be useful that CalcTextSizeA() can ignore the trailing padding?</p></li><li><p>font: a CalcTextHeight() helper could run faster than CalcTextSize().y</p></li><li><p>font: enforce monospace through ImFontConfig (for icons?) + create dual ImFont output from same input, reusing rasterized data but with different glyphs/AdvanceX</p></li><li><p>font: finish CustomRectRegister() to allow mapping Unicode codepoint to custom texture data</p></li><li><p>font: remove ID from CustomRect registration, it seems unnecessary!</p></li><li><p>font: make it easier to submit own bitmap font (same texture, another texture?). (#2127, #2575)</p></li><li><p>font: PushFontSize API (#1018)</p></li><li><p>font: MemoryTTF taking ownership confusing/not obvious, maybe default should be opposite?</p></li><li><p>font: storing MinAdvanceX per font would allow us to skip calculating line width (under a threshold of character count) in loops looking for block width</p></li><li><p>font/demo: add tools to show glyphs used by a text blob, display U16 value, list missing glyphs.</p></li><li><p>font/demo: demonstrate use of ImFontGlyphRangesBuilder.</p></li><li><p>font/atlas: add a missing Glyphs.reserve()</p></li><li><p>font/atlas: incremental updates</p></li><li><p>font/atlas: dynamic font atlas to avoid baking huge ranges into bitmap and make scaling easier.</p></li><li><p>font/draw: vertical and/or rotated text renderer (#705) - vertical is easier clipping wise</p></li><li><p>font/draw: need to be able to specify wrap start position.</p></li><li><p>font/draw: better reserve policy for large horizontal block of text (shouldn&#39;t reserve for all clipped lines). also see #3349.</p></li><li><p>font/draw: fix for drawing 16k+ visible characters in same call.</p></li><li><p>font/draw: underline, squiggle line rendering helpers.</p></li><li><p>font: optimization: for monospace font (like the default one) we can trim IndexXAdvance as long as trailing value is == FallbackXAdvance (need to make sure TAB is still correct), would save on cache line.</p></li><li><p>font: add support for kerning, probably optional. A) perhaps default to (32..128)^2 matrix ~ 9K entries = 36KB, then hash for non-ascii?. B) or sparse lookup into per-char list?</p></li><li><p>font: add a simpler CalcTextSizeA() api? current one ok but not welcome if user needs to call it directly (without going through ImGui::CalcTextSize)</p></li><li><p>font: fix AddRemapChar() to work before atlas has been built.</p></li><li><p>font: (api breaking) remove &quot;TTF&quot; from symbol names. also because it now supports OTF.</p></li><li><p>font/opt: Considering storing standalone AdvanceX table as 16-bit fixed point integer?</p></li><li><p>font/opt: Glyph currently 40 bytes (2+9*4). Consider storing UV as 16-bits integer? (-&gt;32 bytes). X0/Y0/X1/Y1 as 16 fixed-point integers? Or X0/Y0 as float and X1/Y1 as fixed8_8?</p></li><li><p>nav: some features such as PageUp/Down/Home/End should probably work without ImGuiConfigFlags_NavEnableKeyboard? (where do we draw the line? how about CTRL+Tab)</p></li><li><p>nav: Home/End behavior when navigable item is not fully visible at the edge of scrolling? should be backtrack to keep item into view?</p></li><li><p>nav: NavScrollToBringItemIntoView() with item bigger than view should focus top-right? Repro: using Nav in &quot;About Window&quot;</p></li><li><p>nav: expose wrap around flags/logic to allow e.g. grid based layout (pressing NavRight on the right-most element would go to the next row, etc.). see internal&#39;s NavMoveRequestTryWrapping().</p></li><li><p>nav: patterns to make it possible for arrows key to update selection (see JustMovedTo in range_select branch)</p></li><li><p>nav: restore/find nearest NavId when current one disappear (e.g. pressed a button that disappear, or perhaps auto restoring when current button change name)</p></li><li><p>nav: SetItemDefaultFocus() level of priority, so widget like Selectable when inside a popup could claim a low-priority default focus on the first selected iem</p></li><li><p>nav: holding space to repeat a button doesn&#39;t show button activated during hold.</p></li><li><p>nav: NavFlattened: init requests don&#39;t work properly on flattened siblings.</p></li><li><p>nav: NavFlattened: pageup/pagedown/home/end don&#39;t work properly on flattened siblings.</p></li><li><p>nav: NavFlattened: ESC on a flattened child should select something.</p></li><li><p>nav: NavFlattened: broken: in typical usage scenario, the items of a fully clipped child are currently not considered to enter into a NavFlattened child.</p></li><li><p>nav: NavFlattened: cannot access menu-bar of a flattened child window with Alt/menu key (not a very common use case..).</p></li><li><p>nav: simulate right-click or context activation? (SHIFT+F10, keyboard Menu key?)</p></li><li><p>nav/popup: esc/enter default behavior for popups, e.g. be able to mark an &quot;ok&quot; or &quot;cancel&quot; button that would get triggered by those keys, default validation button, etc.</p></li><li><p>nav/treenode: left within a tree node block as a fallback (ImGuiTreeNodeFlags_NavLeftJumpsBackHere by default?)</p></li><li><p>nav/menus: pressing left-right on a vertically clipped menu bar tends to jump to the collapse/close buttons.</p></li><li><p>nav/menus: allow pressing Menu to leave a sub-menu.</p></li><li><p>nav/menus: a way to access the main menu bar with Alt? (currently needs CTRL+TAB) or last focused window menu bar?</p></li><li><p>nav/menus: when using the main menu bar, even though we restore focus after, the underlying window loses its title bar highlight during menu manipulation. could we prevent it?</p></li><li><p>nav/menus: main menu bar currently cannot restore a nullptr focus. Could save NavWindow at the time of being focused, similarly to what popup do?</p></li><li><p>nav/menus: Alt,Up could open the first menu (e.g. &quot;File&quot;) currently it tends to nav into the window/collapse menu. Do do that we would need custom transition?</p></li><li><p>nav/windowing: when CTRL+Tab/windowing is active, the HoveredWindow detection doesn&#39;t take account of the window display re-ordering.</p></li><li><p>nav/windowing: Resizing window will currently fail with certain types of resizing constraints/callback applied</p></li><li><p>focus: preserve ActiveId/focus stack state, e.g. when opening a menu and close it, previously selected InputText() focus gets restored (#622)</p></li><li><p>inputs: support track pad style scrolling &amp; slider edit.</p></li><li><p>inputs/io: backspace and arrows in the context of a text input could use system repeat rate.</p></li><li><p>inputs/io: clarify/standardize/expose repeat rate and repeat delays (#1808)</p></li><li><p>inputs/scrolling: support for smooth scrolling (#2462, #2569)</p></li><li><p>misc: idle: expose &quot;woken up&quot; boolean (set by inputs) and/or animation time (for cursor blink) for backend to be able stop refreshing easily.</p></li><li><p>misc: idle: if cursor blink if the <em>only</em> visible animation, core imgui could rewrite vertex alpha to avoid CPU pass on ImGui:: calls.</p></li><li><p>misc: idle: if cursor blink if the <em>only</em> visible animation, could even expose a dirty rectangle that optionally can be leverage by some app to render in a smaller viewport, getting rid of much pixel shading cost.</p></li><li><p>misc: no way to run a root-most GetID() with ImGui:: api since there&#39;s always a Debug window in the stack. (mentioned in #2960)</p></li><li><p>misc: make the ImGuiCond values linear (non-power-of-two). internal storage for ImGuiWindow can use integers to combine into flags (Why?)</p></li><li><p>misc: PushItemFlag(): add a flag to disable keyboard capture when used with mouse? (#1682)</p></li><li><p>misc: use more size_t in public api?</p></li><li><p>misc: support for string view/range instead of char* would e.g. facilitate usage with Rust (#683, #3038, WIP string_view branch)</p></li><li><p>demo: demonstrate using PushStyleVar() in more details.</p></li><li><p>demo: add vertical separator demo</p></li><li><p>demo: add virtual scrolling example?</p></li><li><p>demo: demonstrate Plot offset</p></li><li><p>demo: window size constraint: square demo is broken when resizing from edges (#1975), would need to rework the callback system to solve this</p></li><li><p>examples: window minimize, maximize (#583)</p></li><li><p>examples: provide a zero frame-rate/idle example.</p></li><li><p>examples: dx11/dx12: try to use new swapchain blit models (#2970)</p></li><li><p>backends: report it better when not able to create texture?</p></li><li><p>backends: glfw: could go idle when minimized? if (glfwGetWindowAttrib(window, GLFW_ICONIFIED)) { glfwWaitEvents(); continue; } // issue: DeltaTime will be super high on resume, perhaps provide a way to let impl know (#440)</p></li><li><p>backends: opengl: rename imgui_impl_opengl2 to impl_opengl_legacy and imgui_impl_opengl3 to imgui_impl_opengl? (#1900)</p></li><li><p>backends: opengl: could use a single vertex buffer and glBufferSubData for uploads?</p></li><li><p>backends: opengl: explicitly disable GL_STENCIL_TEST in bindings.</p></li><li><p>backends: vulkan: viewport: support for synchronized swapping of multiple swap chains.</p></li><li><p>backends: bgfx: <a href="https://gist.github.com/RichardGale/6e2b74bc42b3005e08397236e4be0fd0" target="_blank" rel="noreferrer">https://gist.github.com/RichardGale/6e2b74bc42b3005e08397236e4be0fd0</a></p></li><li><p>backends: emscriptem: with refactored examples, we could provide a direct imgui_impl_emscripten platform layer (see eg. <a href="https://github.com/floooh/sokol-samples/blob/master/html5/imgui-emsc.cc#L42" target="_blank" rel="noreferrer">https://github.com/floooh/sokol-samples/blob/master/html5/imgui-emsc.cc#L42</a>)</p></li><li><p>bindings: ways to use clang ast dump to generate bindings or helpers for bindings? (e.g. clang++ -Xclang -ast-dump=json imgui.h) (--&gt; use <a href="https://github.com/dearimgui/dear_bindings" target="_blank" rel="noreferrer">https://github.com/dearimgui/dear_bindings</a>)</p></li><li><p>optimization: replace vsnprintf with stb_printf? using IMGUI_USE_STB_SPRINTF. (#1038 + needed for string_view)</p></li><li><p>optimization: add clipping for multi-component widgets (SliderFloatX, ColorEditX, etc.). one problem is that nav branch can&#39;t easily clip parent group when there is a move request.</p></li><li><p>optimization: add a flag to disable most of rendering, for the case where the user expect to skip it (#335)</p></li><li><p>optimization: fully covered window (covered by another with non-translucent bg + WindowRounding worth of padding) may want to clip rendering.</p></li><li><p>optimization: use another hash function than crc32, e.g. FNV1a</p></li><li><p>optimization: turn some the various stack vectors into statically-sized arrays</p></li></ul>',7)]))}const m=i(n,[["render",a]]);export{g as __pageData,m as default};
