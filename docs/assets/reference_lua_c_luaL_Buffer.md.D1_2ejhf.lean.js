import{_ as s,c as i,a2 as e,o as l}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"luaL_Buffer","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/luaL_Buffer.md","filePath":"reference/lua_c/luaL_Buffer.md","lastUpdated":null}'),t={name:"reference/lua_c/luaL_Buffer.md"};function n(h,a,p,r,d,u){return l(),i("div",null,a[0]||(a[0]=[e(`<h1 id="lual-buffer" tabindex="-1">luaL_Buffer <a class="header-anchor" href="#lual-buffer" aria-label="Permalink to &quot;luaL_Buffer&quot;">​</a></h1><p>文字列バッファの型です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Buffer luaL_Buffer;</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>文字列バッファの型です。</p><p>文字列バッファを使用すると、CコードでLua文字列を部分的に構築できます。使用パターンは次のとおりです：</p><p>まず、<code>luaL_Buffer</code>型の変数<code>b</code>を宣言します。 次に、<code>luaL_buffinit(L, &amp;b)</code>を呼び出して初期化します。 次に、<code>luaL_add*</code>関数を呼び出してバッファに文字列片を追加します。 最後に<code>luaL_pushresult(&amp;b)</code>を呼び出します。この呼び出しは最終的な文字列をスタックのトップに残します。 通常の操作中に、文字列バッファはスタックスロットを可変個数使用します。そのため、バッファを使用している間、スタックのトップがどこにあるかを知っているとは限りません。バッファ操作の間にスタックを使用する場合は、その使用がバランスを取っている限り（つまり、バッファ操作を呼び出すときにスタックが前回のバッファ操作直後のレベルにある限り）、使用することができます（唯一の例外は<code>luaL_addvalue</code>です）。<code>luaL_pushresult</code>を呼び出した後、スタックはバッファが初期化されたときのレベルに戻り、そのトップに最終的な文字列が置かれます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">luaL_Buffer b;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_buffinit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_addstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Lua!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_pushresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>このコードは、バッファに「Hello, Lua!」という文字列を追加し、最終結果をスタックにプッシュします。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>luaL_buffinit</li><li>luaL_pushresult</li></ul>`,14)]))}const c=s(t,[["render",n]]);export{o as __pageData,c as default};
