import{_ as i,c as s,a2 as t,o as e}from"./chunks/framework.6x3wfQve.js";const k=JSON.parse('{"title":"string.char","description":"","frontmatter":{},"headers":[],"relativePath":"document/built_in/string/char.md","filePath":"document/built_in/string/char.md","lastUpdated":1729487189000}'),n={name:"document/built_in/string/char.md"};function h(l,a,r,d,p,o){return e(),s("div",null,a[0]||(a[0]=[t('<h1 id="string-char" tabindex="-1">string.char <a class="header-anchor" href="#string-char" aria-label="Permalink to &quot;string.char&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string.char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (···)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>複数の整数を受け取り、それぞれの整数に対応する文字の文字列を生成します。各整数は、文字の内部数値コードとして扱われます。生成された文字列の長さは、指定された整数の数と同じです。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string.char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">76</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">117</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">97</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &#39;Lua&#39; を出力</span></span></code></pre></div><p>この例では、数値コードから<code>&quot;Lua&quot;</code>という文字列を生成します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./byte.html"><code>string.byte</code></a></li></ul>',11)]))}const u=i(n,[["render",h]]);export{k as __pageData,u as default};
