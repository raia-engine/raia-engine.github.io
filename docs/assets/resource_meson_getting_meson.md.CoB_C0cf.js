import{_ as a,c as n,a2 as o,o as t}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"Mesonの取得","description":"","frontmatter":{},"headers":[],"relativePath":"resource/meson/getting_meson.md","filePath":"resource/meson/getting_meson.md","lastUpdated":null}'),r={name:"resource/meson/getting_meson.md"};function s(i,e,p,l,h,d){return t(),n("div",null,e[0]||(e[0]=[o('<h1 id="mesonの取得" tabindex="-1">Mesonの取得 <a class="header-anchor" href="#mesonの取得" aria-label="Permalink to &quot;Mesonの取得&quot;">​</a></h1><p>Meson は Python 3 で実装されており、3.7 以降が必要です。オペレーティングシステムがパッケージマネージャを提供している場合、それを使ってインストールする必要があります。パッケージマネージャがないプラットフォームでは、<a href="https://www.python.org/downloads/" target="_blank" rel="noreferrer">Python のホームページ</a> からダウンロードする必要があります。<a href="https://mesonbuild.com/Getting-meson.html#platformspecific-install-quirks" target="_blank" rel="noreferrer">プラットフォーム固有の Python3のクセ</a>については以下を参照してください。</p><h2 id="メゾンのダウンロード" tabindex="-1">メゾンのダウンロード <a class="header-anchor" href="#メゾンのダウンロード" aria-label="Permalink to &quot;メゾンのダウンロード&quot;">​</a></h2><p>Meson のリリースは <a href="https://github.com/mesonbuild/meson/releases" target="_blank" rel="noreferrer">GitHub リリースページ</a> からダウンロードでき、リリース内や git リポジトリ自体から特別なことをしなくても ./meson.py を実行することが可能です。</p><p>Windowsでは、Pythonスクリプトを実行可能にするインストーラオプションでPythonをインストールしなかった場合、python /path/to/meson.py (python は Python 3.7 またはそれ以降) を実行する必要があります。</p><p>最新の開発コードは <a href="https://github.com/mesonbuild/meson" target="_blank" rel="noreferrer">Git</a> から直接入手することができ、常に動作し、使用できるように努めています。すべてのコミットは、CI を実行し、いくつかのプラットフォームをテストする pull-request プロセスを通過します。</p><h2 id="mesonをzipappに格納する" tabindex="-1">Mesonをzipappに格納する <a class="header-anchor" href="#mesonをzipappに格納する" aria-label="Permalink to &quot;Mesonをzipappに格納する&quot;">​</a></h2><p>リリースをダウンロードした後、スクリプトを実行すると、Meson 用のスタンドアロン単一ファイル実行ファイルを作成することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./packaging/create_zipapp.py --outfile meson.pyz --interpreter &#39;/usr/bin/env python3&#39; &lt;source checkout&gt;</span></span></code></pre></div><p>これは、pythonのネイティブサポートである<a href="https://docs.python.org/3/library/zipapp.html" target="_blank" rel="noreferrer">zipapp</a>を使用しています。</p><h2 id="pipによるmesonのインストール" tabindex="-1">pipによるMesonのインストール <a class="header-anchor" href="#pipによるmesonのインストール" aria-label="Permalink to &quot;pipによるMesonのインストール&quot;">​</a></h2><p>Meson は <a href="https://pypi.python.org/pypi/meson/" target="_blank" rel="noreferrer">Python Package Index</a> に収録されており、pip3 install --user meson でインストールすることができます。これは特別な特権を必要としません。これは ~/.local/ にパッケージをインストールするので、~/.local/bin を PATH に追加する必要があります。Meson をローカルでの開発にのみ使用する場合は、これだけで十分です。</p><p>システム ディレクトリにプロジェクトをインストールする必要がある場合、この方法ではインストールされた実行ファイルを sudo が使用されているときに利用できないため、うまくいきません。sudo pip3 install meson を使用すると、すべてのユーザーが使用できるように Meson をインストールすることができます。一般に、この方法は推奨されませんが、代わりにディストロのパッケージで提供されるバージョンを使用します。</p><p>sudo pip3 で Meson をインストールする必要がある場合は、ディストロのバージョンを最初にアンインストールしてください。システム・ディレクトリに複数のバージョンのプログラムがあると、問題が発生する可能性があります。</p><h2 id="msiインストーラによるmesonとninjaのインストール" tabindex="-1">MSIインストーラによるMesonとNinjaのインストール <a class="header-anchor" href="#msiインストーラによるmesonとninjaのインストール" aria-label="Permalink to &quot;MSIインストーラによるMesonとNinjaのインストール&quot;">​</a></h2><p>Windows 用の Meson と Ninja の両方を一度にインストールできる MSI インストーラを <a href="https://github.com/mesonbuild/meson/releases" target="_blank" rel="noreferrer">GitHub リリースページ</a> で提供しています。また、Pythonのコピーも埋め込まれているため、<a href="https://mesonbuild.com/Python-module.html" target="_blank" rel="noreferrer">Pythonモジュール</a>を使用し、外部依存のないスクリプトは期待通りに動作し続けることができます。</p><p>これは新しい機能なので、バグレポートを期待し、歓迎します。</p><h2 id="依存関係" tabindex="-1">依存関係 <a class="header-anchor" href="#依存関係" aria-label="Permalink to &quot;依存関係&quot;">​</a></h2><p>最も一般的なケースでは、Meson のデフォルトである ninja バックエンドを使用するために <a href="https://ninja-build.org/" target="_blank" rel="noreferrer">Ninja executable</a> が必要になります。このバックエンドはすべてのプラットフォームで、GCC, Clang, Visual Studio, MinGW, ICC, ARMCCなどを含むすべてのツールチェインで使用することができます。</p><p>可能であれば、パッケージマネージャが提供するバージョンを使用することができますが、そうでなければ、<a href="https://github.com/ninja-build/ninja/releases" target="_blank" rel="noreferrer">Ninjaプロジェクトのリリースページ</a>からバイナリ実行ファイルをダウンロードすることができます。</p><p>WindowsでVisual Studioのソリューションを生成するVisual Studioバックエンド(-backend=vs)、macOSでXCodeのプロジェクトを生成するXCodeバックエンド(-backend=xcode)のみ使用する場合は、Ninjaは必要ありません。</p><h2 id="プラットフォーム固有のインストール時の癖" tabindex="-1">プラットフォーム固有のインストール時の癖 <a class="header-anchor" href="#プラットフォーム固有のインストール時の癖" aria-label="Permalink to &quot;プラットフォーム固有のインストール時の癖&quot;">​</a></h2><h2 id="windows-python3のクセ" tabindex="-1">Windows Python3のクセ <a class="header-anchor" href="#windows-python3のクセ" aria-label="Permalink to &quot;Windows Python3のクセ&quot;">​</a></h2><p>Python 3をインストールする際には、以下のようにインストーラのオプションを選択することが強く推奨されます（必須ではありません）。</p><p>インストーラのステップ 1 インストーラのステップ 2 インストーラのステップ 3</p><p>これにより、PATH に python と pip が含まれるようになり、pip で Meson をインストールできるようになります。また、meson.py スクリプトへのフルパスを指定して py -3 を実行する代わりに、Windows 上の任意のシェルで meson を直接実行できるようになります。</p><h2 id="msys2-python3のクセ" tabindex="-1">MSYS2 Python3のクセ <a class="header-anchor" href="#msys2-python3のクセ" aria-label="Permalink to &quot;MSYS2 Python3のクセ&quot;">​</a></h2><p>Windows上のMSYS2を開発環境として使用する場合、Python3を提供するmsys/pythonパッケージを使用しないように注意してください。どのMinGWターゲット用にビルドするかによって、mingw32/mingw-w64-i686-python3かmingw64/mingw-w64-x86_64-python3のいずれかを使用してください。</p><p>サブページ:</p><ul><li><a href="https://mesonbuild.com/Getting-meson_zh.html" target="_blank" rel="noreferrer">获取Meson</a></li><li><a href="https://mesonbuild.com/Getting-meson_ptbr.html" target="_blank" rel="noreferrer">Obtendo o Meson</a></li></ul>',30)]))}const c=a(r,[["render",s]]);export{u as __pageData,c as default};
