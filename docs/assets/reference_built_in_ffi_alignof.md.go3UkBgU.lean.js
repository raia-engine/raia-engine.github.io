import{_ as a,c as s,a2 as e,o as l}from"./chunks/framework.DPuwY6B9.js";const f=JSON.parse('{"title":"ffi.alignof","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/ffi/alignof.md","filePath":"reference/built_in/ffi/alignof.md","lastUpdated":null}'),t={name:"reference/built_in/ffi/alignof.md"};function n(h,i,p,o,k,r){return l(),s("div",null,i[0]||(i[0]=[e(`<h1 id="ffi-alignof" tabindex="-1">ffi.alignof <a class="header-anchor" href="#ffi-alignof" aria-label="Permalink to &quot;ffi.alignof&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alignof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ct)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>ffi.alignof</code> 関数は、指定された型 <code>ct</code> がメモリ上で配置される際に必要な最小アラインメントをバイト単位で返します。アラインメントは、データが効率的にアクセスされるためのメモリ上の適切な境界を示します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ffi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alignof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 4 (通常のシステム上)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alignof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;double&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 8</span></span></code></pre></div><p>このコードは、<code>int</code> 型と <code>double</code> 型のアラインメントをバイト単位で出力します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>ffi.sizeof</li><li>ffi.offsetof</li></ul>`,11)]))}const c=a(t,[["render",n]]);export{f as __pageData,c as default};
