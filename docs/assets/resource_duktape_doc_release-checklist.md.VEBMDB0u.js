import{_ as i,c as t,a2 as l,o as a}from"./chunks/framework.CuCbyi2k.js";const p=JSON.parse('{"title":"Release checklist","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/release-checklist.md","filePath":"resource/duktape/doc/release-checklist.md","lastUpdated":1732350347000}'),s={name:"resource/duktape/doc/release-checklist.md"};function n(o,e,r,u,c,d){return a(),t("div",null,e[0]||(e[0]=[l(`<h1 id="release-checklist" tabindex="-1">Release checklist <a class="header-anchor" href="#release-checklist" aria-label="Permalink to &quot;Release checklist&quot;">​</a></h1><h2 id="checklist-for-ordinary-releases" tabindex="-1">Checklist for ordinary releases <a class="header-anchor" href="#checklist-for-ordinary-releases" aria-label="Permalink to &quot;Checklist for ordinary releases&quot;">​</a></h2><ul><li>Git branch naming note <ul><li><code>vN.N.N-release-prep</code>: use this naming for bumping version number, etc. Merge to master before tagging release.</li><li><code>vN.N.N-release-post</code>: use this naming for bumping version number after release, checklist fixes after release, etc.</li></ul></li><li>Finalize DUK_VERSION <ul><li>Change previous development version (with patch level 99) to release version</li><li>Verify by running Duktape cmdline and evaluating <code>Duktape.version</code></li></ul></li><li>Check for API calls and config options tagged experimental to see if they should lose their experimental status</li><li>Check dist-files/README.rst</li><li>Ensure RELEASES.rst is up-to-date <ul><li>New release is in place</li><li>Release date is in place</li><li>Check release entry ordering</li></ul></li><li>Ensure tests/api/test-all-public-symbols.c is up-to-date <ul><li>Must add all new API calls</li></ul></li><li>Run <code>make docker-release-1-wd</code><ul><li>Check output manually</li></ul></li><li>Compilation tests: <ul><li>Clean compile for command line tool with (a) no options and (b) common debug options (DUK_USE_DEBUG, DUK_USE_DEBUG_LEVEL=0, DUK_USE_DEBUG_PRINT=..., DUK_USE_SELF_TESTS, DUK_USE_ASSERTIONS)</li><li>Check that <code>duk_tval</code> is packed by default on x86 and unpacked on x64</li><li>Platform / compiler combinations (incomplete, should be automated): <ul><li>FreeBSD clang</li><li>FreeBSD clang + -m32</li><li>Windows MinGW</li><li>Windows MinGW-w64</li><li>Windows MSVC (cl) x86</li><li>Windows MSVC (cl) x64</li><li>Windows Cygwin 32-bit</li><li>Windows Cygwin 64-bit</li><li>Linux MIPS gcc</li><li>Linux ARMEL gcc (little endian)</li><li>Linux gcc on some mixed endian ARM platform</li><li>Linux SH4 gcc</li></ul></li><li>Check compile warnings when DUK_NORETURN() is not defined</li></ul></li><li>duk-clang-ubsan: <ul><li><p>Run:</p><pre><code>$ make build/duk-clang-ubsan
$ for i in tests/ecmascript/test-*.js; do python util/runtest.py --duk build/duk-clang-ubsan --timeout 60 $i; done
</code></pre></li></ul></li><li>ECMAScript testcases <ul><li>On x86-64 (exercise 16-byte duk_tval): <ul><li><p>make ecmatest</p></li><li><p>Run testcases with util/runtest.py with --valgrind option:</p><pre><code>$ make build/duk
$ for i in tests/ecmascript/test-*.js; do python util/runtest.py --duk build/duk --valgrind --timeout 60 $i; done
</code></pre></li></ul></li><li>On x86-32 (exercise 8-byte duk_tval) <ul><li>make ecmatest</li></ul></li><li>Run testcases on all endianness targets</li><li>Run with assertions enabled at least on x86-64</li></ul></li><li>Run testcases with torture options, DUK_USE_ASSERTIONS and: <ul><li>DUK_USE_GC_TORTURE</li><li>DUK_USE_SHUFFLE_TORTURE</li><li>DUK_USE_FINALIZER_TORTURE</li><li>DUK_USE_FINALIZER_TORTURE + DUK_USE_GC_TORTURE</li><li>DUK_USE_STRTAB_TORTURE</li></ul></li><li>Memory usage testing <ul><li>Leaks are mostly detected by Valgrind, but bugs in valstack or object resize algorithms (or similar) can lead to unbounded or suboptimal memory usage</li><li>Minimal manual refcount leak test: <ul><li>test-dev-refcount-leak-basic.js</li></ul></li></ul></li><li>API testcases <ul><li>On x86-64: <ul><li>make apitest</li><li>-Werror is no longer enabled so check apitest output for any test case warnings (or enable -Werror manually in runtests.js)</li></ul></li></ul></li><li>test262 <ul><li>on x86-64 <ul><li>make test262test</li></ul></li><li>Run with assertions enabled at least on x86-64</li></ul></li><li>Assorted release tests driven by Makefile <ul><li>on x86-64 <ul><li>make clean releasetest</li></ul></li><li>Run with assertions enabled at least on x86-64</li><li>Makefile should now error out if any test fails</li></ul></li><li>Debugger test <ul><li>Test Makefile.dukdebug + debugger/duk_debug.js to ensure all files are included (easy to forget e.g. YAML metadata files)</li><li>Test JSON proxy</li></ul></li><li>Performance testing and Wiki performance results page <ul><li>Update and run <code>util/bench_microbenchmarks.py</code> to get raw microbenchmark results. Then use <code>util/format_perftest.py</code> to format into HTML; the different parts of the Wiki performance page need manual tweaking of the format_perftest.py script.</li><li>Run Octane results manually for now.</li></ul></li><li>Website index page footprint/RAM figures <ul><li>Run <code>util/index_page_sizes.sh</code> manually and update index page results accordingly.</li></ul></li><li>Prepare an update pull for compat-table <ul><li>Fork and branch</li><li>Compile &quot;duk&quot;, Duktape.version must match upcoming release</li><li>Go through data-*.js files, and copy previous results directly, e.g. &quot;duktape20: false,&quot; -&gt; add line &quot;duktape21: false,&quot;</li><li>Run &quot;nodejs duktape.js&quot; in compat-table, and update data files to match new results</li><li>Rerun &quot;nodejs build.js&quot;, and finalize the pull</li></ul></li><li>Release notes (<code>doc/release-notes-*.rst</code>) <ul><li>Write new release notes for release</li><li>Ensure instructions for upgrading from last release are correct</li><li>Detailed test outputs are no longer included</li></ul></li><li>Git release and tag <ul><li>Tagging should be done before creating the candidate tar files so that &quot;git describe&quot; output will have a nice tag name.</li><li>This will be a preliminary tag which can be moved if necessary. Don&#39;t push it to the public repo until the tag is certain not to move anymore.</li><li>There can be commits to the repo after tagging but nothing that will affect &quot;make dist/source&quot; output.</li><li>Make sure the tag is in the master commit chain, so that git describe will provide a useful output for dist packages built after the release</li><li><code>git tag -l -n1</code> to list current tags</li><li><code>git tag -m &quot;&lt;one line release description&gt;&quot; vN.N.N</code> to set tag</li><li><code>git tag -f -m &quot;&lt;one line release description&gt;&quot; vN.N.N</code> to forcibly reset tag if it needs to be moved</li></ul></li><li>If release is a stable major/minor release (e.g. 1.1.0), create a maintenance branch <code>vN.N-maintenance</code> off the release tag.</li><li>Build candidate tar.xz files <ul><li>These should remain the same after this point so that their hash values are known.</li><li>Check git describe output from dist <code>README.rst</code>, <code>src/duktape.h</code>, <code>src/duktape.c</code>, and <code>src/duk_config.h</code>. It should show the release tag.</li><li>This should be done in a fresh checkout to minimize chance of any uncommitted files, directories, etc affecting the build</li></ul></li><li>Check source dist contents <ul><li>Check file list</li><li>Grep for FIXME and XXX</li><li>Trivial compile test for combined source</li><li>Trivial compile test for separate sources (important because it&#39;s easy to forget to add files in util/dist.py)</li></ul></li><li>Store binaries to duktape-releases repo <ul><li>Add the tar.xz to the master branch</li><li>Create an independent branched named <code>unpacked-vN.N.N</code> with unpacked tar.xz contents <ul><li><a href="http://stackoverflow.com/questions/15034390/how-to-create-a-new-and-empty-root-branch" target="_blank" rel="noreferrer">http://stackoverflow.com/questions/15034390/how-to-create-a-new-and-empty-root-branch</a></li><li><a href="http://stackoverflow.com/questions/9034540/how-to-create-a-git-branch-that-is-independent-of-the-master-branch" target="_blank" rel="noreferrer">http://stackoverflow.com/questions/9034540/how-to-create-a-git-branch-that-is-independent-of-the-master-branch</a></li></ul></li><li>Tag the final branch with <code>vN.N.N</code>, push the tag, and delete the branch. The branch is not pushed to the server.</li><li>The concrete commands are packaged into <code>add-unpacked.sh</code> in duktape-releases repo. Add the tar.xz into master first.</li></ul></li><li>Update website downloads page <ul><li>Release date</li><li>Link</li><li>Date</li><li>&quot;latest&quot; class</li><li>Release notes (layout and contents) for release</li></ul></li><li>Build website <ul><li>Readthrough</li><li>Test that the Duktape REPL (Dukweb) works</li><li>Check duk command line version number in Guide &quot;Getting started&quot;</li><li>Diff website HTML against current website</li></ul></li><li>Upload website and test</li><li>Final Git stuff <ul><li>Ensure <code>master</code> is pushed and unnecessary branches are cleaned up</li><li>Push the release tag</li><li>Push the maintenance branch if created</li></ul></li><li>Make GitHub release <ul><li>Release description should match tag description but be capitalized</li><li>Attach the end user distributable to the GitHub release</li></ul></li><li>Bump Duktape version for next release and testing <ul><li>Set patch level to 99, e.g. after 0.10.0 stable release, set DUK_VERSION from 1000 to 1099. This ensures that any forks off the trunk will have a version number easy to distinguish as an unofficial release.</li><li><code>src/duktape.h.in</code></li></ul></li></ul><h2 id="checklist-for-maintenance-releases" tabindex="-1">Checklist for maintenance releases <a class="header-anchor" href="#checklist-for-maintenance-releases" aria-label="Permalink to &quot;Checklist for maintenance releases&quot;">​</a></h2><ul><li><p>Make fixes to master and cherry pick fixes to maintenance branch (either directly or through a fix branch). Test fixes in maintenance branch too.</p></li><li><p>Update release notes and website in master. <strong>Don&#39;t</strong> update these in the maintenance branch.</p></li><li><p>Bump DUK_VERSION in maintenance branch.</p></li><li><p>Review diff between previous release and new patch release.</p></li><li><p>Tag release; description &quot;maintenance release&quot; should be good enough for most patch releases.</p></li><li><p>Build release. Compare release to previous release package by diffing the unpacked directories. Check out the maintenance branch for the build so that the branch in C defines is that branch instead of &quot;HEAD&quot;.</p></li><li><p>Build website from master. Deploy only <code>download.html</code>.</p><p>This is rather hacky: we need the release notes so the build must be made from master, but master may also contain website changes for the next release.</p></li></ul>`,5)]))}const m=i(s,[["render",n]]);export{p as __pageData,m as default};
