import{_ as i,c as t,a2 as s,o as e}from"./chunks/framework.CKGreiRV.js";const k=JSON.parse('{"title":"jit.* ライブラリ","description":"","frontmatter":{},"headers":[],"relativePath":"resource/luajit/jit_library.md","filePath":"resource/luajit/jit_library.md","lastUpdated":1729914702000}'),r={name:"resource/luajit/jit_library.md"};function h(l,a,n,o,p,u){return e(),t("div",null,a[0]||(a[0]=[s('<h1 id="jit-ライブラリ" tabindex="-1">jit.* ライブラリ <a class="header-anchor" href="#jit-ライブラリ" aria-label="Permalink to &quot;jit.* ライブラリ&quot;">​</a></h1><p>この組み込みモジュールの関数は、JITコンパイラエンジンの動作を制御します。JITコンパイルは完全に自動であることに注意してください — 特別なニーズがない限り、次に挙げる関数を使用する必要はほとんどないでしょう。</p><h4 id="jit-on" tabindex="-1">jit.on() <a class="header-anchor" href="#jit-on" aria-label="Permalink to &quot;jit.on()&quot;">​</a></h4><h4 id="jit-off" tabindex="-1">jit.off() <a class="header-anchor" href="#jit-off" aria-label="Permalink to &quot;jit.off()&quot;">​</a></h4><p>JITコンパイラをオン（デフォルト）またはオフにします。 これらの関数は通常、コマンドラインオプション -j on や -j off と共に使用されます。</p><h4 id="jit-flush" tabindex="-1">jit.flush() <a class="header-anchor" href="#jit-flush" aria-label="Permalink to &quot;jit.flush()&quot;">​</a></h4><p>コンパイルされたコードのキャッシュ全体をフラッシュします。</p><h4 id="jit-on-func-true-true-false" tabindex="-1"><code>jit.on(func|true [,true|false])</code> <a class="header-anchor" href="#jit-on-func-true-true-false" aria-label="Permalink to &quot;`jit.on(func|true [,true|false])`&quot;">​</a></h4><h4 id="jit-off-func-true-true-false" tabindex="-1"><code>jit.off(func|true [,true|false])</code> <a class="header-anchor" href="#jit-off-func-true-true-false" aria-label="Permalink to &quot;`jit.off(func|true [,true|false])`&quot;">​</a></h4><h4 id="jit-flush-func-true-true-false" tabindex="-1"><code>jit.flush(func|true [,true|false])</code> <a class="header-anchor" href="#jit-flush-func-true-true-false" aria-label="Permalink to &quot;`jit.flush(func|true [,true|false])`&quot;">​</a></h4><p>jit.on は Lua 関数の JIT コンパイルを有効にします（これがデフォルトです）。</p><p>jit.off は Lua 関数の JIT コンパイルを無効にし、コードキャッシュから既にコンパイルされたコードをフラッシュします。</p><p>jit.flush はコードをフラッシュしますが、有効/無効の状態には影響しません。</p><p>現在の関数、つまりこのライブラリ関数を呼び出す Lua 関数は、最初の引数に true を指定することで指定することもできます。</p><p>第二引数に true が指定されている場合、関数のすべてのサブ関数に対しても JIT コンパイルが再帰的に有効化、無効化またはフラッシュされます。false が指定されている場合は、サブ関数のみが影響を受けます。</p><p>jit.on と jit.off 関数は、関数がコンパイルされようとするときにチェックされるフラグを設定するだけで、即時のコンパイルをトリガーしません。</p><p>典型的な使用例は、デバッグ目的でモジュール全体の JIT コンパイルをオフにするために、モジュールのメインチャンクで jit.off(true, true) を使用することです。</p><h4 id="jit-flush-tr" tabindex="-1"><code>jit.flush(tr)</code> <a class="header-anchor" href="#jit-flush-tr" aria-label="Permalink to &quot;`jit.flush(tr)`&quot;">​</a></h4><p>キャッシュから指定された番号のルートトレースとそのすべてのサイドトレースをフラッシュします。トレースにリンクしている他のトレースがある限り、トレースのコードは保持されます。</p><h4 id="status-jit-status" tabindex="-1">status, ... = jit.status() <a class="header-anchor" href="#status-jit-status" aria-label="Permalink to &quot;status, ... = jit.status()&quot;">​</a></h4><p>JIT コンパイラの現在の状態を返します。最初の結果は JIT コンパイラがオンかオフかを示す true または false です。残りの結果は CPU 固有の機能と有効な最適化に関する文字列です。</p><h4 id="jit-version" tabindex="-1">jit.version <a class="header-anchor" href="#jit-version" aria-label="Permalink to &quot;jit.version&quot;">​</a></h4><p>LuaJITのバージョン文字列を含みます。</p><h4 id="jit-version-num" tabindex="-1">jit.version_num <a class="header-anchor" href="#jit-version-num" aria-label="Permalink to &quot;jit.version_num&quot;">​</a></h4><p>LuaJITコアのバージョン番号を含みます。バージョンxx.yy.zzは、十進数xxyyzzによって表されます。</p><p>ローリングリリースへの切り替え後に非推奨。zzは99で固定されます。</p><h4 id="jit-os" tabindex="-1">jit.os <a class="header-anchor" href="#jit-os" aria-label="Permalink to &quot;jit.os&quot;">​</a></h4><p>対象のOS名を含みます：「Windows」、「Linux」、「OSX」、「BSD」、「POSIX」、「Other」。</p><h4 id="jit-arch" tabindex="-1">jit.arch <a class="header-anchor" href="#jit-arch" aria-label="Permalink to &quot;jit.arch&quot;">​</a></h4><p>対象のアーキテクチャ名を含みます：「x86」、「x64」、「arm」、「arm64」、「arm64be」、「ppc」、「mips」、「mipsel」、「mips64」、「mips64el」、「mips64r6」、「mips64r6el」。</p><h2 id="jit-opt-—-jitコンパイラ最適化制御" tabindex="-1">jit.opt.* — JITコンパイラ最適化制御 <a class="header-anchor" href="#jit-opt-—-jitコンパイラ最適化制御" aria-label="Permalink to &quot;jit.opt.* — JITコンパイラ最適化制御&quot;">​</a></h2><p>このサブモジュールは、-Oコマンドラインオプションのバックエンドを提供します。 プログラム的にも使用できます。例えば：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- -O2と同じ</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-dce&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hotloop=10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hotexit=2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>LuaJIT 1.xとは異なり、このモジュールは組み込まれており、最適化はデフォルトでオンになっています！最適化を有効にする方法の一つであったrequire(&quot;jit.opt&quot;).start()を実行する必要はもうありません。</p><h2 id="jit-util-—-jitコンパイラ内省" tabindex="-1">jit.util.* — JITコンパイラ内省 <a class="header-anchor" href="#jit-util-—-jitコンパイラ内省" aria-label="Permalink to &quot;jit.util.* — JITコンパイラ内省&quot;">​</a></h2><p>このサブモジュールは、バイトコード、生成されたトレース、IR、および生成されたマシンコードを内省するための関数を保持しています。このモジュールによって提供される機能はまだ変更中であり、そのため文書化されていません。</p><p>デバッグモジュール-jbc、-jv、および-jdumpは、これらの関数を広範囲に使用します。もっと知りたい場合は、それらのソースコードを確認してください。</p>',37)]))}const j=i(r,[["render",h]]);export{k as __pageData,j as default};
