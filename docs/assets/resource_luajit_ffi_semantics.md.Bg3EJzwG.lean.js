import{_ as s,c as a,a2 as t,o as l}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"FFIセマンティクス","description":"","frontmatter":{},"headers":[],"relativePath":"resource/luajit/ffi_semantics.md","filePath":"resource/luajit/ffi_semantics.md","lastUpdated":null}'),n={name:"resource/luajit/ffi_semantics.md"};function h(k,i,p,d,e,r){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="ffiセマンティクス" tabindex="-1">FFIセマンティクス <a class="header-anchor" href="#ffiセマンティクス" aria-label="Permalink to &quot;FFIセマンティクス&quot;">​</a></h1><p>このページでは、FFIライブラリとLua及びCコードとの相互作用に関する詳細なセマンティクスについて説明します。</p><p>FFIライブラリはCコードとのインターフェースを設計するために作られており、宣言は平易なC構文で書かれているため、可能な限りC言語のセマンティクスに密接に従います。Lua言語のセマンティクスとのスムーズな相互運用のために、いくつかの小さな譲歩が必要です。</p><p>このページの内容に圧倒されないでください — これは参照用であり、疑問がある場合には参照する必要があるかもしれません。このページを流し読みするのは問題ありませんが、ほとんどのセマンティクスは期待通りに「ただ動作」します。CまたはC++のバックグラウンドを持つ開発者にとっては、LuaJIT FFIを使用したアプリケーションの記述は直感的であるべきです。</p><h2 id="c言語サポート" tabindex="-1">C言語サポート <a class="header-anchor" href="#c言語サポート" aria-label="Permalink to &quot;C言語サポート&quot;">​</a></h2><p>FFIライブラリには、最小限のメモリフットプリントを持つ組み込みのCパーサーがあります。これはffi.*ライブラリ関数によってC型や外部シンボルを宣言するために使用されます。</p><p>その唯一の目的は、Cヘッダーファイルなどに見られるC宣言を解析することです。定数式を評価することはありますが、Cコンパイラではありません。インラインC関数定義の本体は単に無視されます。</p><p>また、これは検証するCパーサーではありません。正しく形成されたC宣言を期待し、受け入れますが、不正な宣言を無視するか、かなり一般的なエラーメッセージを表示することを選ぶかもしれません。疑問がある場合は、お気に入りのCコンパイラに対して入力を確認してください。</p><p>Cパーサーは、C99言語標準に準拠し、以下の拡張が含まれています：</p><ul><li>文字および文字列リテラルの&#39;\\e&#39;エスケープ。</li><li>C99/C++のブール型、boolまたは_Boolキーワードで宣言。</li><li>complexまたは_Complexキーワードで宣言される複素数。</li><li>2つの複素数型：complex（別名 complex double）とcomplex float。</li><li>GCCモードまたはvector_size属性で宣言されるベクトル型。</li><li>構造体/共用体内の名前のない（&#39;透明な&#39;）構造体/共用体フィールド。</li><li>不完全なenum宣言は、不完全な構造体宣言と同様に扱われる。</li><li>構造体/共用体内の名前のないenumフィールド。これは、宣言された定数がグローバル名前空間にも表示されることを除いて、スコープ付きC++ enumに似ています。</li><li>構造体/共用体内でのスコープ付きstatic const宣言（C++から）。</li><li>ゼロ長配列（<code>[0]</code>）、空の構造体/共用体、可変長配列（VLA, <code>[?]</code>）、および末尾VLAを持つ可変長構造体（VLS）。</li><li>C++の参照型（int &amp;x）。</li><li>&#39;<code>__</code>&#39;でのGCCの代替キーワード、例えば<code>__const__</code>。</li><li>次の属性を持つGCC <code>__attribute__</code>：aligned, packed, mode, vector_size, cdecl, fastcall, stdcall, thiscall。</li><li>GCCの<code>__extension__</code>キーワードとGCCの<code>__alignof__</code>オペレーター。</li><li>関数宣言のためのGCC <code>__asm__(&quot;symname&quot;)</code> シンボル名リダイレクション。</li><li>固定長タイプのためのMSVCキーワード：<code>__int8</code>, <code>__int16</code>, <code>__int32</code>, <code>__int64</code>。</li><li>MSVC <code>__cdecl</code>, <code>__fastcall</code>, <code>__stdcall</code>, <code>__thiscall</code>, <code>__ptr32</code>, <code>__ptr64</code>, <code>__declspec(align(n))</code> および #pragma pack。</li><li>その他のGCC/MSVC固有の属性は無視されます。</li></ul><p>以下のC型はCパーサーによって事前定義されています（typedefのようですが、再宣言は無視されます）：</p><ul><li>可変引数処理：<code>va_list</code>、<code>__builtin_va_list</code>、<code>__gnuc_va_list</code>。</li><li><code>&lt;stddef.h&gt;</code>から：<code>ptrdiff_t</code>、<code>size_t</code>、<code>wchar_t</code>。</li><li><code>&lt;stdint.h&gt;</code>から：<code>int8_t</code>、<code>int16_t</code>、<code>int32_t</code>、<code>int64_t</code>、<code>uint8_t</code>、<code>uint16_t</code>、<code>uint32_t</code>、<code>uint64_t</code>、<code>intptr_t</code>、<code>uintptr_t</code>。</li><li><code>&lt;unistd.h&gt;</code>から（POSIX）：<code>ssize_t</code>。</li></ul><p>これらの型を、コンパイラ固有の拡張やターゲット依存の標準型よりも優先して使用することを推奨します。例えば、charの符号付き性とlongのサイズは、ターゲットアーキテクチャとプラットフォームABIによって異なります。</p><p>以下のCの機能はサポートされていません：</p><ul><li>宣言には常に型指定子が必要であり、int型にはデフォルトしません。</li><li>古いスタイルの空の関数宣言（K&amp;R）は許可されていません。すべてのC関数には適切なプロトタイプ宣言が必要です。パラメーターなしで宣言された関数（int foo();）は、C++のように引数を取らない関数として扱われます。</li><li>long double C型は正しく解析されますが、関連する変換、アクセス、または算術演算はサポートされていません。</li><li>ワイド文字列と文字リテラルはサポートされていません。</li><li>現在実装されていない機能については下記を参照してください。</li></ul><h2 id="c型からluaオブジェクトへの変換規則" tabindex="-1">C型からLuaオブジェクトへの変換規則 <a class="header-anchor" href="#c型からluaオブジェクトへの変換規則" aria-label="Permalink to &quot;C型からLuaオブジェクトへの変換規則&quot;">​</a></h2><p>これらの変換規則は、C型への読み取りアクセスに適用されます：ポインター、配列、構造体/共用体型のインデックス付け；外部変数または定数値の読み取り；C呼び出しからの戻り値の取得：</p><table tabindex="0"><thead><tr><th>入力</th><th>変換</th><th>出力</th></tr></thead><tbody><tr><td>int8_t, int16_t</td><td>→符号拡張 int32_t → double</td><td>number</td></tr><tr><td>uint8_t, uint16_t</td><td>→ゼロ拡張 int32_t → double</td><td>number</td></tr><tr><td>int32_t, uint32_t</td><td>→ double</td><td>number</td></tr><tr><td>int64_t, uint64_t</td><td>ボックス化された値</td><td>64ビット整数cdata</td></tr><tr><td>double, float</td><td>→ double</td><td>number</td></tr><tr><td>bool</td><td>0 → false、それ以外 → true</td><td>boolean</td></tr><tr><td>enum</td><td>ボックス化された値</td><td>enum cdata</td></tr><tr><td>複素数</td><td>ボックス化された値</td><td>複素数cdata</td></tr><tr><td>ベクター</td><td>ボックス化された値</td><td>ベクターcdata</td></tr><tr><td>ポインター</td><td>ボックス化された値</td><td>ポインターcdata</td></tr><tr><td>配列</td><td>ボックス化された参照</td><td>参照cdata</td></tr><tr><td>構造体/共用体</td><td>ボックス化された参照</td><td>参照cdata</td></tr></tbody></table><p>ビットフィールドは、基礎となる型のように扱われます。</p><p>参照型は、変換が行われる前に参照先のC型に適用される変換が行われる前にデリファレンス（参照解除）されます。</p><h3 id="luaオブジェクトからc型への変換" tabindex="-1">LuaオブジェクトからC型への変換 <a class="header-anchor" href="#luaオブジェクトからc型への変換" aria-label="Permalink to &quot;LuaオブジェクトからC型への変換&quot;">​</a></h3><p>これらの変換規則は、C型への書き込みアクセスに適用されます：ポインター、配列、構造体/共用体型のインデックス付け；cdataオブジェクトの初期化；C型へのキャスト；外部変数への書き込み；C呼び出しへの引数の渡し：</p><table tabindex="0"><thead><tr><th>入力</th><th>変換</th><th>出力</th></tr></thead><tbody><tr><td>number</td><td>→</td><td>double</td></tr><tr><td>boolean</td><td>false → 0, true → 1</td><td>bool</td></tr><tr><td>nil</td><td>NULL →</td><td>(void *)</td></tr><tr><td>lightuserdata</td><td>lightuserdataアドレス →</td><td>(void *)</td></tr><tr><td>userdata</td><td>userdataペイロード →</td><td>(void *)</td></tr><tr><td>io.* ファイル</td><td>FILE * ハンドルを取得 →</td><td>(void *)</td></tr><tr><td>string</td><td>enum定数に一致する</td><td>enum</td></tr><tr><td>string</td><td>文字列データ + ゼロバイトのコピー</td><td><code>int8_t[]</code>, <code>uint8_t[]</code></td></tr><tr><td>string</td><td>文字列データ →</td><td><code>const char[]</code></td></tr><tr><td>function</td><td>コールバックを作成 →</td><td>C関数型</td></tr><tr><td>table</td><td>テーブル初期化子</td><td>配列</td></tr><tr><td>table</td><td>テーブル初期化子</td><td>構造体/共用体</td></tr><tr><td>cdata</td><td>cdataペイロード →</td><td>C型</td></tr></tbody></table><p>この変換の結果型が目的地のC型と一致しない場合、C型間の変換規則が適用されます。</p><p>参照型は初期化後に変更不可です（「参照の再配置は不可」）。初期化目的や参照パラメータに値を渡す際には、ポインターのように扱われます。C++と異なり、Lua言語のセマンティクス下で変数の自動参照生成を実装する方法はありません。参照パラメータを持つ関数を呼び出したい場合、明示的に1要素の配列を渡す必要があります。</p><h2 id="c型間の変換" tabindex="-1">C型間の変換 <a class="header-anchor" href="#c型間の変換" aria-label="Permalink to &quot;C型間の変換&quot;">​</a></h2><p>これらの変換規則は、標準のC変換規則とほぼ同じです。一部の規則はキャストにのみ適用されたり、ポインターまたは型の互換性が必要です：</p><table tabindex="0"><thead><tr><th>入力</th><th>変換</th><th>出力</th></tr></thead><tbody><tr><td>符号付き整数</td><td>→縮小または符号拡張</td><td>整数</td></tr><tr><td>符号なし整数</td><td>→縮小またはゼロ拡張</td><td>整数</td></tr><tr><td>整数</td><td>→丸め</td><td>double, float</td></tr><tr><td>double, float</td><td>→切り捨て int32_t →縮小</td><td>(u)int8_t, (u)int16_t</td></tr><tr><td>double, float</td><td>→切り捨て</td><td>(u)int32_t, (u)int64_t</td></tr><tr><td>double, float</td><td>→丸め</td><td>float, double</td></tr><tr><td>数値</td><td>n == 0 → 0, それ以外 → 1</td><td>bool</td></tr><tr><td>bool</td><td>false → 0, true → 1</td><td>数値</td></tr><tr><td>複素数</td><td>実部を変換</td><td>数値</td></tr><tr><td>数値</td><td>実部を変換、虚部 = 0</td><td>複素数</td></tr><tr><td>複素数</td><td>実部と虚部を変換</td><td>複素数</td></tr><tr><td>数値</td><td>スカラーを変換して複製</td><td>ベクター</td></tr><tr><td>ベクター</td><td>コピー（同じサイズ）</td><td>ベクター</td></tr><tr><td>構造体/共用体</td><td>ベースアドレスを取得（互換性あり）</td><td>ポインター</td></tr><tr><td>配列</td><td>ベースアドレスを取得（互換性あり）</td><td>ポインター</td></tr><tr><td>関数</td><td>関数アドレスを取得</td><td>関数ポインター</td></tr><tr><td>数値</td><td>uintptr_t経由で変換（キャスト）</td><td>ポインター</td></tr><tr><td>ポインター</td><td>アドレスを変換（互換性/キャストあり）</td><td>ポインター</td></tr><tr><td>ポインター</td><td>アドレスを変換（キャスト）</td><td>整数</td></tr><tr><td>配列</td><td>ベースアドレスを変換（キャスト）</td><td>整数</td></tr><tr><td>配列</td><td>コピー（互換性あり）</td><td>配列</td></tr><tr><td>構造体/共用体</td><td>コピー（同一型）</td><td>構造体/共用体</td></tr></tbody></table><p>ビットフィールドやenum型は、それらの基礎となる型として扱われます。 上記に記載されていない変換はエラーを発生させます。例えば、ポインターを複素数に変換したり、その逆を行うことはできません。</p><h2 id="可変引数c関数の引数のための変換" tabindex="-1">可変引数C関数の引数のための変換 <a class="header-anchor" href="#可変引数c関数の引数のための変換" aria-label="Permalink to &quot;可変引数C関数の引数のための変換&quot;">​</a></h2><p>Luaオブジェクトを可変引数C関数の可変引数部分に渡す場合、以下のデフォルト変換規則が適用されます：</p><table tabindex="0"><thead><tr><th>入力</th><th>変換</th><th>出力</th></tr></thead><tbody><tr><td>number</td><td>→</td><td>double</td></tr><tr><td>boolean</td><td>false → 0, true → 1</td><td>bool</td></tr><tr><td>nil</td><td>NULL →</td><td>(void *)</td></tr><tr><td>userdata</td><td>userdata payload →</td><td>(void *)</td></tr><tr><td>lightuserdata</td><td>lightuserdata address →</td><td>(void *)</td></tr><tr><td>string</td><td>string data →</td><td>const char *</td></tr><tr><td>float cdata</td><td>→</td><td>double</td></tr><tr><td>Array cdata</td><td>ベースアドレスを取得</td><td>要素ポインタ</td></tr><tr><td>struct/union cdata</td><td>ベースアドレスを取得</td><td>struct/unionポインタ</td></tr><tr><td>Function cdata</td><td>関数アドレスを取得</td><td>関数ポインタ</td></tr><tr><td>その他のcdata</td><td>変換なし</td><td>C型</td></tr></tbody></table><p>特定の型としてcdataオブジェクト以外のLuaオブジェクトを渡すには、変換規則をオーバーライドして、コンストラクタまたはキャストで一時的なcdataオブジェクトを作成し、それを渡す値で初期化する必要があります： xがLuaの数値であると仮定して、それを可変引数関数に整数として渡す方法は次のとおりです：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[[</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;integer value: %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x))</span></span></code></pre></div><p>これを行わない場合、デフォルトのLua number → double 変換規則が適用されます。整数を期待する可変引数C関数は、不正確または初期化されていない値を受け取ることになります。</p><h2 id="初期化子" tabindex="-1">初期化子 <a class="header-anchor" href="#初期化子" aria-label="Permalink to &quot;初期化子&quot;">​</a></h2><p>ffi.new() または同等のコンストラクタ構文で cdata オブジェクトを作成すると、その内容も初期化されます。使用されるオプショナル初期化子の数とC型に応じて、異なる規則が適用されます：</p><ul><li>初期化子が与えられない場合、オブジェクトはゼロバイトで埋められます。</li><li>スカラー型（数値およびポインター）は単一の初期化子を受け入れます。LuaオブジェクトはスカラーC型に変換されます。</li><li>バリアレイ（複素数およびベクトル）は、単一の初期化子が与えられるとスカラーのように扱われます。それ以外の場合は、通常の配列のように扱われます。</li><li>集合型（配列および構造体）は、同じ型の単一のcdata初期化子（コピーコンストラクタ）、単一のテーブル初期化子、または初期化子のフラットリストのいずれかを受け入れます。</li><li>配列の要素は、インデックスゼロから初期化されます。配列に単一の初期化子が与えられた場合、それは残りのすべての要素に対して繰り返されます。2つ以上の初期化子が与えられた場合、このことは起こりません：すべての残りの未初期化要素はゼロバイトで埋められます。</li><li>バイト配列はLua文字列で初期化することもできます。これにより、文字列全体と終端のゼロバイトがコピーされます。配列のサイズが既知で固定されている場合のみ、コピーは早期に停止します。</li><li>構造体のフィールドは、宣言された順序で初期化されます。初期化されていないフィールドはゼロバイトで埋められます。</li><li>共用体の最初のフィールドのみがフラット初期化子で初期化できます。</li><li>自体が集合である要素やフィールドは単一の初期化子で初期化されますが、これはテーブル初期化子または互換性のある集合である可能性があります。</li><li>余分な初期化子はエラーを引き起こします。</li></ul><h2 id="テーブル初期化子" tabindex="-1">テーブル初期化子 <a class="header-anchor" href="#テーブル初期化子" aria-label="Permalink to &quot;テーブル初期化子&quot;">​</a></h2><p>Luaテーブルを使用して配列または構造体/共用体を初期化する場合、以下のルールが適用されます：</p><ul><li>テーブルインデックス<code>[0]</code>がnilでない場合、テーブルはゼロベースであると見なされます。そうでない場合は、一ベースであると見なされます。</li><li>インデックスゼロから始まる配列要素は、<code>[0]</code>または<code>[1]</code>のどちらかのインデックスから始まる連続するテーブル要素で一つずつ初期化されます。このプロセスは最初のnilテーブル要素で停止します。</li><li>正確に1つの配列要素が初期化された場合、それは残りのすべての要素に対して繰り返されます。そうでない場合、すべての残りの未初期化要素はゼロバイトで埋められます。</li><li>上記のロジックは、既知の固定サイズを持つ配列にのみ適用されます。VLAはテーブルで与えられた要素でのみ初期化されます。使用状況に応じて、VLAにNULLまたは0の終端子を明示的に追加する必要があるかもしれません。</li><li>構造体/共用体は、そのフィールドの宣言順に初期化できます。各フィールドは、<code>[0]</code>または<code>[1]</code>のいずれかのインデックスから始まる連続するテーブル要素で初期化されます。このプロセスは最初のnilテーブル要素で停止します。</li><li>それ以外の場合、インデックス<code>[0]</code>も<code>[1]</code>も存在しない場合、構造体/共用体はテーブル内の各フィールド名（文字列キーとして）をルックアップすることで初期化されます。非nilの値が対応するフィールドを初期化するために使用されます。</li><li>構造体の未初期化フィールドは、VLSの末尾のVLAを除き、ゼロバイトで埋められます。</li><li>共用体の初期化は1つのフィールドが初期化された後に停止します。フィールドが初期化されていない場合、共用体はゼロバイトで埋められます。</li><li>自体が集合である要素やフィールドは単一の初期化子で初期化されますが、これはネストされたテーブル初期化子（または互換性のある集合）である可能性があります。</li><li>配列の余分な初期化子はエラーを引き起こします。構造体/共用体の余分な初期化子は無視されます。関連しないテーブルエントリも無視されます。</li></ul><p>例:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ffi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[[</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b; };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d; };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nested { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo y; };</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {})            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 0, 0, 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 1, 1, 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 1, 2, 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 1, 2, 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 1, 1, 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 1, 2, 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; 1, 2, 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[3]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; error: too many initializers</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {})            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; a = 0, b = 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; a = 1, b = 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; a = 1, b = 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; a = 1, b = 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; a = 0, b = 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; a = 1, b = 2  &#39;c&#39; is ignored</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;union bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {})        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; i = 0, d = 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;union bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; i = 1, d = ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;union bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; i = 1, d = ?    &#39;2&#39; is ignored</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;union bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; i = ?, d = 2.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct nested&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; x = 1, y.a = 2, y.b = 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct nested&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt; x = 1, y.a = 2, y.b = 3</span></span></code></pre></div><h2 id="cdataオブジェクトに対する操作" tabindex="-1">cdataオブジェクトに対する操作 <a class="header-anchor" href="#cdataオブジェクトに対する操作" aria-label="Permalink to &quot;cdataオブジェクトに対する操作&quot;">​</a></h2><p>すべての標準Lua演算子は、cdataオブジェクトまたはcdataオブジェクトと別のLuaオブジェクトの組み合わせに適用できます。以下のリストは、事前定義された操作を示しています。</p><p>参照型は、以下の各操作を実行する前に参照解除されます — 操作は参照によって指されるC型に適用されます。</p><p>事前定義された操作は、対応するctypeのメタメソッドまたはインデックステーブル（存在する場合）に委譲する前に、常に最初に試みられます（__newを除く）。メタメソッドルックアップまたはインデックステーブルルックアップが失敗した場合はエラーが発生します。</p><h3 id="cdataオブジェクトのインデックス付け" tabindex="-1">cdataオブジェクトのインデックス付け <a class="header-anchor" href="#cdataオブジェクトのインデックス付け" aria-label="Permalink to &quot;cdataオブジェクトのインデックス付け&quot;">​</a></h3><ul><li>ポインター/配列のインデックス付け：cdataポインター/配列は、cdata数値またはLua数値でインデックス付けできます。要素のアドレスは、基底アドレスに数値値を要素のバイト単位のサイズで乗算したものを加えて計算されます。読み取りアクセスは要素の値をロードし、Luaオブジェクトに変換します。書き込みアクセスはLuaオブジェクトを要素の型に変換し、変換された値を要素に格納します。要素のサイズが未定義である場合、または定数要素への書き込みアクセスが試みられた場合にはエラーが発生します。</li><li>構造体/共用体フィールドの参照解除：cdata構造体/共用体または構造体/共用体へのポインターは、フィールド名を指定する文字列キーによって参照解除できます。フィールドのアドレスは、基底アドレスにフィールドの相対オフセットを加えたものとして計算されます。読み取りアクセスはフィールドの値をロードし、Luaオブジェクトに変換します。書き込みアクセスはLuaオブジェクトをフィールドの型に変換し、変換された値をフィールドに格納します。定数構造体/共用体または定数フィールドへの書き込みアクセスが試みられた場合にはエラーが発生します。スコープ付き列挙型定数または静的定数は定数フィールドのように扱われます。</li><li>複素数のインデックス付け：複素数は、0または1の値を持つcdata数値またはLua数値、または文字列&quot;re&quot;または&quot;im&quot;によってインデックス付けできます。読み取りアクセスは複素数の実部（<code>[0]</code>、.re）または虚部（<code>[1]</code>、.im）をロードし、Lua数値に変換します。複素数のサブパーツは不変です — 複素数のインデックスに代入するとエラーが発生します。範囲外のインデックスにアクセスすると、未指定の結果が返されますが、メモリアクセス違反を引き起こすことは保証されていません。</li><li>ベクトルのインデックス付け：ベクトルはインデックス付けの目的で配列と同様に扱われますが、ベクトルの要素は不変です — ベクトルのインデックスに代入するとエラーが発生します。</li></ul><p>ctypeオブジェクトも文字列キーでインデックスを付けることができます。事前定義された操作は構造体/共用体型のスコープ内定数を読み取ることだけです。他のすべてのアクセスは、対応するメタメソッドやインデックステーブル（存在する場合）に委ねられます。</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>アドレス演算子が（意図的に）存在しないため、値型を保持するcdataオブジェクトは初期化後に実質的に不変です。JITコンパイラは、特定の最適化を適用する際にこの事実を利用します。</p></div><p>その結果、複素数やベクトルの要素は不変です。しかし、これらの型を保持する集合の要素は、もちろん変更される可能性があります。つまり、foo.c.imに代入することはできませんが、（新しく作成された）複素数をfoo.cに代入することはできます。</p><p>JITコンパイラは厳格なエイリアス規則を実装しています：異なる型へのアクセスはエイリアスを形成しませんが、符号付き性の違いに対してはこの限りではありません（これはC99とは異なり、charポインターにも適用されます）。共用体を通じた型のごまかしは明示的に検出され許可されます。</p><h3 id="cdataオブジェクトの呼び出し" tabindex="-1">cdataオブジェクトの呼び出し <a class="header-anchor" href="#cdataオブジェクトの呼び出し" aria-label="Permalink to &quot;cdataオブジェクトの呼び出し&quot;">​</a></h3><ul><li>コンストラクター：ctypeオブジェクトを呼び出してコンストラクターとして使用できます。これはffi.new(ct, ...)と同等ですが、__newメタメソッドが定義されている場合を除きます。__newメタメソッドは、ctypeオブジェクトとコンストラクターに渡された他の引数を使って呼び出されます。このメタメソッド内ではct(...)を呼び出すと無限再帰を引き起こすため、ffi.newを使用する必要があることに注意してください。</li><li>C関数呼び出し：cdata関数またはcdata関数ポインターを呼び出すことができます。渡された引数は、関数宣言で指定されたパラメーターのC型に変換されます。可変引数C関数の可変引数部分に渡された引数は特別な変換規則を使用します。このC関数が呼び出され、戻り値（存在する場合）はLuaオブジェクトに変換されます。 Windows/x86システムでは、__stdcall関数は自動的に検出され、__cdecl（デフォルト）として宣言された関数は、最初の呼び出し後に自動的に修正されます。</li></ul><h3 id="cdataオブジェクトの算術演算" tabindex="-1">cdataオブジェクトの算術演算 <a class="header-anchor" href="#cdataオブジェクトの算術演算" aria-label="Permalink to &quot;cdataオブジェクトの算術演算&quot;">​</a></h3><ul><li>ポインタ算術：cdataポインタ/配列とcdata数値またはLua数値を加算または減算できます。減算の場合、数値は右側になければなりません。結果は、同じ型のポインタであり、アドレスは数値値に要素サイズ（バイト単位）を乗じたもののプラスまたはマイナスです。要素サイズが未定義の場合はエラーが発生します。</li><li>ポインタ差：互換性のある二つのcdataポインタ/配列を減算できます。結果は、それらのアドレスの差を要素サイズ（バイト単位）で割ったものです。要素サイズが未定義またはゼロの場合はエラーが発生します。</li><li>64ビット整数算術：標準の算術演算子（+ - * / % ^ および単項マイナス）を二つのcdata数値、またはcdata数値とLua数値に適用できます。片方がuint64_tの場合、他方はuint64_tに変換され、符号なし算術演算が実行されます。それ以外の場合は、両方がint64_tに変換され、符号付き算術演算が実行されます。結果はボックス化された64ビットのcdataオブジェクトです。 オペランドの一方がenumで、もう一方が文字列の場合、文字列は上記の変換前に一致するenum定数の値に変換されます。 これらの規則により、64ビット整数は「粘着性」があります。少なくとも一方のオペランドが64ビット整数である任意の式は、別の64ビット整数を結果とします。除算、剰余、累乗演算子の未定義のケースは2LL ^ 63または2ULL ^ 63を返します。 64ビット整数をLua数値に明示的に変換する必要があります（例：通常の浮動小数点計算のために）tonumber()を使用します。しかし、これには精度損失が発生する可能性があることに注意してください。</li><li>64ビットビット演算：64ビット算術演算子の規則は類似して適用されます。 他のbit.*演算とは異なり、bit.tobit()はcdata数値をint64_t経由でint32_tに変換し、Lua数値を返します。 bit.band()、bit.bor()、bit.bxor()については、引数のいずれかがcdata数値である場合、すべての引数に対してint64_tまたはuint64_tへの変換が適用されます。 その他の演算については、出力タイプを決定するために最初の引数のみが使用されます。これは、シフトやローテートのシフトカウントとしてcdata数値を受け入れることを意味しますが、それだけではcdata数値の出力にはなりません。</li></ul><h3 id="cdataオブジェクトの比較" tabindex="-1">cdataオブジェクトの比較 <a class="header-anchor" href="#cdataオブジェクトの比較" aria-label="Permalink to &quot;cdataオブジェクトの比較&quot;">​</a></h3><ul><li>ポインタの比較：互換性のある二つのcdataポインタ/配列は比較できます。結果は、それらのアドレスの符号なし比較と同じです。nilはNULLポインタとして扱われ、他の任意のポインタ型と互換性があります。</li><li>64ビット整数の比較：二つのcdata数値、またはcdata数値とLua数値を互いに比較できます。片方がuint64_tの場合、他方はuint64_tに変換され、符号なし比較が実行されます。それ以外の場合、両方がint64_tに変換され、符号付き比較が実行されます。 オペランドの一方がenumで、もう一方が文字列の場合、文字列は上記の変換前に一致するenum定数の値に変換されます。</li><li>等価/非等価の比較ではエラーは発生しません。互換性のないポインタでもアドレスによる等価性で比較できます。その他の互換性のない比較（非cdataオブジェクトとの比較も含む）では、二つの側面は不等として扱われます。</li></ul><h3 id="cdataオブジェクトをテーブルキーとして" tabindex="-1">cdataオブジェクトをテーブルキーとして <a class="header-anchor" href="#cdataオブジェクトをテーブルキーとして" aria-label="Permalink to &quot;cdataオブジェクトをテーブルキーとして&quot;">​</a></h3><p>Luaテーブルはcdataオブジェクトでインデックス付けできますが、これは有用な意味を提供しません — cdataオブジェクトはテーブルキーには適していません！</p><p>cdataオブジェクトは、他のガベージコレクトされるオブジェクトと同様に扱われ、テーブルインデックスのためにそのアドレスでハッシュ化および比較されます。cdata値型にはインターニングがないため、同じ値が異なるアドレスの異なるcdataオブジェクトでボックス化される可能性があります。したがって、<code>t[1LL+1LL]</code>と<code>t[2LL]</code>は通常、同じハッシュスロットを指さず、<code>t[2]</code>と同じハッシュスロットを指すことは絶対にありません。</p><p>値によるハッシュ化と比較のための追加の処理をLuaテーブルに追加すると、実装の複雑さが大幅に増加し、一般的なケースが遅くなるでしょう。VM内での使用が広範囲にわたっていることを考えると、これは受け入れられません。</p><p>cdataオブジェクトをキーとして使用する必要がある場合、実行可能な代替手段は3つあります：</p><ul><li>Lua数値の精度（52ビット）で済む場合は、cdata数値にtonumber()を使用するか、cdata集合の複数のフィールドをLua数値に組み合わせます。その結果得られるLua数値をテーブルのインデックスキーとして使用します。 明らかな利点は、<code>t[tonumber(2LL)]</code>が<code>t[2]</code>と同じスロットを指すことです。</li><li>それ以外の場合は、64ビット整数や複素数にtostring()を使用するか、cdata集合の複数のフィールドをLua文字列に組み合わせます（例：ffi.string()を使用）。その結果得られるLua文字列をテーブルのインデックスキーとして使用します。</li><li>Cコードで行うように、FFIライブラリによって提供されるC型を使用して、専用のハッシュテーブル実装を作成します。最終的には、他の代替手段や一般的な値によるハッシュテーブルが提供できるものよりも、はるかに優れたパフォーマンスを得ることができるかもしれません。</li></ul><h2 id="パラメータ化された型" tabindex="-1">パラメータ化された型 <a class="header-anchor" href="#パラメータ化された型" aria-label="Permalink to &quot;パラメータ化された型&quot;">​</a></h2><p>いくつかの抽象化を容易にするために、二つの関数ffi.typeofとffi.cdefは、C宣言におけるパラメータ化された型をサポートしています。</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>cdeclを取る他のAPI関数では、これを許可していません。</p></div><p>typedef名、識別子、または宣言内の数値を記述できる場所では、$（ドル記号）を代わりに記述できます。これらのプレースホルダーは、cdecl文字列に続く引数との出現順に置き換えられます：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- パラメータ化されたフィールド型と名前を持つ構造体を宣言：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">typedef struct { $ $; } foo_t;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, type1, name1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 動的名前を持つ匿名構造体：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar_t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;struct { int $, $; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name1, name2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 派生ポインタ型：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar_ptr_t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$ *&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bar_t)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- パラメータ化された寸法は、VLAでは機能しない場所でも機能します：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix_t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uint8_t[$][$]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, width, height)</span></span></code></pre></div><p>注意: これは単純なテキスト置換ではありません！渡された ctype または cdata オブジェクトは基礎となる型のように扱われ、渡された文字列は識別子とみなされ、数字は数字とみなされます。この区別を混同してはいけません：例えば、型の代わりに文字列 &quot;int&quot; を渡すことは機能しません、代わりに <code>ffi.typeof(&quot;int&quot;)</code> を使用する必要があります。</p><p>パラメータ化された型の主な使用例は、C++ テンプレートメタプログラミングで達成できるものに似た、抽象データ型を実装するライブラリ（例）です。別の使用例は、グローバルな struct 名前空間の汚染を避けるための、匿名構造体の派生型です。</p><p>パラメータ化された型は優れたツールであり、特定の使用例には不可欠です。しかし、実際のコードでは、すべての型が実際に固定されている場合など、慎重に使用することが望まれます。</p><h2 id="cdata-オブジェクトのガーベジコレクション" tabindex="-1">cdata オブジェクトのガーベジコレクション <a class="header-anchor" href="#cdata-オブジェクトのガーベジコレクション" aria-label="Permalink to &quot;cdata オブジェクトのガーベジコレクション&quot;">​</a></h2><p>明示的に (<code>ffi.new()</code>、<code>ffi.cast()</code> など) または暗黙的に（アクセサを通じて）作成された cdata オブジェクトはガーベジコレクションされます。cdata オブジェクトがまだ使用されている間、Lua スタック、アップバリュー、または Lua テーブルのどこかに有効な参照を保持することが必要です。cdata オブジェクトへの最後の参照がなくなると、ガーベジコレクタは次の GC サイクルの終わりにそれが使用していたメモリを自動的に解放します。</p><p>ただし、ポインタ自体も cdata オブジェクトですが、ガーベジコレクタによって追跡されることはありません。したがって、例えば、cdata 配列をポインタに割り当てる場合、ポインタがまだ使用中である限り、配列を保持する cdata オブジェクトを生存させておく必要があります：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[[</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a; } </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo_t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[10]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 間違い！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int[10]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 正しい</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo_t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &#39;s&#39; を何かしらの処理で使用するが、完了するまで &#39;a&#39; を生存させる。</span></span></code></pre></div><p>Luaの文字列にも同様のルールが適用されます。文字列は暗黙的に &quot;const char *&quot; に変換されます：文字列オブジェクト自体はどこかで参照されていなければ、最終的にガーベジコレクションされます。その後、ポインタは古いデータを指すことになり、そのデータはすでに上書きされている可能性があります。文字列リテラルは、それを含む関数（正確にはそのプロトタイプ）がガーベジコレクションされない限り、自動的に生存が保たれることに注意してください。</p><p>外部C関数に引数として渡されたオブジェクトは、呼び出しが戻るまで生存が保たれます。したがって、引数リスト内で一時的な cdata オブジェクトを作成することは一般的に安全です。これは、特定のC型をvararg関数に渡すための一般的な慣用句です。</p><p>C関数によって返されるメモリ領域（例えば malloc() からのもの）は、もちろん手動で管理する必要があります（または <code>ffi.gc()</code> を使用します）。cdataオブジェクトへのポインタは、C関数によって返されたポインタと区別がつかないものです（これがGCがそれらを追跡できない理由の一つです）。</p><h2 id="コールバック" tabindex="-1">コールバック <a class="header-anchor" href="#コールバック" aria-label="Permalink to &quot;コールバック&quot;">​</a></h2><p>LuaJIT FFIは、Lua関数がC関数ポインタに変換されるたびに、特別なコールバック関数を自動的に生成します。これにより、生成されたコールバック関数ポインタは、関数ポインタのC型とLua関数オブジェクト（クロージャ）と関連付けられます。</p><p>これは、Lua関数を関数ポインタ引数に渡すときなど、通常の変換によって暗黙的に発生する場合があります。または、<code>ffi.cast()</code> を使用して、Lua関数を明示的にC関数ポインタにキャストすることもできます。</p><p>現在、特定のC関数型のみがコールバック関数として使用できます。Cのvararg関数や値渡しの集約引数や結果型を持つ関数はサポートされていません。コールバックから呼び出すことができるLua関数の種類に制限はありません — 適切な引数の数に関するチェックは行われません。Lua関数の戻り値は結果型に変換され、変換が無効であればエラーが投げられます。</p><p>コールバックの呼び出しを越えてエラーを投げることは許されますが、一般的にはお勧めできません。コールバックを呼び出したC関数が強制スタックアンワインドを処理し、リソースのリークがない場合にのみこれを行ってください。</p><p>許可されていないことの一つは、FFIがC関数を呼び出すことをJITコンパイルさせることです。そのC関数はコールバックを呼び出し、再びLuaに呼び出します。通常、この試みは最初にインタプリタによって捕捉され、C関数はコンパイルのブラックリストに登録されます。</p><p>しかし、このヒューリスティックは特定の状況下で失敗することがあります：例えば、メッセージポーリング関数はすぐにLuaコールバックを実行しないかもしれませんが、その呼び出しはJITコンパイルされるかもしれません。後にLuaへのコールバック（例えば、まれに呼び出されるエラーコールバック）が発生すると、「bad callback」というメッセージと共にVM PANICが発生します。その場合、そのようなメッセージポーリング関数（または類似のもの）を呼び出す周囲のLua関数に対して <code>jit.off()</code> を使って手動でJITコンパイルをオフにする必要があります。</p><h3 id="コールバックのリソース処理" tabindex="-1">コールバックのリソース処理 <a class="header-anchor" href="#コールバックのリソース処理" aria-label="Permalink to &quot;コールバックのリソース処理&quot;">​</a></h3><p>コールバックはリソースを消費します — 同時に持てるコールバックの数には限りがあります（アーキテクチャによって500〜1000）。関連付けられたLua関数もガーベジコレクションを防ぐためにアンカーされています。</p><p>暗黙の変換によるコールバックは永続的です！そのライフタイムを推測する方法はありません。なぜならC側は後で使用するために関数ポインタを保存するかもしれないからです（GUIツールキットで典型的）。関連するリソースは終了するまで回収できません：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[[</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (__stdcall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WNDENUMPROC)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hwnd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnumWindows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WNDENUMPROC </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">intptr_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 関数ポインタ引数を介したコールバックへの暗黙の変換。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EnumWindows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hwnd, l)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- コールバックは永続的で、そのリソースは回収できません！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- これを一度だけ行うのであれば、問題ではないかもしれません。</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">注意</p><p>この例は、Windows/x86 システム上で __stdcall コールバックを適切に宣言する必要があることを示しています。__stdcall での Windows 関数への呼び出しとは異なり、呼び出し規約は自動的に検出されません。</p></div><p>特定の使用例では、リソースを解放するか、コールバックを動的にリダイレクトする必要があります。明示的にC関数ポインタへのキャストを使用し、結果として得られる cdata オブジェクトを保持します。その後、cdata オブジェクトに対して <code>cb:free()</code> または <code>cb:set()</code> メソッドを使用します：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 明示的にキャストしてコールバックに変換。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WNDENUMPROC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hwnd, l)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- C関数に渡す。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EnumWindows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cb, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- EnumWindowsは戻り値を返した後、コールバックを必要としないため、解放する。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- コールバック関数ポインタはもはや有効でなく、そのリソースは再利用される。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 生成されたLuaクロージャはガーベジコレクトされる。</span></span></code></pre></div><h3 id="コールバックのパフォーマンス" tabindex="-1">コールバックのパフォーマンス <a class="header-anchor" href="#コールバックのパフォーマンス" aria-label="Permalink to &quot;コールバックのパフォーマンス&quot;">​</a></h3><p>コールバックは遅いです！まず、CからLuaへの変換自体には避けられないコストが伴います。これは、<code>lua_call()</code> や <code>lua_pcall()</code> と似ています。引数と結果のマーシャリングもそのコストに加わります。そして最終的に、CコンパイラもLuaJITも、言語の境界を越えてインライン化したり最適化したり、コールバック関数から繰り返し計算を外したりすることができません。</p><p>パフォーマンスに敏感な作業にはコールバックを使用しないでください。例えば、ユーザー定義関数を数百万回Cコードから呼び出す数値積分ルーチンを考えてみてください。コールバックのオーバーヘッドはパフォーマンスにとって絶対に悪影響を与えます。</p><p>数値積分ルーチン自体をLuaで書く方がはるかに速いです。JITコンパイラはユーザー定義関数をインライン化し、呼び出しコンテキストと共に最適化することができ、非常に競争力のあるパフォーマンスを実現できます。</p><p>一般的なガイドラインとして、既存のC APIのために必要な場合のみコールバックを使用します。例えば、GUIアプリケーションでは、ほとんどの時間がユーザー入力を待つため、コールバックのパフォーマンスは関係ありません。</p><p>新しい設計では、プッシュスタイルのAPI（C関数が結果ごとにコールバックを繰り返し呼び出すもの）を避け、プルスタイルのAPIを使用してください：新しい結果を得るためにC関数を繰り返し呼び出します。FFIを介してLuaからCへの呼び出しは、その逆よりもはるかに高速です。よく設計されたライブラリはすでにプルスタイルのAPI（読み込み/書き込み、取得/配置）を使用しています。</p><h2 id="cライブラリの名前空間" tabindex="-1">Cライブラリの名前空間 <a class="header-anchor" href="#cライブラリの名前空間" aria-label="Permalink to &quot;Cライブラリの名前空間&quot;">​</a></h2><p>Cライブラリの名前空間は、共有ライブラリまたはデフォルトのシンボル名前空間に含まれるシンボルにアクセスを許可する特別な種類のオブジェクトです。デフォルトの <code>ffi.C</code> 名前空間は、FFIライブラリがロードされると自動的に作成されます。特定の共有ライブラリ用のCライブラリ名前空間は、<code>ffi.load()</code> API関数で作成されることがあります。</p><p>Cライブラリ名前空間オブジェクトをシンボル名（Luaの文字列）でインデックス付けすると、それが自動的にライブラリにバインドされます。まず、シンボルの型が解決されます — これは <code>ffi.cdef</code> で宣言されていなければなりません。次に、関連する共有ライブラリまたはデフォルトのシンボル名前空間でシンボル名を検索してシンボルアドレスが解決されます。最後に、シンボル名、シンボルの型、およびそのアドレスの間の結果のバインディングがキャッシュされます。宣言されていないシンボルや存在しないシンボル名はエラーを引き起こします。</p><p>異なる種類のシンボルに対する読み取りアクセスでは、以下が発生します：</p><ul><li>外部関数：関数の型とそのアドレスを持つ cdata オブジェクトが返されます。</li><li>外部変数：シンボルアドレスが参照解除され、ロードされた値がLuaオブジェクトに変換されて返されます。</li><li>定数値（static constまたはenum定数）：定数がLuaオブジェクトに変換されて返されます。</li></ul><p>書き込みアクセスが行われた場合には次のようなことが起こります：</p><ul><li>外部変数：書き込まれる値は変数のC型に変換され、その後、シンボルアドレスに格納されます。</li><li>定数変数への書き込みやその他のシンボルタイプへの書き込みは、定数の場所への他の書き込み試みと同様に、エラーを引き起こします。</li></ul><p>Cライブラリの名前空間自体はガーベジコレクションされるオブジェクトです。名前空間オブジェクトへの最後の参照がなくなった場合、ガーベジコレクタは最終的に共有ライブラリ参照を解放し、名前空間に関連するすべてのメモリを削除します。これにより、実行中のプロセスのメモリから共有ライブラリが削除される可能性があるため、名前空間オブジェクトが参照されない可能性がある場合には、ライブラリから取得した関数 cdata オブジェクトを使用することは一般的に安全ではありません。</p><p>パフォーマンスに関する注意：JITコンパイラは、名前空間オブジェクトの同一性とそれをインデックスするために使用される文字列に特化しています。これにより、関数 cdata オブジェクトは実質的に定数になります。例えば、<code>local strlen = ffi.C.strlen</code> のようにこれらの関数オブジェクトを明示的にキャッシュすることは有益ではなく、実際には逆効果です。一方、名前空間自体をキャッシュすることは有益です。例えば、<code>local C = ffi.C</code> です。</p><h2 id="手取り足取りはありません" tabindex="-1">手取り足取りはありません！ <a class="header-anchor" href="#手取り足取りはありません" aria-label="Permalink to &quot;手取り足取りはありません！&quot;">​</a></h2><p>FFIライブラリは低レベルライブラリとして設計されています。目標は、最小限のオーバーヘッドでCコードやCデータタイプとインターフェイスすることです。これは、Cからできることなら何でもできることを意味します：全てのメモリにアクセスし、メモリ内の何でも書き換える、任意のメモリアドレスでマシンコードを呼び出すなどです。</p><p>FFIライブラリは、通常のLuaコードとは異なり、メモリの安全性を提供しません。NULLポインタの参照の解除、範囲外の配列へのアクセス、C関数の誤宣言を喜んで許可します。間違いを犯せば、アプリケーションは、同等のCコードのように、クラッシュするかもしれません。</p><p>この振る舞いは避けられません。なぜなら、目標はCコードとの完全な相互運用性を提供することにあるからです。境界チェックのような追加の安全対策を加えることは無意味です。共有ライブラリはシンボル名のみを提供し、型情報を提供しないため、C関数の誤宣言を検出する方法はありません。同様に、返されたポインタの有効なインデックス範囲を推測する方法もありません。</p><p>再び言いますが、FFIライブラリは低レベルのライブラリです。これは、注意深く使用する必要があることを意味しますが、その柔軟性とパフォーマンスはしばしばこの懸念を上回ります。CまたはC++開発者であれば、既存の知識を適用するのは容易でしょう。他方で、FFIライブラリ用のコードを書くことは心臓の弱い人には向いておらず、Lua、C、C++の経験が少ない人が最初に取り組むべき課題ではないかもしれません。</p><p>上記の帰結として、FFIライブラリは信頼できないLuaコードによる使用には安全ではありません。信頼できないLuaコードをサンドボックス化する場合、このコードにFFIライブラリや任意のcdataオブジェクト（64ビット整数や複素数を除く）へのアクセスを許可することは絶対に避けたいでしょう。適切に設計されたLuaサンドボックスは、標準Luaライブラリ関数の多くに対して安全なラッパーを提供する必要があります。同様に、FFIデータ型に対する高レベルの操作用のラッパーも書かれる必要があります。</p><h2 id="現状" tabindex="-1">現状 <a class="header-anchor" href="#現状" aria-label="Permalink to &quot;現状&quot;">​</a></h2><p>FFIライブラリの初期リリースにはいくつかの制限があり、いくつかの機能が欠けています。これらの多くは将来のリリースで修正される予定です。</p><p>現在、C言語のサポートは不完全です：</p><ul><li>Cの宣言はまだCプリプロセッサを通していません。</li><li>Cパーサーは、Cヘッダーファイルで一般的に見られるほとんどの定数式を評価することができます。しかし、C式の完全な範囲を扱うことはできず、いくつかの難解な構造に対しては失敗することがあります。</li><li>static const宣言は32ビットまでの整数型でのみ機能します。文字列定数や浮動小数点定数の宣言はサポートされていません。</li><li>コンテナ境界を越えるパックされた構造体ビットフィールドは実装されていません。</li><li>ネイティブベクタータイプはGCCモードまたはvector_size属性で定義できますが、読み込み、保存、初期化以外の操作はまだサポートされていません。</li><li>volatile型修飾子は現在、コンパイルされたコードによって無視されています。</li><li>ffi.cdefはほとんどの再宣言を黙って無視します。注意：C99に準拠しない再宣言は避けてください。実装は最終的に厳密なチェックを行うように変更される予定です。</li></ul><p>JITコンパイラはすでにFFI操作の大部分を処理しています。未実装の操作については自動的にインタープリタにフォールバックします（-jvコマンドラインオプションでこれを確認できます）。現在コンパイルされていない次の操作は、特に内部ループで使用された場合、最適でないパフォーマンスを示す可能性があります：</p><ul><li>ベクター操作。</li><li>テーブル初期化子。</li><li>ネストされた構造体/共用体型の初期化。</li><li>VLA/VLSまたは大きなC型（&gt; 128バイトまたは&gt; 16配列要素）の非デフォルト初期化。</li><li>ビットフィールドの初期化。</li><li>2の冪でない要素サイズのポインタ差。</li><li>値で渡されたり返されたりする集約を持つC関数への呼び出し。</li><li>素朴な関数ではないctypeメタメソッドへの呼び出し。</li><li>ctype __newindexテーブルとctype __indexテーブルの非文字列検索。</li><li>cdata型のtostring()。</li><li>ffi.cdef()、ffi.load()、ffi.metatype()への呼び出し。</li></ul><p>他の不足している機能：</p><ul><li>複素数の算術。</li><li>vararg C関数に値で渡される構造体。</li><li>C++の例外相互運用性は、コンパイルされた場合にFFI経由で呼び出されるC関数には拡張されません。</li></ul>`,123)]))}const o=s(n,[["render",h]]);export{c as __pageData,o as default};
