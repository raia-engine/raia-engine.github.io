import{_ as i,c as e,a2 as s,o as t}from"./chunks/framework.6x3wfQve.js";const k=JSON.parse('{"title":"next","description":"","frontmatter":{},"headers":[],"relativePath":"document/built_in/std/next.md","filePath":"document/built_in/std/next.md","lastUpdated":1729074270000}'),n={name:"document/built_in/std/next.md"};function l(d,a,h,o,p,r){return t(),e("div",null,a[0]||(a[0]=[s(`<h1 id="next" tabindex="-1">next <a class="header-anchor" href="#next" aria-label="Permalink to &quot;next&quot;">​</a></h1><p>テーブルの次のキーと値を返し、テーブルをトラバース可能にする</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (table [, index])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>プログラムがテーブルの全てのフィールドをトラバースすることを可能にします。第一引数はテーブルで、第二引数はこのテーブル内のインデックスです。<code>next</code>はテーブルの次のインデックスとそれに関連付けられた値を返します。第二引数に<code>nil</code>を使用して呼び出された場合、<code>next</code>は初期インデックスとそれに関連付けられた値を返します。最後のインデックスで呼び出された場合、または空のテーブルで<code>nil</code>を使用して呼び出された場合、<code>next</code>は<code>nil</code>を返します。第二引数が省略された場合、それは<code>nil</code>と解釈されます。特に、<code>next(t)</code>を使用してテーブルが空かどうかを確認できます。</p><p>インデックスが列挙される順序は、数値インデックスであっても指定されていません。（数値順でテーブルをトラバースするには、数値の<code>for</code>または<code>ipairs</code>関数を使用してください。）</p><p>トラバース中にテーブルに存在しないフィールドに値を割り当てる場合、<code>next</code>の動作は未定義です。ただし、既存のフィールドを修正することはできます。特に、既存のフィールドをクリアすることができます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t))</span></span></code></pre></div><p>この例では、テーブル<code>t</code>の最初のキーと値が表示されます。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./pairs.html"><code>pairs</code></a></li><li><a href="./ipairs.html"><code>ipairs</code></a></li></ul>`,14)]))}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
