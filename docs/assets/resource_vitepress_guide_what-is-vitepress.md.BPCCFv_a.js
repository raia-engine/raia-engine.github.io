import{_ as r,c as t,a2 as s,o as a}from"./chunks/framework.CuCbyi2k.js";const g=JSON.parse('{"title":"VitePressとは？","description":"","frontmatter":{},"headers":[],"relativePath":"resource/vitepress/guide/what-is-vitepress.md","filePath":"resource/vitepress/guide/what-is-vitepress.md","lastUpdated":null}'),i={name:"resource/vitepress/guide/what-is-vitepress.md"};function o(l,e,p,n,u,h){return a(),t("div",null,e[0]||(e[0]=[s('<h1 id="vitepressとは" tabindex="-1">VitePressとは？ <a class="header-anchor" href="#vitepressとは" aria-label="Permalink to &quot;VitePressとは？&quot;">​</a></h1><details class="details custom-block"><summary>原文</summary><p><a href="https://github.com/vuejs/vitepress/blob/3c40e9d9a8443433f49599111ee571d569de530d/docs/en/guide/what-is-vitepress.md" target="_blank" rel="noreferrer">https://github.com/vuejs/vitepress/blob/3c40e9d9a8443433f49599111ee571d569de530d/docs/en/guide/what-is-vitepress.md</a></p></details><p>VitePressは、高速でコンテンツ中心のウェブサイトを構築するために設計された<a href="https://en.wikipedia.org/wiki/Static_site_generator" target="_blank" rel="noreferrer">静的サイトジェネレーター</a> (SSG)です。簡単に言えば、VitePressはMarkdownで書かれたソースコンテンツにテーマを適用し、どこにでも簡単にデプロイできる静的なHTMLページを生成します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>とりあえず試してみたい？ <a href="./getting-started.html">クイックスタート</a>を見てください。</p></div><h2 id="使用例" tabindex="-1">使用例 <a class="header-anchor" href="#使用例" aria-label="Permalink to &quot;使用例&quot;">​</a></h2><ul><li><p><strong>ドキュメンテーション</strong></p><p>VitePressには技術文書向けに設計されたデフォルトのテーマが付属しています。このページや、<a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>、<a href="https://rollupjs.org/" target="_blank" rel="noreferrer">Rollup</a>、<a href="https://pinia.vuejs.org/" target="_blank" rel="noreferrer">Pinia</a>、<a href="https://vueuse.org/" target="_blank" rel="noreferrer">VueUse</a>、<a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a>、<a href="https://d3js.org/" target="_blank" rel="noreferrer">D3</a>、<a href="https://unocss.dev/" target="_blank" rel="noreferrer">UnoCSS</a>、<a href="https://iconify.design/" target="_blank" rel="noreferrer">Iconify</a>などのドキュメントもVitePressで作成されています。さらに、<a href="https://www.vuetelescope.com/explore?framework.slug=vitepress" target="_blank" rel="noreferrer">多くのプロジェクト</a>がこのツールを利用しています。</p><p><a href="https://vuejs.org/" target="_blank" rel="noreferrer">公式のVue.jsドキュメント</a>もVitePressを基盤にしていますが、複数の翻訳版で共通のカスタムテーマを使用しています。</p></li><li><p><strong>ブログ、ポートフォリオ、マーケティングサイト</strong></p><p>VitePressは<a href="./custom-theme.html">完全にカスタマイズされたテーマ</a>をサポートしており、通常のVite + Vueアプリケーションと同じ開発体験を提供します。また、VitePressは、ビルド時にデータが決定できる限り、ほぼ何でも構築できる柔軟なAPIを提供します。たとえば、<a href="./data-loading.html">データをロード</a>したり、<a href="./routing.html#dynamic-routes">動的にルートを生成</a>したりできます。</p><p>公式の<a href="https://blog.vuejs.org/" target="_blank" rel="noreferrer">Vue.jsブログ</a>も、ローカルコンテンツに基づいてインデックスページを生成するシンプルなブログです。</p></li></ul><h2 id="開発者体験" tabindex="-1">開発者体験 <a class="header-anchor" href="#開発者体験" aria-label="Permalink to &quot;開発者体験&quot;">​</a></h2><p>VitePressは、Markdownコンテンツを扱う際に素晴らしい開発者体験(DX)を提供することを目指しています。</p><ul><li><p><strong><a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Viteによるサポート</a>:</strong> 即時サーバー起動、100ms以内で常に編集内容が即座に反映され、ページリロードが不要。</p></li><li><p><strong><a href="./markdown.html">組み込みのMarkdown拡張機能</a>:</strong> フロントマター、テーブル、シンタックスハイライトなどが標準でサポートされています。特に、コードブロックを扱うための高度な機能を多数提供しており、技術文書に最適です。</p></li><li><p><strong><a href="./using-vue.html">Vueで強化されたMarkdown</a>:</strong> 各MarkdownページはVueの<a href="https://vuejs.org/guide/scaling-up/sfc.html" target="_blank" rel="noreferrer">シングルファイルコンポーネント</a>でもあり、VueテンプレートがHTMLと100％互換性があるため、Vueのテンプレート機能やインポートしたVueコンポーネントを使用して、静的コンテンツにインタラクティブな要素を埋め込むことができます。</p></li></ul><h2 id="パフォーマンス" tabindex="-1">パフォーマンス <a class="header-anchor" href="#パフォーマンス" aria-label="Permalink to &quot;パフォーマンス&quot;">​</a></h2><p>従来の多くのSSGでは、ナビゲーションごとにページ全体のリロードが行われますが、VitePressで生成されたサイトでは、初回訪問時に静的なHTMLが提供されますが、その後のナビゲーションでは<a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank" rel="noreferrer">シングルページアプリケーション</a> (SPA)として機能します。このモデルは、パフォーマンスにおいて最適なバランスを提供すると考えています。</p><ul><li><p><strong>高速な初回ロード</strong></p><p>どのページへの初回訪問でも、静的にプリレンダリングされたHTMLが提供され、速い読み込み速度と最適なSEOが実現されます。その後、ページがJavaScriptバンドルを読み込み、VueのSPAとして機能します（&quot;ハイドレーション&quot;と呼ばれるプロセス）。SPAのハイドレーションは遅いと思われがちですが、Vue 3の高いパフォーマンスとコンパイラの最適化のおかげで、このプロセスは非常に高速です。<a href="https://pagespeed.web.dev/report?url=https%3A%2F%2Fvitepress.dev%2F" target="_blank" rel="noreferrer">PageSpeed Insights</a>でも、VitePressサイトは低性能なモバイルデバイスでもほぼ完璧なパフォーマンススコアを達成しています。</p></li><li><p><strong>高速なポストロードナビゲーション</strong></p><p>さらに重要なのは、初回ロード後のSPAモデルによって、サイト内のナビゲーションがより良いユーザー体験を提供することです。その後のナビゲーションでは、ページ全体のリロードは行われず、リンク先のページのコンテンツが動的に取得されて更新されます。また、VitePressはビューポート内のリンクに対してページチャンクを自動的にプリフェッチします。ほとんどの場合、ポストロードナビゲーションは瞬時に感じられます。</p></li><li><p><strong>ペナルティなしのインタラクティブ性</strong></p><p>静的なMarkdown内に埋め込まれた動的なVue部分をハイドレートできるように、各MarkdownページはVueコンポーネントとして処理され、JavaScriptにコンパイルされます。これは非効率に思えるかもしれませんが、Vueコンパイラは静的部分と動的部分を賢く分離し、ハイドレーションコストとペイロードサイズを最小限に抑えています。初回ページロード時には、静的部分が自動的にJavaScriptペイロードから除外され、ハイドレーション中にスキップされます。</p></li></ul><h2 id="vuepressとの違いは" tabindex="-1">VuePressとの違いは？ <a class="header-anchor" href="#vuepressとの違いは" aria-label="Permalink to &quot;VuePressとの違いは？&quot;">​</a></h2><p>VitePressはVuePressの精神的後継者です。元々のVuePressはVue 2とwebpackに基づいていましたが、VitePressはVue 3とViteをベースにしており、より優れたDX、より高い本番環境でのパフォーマンス、より洗練されたデフォルトテーマ、そしてより柔軟なカスタマイズAPIを提供します。</p><p>VitePressとVuePressのAPIの違いは、主にテーマとカスタマイズに関するものです。もしVuePress 1をデフォルトテーマで使用している場合、VitePressへの移行は比較的簡単です。</p><p>VuePress 2もVue 3とViteをサポートするための努力がなされていますが、2つのSSGを並行して維持するのは持続可能ではないため、Vueチームは長期的にはVitePressを主要な推奨SSGとして焦点を当てることに決めました。</p>',16)]))}const f=r(i,[["render",o]]);export{g as __pageData,f as default};
