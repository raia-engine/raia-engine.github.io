import{_ as a,c as t,a2 as r,o}from"./chunks/framework.DzmM640o.js";const h=JSON.parse('{"title":"Duktape 2.1 release notes","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/release-notes-v2-1.md","filePath":"resource/duktape/doc/release-notes-v2-1.md","lastUpdated":1732350347000}'),i={name:"resource/duktape/doc/release-notes-v2-1.md"};function n(l,e,s,d,u,p){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="duktape-2-1-release-notes" tabindex="-1">Duktape 2.1 release notes <a class="header-anchor" href="#duktape-2-1-release-notes" aria-label="Permalink to &quot;Duktape 2.1 release notes&quot;">​</a></h1><h2 id="release-overview" tabindex="-1">Release overview <a class="header-anchor" href="#release-overview" aria-label="Permalink to &quot;Release overview&quot;">​</a></h2><p>Main changes in this release (see RELEASES.rst for full details):</p><ul><li>Performance, footprint, and portability improvements.</li><li>API additions for more convenient handling of optional arguments: duk_opt_xxx() and duk_get_xxx_default().</li><li>Allow duk_push_heapptr() for objects which have become unreachable and are pending finalization. In such a case a duk_push_heapptr() cancels the pending finalizer call and automatically rescues the object.</li><li>ES2015 additions like String.prototype.{startsWith,endsWith,includes}() and HTML comment syntax. Non-standard shebang (&quot;#!...&quot;) comment support.</li><li>Finalizer handling rework for reference counting and mark-and-sweep to fix a few &quot;side effect&quot; bugs. Also improved torture test coverage for ensuring side effects are handled correctly in Duktape internals.</li><li>DUK_VERSION is now visible to duk_config.h so it&#39;s possible for duk_config.h to support multiple Duktape versions. For example, some config options may be disabled prior to a certain patch level.</li></ul><h2 id="upgrading-from-duktape-2-0" tabindex="-1">Upgrading from Duktape 2.0 <a class="header-anchor" href="#upgrading-from-duktape-2-0" aria-label="Permalink to &quot;Upgrading from Duktape 2.0&quot;">​</a></h2><p>No action (other than recompiling) should be needed for most users to upgrade from Duktape v2.0.x. Note the following:</p><ul><li><p>The Duktape thread used for finalizer calls is now always the initial thread (heap_thread), for both reference counting and mark-and-sweep triggered finalization. This should be taken into account in finalizer functions; in particular, if there are multiple global environments, finalizers will execute in the first global environment created for the heap.</p><p>Prior to 2.1 the finalizer thread could also be heap_thread but usually the current thread would be used.</p></li></ul>',7)]))}const f=a(i,[["render",n]]);export{h as __pageData,f as default};
