import{_ as o,c as t,a2 as c,o as d}from"./chunks/framework.DPuwY6B9.js";const h=JSON.parse('{"title":"Exposed Object.getOwnPropertyDescriptor()","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/hobject-alg-getownpropertydescriptor.md","filePath":"resource/duktape/doc/hobject-alg-getownpropertydescriptor.md","lastUpdated":1732350347000}'),r={name:"resource/duktape/doc/hobject-alg-getownpropertydescriptor.md"};function a(i,e,l,n,s,u){return d(),t("div",null,e[0]||(e[0]=[c('<h1 id="exposed-object-getownpropertydescriptor" tabindex="-1">Exposed Object.getOwnPropertyDescriptor() <a class="header-anchor" href="#exposed-object-getownpropertydescriptor" aria-label="Permalink to &quot;Exposed Object.getOwnPropertyDescriptor()&quot;">​</a></h1><h2 id="original-algorithm" tabindex="-1">Original algorithm <a class="header-anchor" href="#original-algorithm" aria-label="Permalink to &quot;Original algorithm&quot;">​</a></h2><p>The algorithm is specified in E5 Section 15.2.3.3:</p><ol><li>If <code>Type(O)</code> is not <code>Object</code> throw a <code>TypeError</code> exception.</li><li>Let <code>name</code> be <code>ToString(P)</code>. (Note: this may have a side effect.)</li><li>Let <code>desc</code> be the result of calling the <code>[[GetOwnProperty]]</code> internal method of <code>O</code> with argument <code>name</code>.</li><li>Return the result of calling <code>FromPropertyDescriptor(desc)</code> (E5 Section 8.10.4).</li></ol><h2 id="frompropertydescriptor" tabindex="-1">FromPropertyDescriptor <a class="header-anchor" href="#frompropertydescriptor" aria-label="Permalink to &quot;FromPropertyDescriptor&quot;">​</a></h2><p>The <code>FromPropertyDescriptor()</code> algorithm in E5 Section 8.10.4 is as follows:</p><ol><li>If <code>Desc</code> is <code>undefined</code>, then return <code>undefined</code>.</li><li>Let <code>obj</code> be the result of creating a new object as if by the expression <code>new Object()</code> where <code>Object</code> is the standard built-in constructor with that name.</li><li>If <code>IsDataDescriptor(Desc)</code> is <code>true</code>, then a. Call the <code>[[DefineOwnProperty]]</code> internal method of <code>obj</code> with arguments <code>&quot;value&quot;</code>, Property Descriptor {[[Value]]: Desc.[[Value]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and <code>false</code>. b. Call the <code>[[DefineOwnProperty]]</code> internal method of <code>obj</code> with arguments <code>&quot;writable&quot;</code>, Property Descriptor {[[Value]]: Desc.[[Writable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and <code>false</code>.</li><li>Else, <code>IsAccessorDescriptor(Desc)</code> must be <code>true</code>, so a. Call the <code>[[DefineOwnProperty]]</code> internal method of <code>obj</code> with arguments <code>&quot;get&quot;</code>, Property Descriptor {[[Value]]: Desc.[[Get]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and <code>false</code>. b. Call the <code>[[DefineOwnProperty]]</code> internal method of <code>obj</code> with arguments <code>&quot;set&quot;</code>, Property Descriptor {[[Value]]: Desc.[[Set]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and <code>false</code>.</li><li>Call the <code>[[DefineOwnProperty]]</code> internal method of <code>obj</code> with arguments <code>&quot;enumerable&quot;</code>, Property Descriptor {[[Value]]: Desc.[[Enumerable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and <code>false</code>.</li><li>Call the <code>[[DefineOwnProperty]]</code> internal method of <code>obj</code> with arguments <code>&quot;configurable&quot;</code>, Property Descriptor {[[Value]]: Desc.[[Configurable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and <code>false</code>.</li><li>Return <code>obj</code>.</li></ol><p>Notes:</p><ul><li>Since all the <code>[[DefineOwnProperty]]</code> calls create new property values, and the property attributes match the defaults for <code>[[Put]]</code>, we can simply use <code>[[Put]]</code> instead. The <code>Throw</code> flag does not matter as the <code>[[Put]]</code> operations cannot fail (except for some internal reason, which is thrown unconditionally without regard for <code>Throw</code> anyway).</li><li>The order of settings properties to <code>obj</code> matters since it will affect the enumeration order of <code>obj</code>.</li></ul><p>Changing <code>[[DefineOwnProperty]]</code> to <code>[[Put]]</code> and renaming <code>Desc</code> to <code>desc</code> (for compatibility with <code>Object.getOwnPropertyDescriptor()</code> algorithm):</p><ol><li>If <code>desc</code> is <code>undefined</code>, then return <code>undefined</code>.</li><li>Let <code>obj</code> be the result of creating a new object as if by the expression <code>new Object()</code> where <code>Object</code> is the standard built-in constructor with that name.</li><li>If <code>IsDataDescriptor(desc)</code> is <code>true</code>, then a. Call <code>obj.[[Put]]</code> with arguments <code>&quot;value&quot;</code>, <code>desc.[[Value]]</code>, and <code>false</code>. b. Call <code>obj.[[Put]]</code> with arguments <code>&quot;writable&quot;</code>, <code>desc.[[Writable]]</code>, and <code>false</code>.</li><li>Else, <code>IsAccessorDescriptor(Desc)</code> must be <code>true</code>, so a. Call <code>obj.[[Put]]</code> with arguments <code>&quot;get&quot;</code>, <code>desc.[[Get]]</code>, and <code>false</code>. (Note: <code>desc.[[Get]]</code> may be <code>undefined</code>.) b. Call <code>obj.[[Put]]</code> with arguments <code>&quot;set&quot;</code>, <code>desc.[[Set]]</code>, and <code>false</code>. (Note: <code>desc.[[Set]]</code> may be <code>undefined</code>.)</li><li>Call <code>obj.[[Put]]</code> with arguments <code>&quot;enumerable&quot;</code>, <code>desc.[[Enumerable]]</code>, and <code>false</code>.</li><li>Call <code>obj.[[Put]]</code> with arguments <code>&quot;configurable&quot;</code>, <code>desc.[[Configurable]]</code>, and <code>false</code>.</li><li>Return <code>obj</code>.</li></ol><h2 id="inlining-frompropertydescriptor" tabindex="-1">Inlining FromPropertyDescriptor <a class="header-anchor" href="#inlining-frompropertydescriptor" aria-label="Permalink to &quot;Inlining FromPropertyDescriptor&quot;">​</a></h2><ol><li>If <code>Type(O)</code> is not <code>Object</code> throw a <code>TypeError</code> exception.</li><li>Let <code>name</code> be <code>ToString(P)</code>. (Note: this may have a side effect.)</li><li>Let <code>desc</code> be the result of calling the <code>[[GetOwnProperty]]</code> internal method of <code>O</code> with argument <code>name</code>.</li><li>If <code>desc</code> is <code>undefined</code>, then return <code>undefined</code>.</li><li>Let <code>obj</code> be the result of creating a new object as if by the expression <code>new Object()</code> where <code>Object</code> is the standard built-in constructor with that name.</li><li>If <code>IsDataDescriptor(desc)</code> is <code>true</code>, then a. Call <code>obj.[[Put]]</code> with arguments <code>&quot;value&quot;</code>, <code>desc.[[Value]]</code>, and <code>false</code>. b. Call <code>obj.[[Put]]</code> with arguments <code>&quot;writable&quot;</code>, <code>desc.[[Writable]]</code>, and <code>false</code>.</li><li>Else, <code>IsAccessorDescriptor(Desc)</code> must be <code>true</code>, so a. Call <code>obj.[[Put]]</code> with arguments <code>&quot;get&quot;</code>, <code>desc.[[Get]]</code>, and <code>false</code>. (Note: <code>desc.[[Get]]</code> may be <code>undefined</code>.) b. Call <code>obj.[[Put]]</code> with arguments <code>&quot;set&quot;</code>, <code>desc.[[Set]]</code>, and <code>false</code>. (Note: <code>desc.[[Set]]</code> may be <code>undefined</code>.)</li><li>Call <code>obj.[[Put]]</code> with arguments <code>&quot;enumerable&quot;</code>, <code>desc.[[Enumerable]]</code>, and <code>false</code>.</li><li>Call <code>obj.[[Put]]</code> with arguments <code>&quot;configurable&quot;</code>, <code>desc.[[Configurable]]</code>, and <code>false</code>.</li><li>Return <code>obj</code>.</li></ol>',13)]))}const b=o(r,[["render",a]]);export{h as __pageData,b as default};
