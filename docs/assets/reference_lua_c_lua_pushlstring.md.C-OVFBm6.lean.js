import{_ as a,c as i,a2 as l,o as e}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"lua_pushlstring","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_pushlstring.md","filePath":"reference/lua_c/lua_pushlstring.md","lastUpdated":1731828945000}'),t={name:"reference/lua_c/lua_pushlstring.md"};function h(n,s,p,r,d,k){return e(),i("div",null,s[0]||(s[0]=[l('<h1 id="lua-pushlstring" tabindex="-1">lua_pushlstring <a class="header-anchor" href="#lua-pushlstring" aria-label="Permalink to &quot;lua_pushlstring&quot;">​</a></h1><p>指定された長さの文字列をスタックにプッシュします。</p><p><code>[-0, +1, m]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pushlstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>s</code>が指す長さ<code>len</code>の文字列をスタックにプッシュします。Luaは与えられた文字列の内部コピーを作成（または再利用）しますので、関数が戻った直後に<code>s</code>のメモリを解放または再利用できます。文字列には組み込みのゼロを含めることができます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushlstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>このコードは、長さ5の文字列「Hello」をスタックにプッシュします。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_pushstring</li><li>lua_pushliteral</li></ul>',13)]))}const c=a(t,[["render",h]]);export{u as __pageData,c as default};
