import{_ as l,c as i,a2 as t,o}from"./chunks/framework.6x3wfQve.js";const m=JSON.parse('{"title":"よくある質問 (FAQ)","description":"","frontmatter":{},"headers":[],"relativePath":"resource/luajit/faq.md","filePath":"resource/luajit/faq.md","lastUpdated":null}'),s={name:"resource/luajit/faq.md"};function c(e,a,u,p,r,d){return o(),i("div",null,a[0]||(a[0]=[t('<h1 id="よくある質問-faq" tabindex="-1">よくある質問 (FAQ) <a class="header-anchor" href="#よくある質問-faq" aria-label="Permalink to &quot;よくある質問 (FAQ)&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Q: LuaJITとLuaについてもっと学ぶにはどこで情報を得られますか？</p><ul><li>LuaJITに関連するトピックに焦点を当てたLuaJITメーリングリストがあります。</li><li>Lua自体に関するニュースはLuaメーリングリストで見つけることができます。メーリングリストのアーカイブは、LuaJITに関する古い投稿をチェックするのに価値があります。</li><li>Lua.orgの公式サイトには言語の完全なドキュメンテーションとLuaに関する書籍や論文へのリンクがあります。</li><li>コミュニティ管理のLua Wikiには多様なトピックに関する情報があります。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">Q: LuaJITで使用されているコンパイラ技術についてもっと学ぶにはどこで情報を得られますか？</p><p>以下のGoogle Scholar検索を使用して、関連する論文を見つけてください:</p><ul><li>検索キーワード: Trace Compiler</li><li>検索キーワード: JIT Compiler</li><li>検索キーワード: Dynamic Language Optimizations</li><li>検索キーワード: SSA Form</li><li>検索キーワード: Linear Scan Register Allocation</li></ul><p>ここにLuaJITの革新的な特徴のリストがあります。 そしてもちろん、ソースコードを読むことが啓蒙への唯一の方法です。</p></div><div class="tip custom-block"><p class="custom-block-title">Q: 時々Ctrl-CがLuaプログラムを停止させないのはなぜですか？</p><p>割り込みシグナルハンドラはLuaのデバッグフックを設定します。しかし、これはコンパイルされたコードでは無視されます。プログラムがタイトなループで実行され、インタプリタに戻らない場合、デバッグフックは実行されず、「中断されました！」エラーを投げることができません。 プログラムを停止するには、Ctrl-Cを二回押す必要があります。これは、Luaインタプリタの下でC関数内で実行がスタックしている場合と似ています。</p></div><div class="tip custom-block"><p class="custom-block-title">Q: <code>pairs()</code> を使ったテーブルの反復処理で同じ順序にならないのはなぜですか？</p><p>Lua言語標準では、テーブルの反復処理の順序は明示的に未定義です。異なるLua実装やバージョンは、同一のテーブルに対して異なる順序を使用することがあります。テーブルの構築方法が異なると、順序も異なる結果になることがあります。改善されたVMのセキュリティのために、LuaJIT 2.1は、別のVM呼び出しであったり、文字列キーが新たにインターンされたときに異なる順序を使用することがあります。</p><p>プログラムが決定的な順序に依存している場合、それはバグです。キーの順序に依存しないようにプログラムを書き直すか、必要であればテーブルのキーをソートしてください。</p></div><div class="tip custom-block"><p class="custom-block-title">Q: Luaコードを安全にサンドボックス化できますか？</p><p>極めて制限されたLuaのサブセットについて、そして提供するすべてのインターフェース関数を徹底的に調査する場合に限り、多分可能です。Luaはいくつかのサンドボックス機能（setfenv()、フックなど）を提供していますが、Luaのコアライブラリでさえ、これを正しく実装することは非常に難しいです。もちろん、拡張ライブラリも検査する必要があります。そして、FFIライブラリのように本質的に安全ではないライブラリもあります。Lua WikiやWikipediaでさらに読むことができます。</p><p>関連して、信用できないバイトコードをロードすることは安全ではありません！悪意を持って作られたバイトコードでLuaまたはLuaJIT VMを簡単にクラッシュさせることができます。これはよく知られている事実であり、意図的にバイトコードの検証が行われていないので、バグとして報告しないでください。バイトコードのロードを無効にするために、load*()関数のmodeパラメータをチェックしてください。</p><p>一般的に、唯一有望なアプローチは、VMレベルではなくプロセスレベルでLuaコードをサンドボックス化することです。</p></div><div class="tip custom-block"><p class="custom-block-title">Q: Luaはどこでも動作します。なぜLuaJITは私のCPUをサポートしていないのですか？</p><p>コンパイラだからです — ネイティブマシンコードを生成する必要があります。これは、コード生成器を各アーキテクチャに移植する必要があることを意味します。また、高速インタープリタはアセンブラで書かれており、これも移植する必要があります。これはかなりの取り組みです。 インストールのドキュメントには、サポートされるアーキテクチャが示されています。 他のアーキテクチャのサポートは、十分なユーザー需要とアーキテクチャの市場関連性に基づいて追加されるかもしれません。移植自体を開発し、統合し、積極的に開発されているブランチで継続的にメンテナンスするためには、資金提供が必要です。</p></div>',7)]))}const n=l(s,[["render",c]]);export{m as __pageData,n as default};
