import{_ as i,c as a,a2 as h,o as e}from"./chunks/framework.DzmM640o.js";const r=JSON.parse('{"title":"Cosmopolitan ツールチェーン","description":"","frontmatter":{},"headers":[],"relativePath":"resource/cosmopolitan/toolchain.md","filePath":"resource/cosmopolitan/toolchain.md","lastUpdated":1732350347000}'),n={name:"resource/cosmopolitan/toolchain.md"};function l(t,s,p,k,o,d){return e(),a("div",null,s[0]||(s[0]=[h(`<h1 id="cosmopolitan-ツールチェーン" tabindex="-1">Cosmopolitan ツールチェーン <a class="header-anchor" href="#cosmopolitan-ツールチェーン" aria-label="Permalink to &quot;Cosmopolitan ツールチェーン&quot;">​</a></h1><p>このツールチェーンは、Linux / MacOS / Windows / FreeBSD / OpenBSD / NetBSD の x86_64 および AARCH64 アーキテクチャ上で動作する実行ファイルをコンパイルするために使用できます。ポータブルなバイナリを作成できるだけでなく、ツールチェイン自体もポータブルなバイナリで構成されているため、一貫した開発環境を持つことができ、選択したプラットフォームからより多くのユーザーを獲得することができます。</p><h2 id="含まれるもの" tabindex="-1">含まれるもの <a class="header-anchor" href="#含まれるもの" aria-label="Permalink to &quot;含まれるもの&quot;">​</a></h2><p>このツールチェーンには、GCC 11.2.0、Cosmopolitan Libc、LLVM LIBCXX、LLVM compiler-rtが含まれています。追加のライブラリはMusl Libcと由緒あるBSDs OSから提供されました。これによって、あなたは可能な限り強力なGPLバリアで、素晴らしい最新のGCCコンパイラの恩恵を受けることができます。プリプロセッサはクロスコンパイラを <code>__COSMOCC__</code> と <code>__COSMOPOLITAN__</code> の両方として宣伝しているが、<code>cosmocc</code> はさらに <code>__FATCOSMOCC__</code> を定義している。</p><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>ツールチェーンが取り出されたら、hello worldをコンパイルすることができる：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cosmocc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # creates multi-os multi-arch binary</span></span></code></pre></div><p>これで、ホストシステム上で動作する<a href="https://justine.lol/ape.html" target="_blank" rel="noreferrer">actually portable executable</a>ができました。もし何か問題があれば、以下のGotchasとTroubleshootのセクションを参照してください。また、<code>hello.com.dbg</code> (x86-64 Linux ELF)と<code>hello.aarch64.elf</code> (AARCH64 Linux ELF)という名前の2つのELF実行ファイルも出力されているはずです。Linuxシステムでは、これらのファイルも実行可能で、GDBでプログラムを簡単に実行するのに便利である。他のOSでは、<code>add-symbol-file</code>コマンドを使用してELFを第2ステップでロードすれば、GDBはAPEプログラムをデバッグすることができる。</p><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p><code>cosmocc</code> プログラムは <code>unknown-unknown-cosmocc</code> の略記法である。高度なビルドでは、<code>x86_64-unknown-cosmo-cc</code> と <code>aarch64-unknown-cosmo-cc</code> を別々に使用し、提供されている <code>apelink</code> プログラムで結果を結合することができる。最後に、<code>x86_64-linux-cosmo-cc</code> と <code>aarch64-linux-cosmocc</code> ツールチェーンは実際の物理的なコンパイラであり、直接呼び出すことは意図されていない (最大限の設定可能性や独立した環境が目的でない限り)。</p><p><code>cosmocc</code>コンパイラはプラットフォーム間で決定論的な出力を生成するように設計されています。このリリースでは、Linux x86+Arm、MacOS x86+Arm、FreeBSD、OpenBSD、Windows上でhello worldのバイナリ出力が同一であることを確認しています。再現可能なビルドを必要とするユーザーは、<code>-U__DATE__</code> や <code>-U__TIME__</code> のようなマクロを定義しないことに加えて、<code>LC_ALL=C</code> や <code>SOURCE_DATE_EPOCH=0</code> のような環境変数を明示的に定義することをお勧めします。</p><h2 id="インストール" tabindex="-1">インストール <a class="header-anchor" href="#インストール" aria-label="Permalink to &quot;インストール&quot;">​</a></h2><p>ツールチェーンは相対パスを使うので、特定のシステムフォルダーにインストールする必要はなく、<code>$PATH</code>に追加する必要もない。 このツールチェインを使うのに、UNIXシェル以外に必要な外部依存はない。</p><p>各ユーザーの <code>$TMPDIR</code> または <code>$HOME</code> に APE ローダーを自己解凍する APE シェルスクリプトのデフォルトの動作に依存するのではなく、システム全体に APE ローダーをインストールすることを推奨します。Apple Arm64 ユーザーは <code>cc -O -o ape bin/ape-m1.c</code> をコンパイルして <code>ape</code> を <code>/usr/local/bin/ape</code> に移動する必要がある。その他のプラットフォームでは、正規パスとして <code>/usr/bin/ape</code> を使用する。Linux と BSD のユーザーは、<code>bin/ape.elf</code> を <code>/usr/bin/ape</code> にコピーすればよい。MacOS x86-64ユーザーは、<code>bin/ape.macho</code>が必要だろう。Linuxでは、APEをbinfmt_miscに登録することで、APE実行ファイルを400マイクロ秒速く実行させることができる。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE:M::MZqFpD::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE-jart:M::jartsr::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:qemu-aarch64:M::\\x7fELF\\x02\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\xb7\\x00:\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\xff\\xff\\xff:/usr/bin/qemu-aarch64:CF&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span></code></pre></div><p>Qemu-userは、人気のあるautoconfベースのオープン・ソース・プロジェクトのファット・バイナリをクロスコンパイルする際に、私たちが最も成功しているので、推奨する。しかし、APEとCosmoはQemu-userの存在に依存していません。</p><p>APEバイナリをプラットフォーム・ネイティブ・フォーマットに変換する必要がある場合、このツールチェーンはそれを行う<code>assimilate</code>プログラムを提供します。使用例としては、(1) setuidのサポート、(2) GDBを毛深くなくする、(3) コード署名などがある。デフォルトでは、assimilateはホストシステムで使用されているフォーマットを選択するが、APEプログラムを任意のアーキテクチャ/OSの組み合わせに明示的に変換することも可能である。使い方の詳細については、<code>assimilate -h</code> コマンドを実行してほしい。</p><h2 id="ゴッチャ" tabindex="-1">ゴッチャ <a class="header-anchor" href="#ゴッチャ" aria-label="Permalink to &quot;ゴッチャ&quot;">​</a></h2><p>zsh を使っていて APE プログラムの実行に問題がある場合は、<code>sh -c ./prog</code> を試すか、zsh 5.9+ にアップグレードしてください（2年前にパッチを当てたので）。Python の <code>subprocess</code> や古いバージョンの fish などについても同様です。</p><p>Linux の場合、<code>binfmt_misc</code> が WINE 上で APE プログラムを実行しようとしたり、 &quot;run-detectors: unable to find an interpreter&quot; と表示したりするかもしれません。これらのコマンドを実行することで修正できる：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ape</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://cosmo.zip/pub/cosmos/bin/ape-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.elf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ape</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE:M::MZqFpD::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE-jart:M::jartsr::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span></code></pre></div><p>Apple Siliconでは、<code>aarch64-unknown-cosmo-cc</code>がELFバイナリを生成する。hello worldプログラムをビルドする場合は、<code>ape ./hello</code> と言う必要がある。<code>ape</code>コマンドがない場合は、<code>cc -o ape bin/ape-m1.c</code>を実行して、<code>/usr/local/bin/ape</code>に移動する必要がある。APEインタープリターはすでに <code>$TMPDIR/.ape-1.10</code> のようなパスに存在しているかもしれない。注意すべき点は、これはクロス・コンパイラだけの問題だということだ。<code>cosmocc</code>コンパイラーは実際のELFバイナリーをシェルスクリプトでラップし、必要に応じてAPEローダーを自動的に抽出してコンパイルします。また、ログインシェルがCosmopolitan Libcを使ってビルドされている場合、これは問題ではありません。これは、Cosmoの <code>execve()</code> 実装が、カーネルからの <code>ENOEXEC</code> に自動的に反応して、プログラムを <code>/usr/local/bin/ape</code> の下で再起動するからです。最後に、Apple Arm64以外のプラットフォームでは、<code>/usr/bin/ape</code>がハードコードされた正規のインタプリタ・パスとして使われていることに注意してほしい。</p><p>Windowsでは、このツールチェインのシェルスクリプト・ラッパーを実行するためにシェルが必要です。Cosmosのバイナリをダウンロードして、POSIXユーザー空間をセットアップすることをお勧めします。<a href="https://cosmo.zip/pub/cosmos/bin/dash" target="_blank" rel="noreferrer">https://cosmo.zip/pub/cosmos/bin/dash</a> はあなたの<code>C:¥bin¥sh</code>シェル（Cosmo語で<code>/c/bin/sh</code>）です。cosmoccのシェルスクリプトは、Cosmosで利用できる <code>mkdir</code>、<code>less</code>、<code>cat</code>、<code>kill</code> などのプログラムにも依存している。</p><p><code>cosmocc</code>をプリプロセッサのみのモードで実行すると、<code>__x86_64__</code>や<code>__k8__</code>のようなマクロが未定義のままx86_64 Linuxツールチェーンが使用される。これは、Cプリプロセッサを使ってトリックアウトされたアセンブリ命令を生成しているソフトウェアを混乱させるかもしれない。<code>cosmocc</code>はクロス・コンパイラの便利なラッパーに過ぎないので、このような状況で使用する方が良いだろう。</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><p>デフォルトでは、コンパイルしたコードはすべてX86_64とAARCH64のベースライン（K8とARMv8.0）を使用します。<code>Xx86_64-mssse3</code> や <code>-Xaarch64-march=armv8.2-a+dotprod</code> のように <code>-Xx86_64</code> や <code>-Xaarch64</code> の接頭辞を使うことで、より新しい ISA を使うためのアーキテクチャ固有のフラグを渡すことができる。</p><h2 id="トラブルシューティング" tabindex="-1">トラブルシューティング <a class="header-anchor" href="#トラブルシューティング" aria-label="Permalink to &quot;トラブルシューティング&quot;">​</a></h2><p>あなたの <code>cosmocc</code> コンパイラはフードの下で多くのコマンドを実行しています。何か問題が発生した場合、環境変数 <code>BUILDLOG</code> を設定することでそのプロセスをより詳しく知ることができます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BUILDLOG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cosmocc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span></code></pre></div><p>ログには、ビルドプロセスを再現するためにシェルにコピー＆ペーストできるコマンドのログが含まれます。あるいは、単にどのフラグが独立したLinuxコンパイラーに渡されているかを見ることもできる。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bin/cosmocc -o hello hello.c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/x86_64-linux-cosmo-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o/tmp/fatcosmocc.i5lugr6bc0gu0.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D__COSMOPOL...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/aarch64-linux-cosmo-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o/tmp/fatcosmocc.w48k03qgw8692.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D__COSMOPO...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/fixupobj</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/fatcosmocc.i5lugr6bc0gu0.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/fixupobj</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/fatcosmocc.w48k03qgw8692.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/x86_64-linux-cosmo-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o/tmp/fatcosmocc.ovdo2nqvkjjg3.com.dbg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/aarch64-linux-cosmo-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o/tmp/fatcosmocc.d3ca1smuot0k0.aarch64.elf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/fixupobj</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/fatcosmocc.d3ca1smuot0k0.aarch64.elf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/fixupobj</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/fatcosmocc.ovdo2nqvkjjg3.com.dbg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/apelink</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/ape.elf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/ape.aarch64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jart/cosmocc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/pecheck</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="オープンソースソフトウェアの構築" tabindex="-1">オープンソースソフトウェアの構築 <a class="header-anchor" href="#オープンソースソフトウェアの構築" aria-label="Permalink to &quot;オープンソースソフトウェアの構築&quot;">​</a></h2><p><code>cosmocc/bin/</code>を<code>$PATH</code>に置くと、GNU Autotoolsプロジェクトとの統合が簡単になる。ここでのコツは、cosmoccによってビルドされたソフトウェアだけを含む<code>--prefix</code>を使うことだ。Cosmopolitan Libcはあなたのディストロとは違うABIを使っているからです。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cosmocc -I/opt/cosmos/include -L/opt/cosmos/lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CXX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cosmoc++ -I/opt/cosmos/include -L/opt/cosmos/lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INSTALL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cosmoinstall</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cosmoar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=/opt/cosmos</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><p>あなたの<code>cosmocc</code>ツールチェーンに含まれるGNU GCCとBinutilsプログラムには説明の必要はありませんが、多くのユーザーがよく知らないかもしれない他のプログラムも含まれています。</p><h3 id="assimilate" tabindex="-1"><code>assimilate</code> <a class="header-anchor" href="#assimilate" aria-label="Permalink to &quot;\`assimilate\`&quot;">​</a></h3><p><code>assimilate</code>プログラムは、実際にポータブルな実行ファイルをネイティブな実行 ファイルに変換するために使用することができる。デフォルトでは、このツールはホストオペレーティングシステムとアーキテクチャーで使われているフォーマットに変換します。しかし、フラグを渡すことで、APEバイナリを海外のプラットフォーム用に変換することもできる。</p><h3 id="ctags" tabindex="-1"><code>ctags</code> <a class="header-anchor" href="#ctags" aria-label="Permalink to &quot;\`ctags\`&quot;">​</a></h3><p><code>ctags</code>プログラムは exuberant-ctags 1:5.9~svn20110310-14 で、Cosmopolitan Libc の third_party ソースからビルドされています。テキストエディタ用のシンボルインデックスを生成するために使用することができます。</p><h3 id="apelink" tabindex="-1"><code>apelink</code> <a class="header-anchor" href="#apelink" aria-label="Permalink to &quot;\`apelink\`&quot;">​</a></h3><p><code>apelink</code>プログラムは実際に移植可能な実行可能リンカーである。入力として、(1) GNU ld.bfdによってリンクされた複数の実行ファイル、(2) ELFプラットフォーム用のネイティブAPEローダー実行ファイルのパス、(3) Apple Silicon APEローダーのソースコードを受け取る。そして、それらをすべてシェルスクリプトにまとめ、適切な小さな～10kbのAPEローダーを自己解凍し、その後、適切な組み込み実行ファイルの大部分をメモリにマッピングするために再実行します。</p><h3 id="mkdeps" tabindex="-1"><code>mkdeps</code> <a class="header-anchor" href="#mkdeps" aria-label="Permalink to &quot;\`mkdeps\`&quot;">​</a></h3><p><code>mkdeps</code> プログラムを使用すると、Makefile 用に deps ファイルを生成することができ、 どのソースファイルがどのヘッダーを含むかを宣言することができる。このコマンドは驚くほど速い。<code>gcc -MMD</code> に頼るよりもずっと速い。これはもともと Cosmopolitan Libc リポジトリ用にビルドされたもので、 ~10,000 個のソースファイルがある。<code>mkdeps</code> を使うと、Cosmo は ~70 ミリ秒で ~10 万行の <code>o//depend</code> ファイルを生成できる。</p><p><code>Makefile</code>に次のように追加することで使用できる。</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FILES := </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wildcard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.c,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FILES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDRS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.h,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FILES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">o/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDRS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mkdir -o </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mkdeps -o </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -r o/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDRS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDRS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo NOTE: deleting o/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/depend because of an unspecified prerequisite: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rm -f o/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/depend</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/depend</span></span></code></pre></div><p>プロジェクトがCosmopolitanのように非常に大きい場合、<code>mkdeps</code>は引数ファイルをサポートする。これは、コマンドの引数に32768文字の制限があるWindowsでは特に役に立つ。</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foreach</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PKGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">),$($(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)_SRCS))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDRS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foreach</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PKGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">),$($(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)_HDRS))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">o/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDRS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.args,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDRS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mkdir -o </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mkdeps -o </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -r o/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/ @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.args</span></span></code></pre></div><h3 id="cosmoaddr2line" tabindex="-1"><code>cosmoaddr2line</code> <a class="header-anchor" href="#cosmoaddr2line" aria-label="Permalink to &quot;\`cosmoaddr2line\`&quot;">​</a></h3><p><code>cosmoaddr2line</code>プログラムは、プログラムがクラッシュを報告するたびに、DWARFデータに基づいてバックトレースを表示するために使用することができる。このプログラムは <code>cosmocc</code> によって生成された ELF 実行ファイルを引数として受け取る。例えば、<code>cosmocc</code> が <code>hello</code> という名前のプログラムをコンパイルした場合、バックトレースを取得するには <code>hello.com.dbg</code> (x86-64) または <code>hello.aarch64.elf</code> を cosmoaddr2line に渡す必要がある。ELf実行ファイルの後にプログラムカウンタ（命令ポインタ）のアドレスが来るが、これは<code>__builtin_frame_address(0)</code>を使って簡単に取得できる。Cosmoは場合によってはこれを簡単にすることができます。ShowCrashReports()<code>機能は、より良いバックトレースを得るために実行する必要がある</code>cosmoaddr2line<code>コマンドを表示するかもしれない。Windowsでは、Cosmopolitanのランタイムは、ブロックされた致命的なシグナルや</code>SIG_DFL<code>処分によってプログラムが死ぬたびに、</code>--strace\`ログにコマンドを出力する。</p><h3 id="mktemper" tabindex="-1"><code>mktemper</code> <a class="header-anchor" href="#mktemper" aria-label="Permalink to &quot;\`mktemper\`&quot;">​</a></h3><p><code>mktemper</code> コマンドは、従来の <code>mktemp</code> コマンドに代わるポータブルなコマンドである。我々のバージョンでは、暗号化された <code>getrandom()</code> エントロピー源から取得した 64 ビットの乱数値をフォーマットするなどの改良も加えられている。 このコマンドを使うには、<code>/tmp/foo.XXXXXXXXXX</code>のような引数を渡す必要がある。新しく作成されたファイルは標準出力に出力される。</p><h2 id="about" tabindex="-1">About <a class="header-anchor" href="#about" aria-label="Permalink to &quot;About&quot;">​</a></h2><p>このツールチェーンはGCCをベースにしています。それも修正されている。私たちは2kLOCパッチを書き、C言語に<code>switch (errno) { case EINVAL: ... }</code>という機能を与えた。<code>EINVAL</code>のような定数がリンク可能なシンボルである場合に、<code> }</code>を切り替えます。このような場合、あなたのコードは、Cosmopolitan Libcのシステム定数が期待通りに動作するように、代わりに一連のif文を使うように書き換えられます。GNU GCCへのわたしたちの改変はISCライセンスのもと、<code>https://github.com/ahgamut/gcc/tree/portcosmo-11.2</code> で公開されています。ここにあるバイナリは、定期的に更新される <code>https://github.com/ahgamut/superconfigure/releases/tag/z0.0.30</code> で最初に公開されました。</p><h2 id="legal" tabindex="-1">Legal <a class="header-anchor" href="#legal" aria-label="Permalink to &quot;Legal&quot;">​</a></h2><p>あなたのCosmopolitanツールチェインはGNU GCCのような自由ソフトウェアに基づいています。このディレクトリに含まれるLICENSEファイルによって説明されるように、あなたはこのソフトウェアを使用し変更する多くの自由を持っています。GPLライセンスのヘッダやランタイムライブラリは一切含まれていませんので、このツールチェーンを使ってあなたが作るソフトウェアはGPLに拘束されることはありません。すべてのCosmopolitan Libcのランタイムライブラリは、ISC、MIT、BSDなどの寛容なライセンスで提供されています。あなたのツールチェインの構築に協力した人々の名前が書かれた、多くの著作権表示があります。あなたは、バイナリと一緒にこれらの通知を配布する義務があります。Cosmopolitanはそれを簡単にします。Cライブラリは<code>.ident</code>ディレクティブを使用するように設定されており、関連する通知が自動的にバイナリに埋め込まれます。<code>less &lt;bin/foo</code> のようなツールを使って表示することができます。</p><h2 id="連絡先" tabindex="-1">連絡先 <a class="header-anchor" href="#連絡先" aria-label="Permalink to &quot;連絡先&quot;">​</a></h2><p>本ツールチェーンに関するご質問やお問い合わせは、ジャスティン・タニー(<code>jtunney@gmail.com</code>)までお気軽にご連絡ください。</p><h2 id="こちらも参照" tabindex="-1">こちらも参照 <a class="header-anchor" href="#こちらも参照" aria-label="Permalink to &quot;こちらも参照&quot;">​</a></h2><ul><li><code>https://cosmo.zip/</code> : cosmoccでビルドしたバイナリをダウンロードできます。</li><li><code>https://github.com/ahgamut/superconfigure/</code> : cosmocc ビルドレシピ</li></ul>`,60)]))}const E=i(n,[["render",l]]);export{r as __pageData,E as default};
