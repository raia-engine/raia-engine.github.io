import{_ as t,c as _,a2 as o,o as a}from"./chunks/framework.DPuwY6B9.js";const p=JSON.parse('{"title":"Duktape typing","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/types.md","filePath":"resource/duktape/doc/types.md","lastUpdated":1732350347000}'),n={name:"resource/duktape/doc/types.md"};function r(c,e,u,d,b,i){return a(),_("div",null,e[0]||(e[0]=[o(`<h1 id="duktape-typing" tabindex="-1">Duktape typing <a class="header-anchor" href="#duktape-typing" aria-label="Permalink to &quot;Duktape typing&quot;">​</a></h1><h2 id="typing-overview" tabindex="-1">Typing overview <a class="header-anchor" href="#typing-overview" aria-label="Permalink to &quot;Typing overview&quot;">​</a></h2><p>TBD.</p><h2 id="internal-and-external-type-summary" tabindex="-1">Internal and external type summary <a class="header-anchor" href="#internal-and-external-type-summary" aria-label="Permalink to &quot;Internal and external type summary&quot;">​</a></h2><p>The table below summarizes various types and how they appear in the external API and internals. What&#39;s missing from the table:</p><ul><li><code>duk_hobject</code> has a flags field which allows some logical types to be distinguished from one another. For example, bound functions have a specific internal flag. Other structs also have flags that may be relevant to typing but are not presented in the table.</li><li>The API type check function(s) are not comprehensive, but more example of what a typical &quot;is the value of type X&quot; could be.</li><li>The C APIs for creating a value of each type are not listed.</li></ul><hr><p>ECMAScript code API type API type check(s) Internal duk_tval Internal struct(s) duk_hobject class number ECMAScript ECMAScript Object Notes tag typeof .toString()</p><hr><p>n/a DUK_TYPE_NONE duk_is_valid_index() DUK_TAG_UNUSED n/a n/a n/a n/a Marker for &quot;no value&quot; when doing a valus stack type lookup.</p><p>void 0 DUK_TYPE_UNDEFINED duk_is_undefined() DUK_TAG_UNDEFINED n/a n/a undefined [object Undefined]</p><p>null DUK_TYPE_NULL duk_is_null() DUK_TAG_NULL n/a n/a object (!) [object Null]</p><p>true DUK_TYPE_BOOLEAN duk_is_boolean() DUK_TAG_BOOLEAN n/a n/a boolean [object Boolean]</p><p>123 DUK_TYPE_NUMBER duk_is_number() DUK_TAG_FASTINT n/a n/a number [object Number] If 48-bit signed int, and fastint support enabled.</p><p>123.1 DUK_TYPE_NUMBER duk_is_number() DUK_TAG_NUMBER (*) n/a n/a number [object Number] With packed duk_tval, no explicit internal tag.</p><p>&quot;foo&quot; DUK_TYPE_STRING duk_is_string() DUK_TAG_STRING duk_hstring, n/a string [object String]<br> duk_hstring_external</p><p>Symbol(&#39;foo&#39;) DUK_TYPE_STRING duk_is_string() DUK_TAG_STRING duk_hstring, n/a symbol [object Symbol] Symbols (NOT FINALIZED) duk_hstring_external</p><p>n/a DUK_TYPE_LIGHTFUNC duk_is_lightfunc() DUK_TAG_LIGHTFUNC n/a n/a function [object Function]</p><p>ArrayBuffer.allocPlain(1) DUK_TYPE_BUFFER duk_is_buffer() DUK_TAG_BUFFER duk_hbuffer_fixed, n/a object [object Uint8Array] duk_hbuffer_dynamic,<br> duk_hbuffer_external</p><p>Duktape.Pointer(&#39;dummy&#39;) DUK_TYPE_POINTER duk_is_pointer() DUK_TAG_POINTER n/a n/a pointer [object Pointer]</p><p>n/a n/a duk_is_valid_index() n/a n/a DUK_HOBJECT_CLASS_NONE n/a n/a Marker for &quot;no value&quot; when doing a class number lookup.</p><p>{ foo: 123 } DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_OBJECT object [object Object]</p><p>[ 1, 2, 3 ] DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_harray DUK_HOBJECT_CLASS_ARRAY object [object Array] duk_harray extends duk_hobject.</p><p>arguments DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_ARGUMENTS object [object Arguments] Not an array; array-like.</p><p>new Boolean(true) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_BOOLEAN object [object Boolean]</p><p>new Date() DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_DATE object [object Date]</p><p>new TypeError(&#39;aiee&#39;) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_ERROR object [object Error]</p><p>Math.cos DUK_TYPE_OBJECT duk_is_object(), DUK_TAG_OBJECT duk_hnatfunc DUK_HOBJECT_CLASS_FUNCTION function [object Function] duk_hnatfunc extends duk_is_function(), duk_hobject. duk_is_callable()</p><p>function foo() {} DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hcompfunc DUK_HOBJECT_CLASS_FUNCTION function [object Function] duk_hcompfunc extends duk_is_function(), duk_hobject. duk_is_callable()</p><p>func.bind(null, 123) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hboundfunc DUK_HOBJECT_CLASS_FUNCTION function [object Function] duk_hobject flag duk_is_function(), DUK_HOBJECT_FLAG_BOUNDFUNC duk_is_callable() is set. duk_hboundfunc extends duk_hobject.</p><p>JSON DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_JSON object [object JSON]</p><p>Math DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_MATH object [object Math]</p><p>new Number(123) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_NUMBER object [object Number]</p><p>/foo/ DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_REGEXP object [object RegExp]</p><p>new String(&#39;foo&#39;) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_STRING object [object String]</p><p>Object(Symbol(&#39;foo&#39;)) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_SYMBOL object [object Symbol] (NOT FINALIZED)</p><p>Function(&#39;return this&#39;)() DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_GLOBAL object [object global]</p><p>n/a DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_henv DUK_HOBJECT_CLASS_OBJENV object [object ObjEnv] Internal scope object for an object environment. duk_henv extends duk_hobject.</p><p>n/a DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_henv DUK_HOBJECT_CLASS_DECENV object [object DecEnv] Internal scope object for a declarative environment. duk_henv extends duk_hobject.</p><p>new Duktape.Pointer(&#39;foo&#39;) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hobject DUK_HOBJECT_CLASS_POINTER object [object Pointer]</p><p>new Duktape.Thread(func) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hthread DUK_HOBJECT_CLASS_THREAD object [object Thread]</p><p>new ArrayBuffer(8) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_ARRAYBUFFER object [object duk_hbufobj extends ArrayBuffer] duk_hobject.</p><p>new DataView(arrBuf) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_DATAVIEW object [object DataView]</p><p>new Int8Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_INT8ARRAY object [object Int8Array]</p><p>new Uint8Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_UINT8ARRAY object [object Uint8Array]</p><p>new Uint8ClampedArray(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_UINT8CLAMPEDARRAY object [object<br> Uint8ClampedArray]</p><p>new Int16Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_INT16ARRAY object [object Int16Array]</p><p>new Uint16Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_UINT16ARRAY object [object<br> Uint16Array]</p><p>new Int32Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_INT32ARRAY object [object Int32Array]</p><p>new Uint32Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_UINT32ARRAY object [object<br> Uint32Array]</p><p>new Float32Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_FLOAT32ARRAY object [object<br> Float32Array]</p><p>new Float64Array(1) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hbufobj DUK_HOBJECT_CLASS_FLOAT64ARRAY object [object<br> Float64Array]</p><h2 id="new-proxy-target-handler-duk-type-object-duk-is-object-duk-tag-object-duk-hproxy-duk-hobject-class-object-object-object-object-duk-hproxy-extendsduk-hobject" tabindex="-1">new Proxy(target, handler) DUK_TYPE_OBJECT duk_is_object() DUK_TAG_OBJECT duk_hproxy DUK_HOBJECT_CLASS_OBJECT object [object Object] duk_hproxy extends duk_hobject. <a class="header-anchor" href="#new-proxy-target-handler-duk-type-object-duk-is-object-duk-tag-object-duk-hproxy-duk-hobject-class-object-object-object-object-duk-hproxy-extendsduk-hobject" aria-label="Permalink to &quot;new Proxy(target, handler)   DUK_TYPE_OBJECT      duk_is_object()        DUK_TAG_OBJECT      duk_hproxy             DUK_HOBJECT_CLASS_OBJECT              object       \\[object Object\\]     duk_hproxy extends
                                                                                                                                                                                               duk_hobject.&quot;">​</a></h2><h2 id="options-for-representing-a-value" tabindex="-1">Options for representing a value <a class="header-anchor" href="#options-for-representing-a-value" aria-label="Permalink to &quot;Options for representing a value&quot;">​</a></h2><p>There are four basic alternatives to representing a value:</p><ul><li><strong>A tagged type with no heap allocation</strong>. This is the lowest footprint alternative, and memory usage is 8 bytes (for a packed <code>duk_tval</code>) or (typically) 16 bytes (for a non-packed <code>duk_tval</code>). Example: undefined, null, boolean, number, pointer.</li><li><strong>A heap allocated custom struct</strong>. A tagged value points to a heap allocated C struct which is customized for a certain purpose. Flags in the object header allow a base C struct to be extended in certain cases. Example: fixed buffer, dynamic buffer, external buffer, string.</li><li><strong>A heap allocated object</strong>. A tagged value points to a <code>duk_hobject</code>. Because a <code>duk_hobject</code> has a property table, type specific values can be easily added to the property table, but properties have a relatively high cost. Example: plain ECMAScript object.</li><li><strong>A heap allocated extended object</strong>. A tagged value points to a struct extending <code>duk_hobject</code>. Flags in the shared <code>duk_hobject</code> header allow Duktape internals to detect the extended type and to access further fields in an extended C struct. The extended values may only be available internally, but may also be accessible via property reads if the properties are virtualized. Example: ECMAScript function, Duktape/C function, thread, buffer object.</li></ul>`,56)]))}const s=t(n,[["render",r]]);export{p as __pageData,s as default};
