import{_ as i,c as s,a2 as e,o as t}from"./chunks/framework.CKGreiRV.js";const k=JSON.parse('{"title":"math.random","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/math/random.md","filePath":"reference/built_in/math/random.md","lastUpdated":1730090475000}'),n={name:"reference/built_in/math/random.md"};function l(h,a,d,o,r,p){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="math-random" tabindex="-1">math.random <a class="header-anchor" href="#math-random" aria-label="Permalink to &quot;math.random&quot;">​</a></h1><p>ランダムな数値を返す</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([m [, n]])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>ランダムな数値を返します。</p><ul><li><strong>引数なしの場合</strong>：<code>0</code> 以上 <code>1</code> 未満の疑似乱数（実数）を返します。</li><li><strong><code>m</code> を指定した場合</strong>：<code>1</code> 以上 <code>m</code> 以下の疑似乱数（整数）を返します。</li><li><strong><code>m</code> と <code>n</code> を指定した場合</strong>：<code>m</code> 以上 <code>n</code> 以下の疑似乱数（整数）を返します。</li></ul><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li>LuaJIT は、Tausworthe 擬似乱数生成器（PRNG）を使用して <code>math.random()</code> と <code>math.randomseed()</code> を実装しており、その周期は <code>2^223</code> です。この PRNG は、プラットフォーム固有の ANSI <code>rand()</code> を使用する標準の Lua 実装と比較して、非常に高品質な乱数を生成します。</li><li>この PRNG は、すべてのプラットフォームで同じシードから同じ乱数列を生成し、シード引数のすべてのビットを使用します。</li><li>引数なしの <code>math.random()</code> は、各呼び出しで 52 ビットの疑似乱数ビットを生成します。結果は <code>0.0</code> 以上 <code>1.0</code> 未満の範囲で均等に分布します。<code>math.random(n [, m])</code> は正確にスケーリングされ、均一性を保つために適切に丸められます。</li><li><strong>重要</strong>：この PRNG や、単純な <code>math.random()</code> API に基づく他の乱数生成器は、暗号用途には適していません。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- [0, 1] の範囲の実数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1から10の整数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 5から15の整数</span></span></code></pre></div><p>この例では、異なる範囲の擬似乱数を生成しています。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./randomseed.html"><code>math.randomseed</code></a></li></ul>`,15)]))}const m=i(n,[["render",l]]);export{k as __pageData,m as default};
