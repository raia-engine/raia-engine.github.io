import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"Vulkanサポート","description":"","frontmatter":{},"headers":[],"relativePath":"resource/glfw/reference/vulkan.md","filePath":"resource/glfw/reference/vulkan.md","lastUpdated":1729914702000}'),e={name:"resource/glfw/reference/vulkan.md"};function l(p,s,r,o,k,d){return n(),a("div",null,s[0]||(s[0]=[t('<h1 id="vulkanサポート" tabindex="-1">Vulkanサポート <a class="header-anchor" href="#vulkanサポート" aria-label="Permalink to &quot;Vulkanサポート&quot;">​</a></h1><p>これは、Vulkan関連の関数と型のリファレンス・ドキュメントです。フォースク指向の情報については、Vulkanガイドを参照してください。</p><nav class="table-of-contents"><ul><li><a href="#型定義">型定義</a></li><li><a href="#関数">関数</a></li></ul></nav><h2 id="型定義" tabindex="-1">型定義 <a class="header-anchor" href="#型定義" aria-label="Permalink to &quot;型定義&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>void(* GLFWvkproc)</td><td>Vulkan API関数ポインタタイプ。</td></tr></tbody></table><details class="details custom-block"><summary><code>void(* GLFWvkproc)</code></summary><p>通常のポインタからキャストを強制せずにVulkan API関数ポインタを返すために使用される汎用関数ポインタ。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWvkproc) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>参照</strong>:</p><ul><li>Querying Vulkan function pointers</li><li>glfwGetInstanceProcAddress</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><h2 id="関数" tabindex="-1">関数 <a class="header-anchor" href="#関数" aria-label="Permalink to &quot;関数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>glfwVulkanSupported</td><td>VulkanローダーとICDが見つかったかどうかを返します。</td></tr><tr><td>glfwGetRequiredInstanceExtensions</td><td>GLFWが必要とするVulkanインスタンス拡張を返す。</td></tr><tr><td>glfwGetInstanceProcAddress</td><td>指定されたVulkanインスタンス関数のアドレスを返します。</td></tr><tr><td>glfwGetPhysicalDevicePresentationSupport</td><td>指定されたキューファミリが画像を提示できるかどうかを返します。</td></tr><tr><td>glfwCreateWindowSurface</td><td>指定したウィンドウのVulkanサーフェスを作成します。</td></tr></tbody></table><details class="details custom-block"><summary><code>glfwVulkanSupported()</code></summary><p>この関数は、Vulkanローダーと最低限機能するICDが見つかったかどうかを返します。</p><p>VulkanローダーとICDが利用可能であっても、それ自体がサーフェス作成やインスタンス作成が可能であることを保証するものではありません。glfwGetRequiredInstanceExtensionsを呼び出して、Vulkanサーフェス作成に必要な拡張が利用可能かどうかをチェックし、glfwGetPhysicalDevicePresentationSupportを呼び出して、物理デバイスのキューファミリが画像プレゼンテーションをサポートしているかどうかをチェックします。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwVulkanSupported</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>Vulkanが最低限利用可能であればGLFW_TRUE、そうでなければGLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Querying for Vulkan support</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetRequiredInstanceExtensions()</code></summary><p>この関数は、GLFW ウィンドウ用の Vulkan サーフェスを作成するために GLFW が必要とする Vulkan インスタンス拡張の名前の配列を返します。成功した場合、リストは常に VK_KHR_surface を含むので、追加の拡張を必要としない場合は、このリストを VkInstanceCreateInfo 構造体に直接渡すことができます。</p><p>Vulkanがマシンで利用できない場合、この関数はNULLを返し、GLFW_API_UNAVAILABLEエラーを生成します。glfwVulkanSupportedを呼び出して、Vulkanが少なくとも最低限利用可能かどうかを確認してください。</p><p>Vulkanが利用可能であっても、ウィンドウサーフェス作成を可能にする拡張機能のセットが見つからなかった場合、この関数はNULLを返します。オフスクリーンレンダリングや計算作業のためにVulkanを使用することはできます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetRequiredInstanceExtensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[out] count</code>: 返された配列の拡張子の数を格納する場所。エラーが発生した場合は 0 が格納される。</li></ul><p><strong>戻り値</strong>:</p><p>ASCII エンコードされた拡張子名の配列。エラーが発生した場合は NULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_API_UNAVAILABLE である。</p><p><strong>備考</strong>:</p><p>GLFW の将来のバージョンでは、追加の拡張が必要になるかもしれません。VkInstanceCreateInfo 構造体の中で一度だけ拡張を指定するのはエラーであるため、有効にしたい拡張がすでに返された配列の中にあるかどうかを確認する必要があります。</p><p><strong>ポインタの寿命</strong>:</p><p>返された配列はGLFWによって割り当てられ、解放される。自分で解放してはならない。ライブラリが終了するまで有効であることが保証されている。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Querying required Vulkan extensions</li><li>glfwCreateWindowSurface</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetInstanceProcAddress()</code></summary><p>この関数は、指定されたインスタンスの指定されたVulkanコアまたは拡張関数のアドレスを返します。instanceがNULLに設定されている場合、少なくとも以下の関数を含む、Vulkanローダーからエクスポートされた任意の関数を返すことができます：</p><ul><li>vkEnumerateInstanceExtensionProperties</li><li>vkEnumerateInstanceLayerProperties</li><li>vkCreateInstance</li><li>vkGetInstanceProcAddr</li></ul><p>Vulkanがマシンで利用できない場合、この関数はNULLを返し、GLFW_API_UNAVAILABLEエラーを生成します。glfwVulkanSupportedを呼び出して、Vulkanが少なくとも最低限利用可能かどうかをチェックします。</p><p>この関数は、フォールバックとしてVulkanローダーのプラットフォーム固有のクエリでvkGetInstanceProcAddrを呼び出すことと同等です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWvkproc </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetInstanceProcAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VkInstance </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> procname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] instance</code>: 問い合わせるVulkanインスタンス、またはインスタンス生成に関連する関数を取得する場合はNULL。</li><li><code>[in] procname</code>: ASCIIエンコードされた関数名。</li></ul><p><strong>戻り値</strong>:</p><p>関数のアドレス。エラーが発生した場合は NULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_API_UNAVAILABLE である。</p><p><strong>ポインタの寿命</strong>:</p><p>返された関数ポインターは、ライブラリーが終了するまで有効である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Querying Vulkan function pointers</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetPhysicalDevicePresentationSupport()</code></summary><p>この関数は、指定された物理デバイスの指定されたキューファミリーが、GLFWが構築されたプラットフォームへの表示をサポートしているかどうかを返します。</p><p>Vulkanまたは必要なウィンドウサーフェス作成インスタンス拡張がマシン上で利用できない場合、または指定されたインスタンスが必要な拡張で作成されなかった場合、この関数はGLFW_FALSEを返し、GLFW_API_UNAVAILABLEエラーを生成します。glfwVulkanSupportedを呼び出してVulkanが最低限利用可能かどうかをチェックし、glfwGetRequiredInstanceExtensionsを呼び出してどのインスタンス拡張が必要かをチェックする。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetPhysicalDevicePresentationSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VkInstance </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, VkPhysicalDevice </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> queuefamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] instance</code>: 物理デバイスが属するインスタンス。</li><li><code>[in] device</code>: キューファミリが属する物理デバイス。</li><li><code>[in] queuefamily</code>: 問い合わせるキューファミリーのインデックス。</li></ul><p><strong>戻り値</strong>:</p><p>キューファミリーがプレゼンテーションをサポートしていれば GLFW_TRUE、そうでなければ GLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは、GLFW_NOT_INITIALIZED、 GLFW_API_UNAVAILABLE、GLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>macOS: VK_MVK_macos_surface と VK_EXT_metal_surface 拡張は <code>vkGetPhysicalDevice*PresentationSupport</code> タイプの関数を提供していないため、この関数は現在常に GLFW_TRUE を返します。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができます。Vulkanオブジェクトの同期の詳細については、Vulkan仕様を参照してください。</p><p><strong>参照</strong>:</p><p>Vulkanプレゼンテーション・サポートの問い合わせ</p><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwCreateWindowSurface()</code></summary><p>この関数は、指定されたウィンドウのVulkanサーフェスを作成します。</p><p>Vulkanローダーまたは少なくとも1つの最低限機能するICDが見つからなかった場合、この関数はVK_ERROR_INITIALIZATION_FAILEDを返し、GLFW_API_UNAVAILABLEエラーを生成します。glfwVulkanSupportedを呼び出して、Vulkanが少なくとも最低限利用可能かどうかをチェックする。</p><p>必要なウィンドウサーフェス作成インスタンス拡張が利用できない場合、または指定されたインスタンスがこれらの拡張を有効にして作成されていない場合、この関数はVK_ERROR_EXTENSION_NOT_PRESENTを返し、GLFW_API_UNAVAILABLEエラーを生成します。どのようなインスタンス拡張が必要かを確認するには， glfwGetRequiredInstanceExtensions を呼び出します．</p><p>ウィンドウサーフェスは他のAPIと共有できないので、ウィンドウはGLFW_NO_APIに設定されたクライアントAPIヒントで作成されなければなりません、そうでなければGLFW_INVALID_VALUEエラーを生成し、VK_ERROR_NATIVE_WINDOW_IN_USE_KHRを返します。</p><p>ウィンドウサーフェスは、指定されたVulkanインスタンスの前に破棄されなければなりません。ウィンドウサーフェスを破棄するのは呼び出し元の責任です。GLFWはあなたのためにそれを破壊しません。サーフェスを破棄するにはvkDestroySurfaceKHRを呼び出します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VkResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwCreateWindowSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VkInstance </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VkAllocationCallbacks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> allocator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, VkSurfaceKHR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> surface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] instance</code>: サーフェスを作成するVulkanインスタンス。</li><li><code>[in] window</code>: サーフェスを作成するウィンドウ。</li><li><code>[in] allocator</code>: デフォルトのアロケータを使う場合は NULL。</li><li><code>[out] surface</code>: サーフェスのハンドルを格納する場所。エラーが発生した場合は VK_NULL_HANDLE に設定されます。</li></ul><p><strong>戻り値</strong>:</p><p>成功した場合はVK_SUCCESS、エラーが発生した場合はVulkanエラーコード。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED、 GLFW_API_UNAVAILABLE、 GLFW_PLATFORM_ERROR、 GLFW_INVALID_VALUE です。</p><p><strong>備考</strong>:</p><p>作成呼び出しが行われる前にエラーが発生した場合、GLFWはそのエラーに最も適したVulkanエラーコードを返します。glfwVulkanSupportedとglfwGetRequiredInstanceExtensionsを適切に使用することで、これらのエラーの発生はほとんどなくなるはずです。</p><ul><li>macOS: GLFW は VK_EXT_metal_surface エクステンションを優先し、VK_MVK_macos_surface エクステンションをフォールバックとします。もしあれば、選択された拡張の名前は glfwGetRequiredInstanceExtensions が返す配列に含まれます。</li><li>macOS: この関数は、MoltenVKが機能するために必要なウィンドウコンテンツビュー用のCAMetalLayerインスタンスを生成し、設定する。</li></ul><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができます。Vulkanオブジェクトの同期の詳細については、Vulkan仕様を参照してください。</p><p><strong>参照</strong>:</p><ul><li>Creating a Vulkan window surface</li><li>glfwGetRequiredInstanceExtensions</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details>',13)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
