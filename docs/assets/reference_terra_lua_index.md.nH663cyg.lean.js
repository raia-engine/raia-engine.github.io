import{_ as d,c as e,a2 as r,o as a}from"./chunks/framework.CKGreiRV.js";const u=JSON.parse('{"title":"Terra/Lua ライブラリ","description":"","frontmatter":{},"headers":[],"relativePath":"reference/terra_lua/index.md","filePath":"reference/terra_lua/index.md","lastUpdated":1733797599000}'),o={name:"reference/terra_lua/index.md"};function c(i,t,l,b,n,h){return a(),e("div",null,t[0]||(t[0]=[r('<h1 id="terra-lua-ライブラリ" tabindex="-1">Terra/Lua ライブラリ <a class="header-anchor" href="#terra-lua-ライブラリ" aria-label="Permalink to &quot;Terra/Lua ライブラリ&quot;">​</a></h1><h2 id="リスト操作-list" tabindex="-1">リスト操作 (<code>list:*</code>) <a class="header-anchor" href="#リスト操作-list" aria-label="Permalink to &quot;リスト操作 (`list:*`)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>list:sub</code></td><td>リストの部分を取得する（string.subに相当）</td></tr><tr><td><code>list:rev</code></td><td>リストを反転する</td></tr><tr><td><code>list:app</code></td><td>すべての要素に指定した関数を適用する</td></tr><tr><td><code>list:map</code></td><td>すべての要素にmapを適用し、新しいリストを返す</td></tr><tr><td><code>list:filter</code></td><td>指定した関数がtrueである要素のみの新しいリストを返す</td></tr><tr><td><code>list:flatmap</code></td><td>すべての要素にmapを適用し、結果のリストを連結する</td></tr><tr><td><code>list:find</code></td><td>条件を満たす最初の要素を見つける</td></tr><tr><td><code>list:partition</code></td><td>k,v = fn(e)を各要素に適用し、同じkの値vをグループ化</td></tr><tr><td><code>list:fold</code></td><td>再帰的に初期値initとリストの各要素にfnを適用</td></tr><tr><td><code>list:reduce</code></td><td>リストの各要素にfnを再帰的に適用</td></tr><tr><td><code>list:exists</code></td><td>リストのいずれかの要素が条件を満たすか</td></tr><tr><td><code>list:all</code></td><td>リストのすべての要素が条件を満たすか</td></tr></tbody></table><h2 id="terralib" tabindex="-1"><code>terralib.*</code> <a class="header-anchor" href="#terralib" aria-label="Permalink to &quot;`terralib.*`&quot;">​</a></h2><h3 id="オブジェクトの判別" tabindex="-1">オブジェクトの判別 <a class="header-anchor" href="#オブジェクトの判別" aria-label="Permalink to &quot;オブジェクトの判別&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>terralib.israwlist</code></td><td>連続する整数キーのリストならtrueを返す</td></tr><tr><td><code>terralib.islist</code></td><td>リストならtrueを返す</td></tr><tr><td><code>terralib.isfunction</code></td><td>関数ならtrueを返す</td></tr><tr><td><code>terralib.types.istype</code></td><td>型ならtrueを返す</td></tr><tr><td><code>terralib.isquote</code></td><td>引用句ならtrueを返す</td></tr><tr><td><code>terralib.issymbol</code></td><td>シンボルならtrueを返す</td></tr><tr><td><code>terralib.isconstant</code></td><td>定数ならtrueを返す</td></tr><tr><td><code>terralib.ismacro</code></td><td>マクロであればtrueを返す</td></tr><tr><td><code>terralib.isglobalvar</code></td><td>グローバル変数ならtrueを返す</td></tr><tr><td><code>terralib.islabel</code></td><td>ラベルならtrueを返す</td></tr><tr><td><code>terralib.isoverloadedfunction</code></td><td>オーバーロード関数ならtrueを返す</td></tr><tr><td><code>terralib.istree</code></td><td>ツリーならtrueを返す</td></tr><tr><td><code>terralib.type</code></td><td>データ型を文字列で返す</td></tr></tbody></table><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>terralib.memoize</code></td><td>関数の結果をメモ化します</td></tr><tr><td><code>terralib.externfunction</code></td><td>外部で定義された関数にバインドされたTerra関数を作成します</td></tr><tr><td><code>terralib.includec</code></td><td>C関数をインポートする</td></tr><tr><td><code>terralib.sizeof</code></td><td>terratypeを完全にして、そのサイズを返す（ffi.sizeofのラッパー）</td></tr><tr><td><code>terralib.offsetof</code></td><td>terratypeを完全にして、terratype内のfieldのオフセット（バイト単位）を返す（ffi.offsetofのラッパー）</td></tr><tr><td><code>terralib.typeof</code></td><td>objのTerra型を返します。objは、以前にTerra APIを使用して割り当てられたLuaJIT ctypeである必要があります。または、Terra関数の戻り値として返されるものです。</td></tr><tr><td><code>terralib.new</code></td><td>LuaJITのffi.newのラッパーです。型terratypeの新しいオブジェクトを割り当てます。initはオプションの初期化子であり、Terra値とLua値の間での変換ルールに従います。このオブジェクトはLuaから到達不可能になるとガベージコレクションされます。</td></tr><tr><td><code>terralib.cast</code></td><td>ffi.castのラッパーです。objをterratypeに変換し、Terra値とLua値の間での変換ルールに従います。</td></tr><tr><td><code>terralib.intrinsic</code></td><td>指定したnameとtypeに対応するLLVMの組み込み関数を呼び出すTerra関数を返します。</td></tr><tr><td><code>terralib.attrload</code></td><td>addrのアドレスからattrs属性付きでデータを読み込みます。</td></tr><tr><td><code>terralib.attrstore</code></td><td>addrのアドレスにvalueの値をattrs属性付きで書き込みます。属性の指定方法はattrloadと同じです。</td></tr><tr><td><code>terralib.types.newstruct</code></td><td>新しいユーザー定義型を作成します。</td></tr><tr><td><code>terralib.linklibrary</code></td><td>ファイルfilenameにある動的ライブラリを読み込みます</td></tr><tr><td><code>terralib.linkllvm</code></td><td>LLVMビットコードファイルfilenameを.bc拡張子でリンク</td></tr></tbody></table><p>実験的機能:</p><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>terralib.types.pointer</code></td><td>&amp;typの代替で、LLVMアドレス空間を指定することが可能です。非ゼロアドレス空間の意味はターゲット固有です。</td></tr><tr><td><code>terralib.fence</code></td><td>フェンス操作を発行します。指定した属性によって、フェンスを境にした原子命令の順序変更を防ぎます。この操作の意味はLLVMによって決まります。</td></tr><tr><td><code>terralib.cmpxchg</code></td><td>アドレスaddrでの原子比較交換（cmpxchg）操作を実行します。addrの値がcmpと同じ場合、newの値が書き込まれます。違う場合、値は変更されません。addrの元の値と交換が成功したかどうかを示すブール値のタプルを返します。</td></tr><tr><td><code>terralib.atomicrmw</code></td><td>addrのアドレスでvalue値と演算子opを使用した原子読み書き操作（RMW）を実行します。操作は原子的に行われます。addrの元の値を返します。</td></tr></tbody></table><p>Terraコードの読み込み:</p><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>terralib.load</code></td><td>C APIのterra_loadと同等のLua関数です。readerfnはLuaのload関数と同じ動作をします。</td></tr><tr><td><code>terralib.loadstring</code></td><td>C APIのterra_loadstringと同等のLua関数です。</td></tr><tr><td><code>terralib.loadfile</code></td><td>C APIのterra_loadfileと同等のLua関数です。</td></tr><tr><td><code>require</code></td><td>Terraコードモジュールmodulenameを読み込みます</td></tr></tbody></table><p>コンパイルAPI:</p><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>terralib.saveobj</code></td><td>Terraコードを外部ファイル形式（オブジェクトファイルや実行ファイルなど）に保存します</td></tr><tr><td><code>terralib.newtarget</code></td><td>ターゲットオブジェクトを作成</td></tr></tbody></table><p>デバッグ:</p><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>terralib.currenttimeinseconds</code></td><td>過去のある時点からの経過時間を秒で返す</td></tr><tr><td><code>terralib.traceback</code></td><td>Terraコードから呼び出してスタックトレースを出力する</td></tr><tr><td><code>terralib.backtrace</code></td><td>低レベルのインターフェースで、マシンスタックからリターンアドレスを取得します</td></tr><tr><td><code>terralib.disas</code></td><td>命令の逆アセンブルを出力</td></tr><tr><td><code>terralib.lookupsymbol</code></td><td>任意の命令のポインタipを基に、Terra関数に関する情報を検索しようと試みます</td></tr><tr><td><code>terralib.lookupline</code></td><td>Terra命令に関する情報を検索しようと試みます</td></tr><tr><td><code>terralib.overloadedfunction</code></td><td>オーバーロード関数を作成する</td></tr><tr><td><code>terralib.includecstring</code></td><td>文字列codeをCコードとしてインポート</td></tr></tbody></table><h2 id="関数-func" tabindex="-1">関数 (func:*) <a class="header-anchor" href="#関数-func" aria-label="Permalink to &quot;関数 (func:*)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>func:isdefined</code></td><td>関数に定義が存在する場合はtrueを返す</td></tr><tr><td><code>func:adddefinition</code></td><td></td></tr><tr><td><code>func:resetdefinition</code></td><td></td></tr><tr><td><code>func:isextern</code></td><td></td></tr><tr><td><code>func:printstats</code></td><td></td></tr><tr><td><code>func:disas</code></td><td></td></tr><tr><td><code>func:printpretty</code></td><td></td></tr><tr><td><code>func:compile</code></td><td></td></tr><tr><td><code>func:gettype</code></td><td></td></tr><tr><td><code>func:getpointer</code></td><td></td></tr><tr><td><code>func:getname</code></td><td></td></tr><tr><td><code>func:setname</code></td><td></td></tr><tr><td><code>func:setinlined</code></td><td></td></tr><tr><td><code>func:setoptimized</code></td><td></td></tr><tr><td><code>func:setcallingconv</code></td><td></td></tr></tbody></table><h2 id="オーバーロード関数" tabindex="-1">オーバーロード関数 <a class="header-anchor" href="#オーバーロード関数" aria-label="Permalink to &quot;オーバーロード関数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>overloaded_func:adddefinition</code></td><td>メソッドを追加する</td></tr><tr><td><code>overloaded_func:getdefinitions</code></td><td>関数の定義のリストを返す</td></tr></tbody></table><h2 id="型-type" tabindex="-1">型 (type:*) <a class="header-anchor" href="#型-type" aria-label="Permalink to &quot;型 (type:*)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>vector</code></td><td></td></tr><tr><td><code>struct</code></td><td></td></tr><tr><td><code>tuple</code></td><td></td></tr><tr><td><code>type:isprimitive</code></td><td>プリミティブ型ならtrueを返す</td></tr><tr><td><code>type:isintegral</code></td><td>整数型であればtrueを返します。</td></tr><tr><td><code>type:isfloat</code></td><td>floatまたはdoubleであればtrueを返します。</td></tr><tr><td><code>type:isarithmetic</code></td><td>整数型または浮動小数点型であればtrueを返します。</td></tr><tr><td><code>type:islogical</code></td><td>boolであればtrueを返します（将来的に、ベクトル命令内のフラグに近いサイズのブール型をサポートする予定）。</td></tr><tr><td><code>type:canbeord</code></td><td>orおよびand演算に使用できる場合（つまり整数型や論理型だが浮動小数点型ではない場合）、trueを返します。</td></tr><tr><td><code>type:ispointer</code></td><td>ポインタであればtrueを返します。type.typeは指している型です。</td></tr><tr><td><code>type:isarray</code></td><td>配列であればtrueを返します。type.Nは長さを、type.typeは要素の型を表します。</td></tr><tr><td><code>type:isfunction</code></td><td>関数（関数ポインタではない）であればtrueを返します。type.parametersはパラメータ型のリスト、type.returntypeは戻り値の型です。複数の値を返す関数の場合、戻り値の型はその値のtupleになります。</td></tr><tr><td><code>type:isstruct</code></td><td>構造体であればtrueを返します。</td></tr><tr><td><code>type:ispointertostruct</code></td><td>構造体へのポインタであればtrueを返します。</td></tr><tr><td><code>type:ispointertofunction</code></td><td>関数へのポインタであればtrueを返します。</td></tr><tr><td><code>type:isaggregate</code></td><td>配列または構造体であればtrueを返します（任意の型を保持できる型です）。</td></tr><tr><td><code>type:iscomplete</code></td><td>完全に定義され、コードで使用できる状態であればtrueを返します。非集約型では常にtrueです。集約型の場合、その内部に含まれるすべての型が定義されていればtrueとなります。type:complete()を呼び出すと強制的に型が完全になります。</td></tr><tr><td><code>type:isvector</code></td><td>ベクトルであればtrueを返します。type.Nは長さ、type.typeは要素の型です。</td></tr><tr><td><code>type:isunit</code></td><td>空のタプルであればtrueを返します。空のタプルは、戻り値を持たない関数の戻り値型としても使用されます。</td></tr><tr><td><code>type:complete</code></td><td>型を強制的に完全にします。構造体の場合、構造体のレイアウトを計算し（定義されていれば__getentriesや__staticinitializeを呼び出します）、この型が参照するすべての型を再帰的に完全にします。</td></tr><tr><td><code>type:printpretty</code></td><td>型を出力し、構造体の場合はそのメンバーも含めて表示します。</td></tr></tbody></table><h2 id="クォート-quoteobj" tabindex="-1">クォート (quoteobj:*) <a class="header-anchor" href="#クォート-quoteobj" aria-label="Permalink to &quot;クォート (quoteobj:*)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>quoteobj:gettype</code></td><td>Terra型を返します。</td></tr><tr><td><code>quoteobj:astype</code></td><td>Terra型オブジェクトとして解釈しようとします。通常、型を引数として受け取るマクロで使用されます（例：sizeof([&amp;int])）。この関数は、quoteオブジェクトを型に変換します（例：&amp;int）。</td></tr><tr><td><code>quoteobj:islvalue</code></td><td>代入の左辺（l-value）として使用可能であればtrueを返します。</td></tr><tr><td><code>quoteobj:asvalue</code></td><td>単純なLua値として解釈しようとします。通常、定数を引数として受け取るマクロで使用されます。特定の値のみで動作し、Constant式として利用可能な場合に限られます。生成コードに複雑なデータ構造を渡す場合、マクロよりもエスケープを使用することを検討してください。</td></tr><tr><td><code>quoteobj:printpretty</code></td><td>コードの視覚表現を出力します。引用句は関数に挿入されるまで型チェックが行われないため、関数の型なしの表現が出力されます。</td></tr></tbody></table><h2 id="シンボル-symbol" tabindex="-1">シンボル (symbol) <a class="header-anchor" href="#シンボル-symbol" aria-label="Permalink to &quot;シンボル (symbol)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>symbol</code></td><td>新しいシンボルを作成する</td></tr></tbody></table><h2 id="グローバル変数-globalvar" tabindex="-1">グローバル変数 (globalvar:*) <a class="header-anchor" href="#グローバル変数-globalvar" aria-label="Permalink to &quot;グローバル変数 (globalvar:*)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>global</code></td><td>型typeと初期値initで新しいグローバル変数を作成します</td></tr><tr><td><code>globalvar:getpointer</code></td><td>メモリ内でこのグローバル変数へのポインタであるctypeオブジェクトを返します（型を完了する）</td></tr><tr><td><code>globalvar:get</code></td><td>値をLuaJITのctypeオブジェクトとして取得します（型を完了する）</td></tr><tr><td><code>globalvar:set</code></td><td>指定した値をグローバル変数に設定する（型を完了する）</td></tr><tr><td><code>globalvar:setname</code></td><td>デバッグ名を設定する（グローバル変数の動作には影響しない）</td></tr><tr><td><code>globalvar:getname</code></td><td>デバッグ名を取得する（グローバル変数の動作には影響しない）</td></tr><tr><td><code>globalvar:gettype</code></td><td>Terra型を取得します</td></tr><tr><td><code>globalvar:setinitializer</code></td><td>初期化式を設定または変更します。グローバル変数がコンパイルされる前にのみ有効です。例えば、クラスのvtableを格納するグローバル変数の場合、クラスにメソッドを追加するたびに値を追加することができます。</td></tr></tbody></table><h2 id="定数" tabindex="-1">定数 <a class="header-anchor" href="#定数" aria-label="Permalink to &quot;定数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>constant</code></td><td>新しい定数を作成する</td></tr></tbody></table><h2 id="ラベル" tabindex="-1">ラベル <a class="header-anchor" href="#ラベル" aria-label="Permalink to &quot;ラベル&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>label</code></td><td>新しいラベルを作成する</td></tr></tbody></table><h2 id="マクロ" tabindex="-1">マクロ <a class="header-anchor" href="#マクロ" aria-label="Permalink to &quot;マクロ&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>macro</code></td><td>新しいマクロを作成する</td></tr></tbody></table><h2 id="llvm" tabindex="-1">LLVM <a class="header-anchor" href="#llvm" aria-label="Permalink to &quot;LLVM&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>llvmobj:extern</code></td><td></td></tr></tbody></table>',35)]))}const p=d(o,[["render",c]]);export{u as __pageData,p as default};
