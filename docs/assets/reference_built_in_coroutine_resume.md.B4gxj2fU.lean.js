import{_ as a,c as s,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const k=JSON.parse('{"title":"coroutine.resume","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/coroutine/resume.md","filePath":"reference/built_in/coroutine/resume.md","lastUpdated":null}'),l={name:"reference/built_in/coroutine/resume.md"};function n(h,i,r,o,p,d){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="coroutine-resume" tabindex="-1">coroutine.resume <a class="header-anchor" href="#coroutine-resume" aria-label="Permalink to &quot;coroutine.resume&quot;">​</a></h1><p>コルーチンを再開する</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coroutine.resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (co [, val1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>コルーチン<code>co</code>の実行を開始または継続します。最初に再開するときは、<code>co</code>の本体関数が実行されます。<code>val1, ...</code>は本体関数への引数として渡されます。コルーチンが中断されていた場合は、それを再開し、<code>yield</code>からの結果として引数が渡されます。</p><p>成功すると、<code>resume</code>は<code>true</code>とコルーチンから返された値を返します。エラーが発生した場合、<code>false</code>とエラーメッセージを返します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coroutine.create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coroutine.resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(co, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 8 を出力</span></span></code></pre></div><p>この例では、コルーチンに2つの引数を渡し、それらを使用して計算を行います。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./create.html"><code>coroutine.create</code></a></li><li><a href="./yield.html"><code>coroutine.yield</code></a></li></ul>`,13)]))}const u=a(l,[["render",n]]);export{k as __pageData,u as default};
