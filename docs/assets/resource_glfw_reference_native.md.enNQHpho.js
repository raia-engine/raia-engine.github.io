import{_ as i,c as t,a2 as a,o as p}from"./chunks/framework.6x3wfQve.js";const g=JSON.parse('{"title":"ネイティブサポート","description":"","frontmatter":{},"headers":[],"relativePath":"resource/glfw/reference/native.md","filePath":"resource/glfw/reference/native.md","lastUpdated":null}'),n={name:"resource/glfw/reference/native.md"};function l(e,s,h,d,o,k){return p(),t("div",null,s[0]||(s[0]=[a(`<h1 id="ネイティブサポート" tabindex="-1">ネイティブサポート <a class="header-anchor" href="#ネイティブサポート" aria-label="Permalink to &quot;ネイティブサポート&quot;">​</a></h1><blockquote><p>ネイティブのアクセス関数を使用することで、自分が何をしているのか、そしてアクセス関数を使用することで発生する問題の修正方法を知っていることを保証することになる。そうでないなら、使うべきではありません。</p></blockquote><p>glfw3native.hをインクルードする前に、0個以上のウィンドウシステムAPIマクロと0個以上のコンテキスト生成APIマクロを定義することができる。</p><p>選択したバックエンドは、ライブラリがコンパイルされたものと一致しなければならない。これを行わないと、リンク時にエラーが発生する。</p><p>利用可能なウィンドウAPIマクロは以下のとおりである：</p><ul><li>GLFW_EXPOSE_NATIVE_WIN32</li><li>GLFW_EXPOSE_NATIVE_COCOA</li><li>GLFW_EXPOSE_NATIVE_X11</li><li>GLFW_EXPOSE_NATIVE_WAYLAND</li></ul><p>The available context API macros are:</p><ul><li>GLFW_EXPOSE_NATIVE_WGL</li><li>GLFW_EXPOSE_NATIVE_NSGL</li><li>GLFW_EXPOSE_NATIVE_GLX</li><li>GLFW_EXPOSE_NATIVE_EGL</li><li>GLFW_EXPOSE_NATIVE_OSMESA</li></ul><p>これらのマクロは、どのネイティブ・アクセス関数を宣言し、どのプラット フォーム固有のヘッダーを含めるかを選択する。どの関数を定義するかは、（定義上、プラットフォーム固有の）コード次第です。</p><p>プラットフォーム固有のヘッダをインクルードしたくない場合は、glfw3native.h ヘッダをインクルードする前に GLFW_NATIVE_INCLUDE_NONE を定義してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_EXPOSE_NATIVE_WIN32</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_EXPOSE_NATIVE_WGL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_NATIVE_INCLUDE_NONE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;GLFW/glfw3native.h&gt;</span></span></code></pre></div><nav class="table-of-contents"><ul><li><a href="#関数">関数</a></li></ul></nav><h2 id="関数" tabindex="-1">関数 <a class="header-anchor" href="#関数" aria-label="Permalink to &quot;関数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td>glfwGetWin32Adapter</td><td>指定されたモニタのアダプタデバイス名を返します。</td></tr><tr><td>glfwGetWin32Monitor</td><td>指定されたモニターの表示デバイス名を返します。</td></tr><tr><td>glfwGetWin32Window</td><td>指定されたウィンドウのHWNDを返します。</td></tr><tr><td>glfwGetWGLContext</td><td>指定されたウィンドウのHGLRCを返します。</td></tr><tr><td>glfwGetCocoaMonitor</td><td>指定されたモニターの CGDirectDisplayID を返します。</td></tr><tr><td>glfwGetCocoaWindow</td><td>指定されたウィンドウのNSWindowを返します。</td></tr><tr><td>glfwGetNSGLContext</td><td>指定されたウィンドウの NSOpenGLContext を返します。</td></tr><tr><td>glfwGetX11Display</td><td>GLFW が使用する Display を返す。</td></tr><tr><td>glfwGetX11Adapter</td><td>指定されたモニターのRRCrtcを返す。</td></tr><tr><td>glfwGetX11Monitor</td><td>指定されたモニターの RROutput を返す。</td></tr><tr><td>glfwGetX11Window</td><td>指定したウィンドウのWindowを返します。</td></tr><tr><td>glfwSetX11SelectionString</td><td>現在の主選択範囲を指定された文字列に設定する。</td></tr><tr><td>glfwGetX11SelectionString</td><td>現在の一次選択範囲の内容を文字列として返す。</td></tr><tr><td>glfwGetGLXContext</td><td>指定されたウィンドウの GLXContext を返します。</td></tr><tr><td>glfwGetGLXWindow</td><td>指定されたウィンドウのGLXWindowを返します。</td></tr><tr><td>glfwGetWaylandDisplay</td><td>GLFWが使用する<code>wl_display*</code>構造体を返す。</td></tr><tr><td>glfwGetWaylandMonitor</td><td>指定されたモニターの<code>wl_output*</code>構造体を返す。</td></tr><tr><td>glfwGetWaylandWindow</td><td>指定されたウィンドウのメイン構造体 <code>wl_surface*</code> を返します。</td></tr><tr><td>glfwGetEGLDisplay</td><td>GLFWが使用するEGLDisplayを返す。</td></tr><tr><td>glfwGetEGLContext</td><td>指定されたウィンドウの EGLContext を返します。</td></tr><tr><td>glfwGetEGLSurface</td><td>指定されたウィンドウのEGLSurfaceを返します。</td></tr><tr><td>glfwGetOSMesaColorBuffer</td><td>指定されたウィンドウに関連付けられたカラーバッファを取得します。</td></tr><tr><td>glfwGetOSMesaDepthBuffer</td><td>指定されたウィンドウに関連付けられている深度バッファを取得します。</td></tr><tr><td>glfwGetOSMesaContext</td><td>指定されたウィンドウのOSMesaContextを返します。</td></tr></tbody></table><details class="details custom-block"><summary><code>glfwGetWin32Adapter()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWin32Adapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたモニターの UTF-8 エンコードされたアダプタデバイス名 (例 <code>\\\\.\\DISPLAY1</code>) またはエラーが発生した場合は NULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWin32Monitor()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWin32Monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたモニターのUTF-8エンコードされた表示デバイス名（例 <code>\\\\.\\DISPLAY1\\Monitor0</code>）、エラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWin32Window()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HWND </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetWin32Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのHWND、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>備考</strong>:</p><p>ウィンドウに関連付けられたHDCは、GetDC関数で照会できる。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDC dc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetDC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetWin32Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window));</span></span></code></pre></div><p>このDCは非公開であり、公開する必要はない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWGLContext()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HGLRC </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetWGLContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのHGLRC、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>備考</strong>:</p><p>ウィンドウに関連付けられたHDCは、GetDC関数で照会できる。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HDC dc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetDC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetWin32Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window));</span></span></code></pre></div><p>このDCは非公開であり、公開する必要はない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetCocoaMonitor()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CGDirectDisplayID </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetCocoaMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたモニターのCGDirectDisplayID、またはエラーが発生した場合はkCGNullDirectDisplay。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwGetCocoaWindow()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetCocoaWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのNSWindow、またはエラーが発生した場合はnil。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetNSGLContext()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetNSGLContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウの NSOpenGLContext、またはエラーが発生した場合は nil。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetX11Display()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetX11Display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>GLFWが使用するDisplay、エラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetX11Adapter()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RRCrtc </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetX11Adapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたモニターのRRCrtc、またはエラーが発生した場合はNone。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwGetX11Monitor()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RROutput </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetX11Monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたモニターのRROutput、またはエラーが発生した場合はNone。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwGetX11Window()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Window </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetX11Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定したウィンドウのWindow、エラーが発生した場合はNone。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetX11SelectionString()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetX11SelectionString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] string</code>: UTF-8でエンコードされた文字列。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>指定された文字列は、この関数が戻る前にコピーされる。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Clipboard input and output</li><li>glfwGetX11SelectionString</li><li>glfwSetClipboardString</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetX11SelectionString()</code></summary><p>選択範囲が空であるか、その内容が変換できない場合、NULL が返され、 GLFW_FORMAT_UNAVAILABLE エラーが発生する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetX11SelectionString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>UTF-8エンコードされた文字列としての選択内容の内容、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>返された文字列はGLFWによって割り当てられ、解放される。自分で解放してはいけない．それは，次にglfwGetX11SelectionStringまたはglfwSetX11SelectionStringを呼ぶか，ライブラリが終了するまで有効である．</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Clipboard input and output</li><li>glfwSetX11SelectionString</li><li>glfwGetClipboardString</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetGLXContext()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLXContext </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetGLXContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのGLXContext、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetGLXWindow()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLXWindow </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetGLXWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのGLXWindow、またはエラーが発生した場合はNone。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWaylandDisplay()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wl_display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWaylandDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>GLFWが使用する<code>wl_display*</code>構造体、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWaylandMonitor()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wl_output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWaylandMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWmonitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたモニターの<code>wl_output*</code>構造体、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetWaylandWindow()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wl_surface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetWaylandWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのメイン構造体 <code>wl_surface*</code> またはエラーが発生した場合は NULL。</p><p><strong>エラー</strong>:</p><p>Possible errors include GLFW_NOT_INITIALIZED.</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetEGLDisplay()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EGLDisplay </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetEGLDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>GLFWが使用するEGLDisplay、エラーが発生した場合はEGL_NO_DISPLAY。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>備考</strong>:</p><p>EGLはオンデマンドで初期化されるため、EGLを介して最初のコンテキストが作成されるまで、この関数はEGL_NO_DISPLAYを返す。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetEGLContext()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EGLContext </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetEGLContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのEGLContext、エラーが発生した場合はEGL_NO_CONTEXT。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetEGLSurface()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EGLSurface </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetEGLSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウのEGLSurface、エラーが発生した場合はEGL_NO_SURFACE。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetOSMesaColorBuffer()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetOSMesaColorBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: カラーバッファを取得するウィンドウ。</li><li><code>[out] width</code>: カラーバッファの幅を格納する場所、または NULL。</li><li><code>[out] height</code>: カラーバッファの高さを格納する場所、または NULL。</li><li><code>[out] format</code>: カラーバッファのOSMesaピクセルフォーマットを格納する場所、またはNULL。</li><li><code>[out] buffer</code>: カラーバッファのアドレスを格納する場所、またはNULL。</li></ul><p><strong>戻り値</strong>:</p><p>成功すればGLFW_TRUE、エラーが発生すればGLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetOSMesaDepthBuffer()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetOSMesaDepthBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bytesPerValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 深度バッファを取得するウィンドウ。</li><li><code>[out] width</code>: デプスバッファの幅を格納する場所、またはNULL。</li><li><code>[out] height</code>: 深度バッファの高さを格納する場所、またはNULL。</li><li><code>[out] bytes</code>: PerValue深度バッファ要素ごとのバイト数を格納する場所、またはNULL。</li><li><code>[out] buffer</code>: デプスバッファのアドレスを格納する場所、またはNULL。</li></ul><p><strong>戻り値</strong>:</p><p>成功すればGLFW_TRUE、エラーが発生すればGLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetOSMesaContext()</code></summary><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OSMesaContext </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetOSMesaContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>指定されたウィンドウの OSMesaContext、またはエラーが発生した場合は NULL。</p><p><strong>エラー</strong>:</p><p>考えられるエラーは GLFW_NO_WINDOW_CONTEXT と GLFW_NOT_INITIALIZED です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details>`,38)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
