import{_ as e,c as i,a2 as n,o as l}from"./chunks/framework.CuCbyi2k.js";const h=JSON.parse('{"title":"はじめに","description":"","frontmatter":{},"headers":[],"relativePath":"resource/ninja/introduction.md","filePath":"resource/ninja/introduction.md","lastUpdated":1732376957000}'),r={name:"resource/ninja/introduction.md"};function t(o,a,p,s,d,u){return l(),i("div",null,a[0]||(a[0]=[n('<h1 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h1><p>Ninjaはもう一つのビルドシステムです。ファイルの相互依存関係を入力とし、それらのビルドを高速に実行します。</p><p>Ninjaは他のビルドシステムの仲間です。Ninjaの特徴は高速であることです。<a href="http://neugierig.org/software/chromium/notes/2011/02/ninja.html" target="_blank" rel="noreferrer">Chromiumブラウザプロジェクト</a>から生まれたものです。3万以上のソースファイルを含むプロジェクトで他のビルドシステム（非再帰型のカスタムMakefileから構築したものを含む）を使用すると、一つのファイルを変更するとビルド開始までに10秒かかってしまいます。Ninjaは1秒以下です。</p><h2 id="哲学的概観" tabindex="-1">哲学的概観 <a class="header-anchor" href="#哲学的概観" aria-label="Permalink to &quot;哲学的概観&quot;">​</a></h2><p>他のビルドシステムが高級言語であるのに対し、Ninjaはアセンブラを目指したものです。</p><p>ビルドシステムは、決定を下す必要があるときに遅くなります。編集-コンパイルサイクルにあるときは、できるだけ速くしたいものです。ビルドシステムには、直ちにビルドする必要があるものを把握するために必要な最小限の作業をしてもらいたいのです。</p><p>Ninjaは、任意の依存関係グラフを記述するために必要な最低限の機能しか備えていません。また、構文がないため、複雑な判断を表現することは不可能です。</p><p>その代わり、Ninja は入力ファイルを生成する別のプログラムと共に使用されることを意図しています。生成プログラム(autotoolsプロジェクトにある./configureのようなもの)は、システムの依存関係を分析し、できるだけ多くの決定を前もって行い、インクリメンタル・ビルドを速く維持することができる。autotools を超えて、「どのコンパイラ・フラグを使うべきか」、「デバッグ・モードかリリース・モードのバイナリをビルドすべきか」といったビルド時の決定も .ninja ファイル・ジェネレータに属します。</p><h2 id="デザイン目標" tabindex="-1">デザイン目標 <a class="header-anchor" href="#デザイン目標" aria-label="Permalink to &quot;デザイン目標&quot;">​</a></h2><p>ここでは、Ninjaのデザイン目標を紹介します。</p><ul><li>非常に大規模なプロジェクトであっても、非常に高速に（即座に）インクリメンタル・ビルドを行うことができます。</li><li>コードのビルド方法に関するポリシーはほとんどありません。プロジェクトや上位のビルドシステムによって、コードのビルド方法に関する意見は異なります。たとえば、ビルドされたオブジェクトはソースと一緒に保存すべきか、すべてのビルド出力は別のディレクトリに移動すべきか、などです。プロジェクトの配布可能なパッケージをビルドする「パッケージ」ルールはあるのでしょうか？これらの決定を回避するには、どちらかを選ぶのではなく、たとえ冗長性が増すとしても、どちらかを実装できるようにします。</li><li>依存関係を正しく取得し、Makefile で正しく取得するのが難しい特定の状況 (例えば、出力を生成するために使用するコマンドラインには暗黙の依存関係が必要です。C ソースコードをビルドするには、ヘッダの依存関係に対して gcc の -M フラグを使用する必要があります) で使用します。</li><li>利便性とスピードが相反する場合は、スピードを優先する。</li></ul><p>非目標を明示したものもある。</p><ul><li>ビルドファイルを手書きするための便利な構文です。忍者ファイルは別のプログラムを使って生成する必要があります。こうすることで、多くの方針決定を回避することができるのです。</li><li>ビルトインルールNinjaはC言語のコンパイルなどに関するルールを持たない。</li><li>ビルド時のカスタマイズ。オプションは、忍者ファイルを生成するプログラムに属します。</li><li>条件分岐や探索経路のようなビルド時の意思決定能力。意思決定は遅い。</li></ul><p>Ninjaが他のビルドシステムより高速なのは、非常にシンプルであるためです。プロジェクトの.ninjaファイルを作成するときに、Ninjaに何をすべきか正確に伝えなければなりません。</p><h2 id="makeとの比較" tabindex="-1">Makeとの比較 <a class="header-anchor" href="#makeとの比較" aria-label="Permalink to &quot;Makeとの比較&quot;">​</a></h2><p>Ninjaは、Makeに最も近い精神と機能を持ち、ファイルのタイムスタンプ間の単純な依存関係に依存しています。</p><p>しかし、基本的にmakeは多くの機能を備えています。接尾辞のルール、関数、ソースをビルドする際にRCSファイルを検索するなどの組み込みルールなどです。Makeの言語は、人間が書くことを前提に設計されています。多くのプロジェクトでは、ビルドの問題はmakeだけで十分だと考えています。</p><p>これに対し、Ninjaはほとんど機能を持たず、ビルドを正しく行うために必要な機能だけを持ち、ほとんどの複雑な機能はNinjaの入力ファイルの生成に委ねられています。Ninja単体では、ほとんどのプロジェクトで役に立たないと思われます。</p><p>ここでは、Ninja が Make に追加する機能のいくつかを紹介します。(この種の機能は、より複雑な Makefile を使って実装できることが多いのですが、これらは Make 自体の一部ではありません)。</p><ul><li>Ninjaはビルド時に余分な依存関係を発見する特別なサポートを持っており、C/C++コードの<a href="https://ninja-build.org/manual.html#ref_headers" target="_blank" rel="noreferrer">header dependencies</a> を正しく取得することが容易にできます。</li><li>ビルドエッジは、複数の出力を持つことができる。</li><li>出力は、それを生成するために使用されたコマンドラインに暗黙的に依存します。これは、例えばコンパイルフラグを変更すると、出力が再構築されることを意味します。</li><li>出力ディレクトリは、それに依存するコマンドを実行する前に、常に暗黙のうちに作成されます。</li><li>ルールは、実行されるコマンドを短く記述することができるので、ビルド中に長いコマンドラインの代わりに、例えばCC foo.oを表示させることができます。</li><li>ビルドは常に並列で実行され、デフォルトではシステムが持つCPUの数に基づいて実行されます。ビルドの依存関係の指定が不十分な場合、ビルドが正しく行われません。</li><li>コマンドの出力は常にバッファリングされます。つまり、並列に実行されているコマンドは、その出力が混在することはなく、コマンドが失敗したときに、その失敗の出力を、失敗を生じさせたコマンドライン全体の横に表示することができます。</li></ul>',20)]))}const j=e(r,[["render",t]]);export{h as __pageData,j as default};
