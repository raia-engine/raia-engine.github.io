import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.DPuwY6B9.js";const g=JSON.parse('{"title":"ファイナライズの使用方法","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/wiki/how_to_use_finalization.md","filePath":"resource/duktape/wiki/how_to_use_finalization.md","lastUpdated":null}'),h={name:"resource/duktape/wiki/how_to_use_finalization.md"};function p(k,s,t,e,E,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="ファイナライズの使用方法" tabindex="-1">ファイナライズの使用方法 <a class="header-anchor" href="#ファイナライズの使用方法" aria-label="Permalink to &quot;ファイナライズの使用方法&quot;">​</a></h1><p>ドキュメンテーションガイド: <a href="http://duktape.org/guide.html#finalization" target="_blank" rel="noreferrer">http://duktape.org/guide.html#finalization</a>.</p><h2 id="簡単な例" tabindex="-1">簡単な例 <a class="header-anchor" href="#簡単な例" aria-label="Permalink to &quot;簡単な例&quot;">​</a></h2><p>ファイナライズ例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// finalize.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;finalizer, foo -&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x.foo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WARNING: finalizer failed (ignoring): &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// オブジェクトを作成し、&#39;a&#39;を通してそれを参照する。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 参照削除，参照カウントで即座に確定</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;refcount finalizer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// refcountingが無効の場合、マーク＆スイープのファイナライズはここで発生します（遅くとも）。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mark-and-sweep finalizer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>上の例のファイナライザーの内部で try-catch ラッパーを使用することを強く推奨します。捕捉されないファイナライザーエラーは黙って無視されるので、ファイナライザーが全く実行されないように見えるかもしれません。</p><p>これをDuktapeコマンドラインツール（デフォルトのDuktapeプロファイルを使用）で実行すると、次のようになります。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> duk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finalize.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">refcount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finalizer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finalizer,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mark-and-sweep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finalizer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cleaning</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up...</span></span></code></pre></div><h2 id="プロトタイプオブジェクトへのファイナライザーの追加" tabindex="-1">プロトタイプオブジェクトへのファイナライザーの追加 <a class="header-anchor" href="#プロトタイプオブジェクトへのファイナライザーの追加" aria-label="Permalink to &quot;プロトタイプオブジェクトへのファイナライザーの追加&quot;">​</a></h2><p>同じ型のオブジェクトが多数ある場合、プロトタイプにファイナライザーを追加することで、オブジェクトインスタンスのプロパティカウントを最小にすることができます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// プラットフォーム固有のファイル記述子に関連付けられた仮想的なSocketオブジェクトの例です。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Platform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host, port);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// called for the prototype itself</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// already freed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Platform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.fd);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WARNING: finalizer failed for fd &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; (ignoring): &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.fd;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Socketインスタンスに対して明示的なファイナライザーを登録することなく、任意のSocketインスタンスがファイナライズされるようになりました。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="ヒープ破壊" tabindex="-1">ヒープ破壊 <a class="header-anchor" href="#ヒープ破壊" aria-label="Permalink to &quot;ヒープ破壊&quot;">​</a></h2><p>Duktapeのヒープが破壊されるとき、ファイナライザーは通常通り呼び出されます。</p><ul><li>オブジェクトを救出することはできません。ファイナライザーは、最初のファイナライザー呼び出しでネイティブ・リソースを解放しなければなりません。なぜなら、ターゲット・オブジェクトへの新しい参照が作成されても、ファイナライザーは再び呼び出されないからです。</li><li>ファイナライザーは、新しいファイナライズ可能なオブジェクトを作成することができ、これらもファイナライズされます。しかし、この処理には、暴走するファイナライザーを捕まえるための健全性の限界があります。通常、この制限に遭遇することはないはずです。</li></ul><p>Duktape 1.4.0以降、ファイナライザーには第2引数が与えられています。これは、オブジェクトが救出できない（ヒープ破壊が進行している）かどうかを示すブール値です。この引数は、救出が不可能な場合は真、そうでない場合は偽となります。Duktape 1.3.0以前では、この引数は提供されません。</p><p>もしファイナライザーが、(1)解放しなければならないネイティブ・リソースを管理し、 (2)オブジェクトの救助を使い、後でファイナライザーが再び呼ばれることに依存しているなら、 例えば、ヒープ破壊の場合を明示的にチェックする必要があります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFinalizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">heapDestruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (heapDestruct) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ヒープが破壊されているので、すぐに解放する必要があります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        freeNativeResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通常の場合：後でファイナライザが呼ばれることを保証して、オブジェクトを救出することができる。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム" tabindex="-1">ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム <a class="header-anchor" href="#ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム" aria-label="Permalink to &quot;ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム&quot;">​</a></h2><p>ヒープ破棄時のファイナライザーのサニティ制限は、現在おおよそ以下のように動作します（正確な詳細はリリース間で変更される可能性があります）。</p><ul><li>割り当てられたすべてのヒープ・オブジェクトが反復処理され、ファイナライザが実行可能なオブジェクトはすべてファイナライズされます。ファイナライザーは特定のオブジェクトに対して二度と実行されません。これは DUK_HEAPHDR_FLAG_FINALIZED を使って追跡されます。n_total を全ヒープオブジェクトの数、n_finalized をこのラウンドでファイナライザを実行した（というか実行しようとした）全オブジェクトの数とします。</li><li>ファイナライズ可能なオブジェクトの数の限界は次のように計算される。</li><li>最初のラウンド: n_limit = 2 * n_total.</li><li>次のラウンドでは、n_limit = n_limit * 3 / 4、つまり約25%減少します。</li><li>n_finalized == 0 の場合、すべてのファイナライザーが終了し、終了します。</li><li>n_finalized &gt;= n_limit の場合、ファイナライズ可能なオブジェクトの数が予想通り減らないので、おそらくファイナライザが暴走していることが原因です。ファイナライズ処理は終了し、残りのファイナライザーは実行されません。</li><li>その他の場合は、ループを再開してください。</li></ul><p>このアルゴリズムの動機は、明らかに暴走したファイナライザーがあり、プロセスが終了できない場合を除き、ヒープ破壊ですべてのファイナライザーが実行されるようにすることです。</p><p>最終化可能なオブジェクトの数を増やすために、最初の制限値はかなり大きくなっていますが、その後ラウンドごとに少なくとも25%減少しなければ最終化処理は中止されます。</p><p>ヒープ破壊のアプローチについては、<a href="https://github.com/svaarala/duktape/pull/473" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/pull/473</a> でいくつか議論されています。</p>`,23)]))}const y=i(h,[["render",p]]);export{g as __pageData,y as default};
