import{_ as a,c as i,a2 as t,o as e}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"lua_pushfstring","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_pushfstring.md","filePath":"reference/lua_c/lua_pushfstring.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/lua_pushfstring.md"};function h(n,s,p,r,d,k){return e(),i("div",null,s[0]||(s[0]=[t('<h1 id="lua-pushfstring" tabindex="-1">lua_pushfstring <a class="header-anchor" href="#lua-pushfstring" aria-label="Permalink to &quot;lua_pushfstring&quot;">​</a></h1><p>フォーマットされた文字列をスタックにプッシュします。</p><p><code>[-0, +1, m]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushfstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>フォーマットされた文字列をスタックにプッシュし、この文字列へのポインタを返します。C関数<code>sprintf</code>に似ていますが、いくつか重要な違いがあります：</p><p>結果のためのスペースを割り当てる必要はありません。結果はLuaの文字列であり、Luaがメモリの割り当て（およびガーベージコレクションによる解放）を行います。 変換指定子はかなり制限されています。フラグ、幅、精度はありません。変換指定子は&#39;%%&#39;（文字列に&#39;%&#39;を挿入）、&#39;%s&#39;（サイズ制限なしのゼロ終了文字列を挿入）、&#39;%f&#39;（<code>lua_Number</code>を挿入）、&#39;%p&#39;（ポインタを16進数で挿入）、&#39;%d&#39;（<code>int</code>を挿入）、&#39;%c&#39;（<code>int</code>を文字として挿入）のみを使用できます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_pushfstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;値は</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">です&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>このコードは、文字列「値は42です」をフォーマットし、スタックにプッシュします。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_pushstring</li><li>lua_pushlstring</li></ul>',14)]))}const u=a(l,[["render",h]]);export{c as __pageData,u as default};
