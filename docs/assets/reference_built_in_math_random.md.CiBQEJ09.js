import{_ as i,c as s,a2 as e,o as t}from"./chunks/framework.6x3wfQve.js";const c=JSON.parse('{"title":"math.random","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/math/random.md","filePath":"reference/built_in/math/random.md","lastUpdated":null}'),n={name:"reference/built_in/math/random.md"};function h(l,a,d,r,o,p){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="math-random" tabindex="-1">math.random <a class="header-anchor" href="#math-random" aria-label="Permalink to &quot;math.random&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([m [, n]])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>ランダムな数値を返します。引数なしの場合は<code>[0, 1]</code>の範囲の擬似乱数実数を返します。引数<code>m</code>を指定した場合は<code>[1, m]</code>の範囲で擬似乱数整数を返します。<code>m</code>と<code>n</code>を指定すると<code>[m, n]</code>の範囲で擬似乱数整数を返します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- [0, 1] の範囲の実数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1から10の整数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">math.random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 5から15の整数</span></span></code></pre></div><p>この例では、異なる範囲の擬似乱数を生成しています。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><p>LuaJITは、Tausworthe PRNGを使用して<code>math.random()</code>と<code>math.randomseed()</code>を実装しており、その周期は<code>2^223</code>です。このPRNGの結果の品質は、プラットフォーム固有のANSI<code>rand()</code>を使用する標準のLua実装と比較して大幅に優れています。</p><p>PRNGは、すべてのプラットフォームで同じシードから同じシーケンスを生成し、シード引数のすべてのビットを使用します。引数なしで<code>math.random()</code>を呼び出すと、各呼び出しで52ビットの疑似ランダムビットを生成します。結果は0.0から1.0の間で均一に分布しています。<code>math.random(n [,m])</code>用に正確にスケールアップされ、均一性を保つために丸められます。</p><p>重要：これを含む、単純な<code>math.random()</code>APIに基づく他のPRNGも、暗号利用には適していません。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./randomseed.html"><code>math.randomseed</code></a></li></ul>`,15)]))}const m=i(n,[["render",h]]);export{c as __pageData,m as default};
