import{_ as i,c as e,a2 as s,o as t}from"./chunks/framework.DzmM640o.js";const u=JSON.parse('{"title":"lua_atpanic","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_atpanic.md","filePath":"reference/lua_c/lua_atpanic.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/lua_atpanic.md"};function n(p,a,c,h,r,o){return t(),e("div",null,a[0]||(a[0]=[s('<h1 id="lua-atpanic" tabindex="-1">lua_atpanic <a class="header-anchor" href="#lua-atpanic" aria-label="Permalink to &quot;lua_atpanic&quot;">​</a></h1><p>新しいパニック関数を設定し、古いものを返します。</p><p><code>[-0, +0, -]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_CFunction </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_atpanic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_CFunction </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">panicf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>新しいパニック関数を設定し、古いものを返します。</p><p>保護された環境の外でエラーが発生した場合、Luaはパニック関数を呼び出し、その後<code>exit(EXIT_FAILURE)</code>を呼び出してホストアプリケーションを終了します。パニック関数は（例えば長いジャンプを行うことで）この終了を回避できます。</p><p>パニック関数はスタックの先頭にあるエラーメッセージにアクセスできます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_CFunction old_panic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_atpanic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, new_panic_function);</span></span></code></pre></div><p>このコードは、新しいパニック関数を設定し、古いパニック関数を変数<code>old_panic</code>に保存しています。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_CFunction</li><li>luaL_error</li></ul>',15)]))}const k=i(l,[["render",n]]);export{u as __pageData,k as default};
