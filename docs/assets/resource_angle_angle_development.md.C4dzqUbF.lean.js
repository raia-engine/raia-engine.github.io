import{_ as a,c as o,a2 as l,o as i}from"./chunks/framework.CKGreiRV.js";const g=JSON.parse('{"title":"ANGLE開発","description":"","frontmatter":{},"headers":[],"relativePath":"resource/angle/angle_development.md","filePath":"resource/angle/angle_development.md","lastUpdated":1732720247000}'),n={name:"resource/angle/angle_development.md"};function s(t,e,d,r,c,p){return i(),o("div",null,e[0]||(e[0]=[l(`<h1 id="angle開発" tabindex="-1">ANGLE開発 <a class="header-anchor" href="#angle開発" aria-label="Permalink to &quot;ANGLE開発&quot;">​</a></h1><p><a href="https://chromium.googlesource.com/angle/angle/+/main/doc/DevSetup.md" target="_blank" rel="noreferrer">原文</a></p><p>ANGLEは、OpenGL ES 3.1およびEGL 1.5のライブラリとテストを提供しています。これらを使って、Windows、Linux、Mac、Android上でOpenGL ESアプリケーションを構築し、実行することができます。</p><h2 id="開発セットアップ" tabindex="-1">開発セットアップ <a class="header-anchor" href="#開発セットアップ" aria-label="Permalink to &quot;開発セットアップ&quot;">​</a></h2><h3 id="バージョン管理" tabindex="-1">バージョン管理 <a class="header-anchor" href="#バージョン管理" aria-label="Permalink to &quot;バージョン管理&quot;">​</a></h3><p>ANGLEはバージョン管理にgitを使用しています。有用なドキュメントは<a href="http://git-scm.com/documentation" target="_blank" rel="noreferrer">http://git-scm.com/documentation</a>で見ることができます。</p><h3 id="必要な最初のセットアップ-最初にこれを行う" tabindex="-1">必要な最初のセットアップ（最初にこれを行う） <a class="header-anchor" href="#必要な最初のセットアップ-最初にこれを行う" aria-label="Permalink to &quot;必要な最初のセットアップ（最初にこれを行う）&quot;">​</a></h3><p>注意: Chromiumチェックアウトの中でビルドする場合<a href="https://chromium.googlesource.com/angle/angle/+/HEAD/doc/BuildingAngleForChromiumDevelopment.md" target="_blank" rel="noreferrer">代わりにこちらの手順を参照してください</a>.</p><p>すべてのプラットフォームで必要です。</p><ul><li><a href="https://www.python.org/downloads/" target="_blank" rel="noreferrer">Python 3</a> がパスで利用可能である必要があります。</li><li><a href="https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up" target="_blank" rel="noreferrer">depot_tools</a><ul><li>依存関係のダウンロード（gclient使用）、ビルドファイルの生成（GN使用）、ANGLEのコンパイル（ninja使用）に必要です。</li><li>コンパイルに必要なninjaを提供する <code>depot_tools</code> がパスに入っていることを確認してください。</li></ul></li><li>Googlerの場合は、<code>download_from_google_storage --config</code> を実行して、Google Storageにログインしてからソースを取得するようにしてください。</li></ul><p>Windowsの場合。</p><ul><li><em><strong>重要: Googlerでない場合は、環境設定で <code>DEPOT_TOOLS_WIN_TOOLCHAIN=0</code> を設定してください</strong></em>。</li><li><a href="https://visualstudio.microsoft.com/vs/" target="_blank" rel="noreferrer">Visual Studio Community 2022</a>をインストールします。</li><li><a href="https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/" target="_blank" rel="noreferrer">Windows SDK</a>をインストールします。 <ul><li>Visual Studio Installerがあれば、そこからインストールすることができます。最新版を探すには、<code>Individual components</code>タブに切り替える必要があるかもしれません。</li><li>現在サポートされている Windows SDK のバージョンは <a href="https://chromium.googlesource.com/chromium/src/build/+/refs/heads/main/vs_toolchain.py" target="_blank" rel="noreferrer">vs_toolchain.py</a> に記載されています。</li><li>SDKは、GN生成のVisual Studioプロジェクト、D3D Debugランタイム、および最新のHLSL Compilerランタイムに必要です。</li></ul></li><li>(オプション) 詳細は <a href="https://chromium.googlesource.com/chromium/src/+/main/docs/windows_build_instructions.md" target="_blank" rel="noreferrer">Chromium Windows build instructions</a> を参照してください。</li></ul><p>Linuxの場合。</p><ul><li>依存関係は後で処理されます (下記の <code>install-build-deps.sh</code> を参照してください)。</li></ul><p>MacOSの場合。</p><ul><li><a href="https://developer.apple.com/xcode/" target="_blank" rel="noreferrer">XCode</a> Clangと開発用ファイル用です。</li><li>MacOS の Googler の場合、<code>gclient sync</code> を実行する前に、まず Chromium サーバーから macOS SDK をダウンロードするための認証が必要です。cipd auth-login\` を使ってこの権限を取得し、指示に従ってください。</li></ul><h3 id="ソースの取得" tabindex="-1">ソースの取得 <a class="header-anchor" href="#ソースの取得" aria-label="Permalink to &quot;ソースの取得&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir angle</span></span>
<span class="line"><span>cd angle</span></span>
<span class="line"><span>fetch angle</span></span></code></pre></div><p>コードを寄稿する場合は、Git の <code>commit-msg</code> フックも設定する必要があります。設定方法は ContributingCode#getting-started-with-gerrit を参照してください。</p><p>Linuxのみ、このコマンドを実行して先に進む前に、必要なすべての依存関係をインストールする必要があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./build/install-build-deps.sh</span></span></code></pre></div><p>これが正常に完了すると、ninjaファイルを生成する準備が整います。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gn gen out/Debug</span></span></code></pre></div><p>もし、コードのチェックアウトに問題があった場合は、エラーメッセージを確認してください。Windows の場合、Googler でないなら <strong>環境で <code>DEPOT_TOOLS_WIN_TOOLCHAIN=0</code> に設定してください</strong>。Googler であれば、<code>download_from_google_storage --config</code> を実行したことを確認してください。</p><p>GN は ninja ファイルを生成します。デフォルトのビルドオプションは、clangと一緒にANGLEをリリースモードでビルドします。多くの場合、デフォルトのオプションは望ましいものですが、 <code>gn args out/Debug</code> を実行することによって変更することができます。開発用によくオーバーライドされるオプションは以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>is_component_build = true/false      (falseは依存関係の静的リンクを強制します)</span></span>
<span class="line"><span>target_cpu = &quot;x64&quot;/&quot;x86&quot;             (デフォルトは &quot;x64&quot;です)</span></span>
<span class="line"><span>is_debug = true/false                (リリースビルドの場合はfalseを使用します。 is_debug = trueがデフォルトです。)</span></span>
<span class="line"><span>angle_assert_always_on = true/false  (リリースアサートとランタイムデバッグレイヤーを有効にします)</span></span>
<span class="line"><span>is_clang = false (NOT RECOMMENDED)   (clangの代わりにシステムのデフォルトコンパイラを使用するため)</span></span></code></pre></div><p>リリースビルドの場合は、 <code>gn args out/Release</code> を実行し、 <code>is_debug = false</code> を設定します。オプションで、リリーステスト用に <code>angle_assert_always_on = true</code> を設定します。</p><p>Windowsでは、argsに <code>target_os = &quot;winuwp&quot;</code> を設定することで、Universal Windows Platform (UWP) 用にビルドすることができます。libEGL.dll と libGLESv2.dll をアプリケーションのディレクトリに移動し、他の DLL に依存せず自己完結することをサポートするために <code>is_component_build = false</code> の設定を強く推奨します (Direct3D バックエンドのために d3dcompiler_47.dll はまだ必要です)。また、UWPでは <code>is_clang = false</code> を使用することをお勧めします。</p><p>GNに関するより詳しい情報は <code>gn help</code> を実行してください。</p><p>以下のいずれかのコマンドで、すべてのプラットフォームでコンパイルできるように <code>autoninja</code> を使用します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>autoninja -C out/Debug</span></span>
<span class="line"><span>autoninja -C out/Release</span></span></code></pre></div><p><code>depot_tools</code> は <code>autoninja</code> を提供しているので、以前のステップからパスで利用できるはずです。Ninjaは設定を変更すると、自動的にGNを呼び出してビルドファイルを再生成します。<code>autoninja</code> は、システム構成に基づいて <code>ninja</code> に自動的にスレッドカウントを指定する。</p><h3 id="gomaで作る-google社員のみ" tabindex="-1">Gomaで作る（Google社員のみ） <a class="header-anchor" href="#gomaで作る-google社員のみ" aria-label="Permalink to &quot;Gomaで作る（Google社員のみ）&quot;">​</a></h3><p>また、Googleの社員には、分散コンパイルシステムであるgomaの使用を強く推奨しています。詳細な情報は内部で入手可能です。Gomaを有効にするには、GN argを設定します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>use_goma = true</span></span></code></pre></div><h3 id="visual-studioによるビルドとデバッグ" tabindex="-1">Visual Studioによるビルドとデバッグ <a class="header-anchor" href="#visual-studioによるビルドとデバッグ" aria-label="Permalink to &quot;Visual Studioによるビルドとデバッグ&quot;">​</a></h3><p><code>Out/Debug/angle-debug.sln</code>にVisual Studioのソリューションを生成する。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gn gen out/Debug --sln=angle-debug --ide=vs2022</span></span></code></pre></div><p>Visual Studioでは。</p><ol><li>ANGLEソリューションファイル <code>out/Debug/angle-debug.sln</code> を開いてください。</li><li>手動でビルドする場合は、コマンドラインから <code>autoninja</code> を使用することをお勧めします。</li><li>IDEからの &quot;Build Solution&quot; はGNで壊れています。IDEを使用して、1度に1つのターゲットまたは1つのファイルをビルドすることができます。</li></ol><p>ビルドが完了すると、すべてのANGLEライブラリ、テスト、およびサンプルは <code>out/Debug</code> に配置されます。</p><h3 id="angle-for-androidの構築" tabindex="-1">ANGLE for Androidの構築 <a class="header-anchor" href="#angle-for-androidの構築" aria-label="Permalink to &quot;ANGLE for Androidの構築&quot;">​</a></h3><p>Android専用のドキュメントをご覧ください。</p><h2 id="angleによるアプリケーション開発" tabindex="-1">ANGLEによるアプリケーション開発 <a class="header-anchor" href="#angleによるアプリケーション開発" aria-label="Permalink to &quot;ANGLEによるアプリケーション開発&quot;">​</a></h2><p>ここでは、ANGLEを使用してOpenGL ESアプリケーションを構築する方法について説明します。</p><h3 id="choosing-a-backend" tabindex="-1">Choosing a Backend <a class="header-anchor" href="#choosing-a-backend" aria-label="Permalink to &quot;Choosing a Backend&quot;">​</a></h3><p>ANGLEは、プラットフォームに応じて様々なバックレンダラを使用することができます。 Windowsでは、D3D11が利用可能な場合はD3D11が、そうでない場合はD3D9がデフォルトで使用されます。 その他のデスクトッププラットフォームでは、デフォルトでGLが使用されます。 モバイルでは、デフォルトでGLESが使用されます。</p><p>ANGLE は <code>EGL_ANGLE_platform_angle</code> という EGL 拡張を提供しています．この拡張は，EGL の初期化時に eglGetPlatformDisplayEXT を特別な enum と共に呼ぶことで，どのレンダラを使用するかを選択できるようにするものです．この拡張機能の詳細は <code>extensions/EGL_ANGLE_platform_angle.txt</code> と <code>extensions/EGL_ANGLE_platform_angle_*.txt</code> にある仕様書に記載されています。また、その使用例は ANGLE サンプルとテスト、特に <code>util/EGLWindow.cpp</code> で見ることができます。</p><p>デフォルトのD3Dバックエンドを変更する場合。</p><ol><li><code>src/libANGLE/renderer/d3d/DisplayD3D.cpp</code> を開いてください。</li><li>ファイルの先頭付近にある <code>ANGLE_DEFAULT_D3D11</code> の定義を見つけて、好みの設定にします。</li></ol><p>任意のバックエンドを完全に削除すること。</p><ol><li><code>gn args &lt;path/to/build/dir&gt;</code>を実行します</li><li>適切な変数に <code>false</code> を設定します。オプションは</li></ol><ul><li><code>angle_enable_d3d9</code></li><li><code>angle_enable_d3d11</code></li><li><code>angle_enable_gl</code></li><li><code>angle_enable_metal</code></li><li><code>angle_enable_null</code></li><li><code>angle_enable_vulkan</code></li><li><code>angle_enable_essl</code></li><li><code>angle_enable_glsl</code></li></ul><h3 id="アプリケーションでangleを使用するには" tabindex="-1">アプリケーションでANGLEを使用するには <a class="header-anchor" href="#アプリケーションでangleを使用するには" aria-label="Permalink to &quot;アプリケーションでANGLEを使用するには&quot;">​</a></h3><p>Windowsの場合。</p><ol><li>ビルド環境が <code>include</code> フォルダにアクセスできるように設定し、Khronosの標準的なEGLおよびGLES2ヘッダーファイルへのアクセスを提供します。</li></ol><ul><li>Visual C++の場合 <ul><li>_ソリューションエクスプローラー_でプロジェクトを右クリックし、_プロパティ_を選択します。</li><li>_構成のプロパティ_の分岐で、「<em>C/C++</em>」をクリックします。</li><li>Khronos EGLおよびGLES2ヘッダーファイルへの相対パスを_Additional Include Directories_に追加。</li></ul></li></ul><ol start="2"><li>ビルド出力ディレクトリにある <code>libEGL.lib</code> と <code>libGLESv2.lib</code> にアクセスできるようにビルド環境を設定する（<a href="#building-with-visual-studio">ANGLEのビルド</a> を参照）。</li></ol><ul><li>For Visual C++ <ul><li>_ソリューションエクスプローラー_でプロジェクトを右クリックし、_プロパティ_を選択します。</li><li>_構成のプロパティ_の分岐で、_Linker_の分岐を開き、_Input_をクリックします。</li><li>追加の依存関係_ に <code>libEGL.lib</code> ファイルと <code>libGLESv2.lib</code> ファイルの両方をセミコロンで区切って相対パスで追加します。</li></ul></li></ul><ol start="3"><li>ビルド出力ディレクトリにある <code>libEGL.dll</code> と <code>libGLESv2.dll</code> をアプリケーションフォルダにコピーします（<a href="#building-with-visual-studio">ANGLEのビルド</a> を参照）。</li><li>アプリケーションは、Khronos <a href="http://www.khronos.org/registry/gles/" target="_blank" rel="noreferrer">OpenGL ES 2.0</a> および <a href="http://www.khronos.org/registry/egl/" target="_blank" rel="noreferrer">EGL 1.4</a> のAPIに準拠してコーディングしてください。</li></ol><p>LinuxとMacOSの場合, 各々:</p><ul><li>アプリケーションを <code>libGLESv2</code> と <code>libEGL</code> に対してリンクする。</li><li>OpenGL ESとEGLのエントリーポイントをランタイムにロードするには、<code>dlopen</code>を使用します。</li></ul><h2 id="glsl-es-トランスレータ" tabindex="-1">GLSL ES トランスレータ <a class="header-anchor" href="#glsl-es-トランスレータ" aria-label="Permalink to &quot;GLSL ES トランスレータ&quot;">​</a></h2><p>OpenGL ESとEGLのライブラリに加え、ANGLEはGLSL ESのトランスレータも提供しています。このトランスレータは、HLSL、デスクトップおよびモバイル用のGLSL、SPIR-VおよびMetal SLなど、さまざまなバックエンドをターゲットにしています。トランスレータをビルドするには、<code>angle_shader_translator</code> ターゲットをビルドします。使用法のメッセージを見るには、引数なしでトランスレータのバイナリを実行してください。</p><h3 id="ソースとビルディング" tabindex="-1">ソースとビルディング <a class="header-anchor" href="#ソースとビルディング" aria-label="Permalink to &quot;ソースとビルディング&quot;">​</a></h3><p>トランスレータのコードは ANGLE に含まれていますが、完全に独立しており、[<code>src/compiler</code>] (../src/compiler) にあります。上記の <a href="#getting-the-source">ANGLE の入手とビルド</a> の手順に従って、好きなプラットフォームでトランスレータをビルドしてください。</p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><p>ANGLE <a href="./../samples/shader_translator/shader_translator.cpp.html"><code>shader_translator</code></a> サンプルは、C++ API の基本的な使い方をデモしています。GLSL ES シェーダを変換するには、以下の関数を同じ順序で呼び出します。</p><ul><li><code>sh::Initialize()</code> トランスレータを使用する各プロセスから一度だけ呼び出される必要があります。</li><li><code>sh::ContructCompiler()</code> バーテックスまたはフラグメントシェーダ用のトランスレータオブジェクトを作成します。</li><li><code>sh::Compile()</code> は与えられたシェーダーを変換します。</li><li><code>sh::Destruct()</code> は、指定されたトランスレータを破棄します。</li><li><code>sh::Finalize()</code> トランスレータを使用している各プロセスから一度だけ呼び出す必要があります。</li></ul>`,69)]))}const h=a(n,[["render",s]]);export{g as __pageData,h as default};
