import{_ as a,c as o,a2 as d,o as l}from"./chunks/framework.CuCbyi2k.js";const h=JSON.parse('{"title":"拡張機能","description":"","frontmatter":{},"headers":[],"relativePath":"resource/luajit/extensions.md","filePath":"resource/luajit/extensions.md","lastUpdated":1729914702000}'),i={name:"resource/luajit/extensions.md"};function t(c,e,u,r,n,s){return l(),o("div",null,e[0]||(e[0]=[d('<h1 id="拡張機能" tabindex="-1">拡張機能 <a class="header-anchor" href="#拡張機能" aria-label="Permalink to &quot;拡張機能&quot;">​</a></h1><blockquote><p>このドキュメントはLuaJIT 2.1用です。バージョン固有のドキュメントについては、各gitブランチのdocディレクトリを確認してください。</p></blockquote><p>LuaJITはLua 5.1と完全に上位互換性があります。すべての標準Luaライブラリ関数とLua/C API関数のフルセットをサポートしています。</p><p>LuaJITは、リンカー/動的ローダーレベルでLua 5.1とも完全にABI互換性があります。これは、標準のLuaヘッダーに対してCモジュールをコンパイルし、LuaまたはLuaJITから同じ共有ライブラリをロードできることを意味します。</p><p>LuaJITは標準のLua VMに新しい機能を拡張し、いくつかの拡張モジュールを追加しています。このページは機能拡張についてのみであり、最適化されたVM、より高速なインタプリタ、またはJITコンパイラなどのパフォーマンス向上については扱っていません。</p><h2 id="拡張モジュール" tabindex="-1">拡張モジュール <a class="header-anchor" href="#拡張モジュール" aria-label="Permalink to &quot;拡張モジュール&quot;">​</a></h2><p>LuaJITにはいくつかの組み込みの拡張モジュールがあります：</p><h3 id="bit-—-ビット単位の操作" tabindex="-1">bit.* — ビット単位の操作 <a class="header-anchor" href="#bit-—-ビット単位の操作" aria-label="Permalink to &quot;bit.* — ビット単位の操作&quot;">​</a></h3><p>LuaJITはLua BitOpで定義されているすべてのビット単位の操作をサポートしています：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bit.tobit  bit.tohex  bit.bnot    bit.band bit.bor  bit.bxor</span></span>\n<span class="line"><span>bit.lshift bit.rshift bit.arshift bit.rol  bit.ror  bit.bswap</span></span></code></pre></div><p>このモジュールはLuaJITの組み込みであり、Lua BitOpをダウンロードまたはインストールする必要はありません。Lua BitOpサイトには、すべてのLua BitOp API関数の完全なドキュメントがあります。FFIは同じAPI関数を使用して64ビットのビット単位の操作をサポートします。</p><p>モジュールを使用する前にrequireしてください：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>既にインストールされているLua BitOpモジュールはLuaJITによって無視されます。この方法で、共有インストールからLuaとLuaJITの両方でビット操作を使用できます。</p><h3 id="ffi-—-ffiライブラリ" tabindex="-1">ffi.* — FFIライブラリ <a class="header-anchor" href="#ffi-—-ffiライブラリ" aria-label="Permalink to &quot;ffi.* — FFIライブラリ&quot;">​</a></h3><p>FFIライブラリを使用すると、純粋なLuaコードから外部C関数を呼び出したり、Cデータ構造を使用したりできます。</p><h3 id="jit-—-jitコンパイラ制御" tabindex="-1">jit.* — JITコンパイラ制御 <a class="header-anchor" href="#jit-—-jitコンパイラ制御" aria-label="Permalink to &quot;jit.* — JITコンパイラ制御&quot;">​</a></h3><p>このモジュールの関数は、JITコンパイラエンジンの動作を制御します。</p><h3 id="c-apiの拡張" tabindex="-1">C APIの拡張 <a class="header-anchor" href="#c-apiの拡張" aria-label="Permalink to &quot;C APIの拡張&quot;">​</a></h3><p>LuaJITはLua/C APIにいくつかの追加関数を追加します。</p><h3 id="プロファイラ" tabindex="-1">プロファイラ <a class="header-anchor" href="#プロファイラ" aria-label="Permalink to &quot;プロファイラ&quot;">​</a></h3><p>LuaJITには統合プロファイラがあります。</p><h2 id="標準ライブラリ関数の強化" tabindex="-1">標準ライブラリ関数の強化 <a class="header-anchor" href="#標準ライブラリ関数の強化" aria-label="Permalink to &quot;標準ライブラリ関数の強化&quot;">​</a></h2><h3 id="xpcall-f-err-args-は引数を渡します" tabindex="-1"><code>xpcall(f, err [,args...])</code> は引数を渡します <a class="header-anchor" href="#xpcall-f-err-args-は引数を渡します" aria-label="Permalink to &quot;`xpcall(f, err [,args...])` は引数を渡します&quot;">​</a></h3><p>Lua 5.1の標準実装とは異なり、<code>xpcall()</code>はエラー関数の後に任意の引数を保護されたコンテキストで呼び出される関数に渡します。</p><h3 id="load-はutf-8ソースコードを処理します" tabindex="-1">load*() はUTF-8ソースコードを処理します <a class="header-anchor" href="#load-はutf-8ソースコードを処理します" aria-label="Permalink to &quot;load*() はUTF-8ソースコードを処理します&quot;">​</a></h3><p>非ASCII文字はLuaソースコードパーサーによって透過的に処理されます。これにより、識別子や文字列内にUTF-8文字を使用できます。UTF-8のBOMはソースコードの開始時にスキップされます。</p><h3 id="load-にモードパラメータを追加します" tabindex="-1">load*() にモードパラメータを追加します <a class="header-anchor" href="#load-にモードパラメータを追加します" aria-label="Permalink to &quot;load*() にモードパラメータを追加します&quot;">​</a></h3><p>Lua 5.2からの拡張として、関数<code>loadstring()</code>、<code>loadfile()</code>、および（新しい）<code>load()</code>はオプションのモードパラメータを追加します。</p><p>デフォルトのモード文字列は&quot;bt&quot;で、ソースコードとバイトコードの両方のロードを許可します。&quot;t&quot;を使用してソースコードのみを許可し、&quot;b&quot;を使用してバイトコードのみを許可します。</p><p>デフォルトでは、<code>load*</code>関数はネイティブなバイトコード形式を生成します。クロスコンパイルの目的で、モード文字列にWを追加して32ビット形式を強制し、Xを追加して64ビット形式を強制します。両方を追加して反対の形式を強制します。<code>load*</code>によって生成された非ネイティブなバイトコードは実行できませんが、<code>string.dump</code>へ渡すことはできます。</p><h3 id="tostring-などはnanと±infを正規化します" tabindex="-1"><code>tostring()</code>などはNaNと±Infを正規化します <a class="header-anchor" href="#tostring-などはnanと±infを正規化します" aria-label="Permalink to &quot;`tostring()`などはNaNと±Infを正規化します&quot;">​</a></h3><p>すべての数値から文字列への変換は、非有限数をすべてのプラットフォームで同じ文字列に一貫して変換します。NaNは&quot;nan&quot;となり、正の無限大は&quot;inf&quot;となり、負の無限大は&quot;-inf&quot;となります。</p><h3 id="tonumber-などは組み込みの文字列から数値への変換を使用します" tabindex="-1"><code>tonumber()</code>などは組み込みの文字列から数値への変換を使用します <a class="header-anchor" href="#tonumber-などは組み込みの文字列から数値への変換を使用します" aria-label="Permalink to &quot;`tonumber()`などは組み込みの文字列から数値への変換を使用します&quot;">​</a></h3><p>すべての文字列から数値への変換は、10進数、16進数、および2進数の整数および浮動小数点入力をすべてのプラットフォームで一貫して変換します。<code>strtod()</code>はもはや使用されず、Cライブラリの実装が不十分である多数の問題を回避します。組み込みの変換関数はIEEE-754標準に従って完全な精度を提供し、現在のロケールに依存せず、16進浮動小数点数（例：0x1.5p-3）をサポートします。</p><h3 id="string-dump-f-mode-は移植可能なバイトコードを生成します" tabindex="-1"><code>string.dump(f [,mode])</code> は移植可能なバイトコードを生成します <a class="header-anchor" href="#string-dump-f-mode-は移植可能なバイトコードを生成します" aria-label="Permalink to &quot;`string.dump(f [,mode])` は移植可能なバイトコードを生成します&quot;">​</a></h3><p><code>string.dump()</code>には追加の引数が追加されました。これがtrueまたは文字sを含む文字列に設定されている場合、デバッグ情報のない「削除された」バイトコードが生成されます。これにより、後のバイトコードのローディングが速くなり、メモリ使用量が減少します。コマンドラインオプションの<code>-b</code>も参照してください。</p><p>生成されたバイトコードは移植可能であり、LuaJITがサポートする任意のアーキテクチャでロードすることができます。ただし、バイトコードの互換性バージョンは一致している必要があります。バイトコードはメジャー+マイナーバージョン内でのみ互換性が保たれます（x.y.aaa → x.y.bbb）、開発ブランチを除く。外部のバイトコード（例えばLua 5.1からのもの）は互換性がなく、ロードすることはできません。</p><p>注意：LJ_GC64モードは異なるフレームレイアウトを必要とし、これは32ビットと64ビットのポート間で異なる、互換性のないバイトコード形式を意味します。これは将来修正されるかもしれません。その間は、クロスコンパイルの目的でload*関数のWおよびXモードを使用してください。</p><p>VMの強化により、バイトコードは決定的ではありません。同一のソースコードから常にバイト単位で同一のバイトコードダンプを得るために、モード文字列にdを追加して決定的な方法でダンプします。この機能は、再現可能なビルドに主に役立ちます。</p><h3 id="table-new-narray-nhash-は事前サイズ指定されたテーブルを割り当てます" tabindex="-1">table.new(narray, nhash) は事前サイズ指定されたテーブルを割り当てます <a class="header-anchor" href="#table-new-narray-nhash-は事前サイズ指定されたテーブルを割り当てます" aria-label="Permalink to &quot;table.new(narray, nhash) は事前サイズ指定されたテーブルを割り当てます&quot;">​</a></h3><p>追加のライブラリ関数<code>table.new()</code>は<code>require(&quot;table.new&quot;)</code>を通じて利用可能にすることができます。これはC APIの同等物である<code>lua_createtable()</code>のように、事前サイズ指定されたテーブルを作成します。これは、最終的なテーブルサイズがわかっていて、自動テーブルリサイズが高価すぎる場合に大きなテーブルに役立ちます。</p><h3 id="table-clear-tab-はテーブルをクリアします" tabindex="-1">table.clear(tab) はテーブルをクリアします <a class="header-anchor" href="#table-clear-tab-はテーブルをクリアします" aria-label="Permalink to &quot;table.clear(tab) はテーブルをクリアします&quot;">​</a></h3><p>追加のライブラリ関数<code>table.clear()</code>は<code>require(&quot;table.clear&quot;)</code>を通じて利用可能にすることができます。これはテーブルからすべてのキーと値をクリアしますが、割り当てられた配列/ハッシュのサイズは保持します。これは、複数の場所からリンクされているテーブルをクリアする必要がある場合や、同じコンテキストで使用するためにテーブルをリサイクルする場合に便利です。これにより、バックリンクの管理が不要となり、割り当てと増分配列/ハッシュ部分の成長のオーバーヘッドが節約されます。</p><p>この関数は非常に特定の状況を対象としています。ほとんどの場合、（通常は単一の）リンクを新しいテーブルに置き換え、GCに作業を任せる方がよいでしょう。</p><h3 id="math-random-のための強化されたprng" tabindex="-1">math.random()のための強化されたPRNG <a class="header-anchor" href="#math-random-のための強化されたprng" aria-label="Permalink to &quot;math.random()のための強化されたPRNG&quot;">​</a></h3><p>LuaJITは、Tausworthe PRNGを使用して<code>math.random()</code>と<code>math.randomseed()</code>を実装しており、その周期は2^223です。このPRNGの結果の品質は、プラットフォーム固有のANSI <code>rand()</code>を使用する標準のLua実装と比較して大幅に優れています。</p><p>PRNGは、すべてのプラットフォームで同じシードから同じシーケンスを生成し、シード引数のすべてのビットを使用します。引数なしで<code>math.random()</code>を呼び出すと、各呼び出しで52ビットの疑似ランダムビットを生成します。結果は0.0から1.0の間で均一に分布しています。<code>math.random(n [,m])</code>用に正確にスケールアップされ、均一性を保つために丸められます。</p><p>重要：これを含む、単純な<code>math.random()</code> APIに基づく他のPRNGも、暗号利用には適していません。</p><h3 id="io-関数は64ビットファイルオフセットを扱う" tabindex="-1">io.*関数は64ビットファイルオフセットを扱う <a class="header-anchor" href="#io-関数は64ビットファイルオフセットを扱う" aria-label="Permalink to &quot;io.*関数は64ビットファイルオフセットを扱う&quot;">​</a></h3><p>標準のio.*ライブラリ内のファイルI/O関数は64ビットファイルオフセットを扱います。特に、2ギガバイトを超えるファイルを開くことが可能であり、2 GBを超えるオフセットに対して現在のファイル位置を再配置または取得することが可能です（<code>fp:seek()</code>メソッド）。</p><h3 id="debug-関数はメタメソッドを識別する" tabindex="-1">debug.*関数はメタメソッドを識別する <a class="header-anchor" href="#debug-関数はメタメソッドを識別する" aria-label="Permalink to &quot;debug.*関数はメタメソッドを識別する&quot;">​</a></h3><p><code>debug.getinfo()</code>および<code>lua_getinfo()</code>は、呼び出されたメタメソッドに関する情報も返します。<code>namewhat</code>フィールドは&quot;metamethod&quot;に設定され、<code>name</code>フィールドには対応するメタメソッドの名前（例：<code>&quot;__index&quot;</code>）が設定されます。</p><h2 id="完全に再開可能なvm" tabindex="-1">完全に再開可能なVM <a class="header-anchor" href="#完全に再開可能なvm" aria-label="Permalink to &quot;完全に再開可能なVM&quot;">​</a></h2><p>LuaJIT VMは完全に再開可能です。これは、標準のLua 5.1 VMでは不可能なコンテキストを超えてコルーチンからyieldできることを意味します：例えば、<code>pcall()</code>や<code>xpcall()</code>を超えて、イテレーターやメタメソッドを超えてyieldすることができます。</p><h2 id="lua-5-2からの拡張機能" tabindex="-1">Lua 5.2からの拡張機能 <a class="header-anchor" href="#lua-5-2からの拡張機能" aria-label="Permalink to &quot;Lua 5.2からの拡張機能&quot;">​</a></h2><p>LuaJITはLua 5.2からのいくつかの言語とライブラリの拡張をサポートしています。既存のコードを壊す可能性が低い機能は無条件に有効になっています：</p><ul><li><code>goto</code>と<code>::labels::</code>。</li><li>文字列内の16進エスケープ<code>\\x3F</code>と<code>\\z</code>エスケープ。</li><li><code>load(string|reader [, chunkname [,mode [,env]]])</code>。</li><li><code>loadstring()</code>は<code>load()</code>のエイリアスです。</li><li><code>loadfile(filename [,mode [,env]])</code>。</li><li><code>math.log(x [,base])</code>。</li><li><code>string.rep(s, n [,sep])</code>。</li><li><code>string.format()</code>：<code>%q</code>が逆変換可能。<code>%s</code>は<code>__tostring</code>をチェック。<code>%a</code>と<code>%A</code>が追加された。</li><li>文字列マッチングパターン<code>%g</code>が追加された。</li><li><code>io.read(&quot;*L&quot;)</code>。</li><li><code>io.lines()</code>と<code>file:lines()</code>は<code>io.read()</code>のオプションを処理する。</li><li><code>os.exit(status|true|false [,close])</code>。</li><li><code>package.searchpath(name, path [, sep [, rep]])</code>。</li><li><code>package.loadlib(name, &quot;*&quot;)</code>。</li><li><code>debug.getinfo()</code>はオプション&quot;u&quot;に対して<code>nparams</code>と<code>isvararg</code>を返す。</li><li><code>debug.getlocal()</code>はレベルではなく関数を受け入れる。</li><li><code>debug.getlocal()</code>と<code>debug.setlocal()</code>は可変引数に対して負のインデックスを受け入れる。</li><li><code>debug.getupvalue()</code>と<code>debug.setupvalue()</code>はC関数を扱う。</li><li><code>debug.upvalueid()</code>と<code>debug.upvaluejoin()</code>。</li><li>Lua/C APIの拡張：<code>lua_version()</code> <code>lua_upvalueid()</code> <code>lua_upvaluejoin()</code> <code>lua_loadx()</code> <code>lua_copy()</code> <code>lua_tonumberx()</code> <code>lua_tointegerx()</code> <code>luaL_fileresult()</code> <code>luaL_execresult()</code> <code>luaL_loadfilex()</code> <code>luaL_loadbufferx()</code> <code>luaL_traceback()</code> <code>luaL_setfuncs()</code> <code>luaL_pushmodule()</code> <code>luaL_newlibtable()</code> <code>luaL_newlib()</code> <code>luaL_testudata()</code> <code>luaL_setmetatable()</code></li><li>コマンドラインオプション<code>-E</code>。</li><li>コマンドラインはエラーに対して<code>__tostring</code>をチェックする。</li></ul><p>他の機能は、LuaJITが<code>-DLUAJIT_ENABLE_LUA52COMPAT</code>でビルドされている場合にのみ有効にされます：</p><ul><li><code>goto</code>はキーワードになり、もはや有効な変数名ではありません。</li><li><code>break</code>はどこにでも配置できます。空のステートメント（<code>;;</code>）が許可されます。</li><li>異なるタイプの場合は<code>__lt</code>、<code>__le</code>が呼び出されます。</li><li>テーブルのための<code>__len</code>。<code>rawlen()</code>ライブラリ関数。</li><li><code>pairs()</code>と<code>ipairs()</code>は<code>__pairs</code>と<code>__ipairs</code>をチェックする。</li><li><code>coroutine.running()</code>は2つの結果を返す。</li><li><code>table.pack()</code>と<code>table.unpack()</code>（<code>unpack()</code>と同じ）。</li><li><code>io.write()</code>と<code>file:write()</code>はtrueではなくファイルハンドルを返す。</li><li><code>os.execute()</code>と<code>pipe:close()</code>は詳細な終了ステータスを返す。</li><li><code>debug.setmetatable()</code>はオブジェクトを返す。</li><li><code>debug.getuservalue()</code>と<code>debug.setuservalue()</code>。</li><li><code>math.mod()</code>、<code>string.gfind()</code>を削除。</li><li><code>package.searchers</code>。</li><li><code>module()</code>はモジュールテーブルを返す。</li></ul><div class="info custom-block"><p class="custom-block-title">注意</p><p>これは、言語とLuaライブラリレベルでLua 5.2との部分的な互換性のみを提供します。LuaJITはLua 5.1とAPI+ABI互換性があり、それによりLua/C APIとABIを壊す可能性のある機能（例：<code>_ENV</code>）の実装が防がれます。</p></div><h2 id="lua-5-3からの拡張機能" tabindex="-1">Lua 5.3からの拡張機能 <a class="header-anchor" href="#lua-5-3からの拡張機能" aria-label="Permalink to &quot;Lua 5.3からの拡張機能&quot;">​</a></h2><p>LuaJITはLua 5.3からのいくつかの拡張をサポートしています：</p><ul><li>ユニコードエスケープ<code>\\u{XX...}</code>は、文字列リテラル内にUTF-8エンコーディングを埋め込みます。</li><li>引数テーブル<code>arg</code>は、LUA_INITおよび-eチャンクによって読み取り（および変更）することができます。</li><li><code>io.read()</code>および<code>file:read()</code>は、先頭に*があるかないかにかかわらずフォーマットを受け入れます。</li><li><code>assert()</code>は任意のタイプのエラーオブジェクトを受け入れます。</li><li><code>table.move(a1, f, e, t [,a2])</code>。</li><li><code>coroutine.isyieldable()</code>。</li><li>Lua/C APIの拡張：<code>lua_isyieldable()</code></li></ul><h2 id="c-例外との相互運用" tabindex="-1">C++例外との相互運用 <a class="header-anchor" href="#c-例外との相互運用" aria-label="Permalink to &quot;C++例外との相互運用&quot;">​</a></h2><p>LuaJITには、C++の例外との相互運用をサポートする組み込みの機能があります。利用可能な機能の範囲は、ターゲットプラットフォームとLuaJITのコンパイルに使用されるツールチェーンに依存します：</p><table tabindex="0"><thead><tr><th>プラットフォーム</th><th>コンパイラ</th><th>相互運用性</th></tr></thead><tbody><tr><td>外部フレームアンワインディング</td><td>GCC, Clang, MSVC</td><td>完全</td></tr><tr><td>内部フレームアンワインディング + DWARF2</td><td>GCC, Clang</td><td>限定</td></tr><tr><td>Windows 64ビット</td><td>非MSVC</td><td>限定</td></tr><tr><td>その他のプラットフォーム</td><td>その他のコンパイラ</td><td>なし</td></tr></tbody></table><p>完全な相互運用性とは：</p><ul><li>C++の例外は、<code>pcall()</code>、<code>lua_pcall()</code>などのLua側でキャッチできます。</li><li>C++の例外は、「C++例外」という一般的なLuaエラーに変換されますが、C呼び出しラッパー機能を使用しない限りです。</li><li>非保護Luaフレームを介してC++の例外をスローすることは安全です。C++例外オブジェクトの内容は変更されません。</li><li>LuaエラーはC++側で<code>catch(...)</code>によってキャッチできます。対応するLuaエラーメッセージはLuaスタックから取得できます。</li><li>C++フレームを超えてLuaエラーをスローすることは安全です。C++のデストラクタは呼ばれます。</li></ul><p>限定的な相互運用性とは：</p><ul><li>C++の例外は、<code>pcall()</code>、<code>lua_pcall()</code>などのLua側でキャッチできます。</li><li>C++の例外は、「C++例外」という一般的なLuaエラーに変換されますが、C呼び出しラッパー機能を使用しない限りです。</li><li>C++の例外は非保護Luaフレームによってキャッチされ、一般的なLuaエラーとして再スローされます。C++例外オブジェクトは破棄されます。</li><li>C++側でLuaのエラーをキャッチすることはできません。</li><li>C++のフレームを超えてLuaのエラーをスローすると、C++のデストラクタは呼び出されません。</li></ul><p>相互運用性がないということは：</p><ul><li>Luaのフレームを超えてC++の例外をスローすることは安全ではありません。</li><li>C++の例外はLua側でキャッチすることができません。</li><li>LuaのエラーをC++側でキャッチすることはできません。</li><li>C++のフレームを超えてLuaのエラーをスローすると、C++のデストラクタは呼び出されません。</li></ul>',73)]))}const b=a(i,[["render",t]]);export{h as __pageData,b as default};
