import{_ as i,c as o,a2 as r,o as f}from"./chunks/framework.CKGreiRV.js";const w=JSON.parse('{"title":"バージョン互換性","description":"","frontmatter":{},"headers":[],"relativePath":"resource/swift/compatibility.md","filePath":"resource/swift/compatibility.md","lastUpdated":null}'),s={name:"resource/swift/compatibility.md"};function e(n,t,l,a,p,S){return f(),o("div",null,t[0]||(t[0]=[r('<h1 id="バージョン互換性" tabindex="-1">バージョン互換性 <a class="header-anchor" href="#バージョン互換性" aria-label="Permalink to &quot;バージョン互換性&quot;">​</a></h1><p><strong>旧バージョンの言語モードで利用可能な機能について学びましょう。</strong></p><p>この書籍は<strong>Swift 6</strong>を説明しています。Swift 6は<strong>Xcode 16</strong>に含まれるデフォルトのバージョンです。Swift 6コンパイラを使用して、Swift 6、Swift 5、Swift 4.2、およびSwift 4で書かれたコードをビルドできます。</p><p>Swift 6コンパイラを使用してSwift 5言語モードのコードをビルドする場合、Swift 6の新機能を利用できます。これらの機能はデフォルトで有効になるか、今後追加される機能フラグによって有効化されます。ただし、<strong>厳密な並行性チェック</strong>を有効にするには、Swift 6言語モードにアップグレードする必要があります。</p><p>また、Xcode 15.3を使用してSwift 4およびSwift 4.2のコードをビルドする場合でも、ほとんどのSwift 5の機能が利用可能です。ただし、次の変更は<strong>Swift 5言語モード</strong>を使用するコードのみで利用できます：</p><ul><li><strong>不透明型を返す関数</strong>はSwift 5.1ランタイムが必要です。</li><li><strong>try? 式</strong>は、すでにオプショナルを返す式に対して追加のオプショナルレベルを導入しません。</li><li><strong>大きな整数リテラルの初期化式</strong>は、正しい整数型として推論されます。例えば、<code>UInt64(0xffff_ffff_ffff_ffff)</code> はオーバーフローせずに正しい値として評価されます。</li></ul><p><strong>並行性</strong>はSwift 5言語モードと、それに対応する並行性型を提供するSwift標準ライブラリのバージョンが必要です。Appleプラットフォームでは、少なくとも次のデプロイターゲットが必要です：</p><ul><li>iOS 13</li><li>macOS 10.15</li><li>tvOS 13</li><li>watchOS 6</li><li>visionOS 1</li></ul><p>Swift 6で書かれたターゲットは、Swift 5、Swift 4.2、またはSwift 4で書かれたターゲットに依存できますし、その逆も可能です。つまり、複数のフレームワークに分かれた大規模なプロジェクトの場合、コードを新しい言語バージョンに<strong>1つのフレームワークごと</strong>に移行できます。</p>',9)]))}const g=i(s,[["render",e]]);export{w as __pageData,g as default};
