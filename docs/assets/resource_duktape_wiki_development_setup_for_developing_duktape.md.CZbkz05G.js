import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.CuCbyi2k.js";const o=JSON.parse('{"title":"開発セットアップ","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/wiki/development_setup_for_developing_duktape.md","filePath":"resource/duktape/wiki/development_setup_for_developing_duktape.md","lastUpdated":1732350347000}'),e={name:"resource/duktape/wiki/development_setup_for_developing_duktape.md"};function p(l,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="開発セットアップ" tabindex="-1">開発セットアップ <a class="header-anchor" href="#開発セットアップ" aria-label="Permalink to &quot;開発セットアップ&quot;">​</a></h1><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p>ほとんどのアプリケーション・コードは、Duktapeのソースとヘッダーをアプリケーションのビルドに含める以外に特別な開発設定をすることなく、直接使用できるビルド済みdistパッケージを使用する必要があります。以下のようなビルド済み dist パッケージがあります。</p><ul><li>公式リリース: <a href="http://duktape.org/download.html" target="_blank" rel="noreferrer">http://duktape.org/download.html</a></li><li>マスターからのスナップショット: <a href="http://duktape.org/snapshots/" target="_blank" rel="noreferrer">http://duktape.org/snapshots/</a></li></ul><p>Duktapeの内部を変更する必要がある場合があります。例えば、Duktapeのプライベートフォークを特定のターゲットに使用することがあります。その場合、アプリケーションのビルドに &quot;make dist&quot; のステップを含める必要があるかもしれません。あるいは、ただ単に内部を少しハックして何が起こるか見てみたいだけかもしれません。</p><p>この文書では、distパッケージ（Linux、Windows、OS X）を作成し、DuktapeのトップレベルのMakefile（Linuxのみ）を使用するための要件を説明しています。</p><h2 id="dist-パッケージを作成するための最小限のセットアップ" tabindex="-1">dist パッケージを作成するための最小限のセットアップ <a class="header-anchor" href="#dist-パッケージを作成するための最小限のセットアップ" aria-label="Permalink to &quot;dist パッケージを作成するための最小限のセットアップ&quot;">​</a></h2><p>dist パッケージを作成するために最低限必要なものは以下の通りです。</p><ul><li><a href="https://github.com/svaarala/duktape" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape</a> またはフォークをチェックアウトしている。</li><li>Python 2 と PyYAML、dist ツールに必要です。</li></ul><p>以下はオプションですが、便利です。</p><ul><li>&quot;git describe&quot; や他のバージョンのメタデータを取得するために使用する Git コマンドラインツール。</li><li>Duktape 1.x: ビルドに埋め込まれたいくつかのECMAScriptコード用のminifier（ClosureまたはUglifyJS2）。この依存関係は、Duktape 2.xで取り除かれました。</li></ul><p>Duktapeのソースやメタデータなどに変更を加えた後。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use --help for option help.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> util/make_dist.py</span></span></code></pre></div><p>これは、duktape-1.4.0.tar.xz のようなビルド済みの dist パッケージと同じ内容の dist ディレクトリを作成します。いくつか注意点があります。</p><ul><li>依存関係を最小にするために、dist tar パッケージ自体は自動的には作成されません。</li><li>Git がインストールされていない場合は、コマンドラインオプションでバージョン関連の情報を与えることができますので、参照してください。$ python util/make_dist.py --help.</li><li>git cloneの代わりに、コマンドラインオプションにgitのバージョンメタデータを指定すれば、バージョン管理されていないスナップショットディレクトリを使用することもできます。</li><li>オプションのminifierは、Duktape 1.xでは、Duktapeビルドに埋め込まれる非常に小さなECMAScript初期化スクリプト（src/duk_initjs.js）に使用されます。もし、-minifyでminifierを提供しない場合、スクリプトはminifyされません。フットプリントへの影響は非常に小さく、約500バイトです。Duktape 2.xでは、この初期化スクリプトを埋め込まないため、minifierは必要ありません。</li></ul><p>distパッケージの作成は、プライベートフォークを効率的に扱うために必要な最小限のステップです。そのため、distプロセスは非常に移植性が高く、少なくともLinux、Windows（Cygwinあり/なし）、OS Xで動作するはずで、Python 2とPyYAML以上の必須の依存関係はほとんどありません。トップレベルの Makefile は dist パッケージの作成には使われないし、必要とされないので、&quot;make&quot; があることは必須ではないことに注意してください。</p><h2 id="手動でdistパッケージを作成する場合" tabindex="-1">手動でdistパッケージを作成する場合 <a class="header-anchor" href="#手動でdistパッケージを作成する場合" aria-label="Permalink to &quot;手動でdistパッケージを作成する場合&quot;">​</a></h2><p>dist パッケージを作りたいとき。</p><ul><li>Duktapeのソースコードを修正したり、プライベートフォークから作業する。</li><li>作業中のブランチから dist パッケージを作成する。</li><li>デフォルトの dist パッケージでは有効になっていない ROM ビルトインサポートのような、よりエキゾチックなオプションを有効にする。</li></ul><h2 id="その他の開発ステップ-linuxのみ" tabindex="-1">その他の開発ステップ（Linuxのみ） <a class="header-anchor" href="#その他の開発ステップ-linuxのみ" aria-label="Permalink to &quot;その他の開発ステップ（Linuxのみ）&quot;">​</a></h2><p>ウェブサイトの構築やテストケースの実行など、その他の開発に関することは、Linuxのみを対象としたMakefileがベースになっています。Makefileを使用する基本的な手順は以下の通りです。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 必要なパッケージのインストール (正確なパッケージはディストリビューションに依存します)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodejs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodejs-legacy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> perl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ant</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openjdk-7-jdk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      libreadline6-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libncurses-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-rdflib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-bs4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      clang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> llvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># コマンドラインツール(&#39;duk&#39;)のコンパイル</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/svaarala/duktape.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> duktape</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dukweb.jsのビルドやEmscriptenターゲットの実行には、Emscripten fastcompを手動で設定する必要があります。ステップバイステップの手順は、doc/emscripten-status.rstを参照してください。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ECMAScript と API のテストケース、およびその他のテストの実行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ecmatest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apitest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> regfuzztest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> underscoretest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # see doc/underscore-status.rst</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test262test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # see doc/test262-status.rst</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emscriptentest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # see doc/emscripten-status.rst</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emscriptenmandelbrottest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # run Emscripten-compiled mandelbrot.c with Duktape</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emscripteninceptiontest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # run Emscripten-compiled Duktape with Duktape</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsinterpretertest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luajstest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dukwebtest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # then browse to file:///tmp/dukweb-test/dukweb.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmldoctest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bluebirdtest</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># etc</span></span></code></pre></div><p>OSX や Windows (Cygwin を使用) でも Makefile を動作させることは可能ですが、現時点ではサポートされていません。Makefile のターゲットには (いくつかの API テストケースなど) Linux 固有の仮定があります (例: /tmp/ が存在すること)。</p><h2 id="platform-notes" tabindex="-1">Platform notes <a class="header-anchor" href="#platform-notes" aria-label="Permalink to &quot;Platform notes&quot;">​</a></h2><h3 id="ubuntu-debian-etc" tabindex="-1">Ubuntu, Debian, etc <a class="header-anchor" href="#ubuntu-debian-etc" aria-label="Permalink to &quot;Ubuntu, Debian, etc&quot;">​</a></h3><p>make_dist.pyに対応するため。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Linuxでは、多くの場合、パッケージからインストールするか、&#39;pip&#39;を使用してインストールすることができます。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> util/make_dist.py</span></span></code></pre></div><p>テストケースの実行などは、上記の「その他の開発手順（Linuxのみ）」をご覧ください。</p><h3 id="archlinux" tabindex="-1">ArchLinux <a class="header-anchor" href="#archlinux" aria-label="Permalink to &quot;ArchLinux&quot;">​</a></h3><p>必要なPythonのパッケージをインストールします。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># python2-beautifulsoup4 と python2-rdflib は plain dist では必要ありません。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --needed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python2-beautifulsoup4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python2-rdflib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python2-yaml</span></span></code></pre></div><p>テストケースなどを実行する場合は、Node.jsのフィックスアップが必要になる場合があります。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/nodejs</span></span></code></pre></div><p>その他の開発基礎は、distパッケージのビルドには必要ないはずです。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --needed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> llvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bc</span></span></code></pre></div><p>Based on:</p><ul><li><a href="https://github.com/svaarala/duktape/issues/466" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/issues/466</a></li></ul><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>; Install Python 2.7.x from python.org, and add it to PATH</span></span>
<span class="line"><span>&gt; pip install PyYAML</span></span>
<span class="line"><span>&gt; python util\\make_dist.py</span></span></code></pre></div><p>OS X</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install Python 2.7.x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PyYAML</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> util/make_dist.py</span></span></code></pre></div>`,41)]))}const g=i(e,[["render",p]]);export{o as __pageData,g as default};
