import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.6x3wfQve.js";const c=JSON.parse('{"title":"インストール","description":"","frontmatter":{},"headers":[],"relativePath":"resource/luajit/installation.md","filePath":"resource/luajit/installation.md","lastUpdated":null}'),t={name:"resource/luajit/installation.md"};function h(p,s,e,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="インストール" tabindex="-1">インストール <a class="header-anchor" href="#インストール" aria-label="Permalink to &quot;インストール&quot;">​</a></h1><blockquote><p>このドキュメントはLuaJIT 2.1用です。バージョン固有のドキュメントについては、各gitブランチのdocディレクトリを確認してください。</p></blockquote><p>LuaJITはソースコードとしてのみ配布されています。gitリポジトリから入手してください。このページでは、LuaJITのバイナリとライブラリを異なるオペレーティングシステムでビルドおよびインストールする方法を説明します。</p><p>焦っている人のために（POSIXシステム上で）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="要件" tabindex="-1">要件 <a class="header-anchor" href="#要件" aria-label="Permalink to &quot;要件&quot;">​</a></h2><p>LuaJITはほとんどのシステムでそのままビルドできます。サポートされているオペレーティングシステムとCPUアーキテクチャについては、ステータスページで確認してください。</p><p>LuaJITをビルドするには、GCC、Clang/LLVM、またはMSVC++に基づく最新のツールチェインが必要です。</p><p>MakefileベースのビルドシステムにはGNU Makeが必要で、クロスビルドをサポートしています。</p><p>MSVC++ビルドとコンソールクロスビルド用のバッチファイルが用意されています。</p><h2 id="luajitの設定" tabindex="-1">LuaJITの設定 <a class="header-anchor" href="#luajitの設定" aria-label="Permalink to &quot;LuaJITの設定&quot;">​</a></h2><p>標準の設定は、ほとんどのインストールで問題なく動作するはずです。通常、設定を調整する必要はありません。以下のファイルにすべてのユーザー設定可能な設定が含まれています：</p><ul><li>MakefileにはLuaJITのインストール設定があります（POSIXのみ）。</li><li>src/MakefileにはPOSIX、MinGW、またはCygwin下でLuaJITをコンパイルするための設定があります。</li><li>src/msvcbuild.batにはMSVC（Visual Studio）でLuaJITをコンパイルするための設定があります。</li></ul><p>設定を変更する前に、これらのファイルに記載されている指示を読んでください。</p><p>LuaJITの64ビットポートはデフォルトで64ビットGCオブジェクトを使用します（LJ_GC64）。x64では、makeコマンドにXCFLAGS=-DLUAJIT_DISABLE_GC64を追加することで、古い32-on-64ビットモードを選択できます。バイトコード形式の違いについての注意も確認してください。</p><h2 id="posixシステム-linux、macos、-bsdなど" tabindex="-1">POSIXシステム（Linux、macOS、*BSDなど） <a class="header-anchor" href="#posixシステム-linux、macos、-bsdなど" aria-label="Permalink to &quot;POSIXシステム（Linux、macOS、*BSDなど）&quot;">​</a></h2><h3 id="必要条件" tabindex="-1">必要条件 <a class="header-anchor" href="#必要条件" aria-label="Permalink to &quot;必要条件&quot;">​</a></h3><p>配布によっては、コンパイラ（GCCまたはClang/LLVM）、開発ヘッダ、または完全なSDKのパッケージをインストールする必要がある場合があります。例えば、現在のDebian/Ubuntuでは、パッケージマネージャでbuild-essentialをインストールします。</p><h3 id="luajitのビルド" tabindex="-1">LuaJITのビルド <a class="header-anchor" href="#luajitのビルド" aria-label="Permalink to &quot;LuaJITのビルド&quot;">​</a></h3><p>提供されたMakefileは、オペレーティングシステムとコンパイラに必要な設定を自動的に検出しようとします。GNU Makeで実行する必要があり、おそらくシステムのデフォルトです。単純に実行します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span></code></pre></div><p>これは常にホストOSに依存するネイティブバイナリをビルドします。クロスコンパイルのセクションでより多くのオプションを確認してください。 デフォルトでは、モジュールは/usr/localのプレフィックスの下でのみ検索されます。</p><p>検索パスに追加のプレフィックスを追加するには、PREFIXオプションを追加します。例えば：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PREFIX=/home/myself/lj2</span></span></code></pre></div><p>macOSの注意：ツールチェーンでサポートされている値にMACOSX_DEPLOYMENT_TARGET環境変数を設定する必要があります：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MACOSX_DEPLOYMENT_TARGET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">XX.YY</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span></span></code></pre></div><h3 id="luajitのインストール" tabindex="-1">LuaJITのインストール <a class="header-anchor" href="#luajitのインストール" aria-label="Permalink to &quot;LuaJITのインストール&quot;">​</a></h3><p>トップレベルのMakefileはデフォルトでLuaJITを/usr/localにインストールします。つまり、実行可能ファイルは/usr/local/binに配置されます。このパスに書き込むにはroot権限が必要です。したがって、システムにsudoがインストールされていると仮定して、次のコマンドを実行し、sudoパスワードを入力します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>それ以外の場合は、絶対パスとしてディレクトリプレフィックスを指定します。例えば：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PREFIX=/home/myself/lj2</span></span></code></pre></div><p>明らかに、ビルド時とインストール時のプレフィックスは同じである必要があります。</p><h2 id="windowsシステム" tabindex="-1">Windowsシステム <a class="header-anchor" href="#windowsシステム" aria-label="Permalink to &quot;Windowsシステム&quot;">​</a></h2><h3 id="必要条件-1" tabindex="-1">必要条件 <a class="header-anchor" href="#必要条件-1" aria-label="Permalink to &quot;必要条件&quot;">​</a></h3><p>オープンソースSDKの1つ（MinGWまたはCygwin）をインストールします。これには、必要な開発ヘッダーが含まれた修正されたGCCが含まれています。または、MicrosoftのVisual Studio（MSVC）をインストールします。</p><h3 id="msvcでのビルド" tabindex="-1">MSVCでのビルド <a class="header-anchor" href="#msvcでのビルド" aria-label="Permalink to &quot;MSVCでのビルド&quot;">​</a></h3><p>&quot;Visual Studio Command Prompt&quot;（x86、x64、またはARM64）を開き、ソースコードのディレクトリにcdして、次のコマンドを実行します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msvcbuild</span></span></code></pre></div><p>より多くのオプションについてはmsvcbuild.batファイルを確認してください。その後、以下のインストール手順に従ってください。</p><p>x64からARM64へのクロスビルドを行うには、最初にこれを実行します：vcvarsall.bat x64_arm64</p><h3 id="mingwまたはcygwinでのビルド" tabindex="-1">MinGWまたはCygwinでのビルド <a class="header-anchor" href="#mingwまたはcygwinでのビルド" aria-label="Permalink to &quot;MinGWまたはCygwinでのビルド&quot;">​</a></h3><p>コマンドプロンプトウィンドウを開き、MinGWまたはCygwinのプログラムがパス内にあることを確認します。次に、gitリポジトリのディレクトリにcdします。MinGWの場合はこのコマンドを実行します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mingw32-make</span></span></code></pre></div><p>Cygwinの場合はこのコマンドを実行します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span></code></pre></div><p>その後、以下のインストール手順に従ってください。</p><h3 id="luajitのインストール-1" tabindex="-1">LuaJITのインストール <a class="header-anchor" href="#luajitのインストール-1" aria-label="Permalink to &quot;LuaJITのインストール&quot;">​</a></h3><p>srcディレクトリでビルドされたluajit.exeとlua51.dllを新しく作成したディレクトリ（任意の場所で可）にコピーします。その下にluaとlua\\jitディレクトリを追加し、配布物のsrc\\jitディレクトリからすべてのLuaファイルを後者のディレクトリにコピーします。</p><p>絶対パス名はハードコードされていません。すべてのモジュールは、luajit.exeがインストールされているディレクトリに対して相対的にロードされます（src/luaconf.hを参照）。</p><h2 id="luajitのクロスコンパイル" tabindex="-1">LuaJITのクロスコンパイル <a class="header-anchor" href="#luajitのクロスコンパイル" aria-label="Permalink to &quot;LuaJITのクロスコンパイル&quot;">​</a></h2><p>まず、用語をいくつか明確にしましょう：</p><ul><li>ホスト：これは、通常x64またはx86 CPUに基づく開発システムです。</li><li>ターゲット：これは、LuaJITを実行するターゲットシ</li></ul><p>ステムです。例えば、Android/ARMです。</p><ul><li>ツールチェーン：これにはCコンパイラ、リンカー、アセンブラ、および一致するCライブラリが含まれます。</li><li>ホスト（またはシステム）ツールチェーン：これは、ホストシステム用のネイティブバイナリをビルドするために使用されるツールチェーンです。</li><li>クロスコンパイルツールチェーン：これは、ターゲットシステム用のバイナリをビルドするために使用されるツールチェーンです。これらはターゲットシステムでのみ実行できます。</li></ul><p>GNU Makefileベースのビルドシステムは、任意のホストでサポートされているターゲットに対してクロスコンパイルを許可します：</p><ul><li>はい、ホストとターゲットの両方のためのツールチェーンが必要です！</li><li>ホストとターゲットのアーキテクチャは同じポインタサイズを持っている必要があります。</li><li>例えば、64ビットホストで32ビットターゲットにクロスコンパイルしたい場合、multilib開発パッケージ（例：Debian/Ubuntuではlibc6-dev-i386）をインストールし、32ビットホスト部分をビルドする必要があります（HOST_CC=&quot;gcc -m32&quot;）。</li><li>一部のディストリビューションでは、multilibはクロスコンパイラと競合します。回避策は、x86クロスコンパイラパッケージgcc-i686-linux-gnuをインストールし、それを使用してホスト部分をビルドすることです（HOST_CC=i686-linux-gnu-gcc）。</li><li>64ビットターゲットは常に64ビットホストでのコンパイルを必要とします。</li></ul><p>ホストOSとターゲットOSが異なる場合、アセンブラやリンカーエラーを避けるためにTARGET_SYSを指定する必要があります：</p><ul><li>例えば、組み込みLinuxまたはAndroid用にWindowsまたはmacOSホストでコンパイリングする場合、以下の例にTARGET_SYS=Linuxを追加する必要があります。</li><li>最小限のターゲットOSの場合、src/Makefileで組み込みのアロケータを無効にし、TARGET_SYS=Otherを使用する必要があります。</li><li>インストールステップでも同じTARGET_SYSを指定することを忘れないでください。 ここでは、ホストとターゲットが同じCPUを持つ例をいくつか紹介します：</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># マルチリブx64 OS上で32ビットバイナリにクロスコンパイル</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CC=&quot;gcc -m32&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Debian/Ubuntu上でWindowsにクロスコンパイル（mingw32パッケージ）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=i586-mingw32msvc-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TARGET_SYS=Windows</span></span></code></pre></div><p>CROSSプレフィックスを使用して、標準GNUクロスコンパイルツールチェーン（Binutils、GCC、および一致するlibc）を指定できます。プレフィックスは、ツールチェーンがビルドされた--targetに依存して異なる場合があります（CROSSプレフィックスには末尾に&quot;-&quot;があります）。以下の例では、Linux用の標準ツールチェーントリプレットを使用しています。</p><p>実行時にCPUの機能を検出する簡単な方法がしばしばないため、適切なCPUまたはアーキテクチャ設定でコンパイルすることが重要です：</p><ul><li>一貫した結果を得る最良の方法は、ツールチェーンを自分でビルドする際に正しい設定を指定することです。</li><li>あらかじめビルドされた汎用ツールチェーンには、TARGET_CFLAGSに <code>-mcpu=...</code> または <code>-march=...</code> およびその他必要なフラグを追加します。</li><li>ARMでは、正しい <code>-mfloat-abi=...</code> 設定も重要です。さもないとLuaJITはターゲットCPUの全性能を発揮できない可能性があります。</li><li>MIPSでは、サポートされているABI（MIPS32ではo32、MIPS64ではn64）を選択し、プロジェクトを一貫してhard-floatまたはsoft-floatのコンパイラ設定でコンパイルすることが重要です。</li></ul><p>ホストと異なるCPUのターゲットの例をいくつか紹介します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ARM soft-float</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=arm-linux-gnueabi-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     TARGET_CFLAGS=&quot;-mfloat-abi=soft&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ARM soft-float ABI with VFP (Cortex-A9の例)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=arm-linux-gnueabi-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     TARGET_CFLAGS=&quot;-mcpu=cortex-a9 -mfloat-abi=softfp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ARM hard-float ABI with VFP (armhf、最も近代的なツールチェーン)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=arm-linux-gnueabihf-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ARM64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=aarch64-linux-gnu-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PPC</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=powerpc-linux-gnu-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MIPS32 big-endian</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=mips-linux-gnu-</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MIPS32 little-endian</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=mipsel-linux-gnu-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MIPS64 big-endian</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=mips-linux-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TARGET_CFLAGS=&quot;-mips64r2 -mabi=64&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MIPS64 little-endian</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=mipsel-linux-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TARGET_CFLAGS=&quot;-mips64r2 -mabi=64&quot;</span></span></code></pre></div><p>Android NDKを使用してAndroid用にクロスコンパイルすることができます。環境変数をインストール場所と希望のターゲットプラットフォームに合わせて調整してください。例えば、Android 4.1はABIレベル16に対応しています。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Android/ARM64、aarch64、Android 5.0+ (L)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/opt/android/ndk</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKBIN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/toolchains/llvm/prebuilt/linux-x86_64/bin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKCROSS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/aarch64-linux-android-</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKCC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/aarch64-linux-android21-clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCROSS </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     STATIC_CC=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCC </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DYNAMIC_CC=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -fPIC&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     TARGET_LD=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCC </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TARGET_AR=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/llvm-ar rcus&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     TARGET_STRIP=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/llvm-strip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Android/ARM、armeabi-v7a (ARMv7 VFP)、Android 4.1+ (JB)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/opt/android/ndk</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKBIN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/toolchains/llvm/prebuilt/linux-x86_64/bin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKCROSS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/arm-linux-androideabi-</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NDKCC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/armv7a-linux-androideabi16-clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCROSS </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     STATIC_CC=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCC </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DYNAMIC_CC=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -fPIC&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     TARGET_LD=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKCC </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TARGET_AR=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/llvm-ar rcus&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     TARGET_STRIP=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDKBIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/llvm-strip</span></span></code></pre></div><p>iOS SDKを使用してiOS 3.0+（iPhone/iPad）用にクロスコンパイルすることもできます：</p><div class="info custom-block"><p class="custom-block-title">注意</p><p>iOS用のJITコンパイラは無効にされています。通常のiOSアプリでは実行時にコードを生成することが許可されていないためです。そのため、iOSではLuaJITのインタープリタのパフォーマンスのみが得られます。これは通常のLuaよりも速いですが、JITコンパイラよりはかなり遅いです。Appleに不満を言ってください。またはAndroidを使ってください。:-p</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># iOS/ARM64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISDKP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcrun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iphoneos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --show-sdk-path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ICC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcrun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iphoneos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISDKF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-arch arm64 -isysroot </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ISDKP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DEFAULT_CC=clang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ICC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     TARGET_FLAGS=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ISDKF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TARGET_SYS=iOS</span></span></code></pre></div><h3 id="コンソール用のクロスコンパイル" tabindex="-1">コンソール用のクロスコンパイル <a class="header-anchor" href="#コンソール用のクロスコンパイル" aria-label="Permalink to &quot;コンソール用のクロスコンパイル&quot;">​</a></h3><p>コンソール用のLuaJITをビルドするには、サポートされているホストコンパイラ（x86またはx64）と公式のコンソールSDKからのクロスコンパイラが必要です。</p><p>コンソールの制限により、JITコンパイラは無効にされ、高速なインタープリタのみがビルドされます。これは通常のLuaよりも速いですが、JITコンパイラよりはかなり遅いです。FFIも無効にされています。そのため、そのような環境ではあまり役に立ちません。</p><p>以下のコマンドは静的ライブラリlibluajit.aをビルドし、Luaライブラリと同様にゲームにリンクできます。</p><p>Linuxホスト（32ビットGCC、つまりマルチリブLinux/x64が必要）またはWindowsホスト（32ビットMinGWが必要）からPS3用にクロスコンパイルするには、このコマンドを実行します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HOST_CC=&quot;gcc -m32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CROSS=ppu-lv2-</span></span></code></pre></div><p>他のコンソール用にWindowsホストからクロスコンパイルするには、「VS用ネイティブツールコマンドプロンプト」を開きます。ターゲットに合わせてホストコンパイラの32ビットまたは64ビットバージョンを選択する必要があります。次に、ソースコードの下のsrcディレクトリにcdし、表に記載されているビルドコマンドを実行します：</p><table tabindex="0"><thead><tr><th>コンソール</th><th>ビット</th><th>ビルドコマンド</th></tr></thead><tbody><tr><td>PS4</td><td>64</td><td>ps4build</td></tr><tr><td>PS5</td><td>64</td><td>ps5build</td></tr><tr><td>PS Vita</td><td>32</td><td>psvitabuild</td></tr><tr><td>Xbox 360</td><td>32</td><td>xedkbuild</td></tr><tr><td>Xbox One</td><td>64</td><td>xb1build</td></tr><tr><td>Nintendo Switch NX32</td><td>32</td><td>nxbuild</td></tr><tr><td>Nintendo Switch NX64</td><td>64</td><td>nxbuild</td></tr></tbody></table><p>詳細については、対応する*.batファイルのコメントを確認してください。</p><h2 id="luajitの組み込み" tabindex="-1">LuaJITの組み込み <a class="header-anchor" href="#luajitの組み込み" aria-label="Permalink to &quot;LuaJITの組み込み&quot;">​</a></h2><p>LuaJITはLua 5.1とAPI互換性があります。既にLuaをアプリケーションに組み込んでいる場合、異なるライブラリでリンクする以外にLuaJITに切り替えるために何もする必要はないかもしれません：</p><ul><li>LuaJITを個別にビルドすることを強くお勧めします。ビルドシステムで提供されているものを使用してください。個々のソースファイルをビルドツリーに統</li></ul><p>合しようとすることはお勧めしません。内部ビルドの依存関係を間違えるか、コンパイラフラグを乱す可能性があります。LuaJITを他の外部ライブラリと同様に扱い、ニーズに応じて動的または静的ライブラリでアプリケーションをリンクしてください。</p><ul><li>通常のLuaでコンパイルされたCモジュールを <code>require()</code> で読み込む場合、公開シンボル（例えば <code>lua_pushnumber</code>）もエクスポートされている必要があります： <ul><li>POSIXシステムでは、共有ライブラリにリンクするか、静的ライブラリをアプリケーションにリンクすることができます。後者の場合、主実行ファイルからすべての公開シンボルをエクスポートする必要があります（例：Linuxでは <code>-Wl,-E</code>）し、外部依存関係を追加する必要があります（例：Linuxでは <code>-lm -ldl</code>）。</li><li>Windowsではシンボルが特定のDLL名にバインドされているため、LuaJITビルドによって作成された <code>lua51.dll</code> にリンクする必要があります（DLLの名前を変更しないでください）。Windows上でLuaJITを静的にリンクすることは、実行時にLua/Cモジュールをロードするつもりがない場合のみ可能です。</li></ul></li></ul><p>C API関数を使用してLuaJITを初期化するための追加のヒント：</p><ul><li>LuaまたはLuaJITをアプリケーションに組み込むためのシンプルな例がこちらです。</li><li><code>luaL_newstate</code> の使用を確認してください。これは、（遅い）デフォルトのメモリアロケータを使用する <code>lua_newstate</code> の使用を避けるためです（64ビットアーキテクチャではサポートされていません）。</li><li><code>luaopen_base</code> などを直接呼び出す古いLua 5.0スタイルではなく、<code>luaL_openlibs</code> を使用してください。</li><li>標準ライブラリのロードリストを変更または拡張するには、<code>src/lib_init.c</code> をプロジェクトにコピーしてそれに応じて変更してください。JITコンパイラをアクティブにするには、jitライブラリがロードされていることを確認してください。</li><li>ビット単位の操作のための <code>bit.*</code> モジュールは既に組み込まれています。Lua BitOpをアプリケーションに静的にリンクする必要はありません。</li></ul><h2 id="ディストリビューションメンテナー向けのヒント" tabindex="-1">ディストリビューションメンテナー向けのヒント <a class="header-anchor" href="#ディストリビューションメンテナー向けのヒント" aria-label="Permalink to &quot;ディストリビューションメンテナー向けのヒント&quot;">​</a></h2><p>LuaJITビルドシステムは、ほとんどのPOSIXベースのディストリビューションのニーズに対応するための追加機能を備えています。ディストリビューションのパッケージメンテナーの場合は、これらの機能を利用して、ビルドシステムを不適切な方法でパッチ適用、回避、autotoolizing、乱用することを避けてください。</p><p>luaconf.hやMakefileをパッチする必要は絶対にありません。また、パッケージ用にファイルを選び出すこともしないでください。単に <code>make install</code> が生成するものを使用してください。それが作成する全てのファイルやディレクトリには理由があります。</p><p>ビルドシステムはGNU makeを使用し、ビルドするホストに基づいてほとんどの設定を自動検出します。これは、サンドボックス環境でも、ネイティブビルドに対してうまく機能するはずです。通常の配布ビルドのために、以下のフラグを <code>make</code> および <code>make install</code> コマンドラインの両方に渡す必要があるかもしれません：</p><ul><li><code>PREFIX</code> はインストールパスを上書きし、通常は <code>/usr</code> に設定されるべきです。これを設定すると、モジュールパスと共有ライブラリを見つけるためのパスも変更されます。</li><li><code>DESTDIR</code> は絶対パスで、ビルドシステムのルートツリーではなくシャドウツリーにインストールすることを可能にします。</li><li><code>MULTILIB</code> はマルチリブシステムのためのアーキテクチャ固有のライブラリパスコンポーネントを設定します。デフォルトは <code>lib</code> です。</li><li>トップレベルのMakefileとsrc/Makefileを見て、調整可能な追加の変数を確認してください。以下の変数は上書き可能ですが、クロスビルドのような特別なニーズがない限り推奨されません：<code>BUILDMODE</code>、<code>CC</code>、<code>HOST_CC</code>、<code>STATIC_CC</code>、<code>DYNAMIC_CC</code>、<code>CFLAGS</code>、<code>HOST_CFLAGS</code>、<code>TARGET_CFLAGS</code>、<code>LDFLAGS</code>、<code>HOST_LDFLAGS</code>、<code>TARGET_LDFLAGS</code>、<code>TARGET_SHLDFLAGS</code>、<code>TARGET_FLAGS</code>、<code>LIBS</code>、<code>HOST_LIBS</code>、<code>TARGET_LIBS</code>、<code>CROSS</code>、<code>HOST_SYS</code>、<code>TARGET_SYS</code></li></ul><p>ビルドシステムには統合ビルド用の特別なターゲット、すなわち <code>make amalg</code> があります。これはLuaJITのコアを一つの大きなCファイルとしてコンパイルし、GCCによりより速く、より短いコードを生成させます。残念ながら、これにはビルド中に多くのメモリを必要とします。これが一部のユーザーにとって問題となる可能性がありますが、デフォルトで有効にはされていません。しかし、ほとんどのビルドファームでは問題になることはありません。バイナリ配布ではこのターゲットをLuaJITビルドに使用することを推奨します。</p><p>上記の要約：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> amalg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PREFIX=/usr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PREFIX=/usr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DESTDIR=/tmp/buildroot</span></span></code></pre></div><p>最後に、もし何か問題に遭遇したら、予期せぬユーザーに不完全なパッケージをリリースするのではなく、まず私に連絡してください。というのも、通常、彼ら（ユーザー）はあなた（パッケージメンテナ）ではなく私（上流）に文句を言うからです。</p>`,94)]))}const F=i(t,[["render",h]]);export{c as __pageData,F as default};
