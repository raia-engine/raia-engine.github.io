import{_ as s,c as i,a2 as l,o as e}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"luaL_newlibtable","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/luaL_newlibtable.md","filePath":"reference/lua_c/luaL_newlibtable.md","lastUpdated":1731828945000}'),t={name:"reference/lua_c/luaL_newlibtable.md"};function n(h,a,p,k,d,r){return e(),i("div",null,a[0]||(a[0]=[l(`<h1 id="lual-newlibtable" tabindex="-1">luaL_newlibtable <a class="header-anchor" href="#lual-newlibtable" aria-label="Permalink to &quot;luaL_newlibtable&quot;">​</a></h1><p>関数リストを格納するのに適したサイズの新しいテーブルを作成します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_newlibtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Reg </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>配列<code>l</code>内のすべてのエントリを格納するのに最適なサイズの新しいテーブルを作成しますが、実際にはエントリは格納しません。これは<code>luaL_setfuncs</code>と組み合わせて使用されることを意図しています（<code>luaL_newlib</code>参照）。</p><p>これはマクロとして実装されています。配列<code>l</code>は実際の配列でなければならず、ポインタではありません。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">luaL_Reg funcs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hello_function},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_newlibtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, funcs);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 最適なサイズのテーブルを作成</span></span></code></pre></div><p>このコードは、関数リスト<code>funcs</code>を格納するのに適したサイズのテーブルを作成します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.2</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>luaL_setfuncs</li><li>luaL_newlib</li></ul>`,13)]))}const u=s(t,[["render",n]]);export{o as __pageData,u as default};
