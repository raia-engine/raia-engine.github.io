import{_ as a,c as o,a2 as t,o as n}from"./chunks/framework.CuCbyi2k.js";const s=JSON.parse('{"title":"Duktapeバイトコード形式","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/bytecode.md","filePath":"resource/duktape/doc/bytecode.md","lastUpdated":1732350347000}'),r={name:"resource/duktape/doc/bytecode.md"};function l(d,e,i,p,c,u){return n(),o("div",null,e[0]||(e[0]=[t(`<h1 id="duktapeバイトコード形式" tabindex="-1">Duktapeバイトコード形式 <a class="header-anchor" href="#duktapeバイトコード形式" aria-label="Permalink to &quot;Duktapeバイトコード形式&quot;">​</a></h1><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p>Duktapeには、コンパイルした関数をバイトコードにダンプしたり、バイトコードダンプから関数をロード（再定義）するためのAPI関数があります。バイトコードダンプ/ロードにより、コードをオフラインでコンパイルしたり、コンパイルしたコードをキャッシュして再利用したり、コンパイルしたコードをあるDuktapeヒープから別のヒープに移動させたりすることができます。ただし、Duktapeバイトコード・フォーマットはバージョンに依存するため、Javaバイトコードのようなバージョンに依存しないコード配布フォーマットではありません。(「バイトコード」という用語は、ここや他のDuktapeのドキュメントで使われていますが、少し不正確です：シリアル化フォーマットには、バイトコード命令以外にも多くのフィールドがあります)</p><p>Duktapeのバイトコードは<strong>バージョン固有</strong>であり、（潜在的に）<strong>設定オプション固有</strong>であり、マイナーリリースでも任意に変更される可能性があります（ただし、パッチリリースでは、設定オプションが同じである限り、変更しないことが保証されています）。言い換えれば、バイトコード形式は通常のバージョン保証の一部ではありません。オフラインでコードをバイトコードにコンパイルする場合、Duktapeのソースが更新されるたびに、そのようなコードが再コンパイルされるようにしなければなりません。この意味で、Duktapeのバイトコードは、バージョン中立の配布形式として使用されるJavaバイトコードなどとは根本的に異なります。</p><p>Duktapeのバイトコードは<strong>unvalidated</strong>であるため、信頼されていない、あるいは壊れたバイトコードをロードすると、クラッシュや他のメモリの安全でない動作を引き起こし、潜在的に悪用可能な脆弱性につながることがあります。呼び出し側のコードは、異なるDuktapeバージョンのバイトコードがロードされないこと、およびバイトコード入力が切り詰められたり破損したりしないことを保証する責任があります。(バイトコードの検証は非常に難しく、存在しないレジスタや定数を参照したり、境界を飛び越えたりする可能性のある実際のバイトコードも検証する必要があるためです)</p><p>バイトコード形式は<strong>プラットフォームニュートラル</strong>であり、あるプラットフォームでバイトコードをコンパイルし、別のプラットフォームでそれをロードすることが可能である。これはクロスコンパイルにおけるオフラインコンパイルをサポートするために有用である。</p><p>どのような種類の関数をバイトコードにダンプできるか、また、その過程でどのような情報が失われるかについては、いくつかの制限があります。以下の制限に関する別のセクションを参照してください。以下のAPIテストケースは、使用方法と現在の制限について具体的な例を示しています：</p><ul><li><code>api-testcases/test-dump-load-basic.c</code></li></ul><h2 id="バイトコードで作業する" tabindex="-1">バイトコードで作業する <a class="header-anchor" href="#バイトコードで作業する" aria-label="Permalink to &quot;バイトコードで作業する&quot;">​</a></h2><p>関数をバイトコードを含むバッファに変換するには、<code>duk_dump_function()</code> APIコールを使用します：</p><pre><code>duk_eval_string(ctx, &quot;(function myfunc() { print(&#39;hello world&#39;); })&quot;);
duk_dump_function(ctx);
/* -&gt; stack top contains bytecode for &#39;myfunc&#39; */
</code></pre><p><code>duk_load_function()</code>はその逆で、バイトコードを含むバッファを関数オブジェクトに変換するAPIコールである：</p><pre><code>/* ... push bytecode to value stack top */
duk_load_function(ctx);
/* -&gt; stack top contains function */
</code></pre><p>また、ファイルをバイトコードにコンパイルするために、Duktapeコマンドラインツール︓「duk」を使用することができます：</p><pre><code>./duk -c /tmp/program.bin program.js
</code></pre><p>入力されたソースはECMAScriptプログラムとしてコンパイルされ、バイトコードは &quot;プログラム関数 &quot;に対応したものになります。コマンドラインツールは、個々の関数のコンパイルには対応しておらず、バイトコードで遊ぶのに便利です。</p><p>コマンドラインツールはバイトコード関数を実行することもできます。プログラムの関数が実行されているかのように、関数をロードして引数なしで呼び出すだけです：</p><pre><code>./duk -b /tmp/program.bin
</code></pre><h2 id="バイトコードダンプ-ロードを使用する場合" tabindex="-1">バイトコードダンプ/ロードを使用する場合 <a class="header-anchor" href="#バイトコードダンプ-ロードを使用する場合" aria-label="Permalink to &quot;バイトコードダンプ/ロードを使用する場合&quot;">​</a></h2><p>一般に、バイトコードダンプ/ロード機構を使用する動機は主に2つあります：</p><ul><li>パフォーマンス</li><li>難読化</li></ul><p>Duktapeのバイトコード形式は、コンパイルに比べてパフォーマンスが向上しますが、以下で詳しく説明するように、難読化には適していません。</p><h3 id="パフォーマンス" tabindex="-1">パフォーマンス <a class="header-anchor" href="#パフォーマンス" aria-label="Permalink to &quot;パフォーマンス&quot;">​</a></h3><p>コンパイルの性能が問題でない場合は、バイトコードダンプ/ロードを使用するよりも、ソースから関数をコンパイルすることがほとんど常に望ましいです。ソースからのコンパイルはメモリ安全で、バージョン互換性があり、バイトコードのような意味上の制限もありません。</p><p>コンパイルが性能上の問題となるアプリケーションもあります。例えば、ある関数がコンパイルされ、短命のDuktapeグローバル・コンテキスト、あるいは別々のDuktapeヒープ（1つの関数オブジェクトを再利用できない）で何度も何度も実行されることがあります。コンパイルされた関数のバイトコードをキャッシュし、バイトコードをロードして関数をインスタンス化することは、実行のたびに再コンパイルするよりもはるかに高速です。</p><h3 id="obfuscation" tabindex="-1">Obfuscation <a class="header-anchor" href="#obfuscation" aria-label="Permalink to &quot;Obfuscation&quot;">​</a></h3><p>難読化は、バイトコードを使用するもう一つの一般的な理由です。バイトコードからソースコードをリバースエンジニアリングするのは、例えば最小化されたコードよりも困難です。しかし、難読化する際には、以下の点に注意する必要があります：</p><ul><li>ミニファイアの中には難読化をサポートするものがあり、バイトコードの制限や欠点を回避することができますので、十分な効果が期待できます。</li><li>ターゲットによっては、難読化のためにバイトコードに依存するよりも、ソースコードの暗号化の方が良い選択肢になるかもしれません。</li><li>Duktapeのバイトコードは現在ソースコードを保存しませんが、一部の関数で必要となるすべての変数名（<code>_Varmap</code>）と正式な引数名（<code>_Formals</code>）は保存されます。また、デバッグをサポートするために、ある時点でバイトコードにソースコードが含まれる可能性もある。言い換えれば、<strong>難読化はバイトコードフォーマットの設計目標ではありません</strong>。</li></ul><p>That said, concrete issues to consider when using bytecode for obfuscation:</p><ul><li><code>_Varmap</code>プロパティの変数名：これは一般的に簡単に回避することはできませんが、minifierは変数の名前を変更できるかもしれません。</li><li><code>name</code>プロパティの関数名：これは関数をダンプする前に削除または変更することができますが、一部の関数（自己再帰関数など）は、このプロパティが存在し、正しいかどうかに依存する場合があることに注意してください。</li><li><code>fileName</code>プロパティの関数ファイル名：これも関数をダンプする前に削除または変更することができます。関数のコンパイルに <code>duk_compile()</code> (例えば <code>duk_eval_string()</code> ではなく) を使用することで、ファイル名を導入することを全く避けることができます。</li><li>行番号情報は <code>_Pc2line</code> プロパティに格納されます。この情報は削除または変更することができますし、そもそもこの情報を格納しないように Duktape を設定することもできます（<code>DUK_USE_PC2LINE</code> オプションを使用）。ライン情報がない場合、トレースバックはもちろん有用ではありません。</li></ul><h2 id="バイトコードダンプ-ロードを使用しない場合" tabindex="-1">バイトコードダンプ/ロードを使用しない場合 <a class="header-anchor" href="#バイトコードダンプ-ロードを使用しない場合" aria-label="Permalink to &quot;バイトコードダンプ/ロードを使用しない場合&quot;">​</a></h2><p>Duktape bytecodeは <strong>not</strong> にマッチしています：</p><ul><li>コードの配布</li><li>コードサイズの最小化</li></ul><h3 id="コードの配布" tabindex="-1">コードの配布 <a class="header-anchor" href="#コードの配布" aria-label="Permalink to &quot;コードの配布&quot;">​</a></h3><p>コード配布にバージョン固有のバイトコード形式を使用するのは厄介だ。特にECMAScriptの場合、言語自体が後方互換性のあるコードを書いたり、実行時に機能を検出したりするのに適しているため、この傾向が顕著です。</p><p>また、バイトコードロード操作は、ロードされたバイトコードが信頼でき、破損していないことを保証するために呼び出しコードに依存するため、コードの配布には厄介です。実際には、改ざんを防ぐために暗号化署名などが必要です。</p><h3 id="コードサイズの最小化" tabindex="-1">コードサイズの最小化 <a class="header-anchor" href="#コードサイズの最小化" aria-label="Permalink to &quot;コードサイズの最小化&quot;">​</a></h3><p>バイトコード形式は、プラットフォームに依存せず、ダンプとロードを高速に行うように設計されています。コンパクトになるようには設計されていません（実際、そうです）。</p><p>例えば、単純なマンデルブロ関数（<code>dist-files/mandel.js</code>の<code>mandel()</code>）の場合：</p><table tabindex="0"><thead><tr><th>Format</th><th>Size (bytes)</th><th>Gzipped size (bytes)</th></tr></thead><tbody><tr><td>Original source</td><td>884</td><td>371</td></tr><tr><td>Bytecode dump</td><td>809</td><td>504</td></tr><tr><td>UglifyJS2-minified source</td><td>364</td><td>267</td></tr></tbody></table><p>コードサイズを最小化するためには、圧縮または非圧縮のバイトコードに依存するよりも、ミニファイアと通常の圧縮を使用する方がはるかに良いアイデアです。</p><h2 id="バイトコードの制限" tabindex="-1">バイトコードの制限 <a class="header-anchor" href="#バイトコードの制限" aria-label="Permalink to &quot;バイトコードの制限&quot;">​</a></h2><h3 id="関数の辞書的環境が失われる" tabindex="-1">関数の辞書的環境が失われる <a class="header-anchor" href="#関数の辞書的環境が失われる" aria-label="Permalink to &quot;関数の辞書的環境が失われる&quot;">​</a></h3><p>バイトコードからロードされた関数は、常にグローバル環境で定義されたかのように動作し、関数自体にバインドされていない変数のルックアップは、グローバルオブジェクトを介して解決されます。として作成された <code>bar</code> をシリアライズすると、以下のようになります：</p><pre><code>function foo() {
    var myValue = 123;

    function bar() {
        // myValue will be 123, looked up from &#39;foo&#39; scope

        print(myValue);
    }

    return bar;
}
</code></pre><p>として作成し、再度読み込むと、元々作成されていたような挙動をします：</p><pre><code>function bar() {
    // myValue will be read from global object

    print(myValue);
}
</code></pre><p>元の関数が関数宣言を使って確立されていた場合、関数がロードされても宣言自体は復元されません。このため、混乱することがあります。例えば、<code>foo</code>と宣言されたものをシリアライズした場合：</p><pre><code>function foo() {
    // Prints &#39;function&#39; before dump/load; &#39;foo&#39; is looked up from
    // the global object.

    print(typeof foo);
}
</code></pre><p>という挙動になり、それをロードし直すと、そのような挙動になります：</p><pre><code>var loadedFunc = (function() {
    // Prints &#39;undefined&#39; after dump/load; &#39;foo&#39; is looked up from
    // the global object.  Workaround is to assign loadedFunc to
    // globalObject.foo manually before calling to simulate declaration.

    print(typeof foo);
});
</code></pre><h3 id="関数宣言の関数名バインディングがない" tabindex="-1">関数宣言の関数名バインディングがない <a class="header-anchor" href="#関数宣言の関数名バインディングがない" aria-label="Permalink to &quot;関数宣言の関数名バインディングがない&quot;">​</a></h3><p>関数式の関数名バインディングに対応しており、例えば以下の関数が動作します：</p><pre><code>// Can dump and load this function, the reference to &#39;count&#39; will
// be resolved using the automatic function name lexical binding
// provided for function expressions.

var func = function count(n) { print(n); if (n &gt; 0) { count(n - 1); } };
</code></pre><p>しかし、技術的な理由により、グローバル宣言として確立された関数は、少し違った働きをします：</p><pre><code>// Can dump and load this function, but the reference to &#39;count&#39;
// will lookup globalObject.count instead of automatically
// referencing the function itself.  Workaround is to assign
// the function to globalObject.count after loading.

function count(n) { print(n); if (n &gt; 0) { count(n - 1); } };
</code></pre><p>(NAMEBINDINGフラグは、関数式の名前バインディングを含む字句環境の作成を制御します。Duktape 1.2では、このフラグは関数インスタンスではなく関数テンプレートに対してのみ設定されます。Duktape 1.3では、バイトコードのロード時にNAMEBINDINGフラグを検出し、そのフラグに基づいて字句環境を作成できるように変更されました)</p><h3 id="カスタム内部プロトタイプが失われる" tabindex="-1">カスタム内部プロトタイプが失われる <a class="header-anchor" href="#カスタム内部プロトタイプが失われる" aria-label="Permalink to &quot;カスタム内部プロトタイプが失われる&quot;">​</a></h3><p>カスタム内部プロトタイプは失われ、バイトコードロード時に <code>Function.prototype</code> が使用されます。</p><h3 id="カスタム外部プロトタイプが失われる" tabindex="-1">カスタム外部プロトタイプが失われる <a class="header-anchor" href="#カスタム外部プロトタイプが失われる" aria-label="Permalink to &quot;カスタム外部プロトタイプが失われる&quot;">​</a></h3><p>カスタム外部プロトタイプ（<code>.prototype</code>プロパティ）は失われ、バイトコードのロード時にデフォルトの空のプロトタイプが作成されます。</p><h3 id="機能上のファイナライザーが失われる" tabindex="-1">機能上のファイナライザーが失われる <a class="header-anchor" href="#機能上のファイナライザーが失われる" aria-label="Permalink to &quot;機能上のファイナライザーが失われる&quot;">​</a></h3><p>シリアライズされる関数のファイナライザが失われ、バイトコードロード後にファイナライザは存在しない。</p><h3 id="特定の関数オブジェクトのプロパティのみが保持されます" tabindex="-1">特定の関数オブジェクトのプロパティのみが保持されます <a class="header-anchor" href="#特定の関数オブジェクトのプロパティのみが保持されます" aria-label="Permalink to &quot;特定の関数オブジェクトのプロパティのみが保持されます&quot;">​</a></h3><p>特定の関数オブジェクトのプロパティ、すなわち、関数を正しく復活させるために必要なプロパティのみが保持されます。これらのプロパティには、型と値の制限があります：</p><ul><li>.length: uint32、数値以外の値は0に置き換わる</li><li>.name: 文字列必須、文字列以外の値は空文字列に置き換わる</li><li>.fileName: 文字列必須、文字列以外の値は空文字列に置換されます。</li><li>._Formals: 内部プロパティで、値は文字列の配列です。</li><li>._Varmap: 内部プロパティ、値は識別子名とレジスタ番号をマッピングしたオブジェクト。</li></ul><h3 id="バウンド機能には対応していません" tabindex="-1">バウンド機能には対応していません <a class="header-anchor" href="#バウンド機能には対応していません" aria-label="Permalink to &quot;バウンド機能には対応していません&quot;">​</a></h3><p>現在、バインドされた関数オブジェクトをシリアライズしようとすると <code>TypeError</code> がスローされます。</p><h3 id="commonjs-modules-don-t-work-well-with-bytecode-dump-load" tabindex="-1">CommonJS modules don&#39;t work well with bytecode dump/load <a class="header-anchor" href="#commonjs-modules-don-t-work-well-with-bytecode-dump-load" aria-label="Permalink to &quot;CommonJS modules don&#39;t work well with bytecode dump/load&quot;">​</a></h3><p>CommonJSモジュールは、通常、モジュールのソースコードを一時的な関数ラッパーに埋め込んで評価されるため、トリビアルにシリアライズすることはできません（詳細は <code>modules.rst</code> を参照）。ユーザーコードは、一時的にラップされた関数にアクセスすることができません。これは、次のことを意味します：</p><ul><li>モジュールのソースをコンパイルしてシリアライズすると、モジュールのスコープセマンティクスが不正確になります。</li><li>関数のラッパーを追加して、代わりにラップされた関数をコンパイルすることができます。</li><li>バイトコードダンプ/ロードに対するモジュールのサポートは、おそらく将来の作業が必要でしょう。</li></ul><h2 id="バイトコード形式" tabindex="-1">バイトコード形式 <a class="header-anchor" href="#バイトコード形式" aria-label="Permalink to &quot;バイトコード形式&quot;">​</a></h2><p>関数は、プラットフォームに依存しないバイトストリームにシリアライズされます。多バイトの値はネットワーク順（ビッグエンディアン）であり、アライメント保証はない。</p><p>正確なフォーマットはバージョンに依存するため、ここでは完全な詳細については文書化されていません。そうすると、バイトコードが変更されるたびに面倒な文書の更新が必要になり、文書が古くなりやすくなります。正確なフォーマットは、最終的にはソースコードで定義されます：</p><ul><li><code>src-input/duk_api_bytecode.c</code></li><li><code>tools/dump_bytecode.py</code></li></ul><p>バイトコード形式の簡略化したまとめとして：</p><ul><li>有効な拡張UTF-8文字列では決して出現しない0xBFのマーカーバイトです。(以前はバージョンバイトがマーカーに続いていたが、Duktape 2.2ではバンプされていないことと、バージョン保証がないことから削除された)</li><li>マーカの後には、シリアライズされた関数が続きます。この関数は、（2バイトのヘッダーを重複させることなく）再帰的にシリアライズされる内部関数を含むことができます。</li></ul><p>関数のシリアライズ形式は面倒なので、ソースコードから直接調べるのが一番です。</p><p>注：トップレベルの関数は関数インスタンスですが、すべての内部関数は関数テンプレートです。この2つの間には、バイトコード直列化コードで考慮しなければならないいくつかの違いがあります。</p><h2 id="セキュリティとメモリの安全性" tabindex="-1">セキュリティとメモリの安全性 <a class="header-anchor" href="#セキュリティとメモリの安全性" aria-label="Permalink to &quot;セキュリティとメモリの安全性&quot;">​</a></h2><p>Duktapeのバイトコードは、信頼できるソースからのみロードする必要があります。壊れたバイトコードや悪意を持って細工されたバイトコードをロードすると、メモリが安全でない動作や、悪用可能な動作につながる可能性もあります。</p><p>バイトコードはバージョンに依存するため、ネットワーク・ピアから提供されたバイトコードをロードすることは、Duktapeのバージョン用に特別にコンパイルされたバイトコードであることが何らかの形で確認できない限り、一般的に安全ではありません。</p><h2 id="デザインノート" tabindex="-1">デザインノート <a class="header-anchor" href="#デザインノート" aria-label="Permalink to &quot;デザインノート&quot;">​</a></h2><h3 id="evalとプログラムコード" tabindex="-1">Evalとプログラムコード <a class="header-anchor" href="#evalとプログラムコード" aria-label="Permalink to &quot;Evalとプログラムコード&quot;">​</a></h3><p>ECMAScript仕様では、プログラムコード、evalコード、ファンクションコードの3種類のコードを認識し、スコープと変数バインディングのセマンティクスが若干異なっています。シリアライゼーション機構は、この3つのタイプのすべてをサポートします。</p><h3 id="バージョン固有とバージョン中立" tabindex="-1">バージョン固有とバージョン中立 <a class="header-anchor" href="#バージョン固有とバージョン中立" aria-label="Permalink to &quot;バージョン固有とバージョン中立&quot;">​</a></h3><p>Duktapeのバイトコード命令形式は、すでにバージョンに依存し、マイナーリリースでも変更される可能性があります。</p><p>バージョンニュートラルなフォーマットの提供は、Duktapeのバイトコードがマイナーバージョンで変更されなくなった時（これがいつになるかは簡単ではない）、あるいはバイトコードに対して何らかの再コンパイルを行うことで可能となる。</p><h3 id="コンフィグオプション固有" tabindex="-1">コンフィグオプション固有 <a class="header-anchor" href="#コンフィグオプション固有" aria-label="Permalink to &quot;コンフィグオプション固有&quot;">​</a></h3><p>Duktapeのオプションの中には、どのような関数メタデータが利用できるかに影響を与えるものがあります。例えば、行番号情報(pc2line)を無効にすると、バイトコードダンプから完全に除外される可能性があります。行番号情報を有効にしてコンパイルしたDuktape環境で、このようなダンプをロードしようとすると、フォーマット・エラーで失敗するかもしれません。</p><p>(最初のマスターマージでは、設定オプションによるフォーマットの違いはありませんが、Duktapeの後のバージョンでは、都合によりそのような違いが出てくるかもしれません)</p><h3 id="エンディアン" tabindex="-1">エンディアン <a class="header-anchor" href="#エンディアン" aria-label="Permalink to &quot;エンディアン&quot;">​</a></h3><p>ネットワーク・エンディアンが選ばれたのは、Duktapeの他の場所（デバッガ・プロトコルなど）でも、デフォルトで移植可能なエンディアンとして使われているからです。</p><p>バイトコードのダンプ/ロードを高速化するには、ネイティブのエンディアンを使用し、（必要に応じて）パディングを使用して適切なアライメントを達成する必要があります。この追加の速度向上は、移植性よりも重要度が低いと考えられていた。</p><h3 id="プラットフォーム中立性" tabindex="-1">プラットフォーム中立性 <a class="header-anchor" href="#プラットフォーム中立性" aria-label="Permalink to &quot;プラットフォーム中立性&quot;">​</a></h3><p>クロスコンパイルをサポートすることで、あるプラットフォームで生成されたバイトコードを、同じDuktapeのバージョンが動作する限り、別のプラットフォームで読み込むことができる便利な機能です。</p><p>プラットフォームニュートラルであることの代償は、むしろ小さい。本質的な特徴は、エンディアンの正規化とアライメントの仮定を回避することです。この2つは、比較的小さなランタイムコストで非常に簡単に対応することができます。</p><h3 id="バイトコードヘッダー" tabindex="-1">バイトコードヘッダー <a class="header-anchor" href="#バイトコードヘッダー" aria-label="Permalink to &quot;バイトコードヘッダー&quot;">​</a></h3><p>初期値の0xBFバイトは、有効なUTF-8（拡張UTF-8でも）では決して出現しないため、バイトコード入力として誤ってランダムな文字列を使用すると失敗するため、使用されています。</p><h3 id="メモリの安全性とバイトコードの検証" tabindex="-1">メモリの安全性とバイトコードの検証 <a class="header-anchor" href="#メモリの安全性とバイトコードの検証" aria-label="Permalink to &quot;メモリの安全性とバイトコードの検証&quot;">​</a></h3><p>バイトコードロードプリミティブは、破損した（切り詰められた、あるいは変更された）バイトコードをロードしようとすると、メモリに安全でない動作（悪用可能な動作さえも）につながる可能性があるため、メモリに安全でない。バイトコードロードを高速かつ単純に保つために、入力バイトコードを解析する際の境界チェックもない。</p><p>シリアライズされたデータをロードする際に基本的な構文検証を行うことは簡単ですが、それでもメモリ安全性を保証することはできません。そうするためには、バイトコードのオペコードも検証する必要があります。そうしないと、実行時にメモリ安全でない動作が発生する可能性があります。</p><p>ロードされる関数には <code>nregs</code> 100 があり、その関数のために値スタックから100個のスロットが割り当てられると考える。その後、関数のバイトコードが実行された場合：</p><pre><code>LDREG 1, 999   ; read reg 999, out of bounds
STREG 1, 999   ; write reg 999, out of bounds
</code></pre><p>定数についても同様の問題があり、関数に100個の定数があるとします：</p><pre><code>LDCONST 1, 999 ; read constant 999, out of bounds
</code></pre><p>境界外直接参照に加えて、例えばレジスタのインデックスを別のレジスタからロードする「間接参照」オペコードも存在します。これらを検証するのはもっと難しく、基本的な制御フローのアルゴリズムなどが必要です。</p><p>全体として、壊れたバイトコードや悪意を持って作られたバイトコードを正しく検出するバイトコード検証を実装するのはかなり難しいでしょう。</p><p>それでも、バイトコード用の非常にシンプルなヘッダ署名があり、明らかに不正な値が早期に拒否されるようになっています。この署名は、通常の文字列データが誤ってバイトコードとして読み込まれないようにするものです（最初のバイト0xBFは拡張UTF-8では無効です）。マーカーを超えたバイトは検証されない。</p><h2 id="今後の課題" tabindex="-1">今後の課題 <a class="header-anchor" href="#今後の課題" aria-label="Permalink to &quot;今後の課題&quot;">​</a></h2><h3 id="フルバリューシリアライズ" tabindex="-1">フルバリューシリアライズ <a class="header-anchor" href="#フルバリューシリアライズ" aria-label="Permalink to &quot;フルバリューシリアライズ&quot;">​</a></h3><p>バイトコードダンプ/ロードは、関数値のサブセットに制限されています。汎用的な値のダンプ/ロードをサポートする方がよりエレガントでしょう。しかし、いくつかの実用的な問題があります：</p><ul><li>任意のオブジェクトグラフをサポートする必要があり、これは非常に困難である。</li><li>ロード時にネイティブの値を復活させるメカニズムも必要だ。例えば、開いているファイルを表すネイティブオブジェクトの場合、復活操作はファイルを開き直し、おそらく正しいオフセットにファイルをシークする。</li></ul><h3 id="バウンドファンクションに対応" tabindex="-1">バウンドファンクションに対応 <a class="header-anchor" href="#バウンドファンクションに対応" aria-label="Permalink to &quot;バウンドファンクションに対応&quot;">​</a></h3><p>現在、バインドされた関数に対してTypeErrorが投げられます。最初のステップとして、バウンドチェーンに従って、代わりに最終的なターゲット関数をシリアライズする方が良いかもしれません、つまり、バウンド状態はシリアライズ中に失われます。これは，エラーを投げるよりも，メタデータを失いながらシリアライズすることに近いと思います．</p><p>第二段階として、バインドされた <code>this</code> と引数の値をシリアライズすることができればよいでしょう。しかし、そのためには、適切な汎用値のシリアライズが必要であろう。</p><h3 id="commonjs-モジュールのキャッシュ化" tabindex="-1">CommonJS モジュールのキャッシュ化 <a class="header-anchor" href="#commonjs-モジュールのキャッシュ化" aria-label="Permalink to &quot;CommonJS モジュールのキャッシュ化&quot;">​</a></h3><p>CommonJSのモジュールのキャッシュは非常に便利です。モジュール機構を作り直すときに、それを行う方法を考えましょう。</p><h3 id="デバッガーのオーバーラップを把握する" tabindex="-1">デバッガーのオーバーラップを把握する <a class="header-anchor" href="#デバッガーのオーバーラップを把握する" aria-label="Permalink to &quot;デバッガーのオーバーラップを把握する&quot;">​</a></h3><p>デバッガプロトコルは、独自の値のシリアライズフォーマット（やや異なる目標を持つ）を持っています：</p><ul><li>ダンプ/ロードとデバッガ・プロトコルの間で値のシリアライズ形式を共有することは賢明でしょうか？</li><li>デバッガ・プロトコルで関数値をバイトコード・ダンプ/ロード・フォーマットでシリアライズすべきでしょうか？それはデバッガにとって有用でしょうか（その理由はすぐには分かりませんが）？</li></ul>`,121)]))}const b=a(r,[["render",l]]);export{s as __pageData,b as default};
