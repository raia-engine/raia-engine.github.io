import{_ as i,c as s,a2 as e,o as t}from"./chunks/framework.CKGreiRV.js";const u=JSON.parse('{"title":"string.format","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/string/format.md","filePath":"reference/built_in/string/format.md","lastUpdated":1730090475000}'),l={name:"reference/built_in/string/format.md"};function r(o,a,n,h,d,p){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="string-format" tabindex="-1">string.format <a class="header-anchor" href="#string-format" aria-label="Permalink to &quot;string.format&quot;">​</a></h1><p>フォーマットに従って文字列を生成する</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string.format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (formatstring, ···)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>指定されたフォーマット文字列 <code>formatstring</code> に従って、引数をフォーマットし、新しい文字列を返します。C 言語の <code>printf</code> スタイルの書式指定が使用でき、Lua 独自の <code>%q</code> オプションも利用可能です。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><p>LuaJITではLua5.2から次の機能を取り入れています。</p><ul><li><code>%q</code> による逆変換。</li><li><code>%s</code> を指定した場合にオブジェクトの <code>__tostring</code> メタメソッドをチェックする。</li><li><code>%a</code> と <code>%A</code>（浮動小数点数の16進数表記）。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string.format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello %s, you are %d years old.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Lua&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &quot;Hello Lua, you are 30 years old.&quot;</span></span></code></pre></div><p>この例では、フォーマットされた文字列を生成します。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><ul><li><code>%q</code>が逆変換可能(Lua5.2から)</li><li><code>%s</code>は<code>__tostring</code>をチェック(Lua5.2から)</li><li><code>%a</code>と<code>%A</code>が追加された。(Lua5.2から)</li></ul><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./rep.html"><code>string.rep</code></a></li></ul>`,17)]))}const k=i(l,[["render",r]]);export{u as __pageData,k as default};
