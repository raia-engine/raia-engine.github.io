import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"エラーオブジェクト","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/error-objects.md","filePath":"resource/duktape/doc/error-objects.md","lastUpdated":null}'),h={name:"resource/duktape/doc/error-objects.md"};function e(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="エラーオブジェクト" tabindex="-1">エラーオブジェクト <a class="header-anchor" href="#エラーオブジェクト" aria-label="Permalink to &quot;エラーオブジェクト&quot;">​</a></h1><p>標準的な ECMAScript の <code>Error</code> インスタンスは、 <code>name</code> と <code>message</code> を含むだけで、非常に素っ気ないものです。Duktape を含むほとんどの ECMAScript 実装は、ファイル名、行番号、トレースバックなどの追加のエラープロパティを提供します。ECMAScriptは任意の値を投げることができるが、ほとんどのユーザーコードは <code>Error</code> コンストラクタを継承したオブジェクトを投げる。</p><p>このドキュメントでは、Duktape がどのようにして <code>Error</code> オブジェクトを作成し、投げるのか、そのようなオブジェクトが持つプロパティは何か、そしてどのようなエラーメッセージの冗長性レベルが利用可能かについて説明しています。また、内部トレースバックデータフォーマットと、人間が読めるトレースバックを提供するメカニズムについても説明します。</p><p>また、公開されている機能をより分かりやすく解説したユーザードキュメントもご覧ください。</p><h2 id="エラーメッセージの冗長性レベル" tabindex="-1">エラーメッセージの冗長性レベル <a class="header-anchor" href="#エラーメッセージの冗長性レベル" aria-label="Permalink to &quot;エラーメッセージの冗長性レベル&quot;">​</a></h2><p>エラーメッセージの冗長性は3段階あり、指示された定義によって制御されます：</p><table tabindex="0"><thead><tr><th>DUK_USE_VERBOSE_ERRORS</th><th>DUK_USE_PARANOID_ERRORS</th><th>Description</th></tr></thead><tbody><tr><td>set</td><td>not set</td><td>例えば、<code>number required, found &#39;xyzzy&#39; (index -3)</code>のように、問題のあるキー/値を含むメッセージを表示します。これはデフォルトの動作です。</td></tr><tr><td>set</td><td>set</td><td>例えば、<code>number required, found string (index -3)</code>のように、問題のあるキー/値を含まない冗長なメッセージです。エラーメッセージに含まれるキー/値がセキュリティ上問題となる可能性があると考えられる場合に有用です。</td></tr><tr><td>not set</td><td>ignored</td><td>エラーオブジェクトは実際のエラーメッセージを持たない。エラーコードを文字列に変換したものが <code>.message</code> で提供される。メモリが非常に少ないターゲットに有用である。</td></tr></tbody></table><p>今後の課題：</p><ul><li>エラーメッセージ文字列が存在しても、最小限の数の異なるメッセージ文字列が存在するような低メモリのエラーメッセージがあれば便利でしょう。例えば、<code>duk_require_xxx()</code>の型の不一致によるすべてのエラーは <code>&quot;unexpected type&quot;</code> となり、すべてのスタックインデックスのエラーは <code>&quot;invalid argument&quot;</code> となる。</li></ul><h2 id="誤差補強の概要" tabindex="-1">誤差補強の概要 <a class="header-anchor" href="#誤差補強の概要" aria-label="Permalink to &quot;誤差補強の概要&quot;">​</a></h2><p>Duktapeでは、エラーオブジェクトを(1)生成時、(2)投げられる直前で拡張することができます。オブジェクトは一度しか生成されませんが、何度も投げたり、投げ直したりすることができます（ただし、オブジェクトの生成に関するコーナーケースもあります。）</p><p><code>Error</code> のインスタンスが生成されたとき：</p><ul><li>Duktape はまず、トレースバックまたはファイル/ライン情報 (アクティブな設定オプションに依存) をエラーオブジェクトに追加します。</li><li>次に、<code>Duktape.errCreate</code>が設定されていれば、それを呼び出してエラーをさらに拡張したり、完全に置き換えたりします。このコールバックは、実装内部では<strong>エラーハンドラ</strong>と呼ばれています。ユーザは必要に応じてエラーハンドラを設定することができますが、デフォルトでは設定されていません。</li></ul><p><code>Error</code> のインスタンスであるエラー値のみが拡張され、他の種類の値 (オブジェクトであっても) はそのままであることに注意してください。ユーザーエラーハンドラーは <code>Error</code> インスタンスでのみ呼び出されます。</p><p><strong>任意の値</strong>が投げられたとき（または再投げられたとき）：</p><ul><li><code>Duktape.errThrow</code>が設定されている場合、投げられた値を補強または置き換えるために呼び出されます。ユーザは必要に応じてエラーハンドラを設定することができますが、デフォルトでは設定されていません。</li></ul><p><code>Error</code> インスタンスだけでなく、すべての値が <code>Duktape.errThrow</code> に渡され処理されることに注意してください。エラーハンドラはまた、ユーザーコンテキストで適切な方法で再投与を処理する必要があります。</p><h2 id="エラーオブジェクトの作成" tabindex="-1">エラーオブジェクトの作成 <a class="header-anchor" href="#エラーオブジェクトの作成" aria-label="Permalink to &quot;エラーオブジェクトの作成&quot;">​</a></h2><p>エラーは複数の方法で作成することができます：</p><ul><li>ECMAScriptのコードから、通常は(常にではないが)<code>throw</code>ステートメントと結びついたエラーを作成する、例えば：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>この場合、Errorオブジェクトは、（<code>new Error(...)</code>で）Errorオブジェクトを生成したファイルのファイルと行をキャプチャする必要があります。</p><ul><li>Duktape APIを使用したCコードから、例えば：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, DUK_ERR_RANGE_ERROR, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;invalid argument: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, argvalue);</span></span></code></pre></div><p>このような場合、throwサイトの<code>__FILE__</code>と<code>__LINE__</code>が非常に便利です。エラーオブジェクトを生成するAPIコールはマクロとして実装され、<code>__FILE__</code>と<code>__LINE__</code>を便利に捕捉することができます。これは有用なトレースバックを作成するために非常に重要です。</p><ul><li>Duktapeの実装内部から、通常は <code>DUK_ERROR()</code> マクロを使って、例えば次のようにします：</li></ul><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DUK_ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thr, DUK_ERR_TYPE_ERROR, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;invalid argument: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, argvalue);</span></span></code></pre></div><p>このような場合、スローサイトの <code>__FILE__</code> と <code>__LINE__</code> はスタックトレースに含まれますが、エラーオブジェクトの <code>.fileName</code> と <code>.lineNumber</code> のエラーソースとして、&quot;blamed &quot;されません：ファイル/ラインはDuktape内部で、ユーザーコードにとって最も有用なものではありません。</p><p>基本的な <code>DUK_ERROR()</code> マクロと同様に動作する、特定のエラー用のヘルパーマクロがいくつか用意されています。</p><p>Duktape APIを使用して、またはDuktapeの実装内部からエラーが投げられた場合、投げられた値は常に<code>Error</code>のインスタンスであるため、拡張されます。エラーの生成とスローは同時に行われます。</p><p>ECMAScriptのコードからエラーが投げられる場合、状況は異なります。ユーザーコードが、エラーの生成とエラーのスローを分離することを妨げるものは何もない：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value too large&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>実際、ユーザーはエラーを投げるつもりはなくても、トレースバックにアクセスしたいと思うかもしれません：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currently here&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;debug: reached this point</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.stack);</span></span></code></pre></div><p>上述したように、通常、エラーはスローされたときではなく、作成されたときに増強するのが望ましいです。エラーを再度スローすると、何度も増強される可能性があり（以前の値を上書きする）、エラーによっては、スローされないかもしれませんが、トレースバック情報を持つことで恩恵を受けられます。</p><p>Duktapeの組み込みの拡張機能（基本的にトレースバックの追加）は、エラー作成時に行われます。オプションのエラーハンドラにより、エラー作成時とスローされる直前の両方を追加で処理することができます。</p><p>具体的には、コンストラクタを呼び出したとき（つまり <code>new Foo()</code> ）、呼び出し元のコードに返されようとする最終結果が検査されます。これは、コンストラクタ呼び出しの標準的な処理に対する変更であり、オブジェクトが生成されるたびに一律に適用されます（残念ながら、いくつかのオーバーヘッドが発生します）。最終的な値が <code>Error</code> インスタンスである場合、つまりその内部プロトタイプチェーンが <code>Error.prototype</code> を含んでいる場合です：</p><ul><li>オブジェクトが拡張可能である場合、その値はDuktapeの組み込み拡張機能によってエラー情報（例えばtraceata）で拡張される。</li><li><code>Duktape.errCreate</code>がセットされている場合、エラーはユーザーコールバックによってさらに処理されます。この処理を行うためにオブジェクトは拡張可能である必要はありませんが、それでも <code>Error</code> インスタンスである必要があることに注意してください。</li></ul><p>Duktapeは、オブジェクトに既に同じ名前のフィールドがある場合、追加フィールドの追加を拒否します。例えば、作成されたオブジェクトに <code>_Tracedata</code> フィールドがある場合、拡張処理によって上書きされることはありません。(ユーザーエラーハンドラにはそのような制限はなく、エラー値を完全に置き換えることができます)。</p><p>特定のオブジェクトが2回構築されることはありませんが、現在のアプローチでは、特別な場合にエラーオブジェクトがその生成中に2回拡張される可能性があります。これは、例えば次のように実現できます：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>ここで、エラーオーガメント（Duktape\\独自のオーガメント処理とユーザーエラーハンドラを含む）が2回発生することになる：</p><ol><li><code>new Error(&#39;my error&#39;)</code>が実行されると、結果が増大される。ユーザーエラーハンドラ（<code>errCreate</code>）が存在する場合、それが呼び出される。</li><li><code>new Constructor()</code>の呼び出しが戻ると、返されたエラー値がコンストラクタに与えられたデフォルトオブジェクトを置き換えます。置換された値（すなわち <code>new Error(&#39;my error&#39;)</code> の結果）は増強される。</li></ol><p>この動作の問題を回避するため、Duktapeの拡張コードでは、すでにフィールドが存在する場合は、エラーにフィールドを追加することを拒否しています。これにより、上記のステップ2でトレースバックデータが上書きされることがないようにします。ユーザーの <code>errCreate</code> エラーハンドラは、同じエラーオブジェクトに対する複数の呼び出しに適切に対処する必要があります。最も簡単なのは、次のような方法です：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errCreate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timestamp&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only touch once</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e.timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>作成中に拡張することの欠点は、エラー情報がエラーをスローする実際の <code>throw</code> ステートメントを正確に反映しない可能性があることです。特に、ユーザーコードは、実際にエラーがスローされる場所や時間とは全く異なる場所で、全く異なる時間にエラー値を作成する可能性があります。ユーザーコードは、同じエラー値を複数回投げることもあります。</p><p>エラーオブジェクトは <code>Error</code> コンストラクタ（またはサブクラスのコンストラクタ）を通常の関数として呼び出すことによっても作成することができます。標準では、これは意味的にコンストラクタ呼び出しと同等です。Duktapeは、組み込みのエラーコンストラクタを呼び出して作成されたエラーを、通常の関数呼び出しで補強することもできます。しかし、ユーザーが作成したErrorのサブクラスは、この挙動を示さない。例えば、以下のような感じです：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;MyError&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// augmented, constructor call</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// augmented, special handling</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// augmented, constructor call</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test 4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not augmented</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e1.stack);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e2.stack);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e3.stack);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e4.stack);</span></span></code></pre></div><p>Prints out:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.js:4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (null) native strict preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.js:5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.js:6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">undefined</span></span></code></pre></div><p>なお、内部的な詳細のため、<code>Error</code>コンストラクタを通常の関数として呼び出した場合のトレースバックは異なる。</p><p>この挙動を修正し、非コンストラクタコールで呼び出されたときにユーザーエラーもオーグメントされるようにするのは難しいようです。増強が適切かどうかを検出するのは難しいでしょうし、通常の関数呼び出しのたびにオーバーヘッドを追加することになります。</p><h2 id="エラースロー" tabindex="-1">エラースロー <a class="header-anchor" href="#エラースロー" aria-label="Permalink to &quot;エラースロー&quot;">​</a></h2><p>任意のエラー値**が投げられた場合、<code>Duktape.errThrow</code>に設定されたオプションのユーザーエラーハンドラは、エラー値を処理または置き換えることができます。どんな値でも投げられるので、これはすべての型に適用されます。</p><p>ユーザーエラーハンドラーは、以下のような対応をしなければなりません：</p><ul><li>エラー値の変更を関連する値のみに制限する（例：<code>Error</code>インスタンスにのみ）。</li><li>再スローを適切に処理する。</li></ul><p>例えば、次のようにすると、エラーオブジェクトが最初に投げられたときに、タイムスタンプが追加されます：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errThrow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only touch errors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timestamp&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only touch once</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e.timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="エラーハンドラを指定する" tabindex="-1">エラーハンドラを指定する <a class="header-anchor" href="#エラーハンドラを指定する" aria-label="Permalink to &quot;エラーハンドラを指定する&quot;">​</a></h2><h3 id="現在の取り組み" tabindex="-1">現在の取り組み <a class="header-anchor" href="#現在の取り組み" aria-label="Permalink to &quot;現在の取り組み&quot;">​</a></h3><p>現在のcreate/throwエラーハンドラは <code>Duktape.errCreate</code> と <code>Duktape.errThrow</code> に格納されています。これにはいくつかの利点があります：</p><ul><li><code>Duktape</code> オブジェクトは、追加の API バインディングなしで C と ECMAScript の両方のコードから簡単にアクセスすることができます。</li><li>サンドボックスの開始時に <code>Duktape</code> オブジェクトを（ユーザーコードからアクセスできない）隠し場所に移動し、C コードから隠し場所を通してエラーハンドラを制御することができます。</li><li>エラーハンドラのスコープは、同じ <code>Duktape</code> 組み込みを共有するすべてのスレッド、つまり、同じグローバル環境を共有するスレッドです。これは、例えば再開されたスレッドではエラーハンドラが自動的に有効になることを意味し、おそらくこれは良いデフォルトの動作である。</li></ul><h3 id="デザインの選択肢" tabindex="-1">デザインの選択肢 <a class="header-anchor" href="#デザインの選択肢" aria-label="Permalink to &quot;デザインの選択肢&quot;">​</a></h3><p>しかし、現在の方法にはいくつかの代替案があります。一つは、エラーハンドラ(複数)を</p><ul><li>内部データ構造、例えば <code>thr-&gt;errcreate</code> や <code>thr-&gt;errthrow</code> などです。これはサンドボックスの観点からはより強力ですが、ハンドラを取得/設定するためのカスタムバインディングが必要になります。また、メモリ管理もフィールドについて知っておく必要がある。</li><li>特定の保護された呼び出しの間だけ、スレッドの値スタックを呼び出す（呼び出し元のフレームで）。このモデルはLuaで使用されており、Duktapeでも0.9.0まで使用されていた。欠点は、保護された呼び出しが、かなり稀に使用されるエラー・ハンドラを管理する必要があることです。</li><li>グローバル・オブジェクト。これは <code>Duktape</code> オブジェクトを使うよりも全体的に悪いと思われます。なぜなら、サンドボックスのために悪くなり、明らかな利点がないからです。</li><li>スレッドオブジェクト。これは、再開されたスレッドにエラーハンドラを継承するための余分なコードが必要になります（それは良いデフォルトの動作のように思えるので）。</li><li>グローバルスタッシュ。サンドボックス化には良いが、デフォルトではCコードからしかアクセスできない。これは、現在の動作に対する最良の選択肢の1つであると思われます。</li><li>スレッドスタッシュ。サンドボックス化には良いが、エラーハンドラ &quot;inherit &quot;の問題がある。</li></ul><h2 id="エラーオブジェクトのプロパティ" tabindex="-1">エラーオブジェクトのプロパティ <a class="header-anchor" href="#エラーオブジェクトのプロパティ" aria-label="Permalink to &quot;エラーオブジェクトのプロパティ&quot;">​</a></h2><p>次の表は、Duktapeのデフォルトの設定オプション（特に、トレースバックが有効）で、実装の制御範囲内で構築された<code>Error</code>オブジェクトのプロパティをまとめたものです：</p><table tabindex="0"><thead><tr><th>Property</th><th>Standard</th><th>Inherited</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>yes</td><td>yes</td><td>例：<code>TypeError</code>はTypeErrorを表す（通常は継承される）。</td></tr><tr><td>message</td><td>yes</td><td>no</td><td>自前メッセージ</td></tr><tr><td>fileName</td><td>no</td><td>yes</td><td>構築されたファイル名（継承されたアクセサー）</td></tr><tr><td>lineNumber</td><td>no</td><td>yes</td><td>構築されたファイルの行（継承されたアクセサー）。</td></tr><tr><td>stack</td><td>no</td><td>yes</td><td>printableスタックトレースバック文字列(継承アクセサー)</td></tr><tr><td>_Tracedata</td><td>no</td><td>no</td><td>スタックトレースバックデータ、内部生形式（自身の内部プロパティ）</td></tr></tbody></table><p><code>Error.prototype</code>は、以下の非標準的なプロパティを含む：</p><table tabindex="0"><thead><tr><th>Property</th><th>Standard</th><th>Description</th></tr></thead><tbody><tr><td>stack</td><td>no</td><td>accessor property for getting a printable traceback based on _Tracedata</td></tr><tr><td>fileName</td><td>no</td><td>accessor property for getting a filename based on _Tracedata</td></tr><tr><td>lineNumber</td><td>no</td><td>accessor property for getting a linenumber based on _Tracedata</td></tr></tbody></table><p>オブジェクト・インスタンスが同名のownプロパティを持っていない場合に備えて、アクセサーはすべてプロトタイプに用意されています。これにより、エラーインスタンスのプロパティ数を最小限に抑えつつ、必要に応じてインスタンス固有の値を提供することができる柔軟性を持たせています。また、セッターを使用することで、ユーザーコードがインスタンス固有の値をエラーオブジェクトの &quot;own property &quot;として書き込むことができ、後の読み込みでアクセッサがシャドウされることに注意してください。</p><p>Notes:</p><ul><li><code>stack</code>プロパティの名前はV8からのもので、動作もV8に近い。V8では、ユーザーコードが <code>stack</code> プロパティに書き込むことはできますが、同じ名前の独自のプロパティを作成することはありません。書き込まれた値は、後で <code>stack</code> が読み返されたときにも表示されます。</li><li><code>fileName</code>と<code>lineNumber</code>のプロパティ名はRhinoに由来します。</li><li>Duktape 1.3.0以前のバージョンでは、ユーザーコードは <code>.fileName</code>, <code>.lineNumber</code>, <code>.stack</code> を直接書き込むことができませんでした。なぜなら、継承されたセッターはこのような書き込みを捕捉して無視するためです。ユーザーコードは <code>Object.defineProperty()</code> や <code>duk_def_prop()</code> を使って、オーバーライドするプロパティを作成することができました。Duktape 1.4.0 では、セッターが変更され、書き込みが透過的に動作するようになりました：書き込みはセッターによって捕捉されますが、セッターは自動的に自身のプロパティを作成します。</li><li><code>Tracedata</code>は内部フォーマットを持っており、バージョンごとに（あるいはビルドごとに）変更される可能性があります。Duktape ヒープのライフサイクル以外では、決してシリアライズしたり、使用したりしてはいけません。</li><li>サイズを最適化したビルドでは、トレースバック情報が省略されることがあります。そのような場合、<code>fileName</code> と <code>lineNumber</code> は具体的な自身のプロパティであり、<code>.stack</code> は <code>ToString()</code> で強制されたエラー文字列、例えば <code>TypeError: my error message</code> を返す継承プロパティである。</li><li>サイズを最適化したビルドでは、Duktape の実装によって作成されたエラーは、有用な <code>message</code> フィールドを持ちません。代わりに <code>message</code> には、エラー <code>code</code> の文字列表現が設定されます。ユーザーコードから投げられた例外は、通常 <code>message</code> を持ちます。</li><li><code>Tracedata</code> プロパティは、現在のコールスタックにある関数への参照を含んでいます。このような参照はサンドボックス化の懸念があるため、トレースデータは内部プロパティに格納されます。</li></ul><h2 id="エラーの原因となる-filenameと-linenumberを選択すること" tabindex="-1">エラーの原因となる.fileNameと.lineNumberを選択すること <a class="header-anchor" href="#エラーの原因となる-filenameと-linenumberを選択すること" aria-label="Permalink to &quot;エラーの原因となる.fileNameと.lineNumberを選択すること&quot;">​</a></h2><h3 id="問題の概要" tabindex="-1">問題の概要 <a class="header-anchor" href="#問題の概要" aria-label="Permalink to &quot;問題の概要&quot;">​</a></h3><p>エラーが発生したとき、どのファイルや行をエラーの発生源とするかは、必ずしも明確ではありません： エラーオブジェクトの <code>.fileName</code> と <code>.lineNumber</code> プロパティは、アプリケーションプログラマがエラーの原因を特定するために役立つはずです。</p><p>該当するファイル・行のペアは</p><ul><li><strong>The __FILE__ and __LINE__ of the C call site</strong>. これらはDuktape/C関数の一行を指すことが多いのですが、Duktape/C関数が別のファイルのヘルパーを呼び出してエラーを発生させることもありえます。例えば、ユーザー・コードが <code>duk_require_xxx()</code> を呼び出し、内部マクロ <code>DUK_ERROR()</code> を使ってスローする場合、Cの呼び出し先はDuktape内部である可能性もあります。最後に、コールスタックエントリが存在しない場合にエラーを投げることも可能です; Cコールサイト情報はまだ利用可能です。</li><li><strong>コンパイル中のソーステキストのファイル/ライン</strong>. これは、コンパイル中に投げられたエラー（通常はSyntaxErrorsですが、他のエラーもありえます）にのみ関連します。</li><li><strong>エラーに至るまでのコールスタックエントリー（アクティベーション）の実際</strong>. これらはDuktape/C関数とECMAScript関数を使用することができます。例えば、ECMAScriptの関数はデフォルトで <code>.name</code> と <code>.fileName</code> の両方のプロパティを持ちますが、Duktape/Cの関数にはありません。関数の作成後にプロパティを追加したり削除したりすることも可能です。</li></ul><p>次のSyntaxErrorは、関連するすべてのファイル/行のソースを示しています：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">try</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;\\n\\nfoo=&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); } catch (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">e.stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">e.fileName,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> e.lineNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SyntaxError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        input:3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file/line</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SyntaxError)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_js_compiler.c:3612</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __FILE__</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __LINE__</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DUK_ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">call</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> site</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> strict</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directeval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> innermost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> activation,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">function</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input:1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> innermost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> activation,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> caller</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .fileName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .lineNumber</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blames</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SyntaxError</span></span></code></pre></div><p>アプリケーションから見て、最も関連性の高いファイル/行は、通常、コールスタック内で最も近い &quot;ユーザー機能&quot;（&quot;インフラ機能 &quot;とは異なる）です。以下は、非難するのに有用でないことが多い：</p><ul><li>Duktape/CまたはECMAScriptの関数で、エラーチェッカー、1対1のシステムコールラッパーなど、インフラストラクチャー関数とみなされるものすべて。</li><li>Duktape内のCコールサイト、これらは基本的に常にインフラストラクチャ関数です。</li><li>Duktape/CまたはECMAScriptの関数で、<code>.fileName</code>プロパティがないもの。このような関数は、たとえユーザー関数であっても無視されるべきで、結果として得られるファイル/ライン情報が無意味になるからです。</li></ul><p>この理想的な結果を実現するためには、Duktapeが、ある関数を無視した非難を行うべきかどうかを判断できるようにする必要があります。これはまだ可能ではありません。以下のサブセクションでは、現在の動作について説明します。</p><p>ファイル/ライン情報は良いエラー報告のために重要ですが、関連するすべての情報は、とにかくスタックトレースで常に利用可能であることに注意してください。不正確なファイル/行の非難は迷惑ですが、通常、重大な問題ではありません。</p><h3 id="duktape-1-3動作" tabindex="-1">Duktape 1.3動作 <a class="header-anchor" href="#duktape-1-3動作" aria-label="Permalink to &quot;Duktape 1.3動作&quot;">​</a></h3><p>Duktape 1.3では、特定のファイル/行をエラーの原因とするルールは比較的単純です：</p><ul><li>コンパイル中に発生したエラーは、常にソーステキストファイル/行のせいにされます。コンパイルエラーは典型的なSyntaxErrorですが、メモリ不足の内部エラーなどもありえます。</li><li>Duktapeの内部で発生したエラー（<code>duk_require_xxx()</code>のようなDuktape API関数を含む）については、C言語のコールサイトは無視され、ファイル/ライン情報については最も内側の起動が使用されます。これは、最も内側のアクティベーションの関数に <code>.fileName</code> プロパティがなく、エラー <code>.fileName</code> が <code>undefined</code> となる場合でも同じです。</li><li>Duktape API (<code>duk_push_error_object()</code>, <code>duk_error()</code> など)を使用して作成/スローされたエラーは、常にC呼び出しサイトが責められ、エラーのファイル/行情報がC呼び出しサイトの <code>__FILE__</code>/<code>__LINE__</code> に一致するようにします。この動作はハードコードされています。ユーザーコードは、エラーオブジェクトに <code>.fileName</code> と <code>.lineNumber</code> を定義することでこの動作をオーバーライドすることができます。</li></ul><p>このルールには、いくつかの欠点があります。</p><p>まず、C言語のコールサイトは、ユーザーが投げたエラーの責任を負わされることになりますが、これはしばしば最善の行動ではありません。例えば、次のようなことです：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* foo/bar/quux.c */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duk_ret_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_argument_validator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* ... */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* The duk_error() call site&#39;s __FILE__ and __LINE__ will be</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * recorded into _Tracedata and will be provided when reading</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * .fileName and .lineNumber of the error, e.g.:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         *     err.fileName   --&gt; &quot;foo/bar/quux.c&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         *     err.lineNumber --&gt; 1234</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * If this an &quot;infrastructure function&quot;, e.g. a validator for</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * an argument value, the file/line blamed is not very useful.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, DUK_ERR_RANGE_ERROR, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;argument out of range&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次に、C言語のコールサイトが非難されず、最も内側のアクティベーションに <code>.fileName</code> プロパティがない場合（Duktape/C関数のデフォルト）、エラーの <code>.fileName</code> は <code>undefined</code> になります。例えば、以下のようになります：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((o) Duktape </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk&gt; try { [1,2,3].forEach(123); } catch (e) { err = e; }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-105</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.fileName</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.lineNumber</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.stack</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-105</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        forEach</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> strict</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input:1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Array.prototype.forEach.name</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> forEach</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Array.prototype.forEach.fileName</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> undefined</span></span></code></pre></div><p><code>forEach()</code>は <code>.name</code> プロパティを持っていますが、<code>.fileName</code> を持っていないので <code>err.fileName</code> が <code>undefined</code> になっています。これは明らかに使い勝手が悪い。ファイル名を持つ最も近い呼び出し先である <code>input</code> のエラーを責める方がより有用だろう。</p><h3 id="duktape-1-4-0-の動作について" tabindex="-1">Duktape 1.4.0 の動作について <a class="header-anchor" href="#duktape-1-4-0-の動作について" aria-label="Permalink to &quot;Duktape 1.4.0 の動作について&quot;">​</a></h3><p>Duktape 1.4.0では、C言語のコールサイト情報が非難されない場合の非難動作を若干改善しました。ファイル/ライン情報を最も内側のアクティベーションから取得する代わりに、<code>.fileName</code>プロパティを持っている最も近いアクティベーションから取得するようにしました。</p><p>これにより、上記の<code>forEach()</code>の例でファイル/行の非難が改善されます：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((o) Duktape </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">294</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g386260d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dirty)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk&gt; try { [1,2,3].forEach(123); } catch (e) { err = e; }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> required,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (stack </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">index</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.fileName</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.lineNumber</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p><code>forEach()</code>にファイル名が割り当てられている場合は、その代わりに非難されます：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((o) Duktape </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">294</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g386260d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dirty)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk&gt; Array.prototype.forEach.fileName = &#39;dummyFilename.c&#39;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dummyFilename.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">try</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [1,2,3].forEach(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); } catch (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">err</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> required,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (stack </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">index</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.fileName</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dummyFilename.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.lineNumber</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>コンパイル時に発生するエラー（典型的なSyntaxErrors）に対する動作に変更はない。</p><p>また、<code>duk_error()</code>を使用して明示的に投げられたエラーなど、C言語のコールサイトが責められる場合にも変更はありません。このようなエラーはインフラコードとアプリケーションコードの両方から発生する可能性があるため、このようなエラーに対して理想的なファイル/行を選択するための情報がまだ十分ではありません。</p><h3 id="filenameと-linenumberのアクセサーを置き換える" tabindex="-1">.fileNameと.lineNumberのアクセサーを置き換える <a class="header-anchor" href="#filenameと-linenumberのアクセサーを置き換える" aria-label="Permalink to &quot;.fileNameと.lineNumberのアクセサーを置き換える&quot;">​</a></h3><p>ユーザーアプリケーションがファイルや行の非難をもっとコントロールしたい場合、継承された <code>Error.prototype.fileName</code> と <code>Error.prototype.lineNumber</code> アクセッサを置き換えて、アプリケーションに最も適したロジックを実装することが可能です。例えば、ファイル名のホワイトリスト/ブラックリストやファイル名のパターンに基づいて関数をフィルタリングすることができます。</p><p>この欠点は、アプリケーションが、バージョンに依存する形式の <code>_Tracedata</code> をデコードする必要があることです。</p><h3 id="今後の改善点" tabindex="-1">今後の改善点 <a class="header-anchor" href="#今後の改善点" aria-label="Permalink to &quot;今後の改善点&quot;">​</a></h3><h4 id="cコールサイトの制御非難" tabindex="-1">Cコールサイトの制御非難 <a class="header-anchor" href="#cコールサイトの制御非難" aria-label="Permalink to &quot;Cコールサイトの制御非難&quot;">​</a></h4><p>Cコードで、エラー生成/スローのCコールサイトをファイル/ラインの非難に関連するとみなすかどうかを指定できるようにする。この変更により、ユーザーコードはエラーごとに非難を制御できるようになります。</p><p>Duktapeでは、エラーコードとORしたフラグ(<code>DUK_ERCODE_FLAG_NOBLAME_FILELINE</code>)を使って、すでに内部でこの処理を行っています。このフラグは単にAPIで公開することもできますが、他のAPI設計のオプションもあります。</p><h4 id="コンパイルエラーの制御エラー責めを行う" tabindex="-1">コンパイルエラーの制御エラー責めを行う <a class="header-anchor" href="#コンパイルエラーの制御エラー責めを行う" aria-label="Permalink to &quot;コンパイルエラーの制御エラー責めを行う&quot;">​</a></h4><p>現在、ソーステキストファイル/行は、コンパイル時に発生したエラー（典型的なSyntaxErrors）に対して常に非難されています。</p><p>技術的には、&quot;インフラストラクチャーコード &quot;の内部でコンパイルエラーが発生する可能性があり、それを責めることが必ずしも正しいとは限りません。これは、コンパイルAPI呼び出しにフラグを追加することで簡単に修正できます。</p><h4 id="機能の制御エラー非難" tabindex="-1">機能の制御エラー非難 <a class="header-anchor" href="#機能の制御エラー非難" aria-label="Permalink to &quot;機能の制御エラー非難&quot;">​</a></h4><p>Duktape/CおよびECMAScript関数が、その関数がファイル/ラインの非難に関連すると見なされるべきかどうかを示すフラグを提供できるようにしました。</p><p>Duktape 1.4.0では、関数の <code>.fileName</code> プロパティがある程度この目的を果たします。関数に <code>.fileName</code> がない場合、ファイル/ラインの非難では無視され、つまりインフラストラクチャ関数として扱われます。しかし、<code>.fileName</code>を持つインフラストラクチャ関数や、<code>.fileName</code>を持たない非インフラストラクチャ関数があるかもしれないので、明示的に非難動作を制御できるようになると便利だと思います。</p><p>制御フラグは <code>duk_hobject</code> フラグまたは (内部または外部の) プロパティとして実装することができます。</p><h4 id="ライトファンクスの取り扱いについて" tabindex="-1">ライトファンクスの取り扱いについて <a class="header-anchor" href="#ライトファンクスの取り扱いについて" aria-label="Permalink to &quot;ライトファンクスの取り扱いについて&quot;">​</a></h4><p>lightfuncsは非難されるべきか、されないべきか？現在、ファイル/ラインについて非難されることはない。</p><h2 id="コーズチェーン" tabindex="-1">コーズチェーン <a class="header-anchor" href="#コーズチェーン" aria-label="Permalink to &quot;コーズチェーン&quot;">​</a></h2><p>現在、コーズチェーンはサポートされていません：ECMAScriptには因果連鎖の概念はなく、非公式な標準もないようです。</p><p>エラー時に <code>cause</code> プロパティを設定できるようにし、トレースバックフォーマッターをそれに従わせることで、カスタムの原因チェーンを簡単にサポートすることができます。</p><p>エラー原因を設定するためのカスタムメカニズムを使用する必要があります。非常に非侵襲的なアプローチとして、以下のようなものがあります：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;something went wrong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// line N</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e2.cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;                                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// line N+1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2;                                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// line N+2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これはかなり厄介で、エラー行の情報が簡単に歪んでしまいます。行数の問題は、可読性を犠牲にしてでも、エラー作成を1行にまとめることで軽減できる：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;something went wrong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); e2.cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>また、エラーコンストラクタを拡張して、コンストラクタ呼び出しの際に原因を指定できるようにすることもできます。これはJavaの動作を模倣したもので、使い勝手は良いのですが、標準的なセマンティクスに干渉する可能性が高くなります：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;something went wrong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>Error.prototypeから継承されたセッターメソッドを使用することは、非常に悪いアイデアです。 このような呼び出しは移植不可能であり、他のECMAScriptエンジンで使用するとエラーが発生するためです。:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;something went wrong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// throws error if setCause is undefined!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>Duktape APIを使用するCコードやDuktapeの実装内部からもエラーが発生（スロー）するため、これらについても原因処理を考慮する必要があります。</p><p>cause\`プロパティは何でも設定できるので、実装では、例えば、以下のようなことを許容する必要があります：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // non-Error causes (print reasonably in a traceback)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e.cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // cause loops (detect or sanity depth limit traceback)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e1.cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e2.cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e1;</span></span></code></pre></div><h2 id="トレースバックフォーマット-tracedata" tabindex="-1">トレースバックフォーマット (_Tracedata) <a class="header-anchor" href="#トレースバックフォーマット-tracedata" aria-label="Permalink to &quot;トレースバックフォーマット (\\_Tracedata)&quot;">​</a></h2><h3 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>トレースデータ <code>_Tracedata</code> 値の目的は、エラー処理によってコールスタックが巻き戻される前に、関連するコールスタック情報を非常に素早く取得することである。多くの場合、トレースバック情報は全く使用されないので、コンパクトで安価な方法で記録する必要があります。</p><p>これらの要件を満たすために、以下に説明する現在のフォーマットは、少し難解です。このフォーマットはバージョンに依存し、ユーザーコードから直接アクセスすることは想定していません。</p><p><code>_Tracedata</code>の値はフラットな配列で、次のような値が格納されます。: (1) コンパイルエラーの可能性のある箇所、(2) C言語の呼び出しの可能性のある箇所、(3) コールスタックの内容。コールスタックの先頭から始まり、コールスタックの底か最大トレースバック深度に達するまで下へ下へと作業する。</p><p>トレースデータは、Duktapeの内部機能でのみ処理されます：</p><ul><li><code>Error.prototype.stack</code>アクセサは、トレースデータを人間が読めるように印刷可能なトレースバック文字列に変換します。</li><li><code>Error.prototype.fileName</code> と <code>Error.prototype.lineNumber</code> アクセサは、トレースデータに基づいてエラーの原因となるファイルや行を指定します。</li><li>現在（Duktape 1.4時点）、ユーザーアプリケーションでトレースデータをデコードするためのヘルパーは公開されていません。しかし、ユーザーコードは <code>errCreate</code> と <code>errThrow</code> フックの <code>Duktape.act()</code> を使って現在のコールスタックを調査することができます。</li></ul><p>Duktape 1.4.0での具体的なトレースデータの例です：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((o) Duktape </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">294</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g72447fe)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk&gt; try { eval(&#39;\\n\\nfoo=&#39;); } catch (e) { err = e; }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SyntaxError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err.stack</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SyntaxError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        input:3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        duk_js_compiler.c:3655</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> strict</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directeval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input:1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Duktape.enc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;jx&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> err[Duktape.dec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;hex&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ff&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Tracedata&#39;],</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> null,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;input&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compilation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> site</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      /</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;duk_js_compiler.c&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> call</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> site</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    4294970951,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             /</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_func:true},</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    107374182400,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  callstack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_func:true},</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    34359738375</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             /</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="トラディショナルパーツ" tabindex="-1">トラディショナルパーツ <a class="header-anchor" href="#トラディショナルパーツ" aria-label="Permalink to &quot;トラディショナルパーツ&quot;">​</a></h3><h4 id="コンパイルエラー" tabindex="-1">コンパイルエラー <a class="header-anchor" href="#コンパイルエラー" aria-label="Permalink to &quot;コンパイルエラー&quot;">​</a></h4><p>コンパイル中にエラーが発生した場合（通常はSyntaxError）、ソーステキストのファイル/行が <code>_Tracedata</code> にプッシュされます：</p><ul><li>ソースファイル名（文字列）。</li><li>数値（double）として、問題のあるリネン番号。</li></ul><h4 id="cコールサイト" tabindex="-1">Cコールサイト <a class="header-anchor" href="#cコールサイト" aria-label="Permalink to &quot;Cコールサイト&quot;">​</a></h4><p>呼び出しに関連するC言語のコールサイトがある場合、コールサイトは <code>_Tracedata</code> にプッシュされます。:</p><ul><li>The <code>__FILE__</code> value as a string.</li><li>A number (double) containing the expression:</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__LINE__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>現在の唯一のフラグは、ユーザーがエラーに関連する <code>fileName</code> または <code>lineNumber</code> を要求したときに、<code>__FILE__</code> / <code>__LINE__</code> のペアをエラー位置として &quot;blamed&quot; するかどうかを示します。.</p><h4 id="コールスタックエントリー" tabindex="-1">コールスタックエントリー <a class="header-anchor" href="#コールスタックエントリー" aria-label="Permalink to &quot;コールスタックエントリー&quot;">​</a></h4><p>その後、コールスタック要素ごとに、<code>_Tracedata</code>に追加される配列のエントリは、以下のペアからなる：</p><ul><li>アクティベーションの関数オブジェクトです。関数オブジェクトには、関数の種類と名前が含まれています。また、ファイル名（またはそれに相当するもの、&quot;global &quot;や &quot;eval&quot;）と、場合によってはPCから行へのデバッグ情報も含まれます。これらは、印刷可能なトレースバックを作成するために必要である。</li><li>式を含む数値（double）：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activation_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (activation_pc)</span></span></code></pre></div><p>C言語の関数の場合、プログラムカウンタの値は0である。起動フラグの値は <code>duk_hthread.h</code> で定義されています。PCの値は、関数オブジェクトのデバッグ情報とともに行番号に変換することができます。このフラグにより、例えばテールコールをトレースバックで記録することができます。</p><h3 id="備考" tabindex="-1">備考 <a class="header-anchor" href="#備考" aria-label="Permalink to &quot;備考&quot;">​</a></h3><ul><li>IEEE doubleは53ビットの整数を正確に保持することができるので、現在の表現ではフラグをたくさん置くスペースがあります。ただし、フラグはフラグフィールドの下位になければなりません（ビット20以下）。</li><li>起動ごとに <code>_Tracedata</code> 配列に追加される要素の数は、配列の先頭から値を解読できる限り一定である必要はない（言い換えれば、ランダムアクセスは今のところ重要ではない）。</li><li>もしあれば、<code>this</code>バインディングは現在記録されていません。</li><li>活性化レコードの変数値は記録されない。コールスタックを検査することができ、レジスタマップ（定義されている場合）は識別子名をレジスタにマッピングする方法を提供するため、それらは実際に利用可能である。これは間違いなく将来の仕事であり、より良いデバッグサポートのために必要かもしれません。</li><li>現在 <code>_Tracedata</code> の値は配列ですが、メモリ使用量とパフォーマンスを最適化するために、将来的にはそれ自身の内部型に変更されるかもしれません。この内部型は基本的に型付きバッファであり、ガベージコレクションはこのバッファにアクセスする方法を知っています。</li></ul>`,156)]))}const F=i(h,[["render",e]]);export{o as __pageData,F as default};
