import{_ as e,c as a,a2 as i,o as p}from"./chunks/framework.DzmM640o.js";const u=JSON.parse('{"title":"内部および外部プロトタイプ","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/wiki/internal_and_external_prototype.md","filePath":"resource/duktape/wiki/internal_and_external_prototype.md","lastUpdated":1732350347000}'),s={name:"resource/duktape/wiki/internal_and_external_prototype.md"};function o(r,t,n,l,c,h){return p(),a("div",null,t[0]||(t[0]=[i(`<h1 id="内部および外部プロトタイプ" tabindex="-1">内部および外部プロトタイプ <a class="header-anchor" href="#内部および外部プロトタイプ" aria-label="Permalink to &quot;内部および外部プロトタイプ&quot;">​</a></h1><p>ECMAScriptには2つの異なるプロトタイプの概念があり、混乱する可能性があります。</p><ul><li>内部プロトタイプ：すべてのオブジェクトに存在し、実際のプロパティとメソッドの検索を制御します。</li><li>外部プロトタイプ：コンストラクタ関数の .prototype プロパティで、コンストラクタ呼び出し（new MyConstructor()）を使用して作成されたオブジェクトの内部プロトタイプを初期化するために使用されます。</li></ul><p>「内部プロトタイプ」と「外部プロトタイプ」は標準的な用語ではありませんが、Duktapeのドキュメントでは分かりやすくするために使用されています。</p><p>こちらもご参照ください。</p><ul><li>ネイティブコンストラクタ関数の書き方</li><li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noreferrer">https://developer.mozilla.org/en/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></li><li><a href="http://stackoverflow.com/questions/383201/relation-between-prototype-and-prototype-in-javascript" target="_blank" rel="noreferrer">http://stackoverflow.com/questions/383201/relation-between-prototype-and-prototype-in-javascript</a></li></ul><h2 id="内部プロトタイプ" tabindex="-1">内部プロトタイプ <a class="header-anchor" href="#内部プロトタイプ" aria-label="Permalink to &quot;内部プロトタイプ&quot;">​</a></h2><p>内部プロトタイプは、単に &quot;プロトタイプ &quot;とも呼ばれ、ECMAScript 仕様では内部プロパティ [[Prototype]] として規定されている。</p><ul><li><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2" target="_blank" rel="noreferrer">http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2</a></li></ul><p>obj.propのような実際のプロパティ検索に影響します。少し単純化すると、プロパティ・ルックアップ。</p><ul><li>プロパティが、いわゆる &quot;自分のプロパティ&quot; として、ターゲット・オブジェクトに直接存在するかどうかをチェックします。</li><li>プロパティが見つかった場合、ルックアップは終了します。</li><li>プロパティが見つからない場合、そのオブジェクトの内部プロトタイプが検索される。内部プロトタイプが NULL の場合、検索は失敗する。内部プロトタイプが NULL の場合、検索は失敗する。それ以外の場合、プロトタイプオブジェクトから再帰的にプロパティが検索される。この一連のオブジェクトの探索をプロトタイプチェーンと呼ぶ。</li></ul><p>内部プロパティである[[Prototype]]プロパティには直接アクセスできませんが、それを使って対話することは可能です。</p><ul><li>obj.__proto__: Object.prototype を継承するオブジェクトの内部プロトタイプの読み書きを可能にする Object.prototype から継承したアクセサプロパティ（すべてのオブジェクトがそうではない！）。ES2015で指定されましたが、ES2015以前の非標準的な実装もあります。</li><li>Object.getPrototypeOf() および Object.setPrototypeOf(): ES2015 で追加された、内部プロトタイプの読み書きを行う明示的なメソッドです。</li><li>duk_get_prototype()およびduk_set_prototype()。内部プロトタイプを読み書きするためのDuktape C APIコール。</li></ul><p>ECMAScript の API (__proto__ と Obj.setPrototypeOf) は、プロトタイプ・ループの作成を防いでいるため、作成しようとすると TypeError で失敗します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>duk&gt; var obj1 = {}; var obj2 = {};</span></span>
<span class="line"><span>= undefined</span></span>
<span class="line"><span>duk&gt; Object.setPrototypeOf(obj1, obj2); Object.setPrototypeOf(obj2, obj1);</span></span>
<span class="line"><span>TypeError: type error (rc -105)</span></span>
<span class="line"><span>    setPrototypeOf  native strict preventsyield</span></span>
<span class="line"><span>    global input:1 preventsyield</span></span></code></pre></div><p>しかし、Duktape C APIはより低レベルで、プロトタイプ・ループを作成することができます（これは一般的に避けるべきものです）。Duktapeには、ループしたプロトタイプ・チェーンからのルックアップを終了させるためのサニティ・リミットがあります。</p><h2 id="外部プロトタイプ" tabindex="-1">外部プロトタイプ <a class="header-anchor" href="#外部プロトタイプ" aria-label="Permalink to &quot;外部プロトタイプ&quot;">​</a></h2><p>外部プロトタイプは、ほとんどの ECMAScript 関数に存在する .prototype プロパティです。これはデフォルトですべての関数に存在しますが、手動で削除することができます（また、いくつかのビルトインはこのプロパティを持ちません）。.prototype プロパティは、関数がコンストラクタとして呼び出されたときのみ効果を発揮します（例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>コンストラクタの呼び出しが発生したとき（詳しくは <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2" target="_blank" rel="noreferrer">http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2</a> をご覧ください）。</p><ul><li>Duktapeは新しい空のオブジェクト（「デフォルト・インスタンス」）を作成します。その内部プロトタイプは、コンストラクタの.prototypeプロパティの現在の値に初期化されます。.prototypeの値がオブジェクトでない場合、または見つからない場合、内部プロトタイプはObject.prototypeに初期化されます。</li><li>コンストラクタ関数は、新しく作成されたデフォルトのインスタンスを指すこのバインディングで呼び出されます。コンストラクタは、例えば this.name = &quot;my object&quot;; のように、デフォルトのインスタンスにプロパティを追加することができます。</li><li>通常、コンストラクタ関数は戻り値を持たない（または明示的に undefined を返す）ので、デフォルトのインスタンスは new MyConstructor() の値として返されます。</li><li>しかし、コンストラクタ関数が明示的にオブジェクトの値を返す場合、例えば using var ret = { foo: 123 }; return ret; では、デフォルトのインスタンスは無視され、返されたオブジェクトが new MyConstructor() の呼び出しの値となります。これにより、コンストラクタは関数やProxyオブジェクトを返すことができます。</li></ul><p>外部のプロトタイプが影響を与えるのは、デフォルトのインスタンスを初期化する点だけです。特に、デフォルトのインスタンスを無視してコンストラクタから明示的にオブジェクトの値を返す場合、外部プロトタイプは作成されるオブジェクトに何の影響も及ぼさない。</p><h2 id="ecmascript-関数のデフォルトの外部プロトタイプオブジェクト。" tabindex="-1">ECMAScript 関数のデフォルトの外部プロトタイプオブジェクト。 <a class="header-anchor" href="#ecmascript-関数のデフォルトの外部プロトタイプオブジェクト。" aria-label="Permalink to &quot;ECMAScript 関数のデフォルトの外部プロトタイプオブジェクト。&quot;">​</a></h2><p>ECMAScript コードで関数を宣言すると、ECMAScript セマンティクスは自動的に外部 .prototype オブジェクトを提供します。例えば、宣言するとき</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>を指定すると、以下のオブジェクトが自動的に作成されます。</p><ul><li>MyConstructor: コンストラクタ関数そのものです。</li><li>MyConstructor.prototype: 新規に作成されたプロトタイプオブジェクトへのポイント。</li></ul><p>プロトタイプオブジェクトは、コンストラクタ関数を指す .constructor プロパティを除いて空です。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyConstructor</span></span></code></pre></div><p>MyConstructor.prototype の内部プロトタイプは Object.prototype であり、new MyConstructor() で生成したオブジェクトからプロパティを検索する場合、デフォルトでプロトタイプチェーンとなります。</p><ul><li>The object itself</li><li>MyConstructor.prototype</li><li>Object.prototype</li></ul><p>For simple objects a common idiom is for inherited methods to be added to MyConstructor.prototype.</p><p>インスタンスオブジェクトの最終的なプロトタイプチェーンを制御する方法はたくさんあります。</p><ul><li>MyConstructor.prototypeを編集して、別のオブジェクトを指すように置き換えることができます。これは、変更後に作成されたオブジェクトにのみ影響します。</li><li>MyConstructor.prototypeの内部プロトタイプを変更し、別のオブジェクト（おそらく祖先）がプロトタイプチェーンに含まれるようにすることができる。Object.setPrototypeOf(MyConstructor.prototype, MyAncestor.prototype)とします。これは、すでに作成されたオブジェクトにも影響します。</li><li>コンストラクタの呼び出しに与えられる「デフォルトのインスタンス」を別のオブジェクトに置き換えることで、インスタンスのプロトタイプチェーンを完全に制御することができます。これは明らかに、新しく作成されたインスタンスにのみ影響を与えます。</li><li>最後に、オブジェクトのインスタンスは作成後に編集することができます。</li></ul><p>##Duktape/C関数のデフォルトの外部プロトタイプ・オブジェクトがない</p><p>Duktape/C関数は、コンストラクターとして呼ばれた場合、ECMAScript関数と同じように動作します： Duktape/C関数の.prototypeプロパティに基づいて、デフォルトのインスタンスが作成されるなどです。</p><p>しかし、メモリ使用量を最小限に抑えるため、Duktape/C関数はデフォルトで外部プロトタイプ（.prototypeプロパティ）を持ちません。つまり、デフォルトのインスタンスは、あなたがしない限り、Object.prototypeを継承することになります。</p><ul><li>Duktape/C関数に明示的に.prototypeプロパティを追加する。</li><li>デフォルト・インスタンス」を無視し、Duktape/C関数内で明示的にインスタンス・オブジェクトを生成して返す。</li><li>インスタンス生成後に、そのインスタンスの内部プロトタイプを編集する。</li></ul><p>を参照してください。ネイティブ・コンストラクター関数の書き方</p>`,39)]))}const k=e(s,[["render",o]]);export{u as __pageData,k as default};
