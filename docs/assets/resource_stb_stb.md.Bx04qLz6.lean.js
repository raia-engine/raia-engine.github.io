import{_ as e,c as a,a2 as r,o as d}from"./chunks/framework.CKGreiRV.js";const c=JSON.parse('{"title":"stb","description":"","frontmatter":{},"headers":[],"relativePath":"resource/stb/stb.md","filePath":"resource/stb/stb.md","lastUpdated":1732350347000}'),s={name:"resource/stb/stb.md"};function h(i,t,o,n,b,l){return d(),a("div",null,t[0]||(t[0]=[r(`<h1 id="stb" tabindex="-1">stb <a class="header-anchor" href="#stb" aria-label="Permalink to &quot;stb&quot;">​</a></h1><p>C/C++ 用のシングルファイルパブリックドメイン (または MIT ライセンス) ライブラリ</p><p>注目すべき点:</p><ul><li>image loader: <a href="./stb_image.h.html">stb_image.h</a></li><li>image writer: <a href="./stb_image_write.h.html">stb_image_write.h</a></li><li>image resizer: <a href="./stb_image_resize.h.html">stb_image_resize.h</a></li><li>font text rasterizer: <a href="./stb_truetype.h.html">stb_truetype.h</a></li><li>typesafe containers: <a href="./stb_ds.h.html">stb_ds.h</a></li></ul><p>Most libraries by stb, except: stb_dxt by Fabian &quot;ryg&quot; Giesen, stb_image_resize by Jorge L. &quot;VinoBS&quot; Rodriguez, and stb_sprintf by Jeff Roberts.</p><p><a name="stb_libs"></a></p><table tabindex="0"><thead><tr><th>library</th><th>lastest version</th><th>category</th><th>LoC</th><th>description</th></tr></thead><tbody><tr><td><strong><a href="./stb_vorbis.c.html">stb_vorbis.c</a></strong></td><td>1.22</td><td>audio</td><td>5584</td><td>ogg vorbis ファイルをファイル/メモリから float/16 ビット符号付き出力にデコードする。</td></tr><tr><td><strong><a href="./stb_hexwave.h.html">stb_hexwave.h</a></strong></td><td>0.5</td><td>audio</td><td>680</td><td>オーディオ波形シンセサイザー</td></tr><tr><td><strong><a href="./stb_image.h.html">stb_image.h</a></strong></td><td>2.27x</td><td>graphics</td><td>7901</td><td>ファイル/メモリからの画像読み込み/復号化。jpg, png, tga, bmp, psd, gif, hdr, pic</td></tr><tr><td><strong><a href="./stb_truetype.h.html">stb_truetype.h</a></strong></td><td>1.26</td><td>graphics</td><td>5084</td><td>truetypeフォントからの文字の解析、デコード、ラスタライズ</td></tr><tr><td><strong><a href="./stb_image_write.h.html">stb_image_write.h</a></strong></td><td>1.16</td><td>graphics</td><td>1724</td><td>画像のディスクへの書き込み。PNG、TGA、BMP</td></tr><tr><td><strong><a href="./stb_image_resize.h.html">stb_image_resize.h</a></strong></td><td>0.97</td><td>graphics</td><td>2634</td><td>画像の拡大・縮小を高画質で行うことができます。</td></tr><tr><td><strong><a href="./stb_rect_pack.h.html">stb_rect_pack.h</a></strong></td><td>1.01</td><td>graphics</td><td>623</td><td>シンプルな2D矩形パッカーで、そこそこの品質</td></tr><tr><td><strong><a href="./stb_perlin.h.html">stb_perlin.h</a></strong></td><td>0.5</td><td>graphics</td><td>428</td><td>Perlinの修正されたシンプレックスノイズと異なるシードを持つ。</td></tr><tr><td><strong><a href="./stb_ds.h.html">stb_ds.h</a></strong></td><td>0.67</td><td>utility</td><td>1897</td><td>typesafe dynamic array and hash tables for C, will compile in C++</td></tr><tr><td><strong><a href="./stb_sprintf.h.html">stb_sprintf.h</a></strong></td><td>1.10</td><td>utility</td><td>1906</td><td>C/C++のための高速sprintf, snprintf</td></tr><tr><td><strong><a href="./stb_textedit.h.html">stb_textedit.h</a></strong></td><td>1.14</td><td>user interface</td><td>1429</td><td>ゲーム用テキストエディタなど、ゼロから実装する場合の勘所</td></tr><tr><td><strong><a href="./stb_voxel_render.h.html">stb_voxel_render.h</a></strong></td><td>0.89</td><td>3D graphics</td><td>3807</td><td>Minecraft風のボクセルレンダリング &quot;エンジン&quot;、さらに多くの機能を搭載</td></tr><tr><td><strong><a href="./stb_dxt.h.html">stb_dxt.h</a></strong></td><td>1.12</td><td>3D graphics</td><td>719</td><td>Fabian &quot;ryg&quot; GiesenのリアルタイムDXTコンプレッサー</td></tr><tr><td><strong><a href="./stb_easy_font.h.html">stb_easy_font.h</a></strong></td><td>1.1</td><td>3D graphics</td><td>305</td><td>quick-and-dirty easy-to-deploy フレームレート表示用ビットマップフォント</td></tr><tr><td><strong><a href="./stb_tilemap_editor.h.html">stb_tilemap_editor.h</a></strong></td><td>0.42</td><td>game dev</td><td>4187</td><td>埋め込み型タイルマップエディタ</td></tr><tr><td><strong><a href="./stb_herringbone_wang_tile.h.html">stb_herringbone_wa...</a></strong></td><td>0.7</td><td>game dev</td><td>1221</td><td>herringbone Wang tile map generator</td></tr><tr><td><strong><a href="./stb_c_lexer.h.html">stb_c_lexer.h</a></strong></td><td>0.12</td><td>parsing</td><td>940</td><td>C言語用パーサーの作成を容易にする。</td></tr><tr><td><strong><a href="./stb_divide.h.html">stb_divide.h</a></strong></td><td>0.94</td><td>math</td><td>433</td><td>より有用な32ビット演算（例：&quot;ユークリッド除算&quot;）。</td></tr><tr><td><strong><a href="./stb_connected_components.h.html">stb_connected_comp...</a></strong></td><td>0.96</td><td>misc</td><td>1049</td><td>グリッド上での到達可能性をインクリメンタルに計算する。</td></tr><tr><td><strong><a href="./stb_leakcheck.h.html">stb_leakcheck.h</a></strong></td><td>0.6</td><td>misc</td><td>194</td><td>quick-and-dirty malloc/free リークチェック</td></tr><tr><td><strong><a href="./stb_include.h.html">stb_include.h</a></strong></td><td>0.02</td><td>misc</td><td>295</td><td>再帰的な #include サポートの実装（特に GLSL 向け</td></tr></tbody></table><p>Total libraries: 21 Total lines of C code: 43040</p><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><h4 id="ライセンスは" tabindex="-1">ライセンスは？ <a class="header-anchor" href="#ライセンスは" aria-label="Permalink to &quot;ライセンスは？&quot;">​</a></h4><p>これらのライブラリはパブリックドメインです。あなたはそれらを使って何でもすることができます。帰属表示はありがたいのですが、それ以外の法的義務はありません。</p><p>パブリックドメインに不満な弁護士がいるならば、MITオープンソースライセンスの下でもライセンスされます。すべてのソースファイルには、あなたが選択できるよう、明示的なデュアルライセンスが含まれています。</p><h4 id="これらのライブラリはどのように使用するのですか" tabindex="-1">これらのライブラリはどのように使用するのですか？ <a class="header-anchor" href="#これらのライブラリはどのように使用するのですか" aria-label="Permalink to &quot;これらのライブラリはどのように使用するのですか？&quot;">​</a></h4><p>シングルヘッダーファイルライブラリの背後にある考え方は、すべてのコードが単一のファイルに含まれているため、配布と展開が容易であることです。デフォルトでは、この中の.hファイルはそれ自身のヘッダーファイルとして機能します。つまり、ファイルに含まれる関数を宣言しますが、実際にはどんなコードもコンパイルされることはありません。</p><p>そのため、コードを実際にインスタンス化するC/C++ソースファイル（できれば頻繁に編集しないファイル）を正確に1つ選択する必要があります。このファイルは、関数定義を実際に有効にするための特定のマクロ（これはライブラリごとに文書化されています）を定義する必要があります。例えば、stb_image を使うには、stb_image.h を定期的にインクルードせず、次のような C/C++ ファイルを1つだけ用意します。</p><pre><code>#define STB_IMAGE_IMPLEMENTATION
#include &quot;stb_image.h&quot;
</code></pre><p>定義すべき正しいマクロは、各ライブラリの冒頭で指摘されている。</p><h4 id="他にシングルファイルのパブリックドメイン-オープンソースライブラリで、依存関係が最小のものはありますか" tabindex="-1"><a name="other_libs"></a> 他にシングルファイルのパブリックドメイン/オープンソースライブラリで、依存関係が最小のものはありますか？ <a class="header-anchor" href="#他にシングルファイルのパブリックドメイン-オープンソースライブラリで、依存関係が最小のものはありますか" aria-label="Permalink to &quot;&lt;a name=&quot;other_libs&quot;&gt;&lt;/a&gt; 他にシングルファイルのパブリックドメイン/オープンソースライブラリで、依存関係が最小のものはありますか？&quot;">​</a></h4><p><a href="https://github.com/nothings/single_file_libs" target="_blank" rel="noreferrer">はい。</a></p><h4 id="stbのライブラリを新しいライブラリで包んだ場合、新しいライブラリはパブリックドメイン-mitでなければならないのでしょうか" tabindex="-1">stbのライブラリを新しいライブラリで包んだ場合、新しいライブラリはパブリックドメイン/MITでなければならないのでしょうか？ <a class="header-anchor" href="#stbのライブラリを新しいライブラリで包んだ場合、新しいライブラリはパブリックドメイン-mitでなければならないのでしょうか" aria-label="Permalink to &quot;stbのライブラリを新しいライブラリで包んだ場合、新しいライブラリはパブリックドメイン/MITでなければならないのでしょうか？&quot;">​</a></h4><p>いいえ。パブリックドメインですので、新しいライブラリが望むライセンスに自由に再ライセンスできます。</p><h4 id="gcc系コンパイラのsseサポートはどうなっているのでしょうか" tabindex="-1">GCC系コンパイラのSSEサポートはどうなっているのでしょうか？ <a class="header-anchor" href="#gcc系コンパイラのsseサポートはどうなっているのでしょうか" aria-label="Permalink to &quot;GCC系コンパイラのSSEサポートはどうなっているのでしょうか？&quot;">​</a></h4><p>stb_image は実行時にプロセッサを検出して正しく処理しようとするのではなく、SSE2 を使用するか（-msse2 でコンパイルした場合）、SIMD をまったく使用しないかのどちらかになります。私の理解では、実行時検出のためにGCCで承認されたパスは、複数のソースファイル、各CPU構成用のものを使用することを必要とします。stb_image はヘッダファイルライブラリで、1つのソースファイルのみでコンパイルされるため、SSE対応と非対応のバリエーションをビルドする承認された方法はありません。</p><p>私たちはこの問題を回避しようと試みましたが、特定のバージョンのgccが私たちのやっていることを壊してしまうため、何年も前から複数の問題が発生しており、私たちはこの問題をあきらめることにしました。例として、<a href="https://github.com/nothings/stb/issues/280" target="_blank" rel="noreferrer">https://github.com/nothings/stb/issues/280</a> と <a href="https://github.com/nothings/stb/issues/410" target="_blank" rel="noreferrer">https://github.com/nothings/stb/issues/410</a> を参照してください。</p><h4 id="既存のオープンソースライブラリとは冗長なものもあるようです。何か良い方法があるのでしょうか" tabindex="-1">既存のオープンソースライブラリとは冗長なものもあるようです。何か良い方法があるのでしょうか？ <a class="header-anchor" href="#既存のオープンソースライブラリとは冗長なものもあるようです。何か良い方法があるのでしょうか" aria-label="Permalink to &quot;既存のオープンソースライブラリとは冗長なものもあるようです。何か良い方法があるのでしょうか？&quot;">​</a></h4><p>一般的には、統合しやすい、使いやすい、リリースしやすい（単一のファイル、優れたAPI、帰属の必要がない）という点で、より優れているというだけです。しかし、機能が少なかったり、速度が遅かったり、メモリを多く消費したりすることもあります。すでに同等のライブラリを使っているのであれば、乗り換える理由はないでしょう。</p><h4 id="stbライブラリの表に直接リンクすることはできますか" tabindex="-1">stbライブラリの表に直接リンクすることはできますか？ <a class="header-anchor" href="#stbライブラリの表に直接リンクすることはできますか" aria-label="Permalink to &quot;stbライブラリの表に直接リンクすることはできますか？&quot;">​</a></h4><p><a href="https://github.com/nothings/stb#stb_libs" target="_blank" rel="noreferrer">このURL</a>を使って、そのリストに直接リンクすることができます。</p><h4 id="なぜ「コード行数」を記載するのですか-ひどい指標です。" tabindex="-1">なぜ「コード行数」を記載するのですか？ひどい指標です。 <a class="header-anchor" href="#なぜ「コード行数」を記載するのですか-ひどい指標です。" aria-label="Permalink to &quot;なぜ「コード行数」を記載するのですか？ひどい指標です。&quot;">​</a></h4><p>ライブラリの内部的な複雑さについて、あなたの期待を管理するため、あるいは、あなたが何に手を出しているかを知ってもらうために、いくつかのアイデアを与えるだけです。すべてのライブラリが同じスタイルで書かれているわけではありませんが、似たようなスタイルであることは確かなので、ライブラリ間の比較はやはり意味があるのでしょう。</p><p>ただし、この行には、ヘッダーファイルに相当する実装と、ドキュメントの両方が含まれていることに注意してください。</p><h4 id="なぜシングルファイルヘッダーなのか" tabindex="-1">なぜシングルファイルヘッダーなのか？ <a class="header-anchor" href="#なぜシングルファイルヘッダーなのか" aria-label="Permalink to &quot;なぜシングルファイルヘッダーなのか？&quot;">​</a></h4><p>Windowsには、ライブラリが置かれる標準的なディレクトリがありません。そのため、Windowsでのライブラリのデプロイは、Unixベースのオープンソース開発者が一般的に思っているよりもずっと大変なのです。(それはまた、Windowsにおけるライブラリの依存性をより悪くします)。</p><p>また、Windowsでは、あるライブラリが異なるバージョンのランタイムライブラリに対してビルドされ、リンクの衝突や混乱を引き起こすという問題がよくあります。ライブラリをヘッダとして配布することで、ライブラリを作成せずにそのままプロジェクトにコンパイルすることができ、この問題を回避することができます。</p><p>ライブラリを1つのファイルにすることで、ライブラリを必要とするプロジェクトにドロップするだけで、簡単に利用することができます。(もちろん、必要であれば、適切な共有ライブラリツリーに置くこともできます)。</p><p>なぜ2つのファイルではなく、1つはヘッダー、もう1つは実装なのでしょうか？10ファイルと9ファイルの差は大したことではありませんが、2ファイルと1ファイルの差は大きいです。ファイルをzipやtarで圧縮する必要がなく、<em>2</em>個のファイルを添付することを覚える必要もない、など。</p><h4 id="なぜ-stb-なのか-セットトップボックスと関係があるのでしょうか" tabindex="-1">なぜ &quot;stb &quot;なのか？セットトップボックスと関係があるのでしょうか？ <a class="header-anchor" href="#なぜ-stb-なのか-セットトップボックスと関係があるのでしょうか" aria-label="Permalink to &quot;なぜ &quot;stb &quot;なのか？セットトップボックスと関係があるのでしょうか？&quot;">​</a></h4><p>いや、単に私の名前、Sean T. Barrettの頭文字をとっただけです。これは自画自賛ではなく、ファイル名とソース関数名を区別するための穏当な方法として選んだのです。</p><h4 id="stb-image-hに画像の種類を追加するのでしょうか" tabindex="-1">stb_image.hに画像の種類を追加するのでしょうか？ <a class="header-anchor" href="#stb-image-hに画像の種類を追加するのでしょうか" aria-label="Permalink to &quot;stb_image.hに画像の種類を追加するのでしょうか？&quot;">​</a></h4><p>stb_imageの利用が拡大するにつれ、コードベースのセキュリティに重点を置くことがより重要になってきました。新しい画像フォーマットを追加すると、安全性を確保するために必要なコードの量が増えるので、新しいフォーマットを追加する価値はもうない。</p><h4 id="自分でシングルファイルライブラリを作成する方法について、何かアドバイスはありますか" tabindex="-1">自分でシングルファイルライブラリを作成する方法について、何かアドバイスはありますか？ <a class="header-anchor" href="#自分でシングルファイルライブラリを作成する方法について、何かアドバイスはありますか" aria-label="Permalink to &quot;自分でシングルファイルライブラリを作成する方法について、何かアドバイスはありますか？&quot;">​</a></h4><p>はい。 <a href="https://github.com/nothings/stb/blob/master/docs/stb_howto.txt" target="_blank" rel="noreferrer">https://github.com/nothings/stb/blob/master/docs/stb_howto.txt</a></p><h4 id="なぜパブリックドメインなのか" tabindex="-1">なぜパブリックドメインなのか？ <a class="header-anchor" href="#なぜパブリックドメインなのか" aria-label="Permalink to &quot;なぜパブリックドメインなのか？&quot;">​</a></h4><p>私は多くの理由から、GPL、LGPL、BSD、zlibなどよりもこの方式を好んでいます。 その一部をご紹介します。 <a href="https://github.com/nothings/stb/blob/master/docs/why_public_domain.md" target="_blank" rel="noreferrer">https://github.com/nothings/stb/blob/master/docs/why_public_domain.md</a></p><h4 id="なぜcなのか" tabindex="-1">なぜCなのか？ <a class="header-anchor" href="#なぜcなのか" aria-label="Permalink to &quot;なぜCなのか？&quot;">​</a></h4><p>主に、私はC++ではなくCを使っているからです。でも、そのおかげで他の人が他の言語から使うのも簡単になります。</p><h4 id="なぜc99ではダメなのか-stdint-h、declare-anywhereなど。" tabindex="-1">なぜC99ではダメなのか？ stdint.h、declare-anywhereなど。 <a class="header-anchor" href="#なぜc99ではダメなのか-stdint-h、declare-anywhereなど。" aria-label="Permalink to &quot;なぜC99ではダメなのか？ stdint.h、declare-anywhereなど。&quot;">​</a></h4><p>MSVC 6 (1998)は、それ以降のバージョンのMSVCよりも私にとってはヒューマンファクターが優れているので、今でも私のIDEとして使っています。</p>`,48)]))}const p=e(s,[["render",h]]);export{c as __pageData,p as default};
