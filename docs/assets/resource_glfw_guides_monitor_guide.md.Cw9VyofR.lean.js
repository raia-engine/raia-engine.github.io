import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"GLFWモニターガイド","description":"","frontmatter":{},"headers":[],"relativePath":"resource/glfw/guides/monitor_guide.md","filePath":"resource/glfw/guides/monitor_guide.md","lastUpdated":1729914702000}'),h={name:"resource/glfw/guides/monitor_guide.md"};function l(p,s,e,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="glfwモニターガイド" tabindex="-1">GLFWモニターガイド <a class="header-anchor" href="#glfwモニターガイド" aria-label="Permalink to &quot;GLFWモニターガイド&quot;">​</a></h1><p>このガイドでは、GLFWのモニター関連機能を紹介しています。このカテゴリの特定の機能の詳細については、モニタのリファレンスを参照してください。また、GLFWの他の領域のガイドもあります。</p><ul><li>APIの紹介</li><li>ウィンドウガイド</li><li>コンテキストガイド</li><li>Vulkanガイド</li><li>入力ガイド</li></ul><nav class="table-of-contents"><ul><li><a href="#モニター対象">モニター対象</a><ul><li><a href="#モニターを取得する">モニターを取得する</a></li><li><a href="#コンフィギュレーション変更の監視">コンフィギュレーション変更の監視</a></li></ul></li><li><a href="#モニタープロパティ">モニタープロパティ</a><ul><li><a href="#ビデオモード">ビデオモード</a></li><li><a href="#物理サイズ">物理サイズ</a></li><li><a href="#コンテンツスケール">コンテンツスケール</a></li><li><a href="#バーチャルポジション">バーチャルポジション</a></li><li><a href="#作業領域">作業領域</a></li><li><a href="#読みやすい名前">読みやすい名前</a></li><li><a href="#ユーザーポインタ">ユーザーポインタ</a></li><li><a href="#ガンマランプ">ガンマランプ</a></li></ul></li></ul></nav><h2 id="モニター対象" tabindex="-1">モニター対象 <a class="header-anchor" href="#モニター対象" aria-label="Permalink to &quot;モニター対象&quot;">​</a></h2><p>モニター・オブジェクトは現在接続されているモニターを表し、不透明な型GLFWmonitorへのポインタとして表現されます。モニターオブジェクトは、アプリケーションによって作成または破棄されることはなく、それらが表すモニターが切断されるか、ライブラリが終了するまで、そのアドレスが保持されます。</p><p>各モニターは、現在のビデオモード、サポートされているビデオモードのリスト、仮想位置、人間が読める名前、推定物理サイズ、ガンマランプを持ちます。モニタの1つがプライマリモニタである。</p><p>モニターの仮想位置はスクリーン座標で、現在のビデオモードとともに、接続されたモニターがそれらにまたがる仮想デスクトップに提供するビューポートを記述しています。</p><p>GLFWがあなたのモニターセットアップとその利用可能なビデオモードをどのように見るかを見るには、モニターテストプログラムを実行してください。</p><h3 id="モニターを取得する" tabindex="-1">モニターを取得する <a class="header-anchor" href="#モニターを取得する" aria-label="Permalink to &quot;モニターを取得する&quot;">​</a></h3><p>プライマリモニタは、glfwGetPrimaryMonitorによって返されます。これはユーザーが好んで使用するモニターで、通常はタスクバーやメニューバーのようなグローバルなUI要素を持つものです。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWmonitor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> primary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetPrimaryMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>glfwGetMonitors で現在接続されているすべてのモニターを取得できます。返される配列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWmonitor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> monitors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetMonitors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>プライマリモニタは常に返された配列の最初のモニタですが、モニタが接続または切断されると、他のモニタは別のインデックスに移動されることがあります。</p><h3 id="コンフィギュレーション変更の監視" tabindex="-1">コンフィギュレーション変更の監視 <a class="header-anchor" href="#コンフィギュレーション変更の監視" aria-label="Permalink to &quot;コンフィギュレーション変更の監視&quot;">​</a></h3><p>モニターの接続、切断時に通知を受けたい場合は、モニターコールバックを設定します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetMonitorCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor_callback);</span></span></code></pre></div><p>コールバック関数は、接続または切断されたモニターのハンドルと発生したイベントを受信します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> monitor_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWmonitor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFW_CONNECTED)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The monitor was connected</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFW_DISCONNECTED)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The monitor was disconnected</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>モニタが切断された場合、そのモニタ上でフルスクリーンになっているすべてのウィンドウは、コールバックが呼び出される前にウィンドウモードに切り替わります。glfwGetMonitorNameとglfwGetMonitorUserPointerだけが、切断されたモニターに対して、モニターコールバックが戻る前に、有用な値を返します。</p><h2 id="モニタープロパティ" tabindex="-1">モニタープロパティ <a class="header-anchor" href="#モニタープロパティ" aria-label="Permalink to &quot;モニタープロパティ&quot;">​</a></h2><p>各モニターは、現在のビデオモード、サポートされているビデオモードのリスト、仮想位置、コンテンツスケール、人間が読める名前、ユーザーポインタ、推定物理サイズ、ガンマランプを持つ。</p><h3 id="ビデオモード" tabindex="-1">ビデオモード <a class="header-anchor" href="#ビデオモード" aria-label="Permalink to &quot;ビデオモード&quot;">​</a></h3><p>GLFWは一般に、フルスクリーンウィンドウを作成したり、そのビデオモードを変更したり、ウィンドウのものをフルスクリーンにするときに、適切なビデオモードを選択するのに良い仕事をしますが、どのビデオモードがサポートされているかを正確に知っておくと便利な場合があります。</p><p>ビデオモードは GLFWvidmode 構造体として表現されます。モニターがサポートするビデオモードの配列は、glfwGetVideoModesで得ることができます。返される配列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWvidmode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetVideoModes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>モニタの現在のビデオモードを取得するには、glfwGetVideoModeを呼び出します。返されるポインタの寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWvidmode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetVideoMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor);</span></span></code></pre></div><p>ビデオモードの解像度はピクセルではなく、画面座標で指定します。</p><h3 id="物理サイズ" tabindex="-1">物理サイズ <a class="header-anchor" href="#物理サイズ" aria-label="Permalink to &quot;物理サイズ&quot;">​</a></h3><p>ミリメートル単位のモニタの物理的サイズ、またはその推定値は、glfwGetMonitorPhysicalSizeで取得することができる。これは、現在の解像度、すなわち現在のビデオモードの幅と高さとは関係ない。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width_mm, height_mm;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetMonitorPhysicalSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">width_mm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">height_mm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>これはモニターの生のDPIを計算するために使用することができますが、多くの場合、これは有用ではありません。代わりに、モニターコンテンツスケールとウィンドウコンテンツスケールを使用して、コンテンツをスケーリングしてください。</p><h3 id="コンテンツスケール" tabindex="-1">コンテンツスケール <a class="header-anchor" href="#コンテンツスケール" aria-label="Permalink to &quot;コンテンツスケール&quot;">​</a></h3><p>モニターのコンテンツスケールは、glfwGetMonitorContentScaleで取得することができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xscale, yscale;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetMonitorContentScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">xscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>コンテンツスケールは、現在のDPIとプラットフォームのデフォルトDPIとの比率です。これは、テキストやUI要素で特に重要です。この比率でスケーリングされたUIのピクセル寸法があなたのマシンで適切に見えるなら、他のマシンではDPIやスケーリング設定に関係なく、妥当な大きさで表示されるはずです。これは、システムのDPIとスケーリング設定がある程度正しいことが前提になります。</p><p>コンテンツのスケールは、モニターの解像度とピクセル密度、およびユーザーの設定の両方に依存する場合があります。物理的なサイズと現在の解像度から計算される生のDPIとは大きく異なる場合があります。</p><h3 id="バーチャルポジション" tabindex="-1">バーチャルポジション <a class="header-anchor" href="#バーチャルポジション" aria-label="Permalink to &quot;バーチャルポジション&quot;">​</a></h3><p>仮想デスクトップ上のモニターの位置を画面座標で取得するには、glfwGetMonitorPosを使用します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xpos, ypos;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetMonitorPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="作業領域" tabindex="-1">作業領域 <a class="header-anchor" href="#作業領域" aria-label="Permalink to &quot;作業領域&quot;">​</a></h3><p>グローバルタスクバーやメニューバーによって占有されていないモニタの領域は、ワークエリアです。これはスクリーン座標で指定され、glfwGetMonitorWorkareaで取得することができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xpos, ypos, width, height;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwGetMonitorWorkarea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="読みやすい名前" tabindex="-1">読みやすい名前 <a class="header-anchor" href="#読みやすい名前" aria-label="Permalink to &quot;読みやすい名前&quot;">​</a></h3><p>人間が読める、UTF-8でエンコードされたモニターの名前は、glfwGetMonitorNameによって返されます。返される文字列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetMonitorName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor);</span></span></code></pre></div><p>モニターの名前は一意であることを保証するものではありません。同じモデル、メーカーの2台のモニターが同じ名前を持つことがあります。一意であることが保証されるのは、そのモニターが切断されるまでのモニターハンドルだけです。</p><h3 id="ユーザーポインタ" tabindex="-1">ユーザーポインタ <a class="header-anchor" href="#ユーザーポインタ" aria-label="Permalink to &quot;ユーザーポインタ&quot;">​</a></h3><p>各モニターは、glfwSetMonitorUserPointerで設定し、glfwGetMonitorUserPointerで問い合わせることができるユーザーポインタを持っています。これは必要な目的に使用することができ、GLFWによって変更されることはありません。この値は，モニタが切断されるか，ライブラリが終了するまで保持されます．</p><p>ポインタの初期値はNULLである．</p><h3 id="ガンマランプ" tabindex="-1">ガンマランプ <a class="header-anchor" href="#ガンマランプ" aria-label="Permalink to &quot;ガンマランプ&quot;">​</a></h3><p>モニターのガンマランプは、モニターハンドルとGLFWgammaramp構造体へのポインタを受け付けるglfwSetGammaRampで設定することができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWgammaramp ramp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ramp.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ramp.red </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> red;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ramp.green </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> green;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ramp.blue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ramp.size;  i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ガンマランプアレイを任意に設定する。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetGammaRamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ramp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>ガンマランプデータは関数が戻る前にコピーされるので、ランプが設定された後にそれを保持する必要はありません。</p><p>ガンマランプは、そのモニタの現在のガンマランプと同じサイズにすることをお勧めします。</p><p>モニタの現在のガンマランプは、glfwGetGammaRampによって返されます。返された構造体の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWgammaramp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ramp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetGammaRamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor);</span></span></code></pre></div><p>もし、通常のガンマランプを設定したい場合は、glfwSetGamma を使って、希望する指数から GLFW に計算させることができ、その結果得られたランプで glfwSetGammaRamp を呼び出すことができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetGamma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monitor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>glfwSetGamma関数によるガンマ補正を試すには、ガンマテストプログラムを実行します。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ソフトウェアで制御されるガンマランプは、ハードウェアのガンマ補正に加えて適用され、今日では通常 sRGB のガンマに近似しています。つまり、完全に直線的なランプ、つまりガンマ 1.0 を設定すると、デフォルトの（通常 sRGB に近い）動作になります。</p></div>`,63)]))}const g=i(h,[["render",l]]);export{o as __pageData,g as default};
