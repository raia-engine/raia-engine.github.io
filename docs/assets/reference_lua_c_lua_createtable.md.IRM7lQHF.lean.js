import{_ as e,c as i,a2 as s,o as t}from"./chunks/framework.CuCbyi2k.js";const o=JSON.parse('{"title":"lua_createtable","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_createtable.md","filePath":"reference/lua_c/lua_createtable.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/lua_createtable.md"};function n(h,a,r,p,d,c){return t(),i("div",null,a[0]||(a[0]=[s('<h1 id="lua-createtable" tabindex="-1">lua_createtable <a class="header-anchor" href="#lua-createtable" aria-label="Permalink to &quot;lua_createtable&quot;">​</a></h1><p>新しい空のテーブルを作成し、それをスタックにプッシュします。</p><p><code>[-0, +1, m]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_createtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> narr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nrec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>新しい空のテーブルを作成し、それをスタックにプッシュします。新しいテーブルは、<code>narr</code>配列要素と<code>nrec</code>非配列要素用に事前に割り当てられたスペースを持ちます。この事前割り当ては、テーブルが持つ要素の正確な数を知っている場合に便利です。それ以外の場合は、関数<code>lua_newtable</code>を使用できます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_createtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 5つの非配列要素用のスペースを割り当てたテーブル</span></span></code></pre></div><p>このコードは、新しいテーブルを作成し、5つの非配列要素用のスペースを確保してスタックにプッシュします。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_newtable</li></ul>',13)]))}const u=e(l,[["render",n]]);export{o as __pageData,u as default};
