import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.DzmM640o.js";const g=JSON.parse('{"title":"Dear ImGui: Using Fonts","description":"","frontmatter":{},"headers":[],"relativePath":"resource/imgui/fonts.md","filePath":"resource/imgui/fonts.md","lastUpdated":1732350347000}'),e={name:"resource/imgui/fonts.md"};function h(l,s,p,o,r,k){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="dear-imgui-using-fonts" tabindex="-1">Dear ImGui: Using Fonts <a class="header-anchor" href="#dear-imgui-using-fonts" aria-label="Permalink to &quot;Dear ImGui: Using Fonts&quot;">​</a></h1><p>The code in imgui.cpp embeds a copy of &#39;ProggyClean.ttf&#39; (by Tristan Grimmer), a 13 pixels high, pixel-perfect font used by default. We embed it in the source code so you can use Dear ImGui without any file system access. ProggyClean does not scale smoothly, therefore it is recommended that you load your own file when using Dear ImGui in an application aiming to look nice and wanting to support multiple resolutions.</p><p>You may also load external .TTF/.OTF files. In the <a href="https://github.com/ocornut/imgui/tree/master/misc/fonts" target="_blank" rel="noreferrer">misc/fonts/</a> folder you can find a few suggested fonts, provided as a convenience.</p><p><strong>Also read the FAQ:</strong> <a href="https://www.dearimgui.com/faq" target="_blank" rel="noreferrer">https://www.dearimgui.com/faq</a> (there is a Fonts section!)</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#troubleshooting">Troubleshooting</a></li><li><a href="#how-should-i-handle-dpi-in-my-application">How should I handle DPI in my application?</a></li><li><a href="#fonts-loading-instructions">Fonts Loading Instructions</a></li><li><a href="#loading-font-data-from-memory">Loading Font Data from Memory</a></li><li><a href="#loading-font-data-embedded-in-source-code">Loading Font Data Embedded In Source Code</a></li><li><a href="#using-icon-fonts">Using Icon Fonts</a></li><li><a href="#using-freetype-rasterizer-imgui_freetype">Using FreeType Rasterizer (imgui_freetype)</a></li><li><a href="#using-colorful-glyphsemojis">Using Colorful Glyphs/Emojis</a></li><li><a href="#using-custom-glyph-ranges">Using Custom Glyph Ranges</a></li><li><a href="#using-custom-colorful-icons">Using Custom Colorful Icons</a></li><li><a href="#about-filenames">About Filenames</a></li><li><a href="#about-utf-8-encoding">About UTF-8 Encoding</a></li><li><a href="#debug-tools">Debug Tools</a></li><li><a href="#creditslicenses-for-fonts-included-in-repository">Credits/Licenses For Fonts Included In Repository</a></li><li><a href="#font-links">Font Links</a></li></ul><hr><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><p><strong>A vast majority of font and text related issues encountered comes from 4 things:</strong></p><h3 id="_1-invalid-filename-due-to-use-of-or-unexpected-working-directory" tabindex="-1">(1) Invalid filename due to use of <code>\\</code> or unexpected working directory. <a class="header-anchor" href="#_1-invalid-filename-due-to-use-of-or-unexpected-working-directory" aria-label="Permalink to &quot;(1) Invalid filename due to use of \`\\\` or unexpected working directory.&quot;">​</a></h3><p>See <a href="#about-filenames">About Filenames</a>. AddFontXXX functions should assert if the filename is incorrect.</p><h3 id="_2-invalid-utf-8-encoding-of-your-non-ascii-strings" tabindex="-1">(2) Invalid UTF-8 encoding of your non-ASCII strings. <a class="header-anchor" href="#_2-invalid-utf-8-encoding-of-your-non-ascii-strings" aria-label="Permalink to &quot;(2) Invalid UTF-8 encoding of your non-ASCII strings.&quot;">​</a></h3><p>See <a href="#about-utf-8-encoding">About UTF-8 Encoding</a>. Use the encoding viewer to confirm encoding of string literal in your source code is correct.</p><h3 id="_3-missing-glyph-ranges" tabindex="-1">(3) Missing glyph ranges. <a class="header-anchor" href="#_3-missing-glyph-ranges" aria-label="Permalink to &quot;(3) Missing glyph ranges.&quot;">​</a></h3><p>You need to load a font with explicit glyph ranges if you want to use non-ASCII characters. See <a href="#fonts-loading-instructions">Fonts Loading Instructions</a>. Use <a href="#debug-tools">Debug Tools</a> confirm loaded fonts and loaded glyph ranges.</p><p>This is a current constraint of Dear ImGui (which we will lift in the future): when loading a font you need to specify which characters glyphs to load. All loaded fonts glyphs are rendered into a single texture atlas ahead of time. Calling either of <code>io.Fonts-&gt;GetTexDataAsAlpha8()</code>, <code>io.Fonts-&gt;GetTexDataAsRGBA32()</code> or <code>io.Fonts-&gt;Build()</code> will build the atlas. This is generally called by the Renderer backend, e.g. <code>ImGui_ImplDX11_NewFrame()</code> calls it. <strong>If you use custom glyphs ranges, make sure the array is persistent</strong> and available during the calls to <code>GetTexDataAsAlpha8()/GetTexDataAsRGBA32()/Build()</code>.</p><h3 id="_4-font-atlas-texture-fails-to-upload-to-gpu" tabindex="-1">(4) Font atlas texture fails to upload to GPU. <a class="header-anchor" href="#_4-font-atlas-texture-fails-to-upload-to-gpu" aria-label="Permalink to &quot;(4) Font atlas texture fails to upload to GPU.&quot;">​</a></h3><p>This is often of byproduct of point 3. If you have large number of glyphs or multiple fonts, the texture may become too big for your graphics API. <strong>The typical result of failing to upload a texture is if every glyph or everything appears as empty white rectangles.</strong> Mind the fact that some graphics drivers have texture size limitation. If you are building a PC application, mind the fact that your users may use hardware with lower limitations than yours.</p><p><img src="https://github.com/user-attachments/assets/68b50fb5-8b9d-4c38-baec-6ac384f06d26" alt="empty squares"></p><p>Some solutions:</p><ul><li>You may reduce oversampling, e.g. <code>font_config.OversampleH = 1</code>, this will half your texture size for a quality loss. Note that while OversampleH = 2 looks visibly very close to 3 in most situations, with OversampleH = 1 the quality drop will be noticeable. Read about oversampling <a href="https://github.com/nothings/stb/blob/master/tests/oversample" target="_blank" rel="noreferrer">here</a>.</li><li>Reduce glyphs ranges by calculating them from source localization data. You can use the <code>ImFontGlyphRangesBuilder</code> for this purpose and rebuilding your atlas between frames when new characters are needed. This will be the biggest win!</li><li>Set <code>io.Fonts.Flags |= ImFontAtlasFlags_NoPowerOfTwoHeight;</code> to disable rounding the texture height to the next power of two.</li><li>Set <code>io.Fonts.TexDesiredWidth</code> to specify a texture width to reduce maximum texture height (see comment in <code>ImFontAtlas::Build()</code> function).</li></ul><p>Future versions of Dear ImGui should solve this problem.</p><h5 id="return-to-index" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="how-should-i-handle-dpi-in-my-application" tabindex="-1">How should I handle DPI in my application? <a class="header-anchor" href="#how-should-i-handle-dpi-in-my-application" aria-label="Permalink to &quot;How should I handle DPI in my application?&quot;">​</a></h2><p>See <a href="https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#q-how-should-i-handle-dpi-in-my-application" target="_blank" rel="noreferrer">FAQ entry</a>.</p><h5 id="return-to-index-1" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-1" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="fonts-loading-instructions" tabindex="-1">Fonts Loading Instructions <a class="header-anchor" href="#fonts-loading-instructions" aria-label="Permalink to &quot;Fonts Loading Instructions&quot;">​</a></h2><p><strong>Load default font:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImGuiIO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>Load .TTF/.OTF file with:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImGuiIO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_pixels);</span></span></code></pre></div><p>If you get an assert stating &quot;Could not load font file!&quot;, your font filename is likely incorrect. Read <a href="#about-filenames">About filenames</a> carefully.</p><p><strong>Load multiple fonts:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Init</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImGuiIO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_pixels);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anotherfont.otf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_pixels);</span></span></code></pre></div><p>In your application loop, select which font to use:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // use the default font (which is the first loaded font)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PushFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(font2);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello with another font&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PopFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>For advanced options create a ImFontConfig structure and pass it to the AddFont() function (it will be copied internally):</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFontConfig config;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.OversampleH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.OversampleV </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.GlyphExtraSpacing.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_pixels, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config);</span></span></code></pre></div><p><strong>Combine multiple fonts into one:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Load a first font</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add character ranges and merge into the previous font</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The ranges array is not copied by the AddFont* functions and is used lazily</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// so ensure it is available at the time of building or calling GetTexDataAsRGBA32().</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImWchar icons_ranges[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f3ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Will not be copied by AddFont* so keep in scope.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFontConfig config;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.MergeMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DroidSans.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetGlyphRangesJapanese</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Merge into first font</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fontawesome-webfont.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, icons_ranges);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // Merge into first font</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>Add a fourth parameter to bake specific font ranges only:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Basic Latin, Extended Latin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_pixels, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetGlyphRangesDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default + Selection of 2500 Ideographs used by Simplified Chinese</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_pixels, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetGlyphRangesChineseSimplifiedCommon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_pixels, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetGlyphRangesJapanese</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>See <a href="#using-custom-glyph-ranges">Using Custom Glyph Ranges</a> section to create your own ranges.</p><p><strong>Example loading and using a Japanese font:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImGuiIO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NotoSansCJKjp-Medium.otf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetGlyphRangesJapanese</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u8&quot;こんにちは！テスト </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u8&quot;ロード&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do stuff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InputText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buf, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IM_ARRAYSIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SliderFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;float&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v160/code_sample_02_jp.png" alt="sample code output"><br><em>(settings: Dark style (left), Light style (right) / Font: NotoSansCJKjp-Medium, 20px / Rounding: 5)</em></p><h5 id="return-to-index-2" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-2" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="loading-font-data-from-memory" tabindex="-1">Loading Font Data from Memory <a class="header-anchor" href="#loading-font-data-from-memory" aria-label="Permalink to &quot;Loading Font Data from Memory&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromMemoryTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, data_size, size_pixels, ...);</span></span></code></pre></div><p>IMPORTANT: <code>AddFontFromMemoryTTF()</code> by default transfer ownership of the data buffer to the font atlas, which will attempt to free it on destruction. This was to avoid an unnecessary copy, and is perhaps not a good API (a future version will redesign it). If you want to keep ownership of the data and free it yourself, you need to clear the <code>FontDataOwnedByAtlas</code> field:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFontConfig font_cfg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">font_cfg.FontDataOwnedByAtlas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromMemoryTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, data_size, size_pixels, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">font_cfg);</span></span></code></pre></div><h5 id="return-to-index-3" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-3" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="loading-font-data-embedded-in-source-code" tabindex="-1">Loading Font Data Embedded In Source Code <a class="header-anchor" href="#loading-font-data-embedded-in-source-code" aria-label="Permalink to &quot;Loading Font Data Embedded In Source Code&quot;">​</a></h2><ul><li>Compile and use <a href="https://github.com/ocornut/imgui/blob/master/misc/fonts/binary_to_compressed_c.cpp" target="_blank" rel="noreferrer">binary_to_compressed_c.cpp</a> to create a compressed C style array that you can embed in source code.</li><li>See the documentation in <a href="https://github.com/ocornut/imgui/blob/master/misc/fonts/binary_to_compressed_c.cpp" target="_blank" rel="noreferrer">binary_to_compressed_c.cpp</a> for instructions on how to use the tool.</li><li>You may find a precompiled version binary_to_compressed_c.exe for Windows inside the demo binaries package (see <a href="https://github.com/ocornut/imgui/blob/master/docs/README.md" target="_blank" rel="noreferrer">README</a>).</li><li>The tool can optionally output Base85 encoding to reduce the size of <em>source code</em> but the read-only arrays in the actual binary will be about 20% bigger.</li></ul><p>Then load the font with:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromMemoryCompressedTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compressed_data, compressed_data_size, size_pixels, ...);</span></span></code></pre></div><p>or</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromMemoryCompressedBase85TTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compressed_data_base85, size_pixels, ...);</span></span></code></pre></div><h5 id="return-to-index-4" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-4" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="using-icon-fonts" tabindex="-1">Using Icon Fonts <a class="header-anchor" href="#using-icon-fonts" aria-label="Permalink to &quot;Using Icon Fonts&quot;">​</a></h2><p>Using an icon font (such as <a href="http://fontawesome.io" target="_blank" rel="noreferrer">FontAwesome</a> or <a href="https://github.com/traverseda/OpenFontIcons" target="_blank" rel="noreferrer">OpenFontIcons</a>) is an easy and practical way to use icons in your Dear ImGui application. A common pattern is to merge the icon font within your main font, so you can embed icons directly from your strings without having to change fonts back and forth.</p><p>To refer to the icon UTF-8 codepoints from your C++ code, you may use those headers files created by Juliette Foucaut: <a href="https://github.com/juliettef/IconFontCppHeaders" target="_blank" rel="noreferrer">https://github.com/juliettef/IconFontCppHeaders</a>.</p><p>So you can use <code>ICON_FA_SEARCH</code> as a string that will render as a &quot;Search&quot; icon.</p><p>Example Setup:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Merge icons into default tool font</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;IconsFontAwesome.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImGuiIO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFontConfig config;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.MergeMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.GlyphMinAdvanceX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 13.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Use if you want to make the icon monospaced</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImWchar icon_ranges[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ICON_MIN_FA, ICON_MAX_FA, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fonts/fontawesome-webfont.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, icon_ranges);</span></span></code></pre></div><p>Example Usage:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage, e.g.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> among </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ICON_FA_SEARCH, count);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ICON_FA_SEARCH </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; Search&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// C string _literals_ can be concatenated at compilation time, e.g. &quot;hello&quot; &quot; world&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ICON_FA_SEARCH is defined as a string literal so this is the same as &quot;A&quot; &quot;B&quot; becoming &quot;AB&quot;</span></span></code></pre></div><p>See Links below for other icons fonts and related tools.</p><p><strong>Monospace Icons?</strong></p><p>To make your icon look more monospace and facilitate alignment, you may want to set the ImFontConfig::GlyphMinAdvanceX value when loading an icon font.</p><p><strong>Screenshot</strong></p><p>Here&#39;s an application using icons (&quot;Avoyd&quot;, <a href="https://www.avoyd.com" target="_blank" rel="noreferrer">https://www.avoyd.com</a>): <img src="https://user-images.githubusercontent.com/8225057/81696852-c15d9e80-9464-11ea-9cab-2a4d4fc84396.jpg" alt="avoyd"></p><h5 id="return-to-index-5" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-5" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="using-freetype-rasterizer-imgui-freetype" tabindex="-1">Using FreeType Rasterizer (imgui_freetype) <a class="header-anchor" href="#using-freetype-rasterizer-imgui-freetype" aria-label="Permalink to &quot;Using FreeType Rasterizer (imgui_freetype)&quot;">​</a></h2><ul><li>Dear ImGui uses imstb_truetype.h to rasterize fonts (with optional oversampling). This technique and its implementation are not ideal for fonts rendered at small sizes, which may appear a little blurry or hard to read.</li><li>There is an implementation of the ImFontAtlas builder using FreeType that you can use in the <a href="https://github.com/ocornut/imgui/tree/master/misc/freetype" target="_blank" rel="noreferrer">misc/freetype/</a> folder.</li><li>FreeType supports auto-hinting which tends to improve the readability of small fonts.</li><li>Read documentation in the <a href="https://github.com/ocornut/imgui/tree/master/misc/freetype" target="_blank" rel="noreferrer">misc/freetype/</a> folder.</li><li>Correct sRGB space blending will have an important effect on your font rendering quality.</li></ul><h5 id="return-to-index-6" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-6" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="using-colorful-glyphs-emojis" tabindex="-1">Using Colorful Glyphs/Emojis <a class="header-anchor" href="#using-colorful-glyphs-emojis" aria-label="Permalink to &quot;Using Colorful Glyphs/Emojis&quot;">​</a></h2><ul><li>Rendering of colored emojis is supported by imgui_freetype with FreeType 2.10+.</li><li>You will need to load fonts with the <code>ImGuiFreeTypeBuilderFlags_LoadColor</code> flag.</li><li>Emojis are frequently encoded in upper Unicode layers (character codes &gt;0x10000) and will need dear imgui compiled with <code>IMGUI_USE_WCHAR32</code>.</li><li>Not all types of color fonts are supported by FreeType at the moment.</li><li>Stateful Unicode features such as skin tone modifiers are not supported by the text renderer.</li></ul><p><img src="https://user-images.githubusercontent.com/8225057/106171241-9dc4ba80-6191-11eb-8a69-ca1467b206d1.png" alt="colored glyphs"></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../../../imgui_dev/data/fonts/NotoSans-Regular.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImWchar ranges[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1FFFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImFontConfig cfg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfg.OversampleH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cfg.OversampleV </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfg.MergeMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfg.FontBuilderFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImGuiFreeTypeBuilderFlags_LoadColor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Fonts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">seguiemj.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfg, ranges);</span></span></code></pre></div><h5 id="return-to-index-7" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-7" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="using-custom-glyph-ranges" tabindex="-1">Using Custom Glyph Ranges <a class="header-anchor" href="#using-custom-glyph-ranges" aria-label="Permalink to &quot;Using Custom Glyph Ranges&quot;">​</a></h2><p>You can use the <code>ImFontGlyphRangesBuilder</code> helper to create glyph ranges based on text input. For example: for a game where your script is known, if you can feed your entire script to it and only build the characters the game needs.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImVector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImWchar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ranges;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFontGlyphRangesBuilder builder;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // Add a string (here &quot;Hello world&quot; contains 7 unique characters)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7262</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                               // Add a specific character</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddRanges</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetGlyphRangesJapanese</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Add one of the default ranges</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuildRanges</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ranges);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          // Build the final result (ordered ranges with all the unique characters submitted)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myfontfile.ttf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_in_pixels, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ranges.Data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                     // Build the atlas while &#39;ranges&#39; is still in scope and not deleted.</span></span></code></pre></div><h5 id="return-to-index-8" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-8" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="using-custom-colorful-icons" tabindex="-1">Using Custom Colorful Icons <a class="header-anchor" href="#using-custom-colorful-icons" aria-label="Permalink to &quot;Using Custom Colorful Icons&quot;">​</a></h2><p>As an alternative to rendering colorful glyphs using imgui_freetype with <code>ImGuiFreeTypeBuilderFlags_LoadColor</code>, you may allocate your own space in the texture atlas and write yourself into it. <strong>(This is a BETA api, use if you are familiar with dear imgui and with your rendering backend)</strong></p><ul><li>You can use the <code>ImFontAtlas::AddCustomRect()</code> and <code>ImFontAtlas::AddCustomRectFontGlyph()</code> api to register rectangles that will be packed into the font atlas texture. Register them before building the atlas, then call Build()\`.</li><li>You can then use <code>ImFontAtlas::GetCustomRectByIndex(int)</code> to query the position/size of your rectangle within the texture, and blit/copy any graphics data of your choice into those rectangles.</li><li>This API is beta because it is likely to change in order to support multi-dpi (multiple viewports on multiple monitors with varying DPI scale).</li></ul><h4 id="pseudo-code" tabindex="-1">Pseudo-code: <a class="header-anchor" href="#pseudo-code" aria-label="Permalink to &quot;Pseudo-code:&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add font, then register two custom 13x13 rectangles mapped to glyph &#39;a&#39; and &#39;b&#39; of this font</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect_ids[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rect_ids[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddCustomRectFontGlyph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(font, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rect_ids[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddCustomRectFontGlyph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(font, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Build atlas</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Retrieve texture in RGBA format</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tex_pixels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tex_width, tex_height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetTexDataAsRGBA32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tex_pixels, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tex_width, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tex_height);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect_n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; rect_n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IM_ARRAYSIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rect_ids); rect_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect_ids[rect_n];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImFontAtlasCustomRect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetCustomRectByIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rect_id))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Fill the custom rectangle with red pixels (in reality you would draw/copy your bitmap data here!)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect-&gt;Height; y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ImU32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ImU32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)tex_pixels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rect-&gt;Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tex_width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rect-&gt;X);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect-&gt;Width; x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IM_COL32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="return-to-index-9" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-9" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="about-filenames" tabindex="-1">About Filenames <a class="header-anchor" href="#about-filenames" aria-label="Permalink to &quot;About Filenames&quot;">​</a></h2><p><strong>Please note that many new C/C++ users have issues loading their files <em>because the filename they provide is wrong</em> due to incorrect assumption of what is the current directory.</strong></p><p>Two things to watch for:</p><p>(1) In C/C++ and most programming languages if you want to use a backslash <code>\\</code> within a string literal, you need to write it double backslash <code>\\\\</code>. At it happens, Windows uses backslashes as a path separator, so be mindful.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyFiles</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yImage01.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // This is INCORRECT!!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyFiles</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MyImage01.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This is CORRECT</span></span></code></pre></div><p>In some situations, you may also use <code>/</code> path separator under Windows.</p><p>(2) Make sure your IDE/debugger settings starts your executable from the right working (current) directory. In Visual Studio you can change your working directory in project <code>Properties &gt; General &gt; Debugging &gt; Working Directory</code>. People assume that their execution will start from the root folder of the project, where by default it often starts from the folder where object or executable files are stored.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyImage01.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Relative filename depends on your Working Directory when running your program!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.Fonts-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddFontFromFileTTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../MyImage01.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Load from the parent folder of your Working Directory</span></span></code></pre></div><h5 id="return-to-index-10" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-10" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="about-utf-8-encoding" tabindex="-1">About UTF-8 Encoding <a class="header-anchor" href="#about-utf-8-encoding" aria-label="Permalink to &quot;About UTF-8 Encoding&quot;">​</a></h2><p><strong>For non-ASCII characters display, a common user issue is not passing correctly UTF-8 encoded strings.</strong></p><p>(1) We provide a function <code>ImGui::DebugTextEncoding(const char* text)</code> which you can call to verify the content of your UTF-8 strings. This is a convenient way to confirm that your encoding is correct.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SeparatorText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CORRECT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DebugTextEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u8&quot;こんにちは&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SeparatorText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INCORRECT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DebugTextEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;こんにちは&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="https://github.com/ocornut/imgui/assets/8225057/61c1696a-9a94-46c5-9627-cf91211111f0" alt="UTF-8 Encoding viewer"></p><p>You can also find this tool under <code>Metrics/Debuggers-&gt;Tools-&gt;UTF-8 Encoding viewer</code> if you want to paste from clipboard, but this won&#39;t validate the UTF-8 encoding done by your compiler.</p><p>(2) To encode in UTF-8:</p><p>There are also compiler-specific ways to enforce UTF-8 encoding by default:</p><ul><li>Visual Studio compiler: <code>/utf-8</code> command-line flag.</li><li>Visual Studio compiler: <code>#pragma execution_character_set(&quot;utf-8&quot;)</code> inside your code.</li><li>Since May 2023 we have changed the Visual Studio projects of all our examples to use <code>/utf-8</code> (<a href="https://github.com/ocornut/imgui/commit/513af1efc9080857bbd10000d98f98f2a0c96803" target="_blank" rel="noreferrer">see commit</a>).</li></ul><p>Or, since C++11, you can use the <code>u8&quot;my text&quot;</code> syntax to encode literal strings as UTF-8. e.g.:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u8&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u8&quot;こんにちは&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // this will always be encoded as UTF-8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;こんにちは&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // the encoding of this is depending on compiler settings/flags and may be incorrect.</span></span></code></pre></div><p>Since C++20, because the C++ committee hate its users, they decided to change the <code>u8&quot;&quot;</code> syntax to not return <code>const char*</code> but a new type <code>const char8_t*</code> which doesn&#39;t cast to <code>const char*</code>. Because of type usage of <code>u8&quot;&quot;</code> in C++20 is a little more tedious:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImGui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u8&quot;こんにちは&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>However, you can disable this behavior completely using the compiler option <a href="https://learn.microsoft.com/en-us/cpp/build/reference/zc-char8-t?view=msvc-170" target="_blank" rel="noreferrer"><code>/Zc:char8_t-</code></a> for MSVC and <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r3.html" target="_blank" rel="noreferrer"><code>-fno-char8_t</code></a> for Clang and GCC.</p><h5 id="return-to-index-11" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-11" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="debug-tools" tabindex="-1">Debug Tools <a class="header-anchor" href="#debug-tools" aria-label="Permalink to &quot;Debug Tools&quot;">​</a></h2><h4 id="metrics-debugger-fonts" tabindex="-1">Metrics/Debugger-&gt;Fonts <a class="header-anchor" href="#metrics-debugger-fonts" aria-label="Permalink to &quot;Metrics/Debugger-&gt;Fonts&quot;">​</a></h4><p>You can use the <code>Metrics/Debugger</code> window (available in <code>Demo&gt;Tools</code>) to browse your fonts and understand what&#39;s going on if you have an issue. You can also reach it in <code>Demo-&gt;Tools-&gt;Style Editor-&gt;Fonts</code>. The same information are also available in the Style Editor under Fonts.</p><p><img src="https://user-images.githubusercontent.com/8225057/135429892-0e41ef8d-33c5-4991-bcf6-f997a0bcfd6b.png" alt="Fonts debugging"></p><h4 id="utf-8-encoding-viewer" tabindex="-1">UTF-8 Encoding Viewer** <a class="header-anchor" href="#utf-8-encoding-viewer" aria-label="Permalink to &quot;UTF-8 Encoding Viewer**&quot;">​</a></h4><p>You can use the <code>UTF-8 Encoding viewer</code> in <code>Metrics/Debugger</code> to verify the content of your UTF-8 strings. From C/C++ code, you can call <code>ImGui::DebugTextEncoding(&quot;my string&quot;);</code> function to verify that your UTF-8 encoding is correct.</p><p><img src="https://user-images.githubusercontent.com/8225057/166505963-8a0d7899-8ee8-4558-abb2-1ae523dc02f9.png" alt="UTF-8 Encoding viewer"></p><h5 id="return-to-index-12" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-12" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><hr><h2 id="credits-licenses-for-fonts-included-in-repository" tabindex="-1">Credits/Licenses For Fonts Included In Repository <a class="header-anchor" href="#credits-licenses-for-fonts-included-in-repository" aria-label="Permalink to &quot;Credits/Licenses For Fonts Included In Repository&quot;">​</a></h2><p>Some fonts files are available in the <code>misc/fonts/</code> folder:</p><p><strong>Roboto-Medium.ttf</strong>, by Christian Robetson <br>Apache License 2.0 <br><a href="https://fonts.google.com/specimen/Roboto" target="_blank" rel="noreferrer">https://fonts.google.com/specimen/Roboto</a></p><p><strong>Cousine-Regular.ttf</strong>, by Steve Matteson <br>Digitized data copyright (c) 2010 Google Corporation. <br>Licensed under the SIL Open Font License, Version 1.1 <br><a href="https://fonts.google.com/specimen/Cousine" target="_blank" rel="noreferrer">https://fonts.google.com/specimen/Cousine</a></p><p><strong>DroidSans.ttf</strong>, by Steve Matteson <br>Apache License 2.0 <br><a href="https://www.fontsquirrel.com/fonts/droid-sans" target="_blank" rel="noreferrer">https://www.fontsquirrel.com/fonts/droid-sans</a></p><p><strong>ProggyClean.ttf</strong>, by Tristan Grimmer <br>MIT License <br>(recommended loading setting: Size = 13.0, GlyphOffset.y = +1) <br><a href="http://www.proggyfonts.net/" target="_blank" rel="noreferrer">http://www.proggyfonts.net/</a></p><p><strong>ProggyTiny.ttf</strong>, by Tristan Grimmer <br>MIT License <br>(recommended loading setting: Size = 10.0, GlyphOffset.y = +1) <br><a href="http://www.proggyfonts.net/" target="_blank" rel="noreferrer">http://www.proggyfonts.net/</a></p><p><strong>Karla-Regular.ttf</strong>, by Jonathan Pinhorn <br>SIL OPEN FONT LICENSE Version 1.1</p><h5 id="return-to-index-13" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-13" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5><h2 id="font-links" tabindex="-1">Font Links <a class="header-anchor" href="#font-links" aria-label="Permalink to &quot;Font Links&quot;">​</a></h2><h4 id="icon-fonts" tabindex="-1">ICON FONTS <a class="header-anchor" href="#icon-fonts" aria-label="Permalink to &quot;ICON FONTS&quot;">​</a></h4><ul><li>C/C++ header for icon fonts (#define with code points to use in source code string literals) <a href="https://github.com/juliettef/IconFontCppHeaders" target="_blank" rel="noreferrer">https://github.com/juliettef/IconFontCppHeaders</a></li><li>FontAwesome <a href="https://fortawesome.github.io/Font-Awesome" target="_blank" rel="noreferrer">https://fortawesome.github.io/Font-Awesome</a></li><li>OpenFontIcons <a href="https://github.com/traverseda/OpenFontIcons" target="_blank" rel="noreferrer">https://github.com/traverseda/OpenFontIcons</a></li><li>Google Icon Fonts <a href="https://design.google.com/icons/" target="_blank" rel="noreferrer">https://design.google.com/icons/</a></li><li>Kenney Icon Font (Game Controller Icons) <a href="https://github.com/nicodinh/kenney-icon-font" target="_blank" rel="noreferrer">https://github.com/nicodinh/kenney-icon-font</a></li><li>IcoMoon - Custom Icon font builder <a href="https://icomoon.io/app" target="_blank" rel="noreferrer">https://icomoon.io/app</a></li></ul><h4 id="regular-fonts" tabindex="-1">REGULAR FONTS <a class="header-anchor" href="#regular-fonts" aria-label="Permalink to &quot;REGULAR FONTS&quot;">​</a></h4><ul><li>Google Noto Fonts (worldwide languages) <a href="https://www.google.com/get/noto/" target="_blank" rel="noreferrer">https://www.google.com/get/noto/</a></li><li>Open Sans Fonts <a href="https://fonts.google.com/specimen/Open+Sans" target="_blank" rel="noreferrer">https://fonts.google.com/specimen/Open+Sans</a></li><li>(Japanese) M+ fonts by Coji Morishita <a href="http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/index-en.html" target="_blank" rel="noreferrer">http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/index-en.html</a></li></ul><h4 id="monospace-fonts" tabindex="-1">MONOSPACE FONTS <a class="header-anchor" href="#monospace-fonts" aria-label="Permalink to &quot;MONOSPACE FONTS&quot;">​</a></h4><p>Pixel Perfect:</p><ul><li>Proggy Fonts, by Tristan Grimmer <a href="http://www.proggyfonts.net" target="_blank" rel="noreferrer">http://www.proggyfonts.net</a> or <a href="http://upperboundsinteractive.com/fonts.php" target="_blank" rel="noreferrer">http://upperboundsinteractive.com/fonts.php</a></li><li>Sweet16, Sweet16 Mono, by Martin Sedlak (Latin + Supplemental + Extended A) <a href="https://github.com/kmar/Sweet16Font" target="_blank" rel="noreferrer">https://github.com/kmar/Sweet16Font</a> (also include an .inl file to use directly in dear imgui.)</li></ul><p>Regular:</p><ul><li>Google Noto Mono Fonts <a href="https://www.google.com/get/noto/" target="_blank" rel="noreferrer">https://www.google.com/get/noto/</a></li><li>Typefaces for source code beautification <a href="https://github.com/chrissimpkins/codeface" target="_blank" rel="noreferrer">https://github.com/chrissimpkins/codeface</a></li><li>Programmation fonts <a href="http://s9w.github.io/font_compare/" target="_blank" rel="noreferrer">http://s9w.github.io/font_compare/</a></li><li>Inconsolata <a href="http://www.levien.com/type/myfonts/inconsolata.html" target="_blank" rel="noreferrer">http://www.levien.com/type/myfonts/inconsolata.html</a></li><li>Adobe Source Code Pro: Monospaced font family for ui &amp; coding environments <a href="https://github.com/adobe-fonts/source-code-pro" target="_blank" rel="noreferrer">https://github.com/adobe-fonts/source-code-pro</a></li><li>Monospace/Fixed Width Programmer&#39;s Fonts <a href="http://www.lowing.org/fonts/" target="_blank" rel="noreferrer">http://www.lowing.org/fonts/</a></li></ul><p>Or use Arial Unicode or other Unicode fonts provided with Windows for full characters coverage (not sure of their licensing).</p><h5 id="return-to-index-14" tabindex="-1"><a href="#index">Return to Index</a> <a class="header-anchor" href="#return-to-index-14" aria-label="Permalink to &quot;[Return to Index](#index)&quot;">​</a></h5>`,158)]))}const E=i(e,[["render",h]]);export{g as __pageData,E as default};
