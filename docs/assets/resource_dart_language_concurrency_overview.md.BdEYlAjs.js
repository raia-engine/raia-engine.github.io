import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.CuCbyi2k.js";const g=JSON.parse('{"title":"Dartにおける並行処理","description":"","frontmatter":{},"headers":[],"relativePath":"resource/dart/language/concurrency/overview.md","filePath":"resource/dart/language/concurrency/overview.md","lastUpdated":1732376957000}'),h={name:"resource/dart/language/concurrency/overview.md"};function l(p,s,k,e,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="dartにおける並行処理" tabindex="-1">Dartにおける並行処理 <a class="header-anchor" href="#dartにおける並行処理" aria-label="Permalink to &quot;Dartにおける並行処理&quot;">​</a></h1><p>このページでは、Dartにおける並行プログラミングの概念について説明します。イベントループ、非同期言語機能、およびアイソレートについて高レベルから説明します。Dartで並行処理を使用する、より実践的なコード例については、非同期サポートページとアイソレートページをお読みください。</p><p>Dartにおける並行プログラミングは、FutureやStreamのような非同期APIと、処理を別々のコアに移動できるアイソレートの両方を指します。</p><p>Dartのコードはすべてアイソレート内で実行され、デフォルトのメインアイソレートから始まり、オプションで明示的に作成した後続のアイソレートに拡張されます。新しいアイソレートを生成すると、そのアイソレートは独自の分離メモリと独自のイベントループを持つ。イベントループはDartで非同期プログラミングと並行プログラミングを可能にするものです。</p><h2 id="イベントループ" tabindex="-1">イベントループ <a class="header-anchor" href="#イベントループ" aria-label="Permalink to &quot;イベントループ&quot;">​</a></h2><p>Dartのランタイムモデルは、イベントループに基づいている。イベントループは、プログラムのコードの実行、イベントの収集と処理などを行います。</p><p>アプリケーションが実行されると、すべてのイベントがイベントキューと呼ばれるキューに追加されます。イベントは、UIの再描画要求から、ユーザーのタップやキー入力、ディスクからのI/Oまで、何でもあり得ます。アプリケーションがどのような順番でイベントが発生するかを予測することはできないため、イベント・ループはキューに入れられた順番にイベントを処理します。</p><p>(図)イベントが1つずつ -&gt; イベント・ループ</p><p>イベントループが機能する方法は、次のコードに似ている：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eventQueue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitForEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  eventQueue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processNextEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例のイベントループは同期的で、シングルスレッドで実行される。しかし、ほとんどのDartアプリケーションは、一度に複数のことを行う必要があります。例えば、クライアントアプリケーションは、HTTPリクエストを実行すると同時に、ユーザーがボタンをタップするのを待つ必要があるかもしれません。これを処理するために、DartはFutures、Streams、async-awaitといった多くの非同期APIを提供しています。これらのAPIは、このイベントループを中心に構築されている。</p><p>例えば、ネットワークリクエストを行うことを考えてみよう：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((response) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Success!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span></code></pre></div><p>このコードがイベントループに到達すると、直ちに最初の節であるhttp.getを呼び出し、Futureを返す。また、HTTPリクエストが解決するまでthen()節のコールバックを保持するようにイベントループに指示します。解決したら、そのコールバックを実行し、リクエストの結果を引数として渡します。</p><p>(図)非同期イベントがイベントループに追加される。</p><p>(図)コールバックを保持し、後で実行する</p><p>これと同じモデルで、イベントループは、Streamオブジェクトなど、Dartの他のすべての非同期イベントを処理する。</p><h2 id="非同期プログラミング" tabindex="-1">非同期プログラミング <a class="header-anchor" href="#非同期プログラミング" aria-label="Permalink to &quot;非同期プログラミング&quot;">​</a></h2><p>このセクションでは、Dartにおける非同期プログラミングのさまざまな種類と構文をまとめます。すでにFuture、Stream、async-awaitに慣れている場合は、isolatesのセクションまで読み飛ばしてかまいません。</p><h2 id="future" tabindex="-1">Future <a class="header-anchor" href="#future" aria-label="Permalink to &quot;Future&quot;">​</a></h2><p>Futureは、最終的に値またはエラーで完了する非同期操作の結果を表します。</p><p>このサンプルコードでは、戻り値の <code>Future&lt;String&gt;</code> 型は、最終的に String 値（またはエラー）を返すという約束を表しています。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_readFileAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // .readAsString() returns a Future.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // .then() registers a callback to be executed when \`readAsString\` resolves.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((contents) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="async-await構文" tabindex="-1">async-await構文 <a class="header-anchor" href="#async-await構文" aria-label="Permalink to &quot;async-await構文&quot;">​</a></h2><p>asyncとawaitキーワードは、非同期関数を宣言的に定義し、その結果を使用する方法を提供します。</p><p>以下は、ファイルI/Oを待つ間にブロックする同期コードの例です：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;with_keys.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Read some data.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jsonDecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileData);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use that data.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Number of JSON keys: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">jsonData</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsStringSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>似たようなコードだが、非同期にするために変更（ハイライト）してある：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;with_keys.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Read some data.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _readFileAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jsonDecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileData);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use that data.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Number of JSON keys: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">jsonData</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_readFileAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>main()関数は_readFileAsync()の前にawaitキーワードを使用し、ネイティブコード(ファイルI/O)が実行されている間、他のDartコード(イベントハンドラなど)にCPUを使用させます。awaitを使用すると、_readFileAsync()が返す<code>Future&lt;String&gt;</code>をStringに変換する効果もあります。その結果、contents変数は暗黙のString型になります。</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>awaitキーワードは、関数本体の前にasyncを持つ関数でのみ機能する。</p></div><p>次の図に示すように、readAsString() が Dart ランタイムまたはオペレーティング・システムで非 Dart コードを実行している間、Dart コードは一時停止します。readAsString()が値を返すと、Dartコードの実行が再開されます。</p><p>(図)フローチャートのような図は、アプリのコードが開始から終了まで実行され、待機していることを示している。 (図)ネイティブI/O用</p><h2 id="streams" tabindex="-1">Streams <a class="header-anchor" href="#streams" aria-label="Permalink to &quot;Streams&quot;">​</a></h2><p>Dartは、ストリームという形で非同期コードもサポートしている。ストリームは未来の値を時間経過とともに繰り返し提供します。一連の int 値を提供する約束は <code>Stream&lt;int&gt;</code> 型を持ちます。</p><p>次の例では、Stream.periodicで作成したストリームが、1秒ごとに新しいint値を繰り返し出力している。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (i) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i);</span></span></code></pre></div><h2 id="await-for-と-yield" tabindex="-1">await-for と yield <a class="header-anchor" href="#await-for-と-yield" aria-label="Permalink to &quot;await-for と yield&quot;">​</a></h2><p>Await-forはforループの一種であり、新しい値が提供されると、それに続くループの各反復を実行する。言い換えれば、ストリームを「ループ・オーバー」するために使用されます。この例では、引数として指定されたストリームから新しい値が出力されると、関数sumStreamから新しい値が出力されます。値のストリームを返す関数では、returnではなくyieldキーワードが使用されます。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; stream) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>async、await、Streams、Futuresの使い方についてもっと知りたい方は、非同期プログラミングのコードラボをご覧ください。</p><h2 id="アイソレート" tabindex="-1">アイソレート <a class="header-anchor" href="#アイソレート" aria-label="Permalink to &quot;アイソレート&quot;">​</a></h2><p>Dartは、非同期APIに加えて、アイソレートによる並行処理をサポートしている。最近のデバイスの多くはマルチコアCPUを搭載している。マルチコアを活用するために、開発者は共有メモリ・スレッドを同時に実行することがある。しかし、共有状態の同時実行はエラーが発生しやすく、コードが複雑になる可能性がある。</p><p>スレッドの代わりに、すべてのDartコードはアイソレート内で実行される。アイソレートを使用することで、Dartコードは複数の独立したタスクを同時に実行できます。アイソレートはスレッドやプロセスのようなものですが、各アイソレートは独自のメモリとイベントループを実行する単一のスレッドを持っています。</p><p>各アイソレートは独自のグローバルフィールドを持ち、あるアイソレート内の状態に他のアイソレートからアクセスできないようにします。アイソレート同士はメッセージパッシングによってのみ通信できる。アイソレート間でステートが共有されないということは、Dartではミューテックスやロック、データ競合のような複雑な並行処理が発生しないことを意味する。とはいえ、アイソレートが競合状態を完全に防ぐわけではありません。この同時実行モデルの詳細については、Actorモデルを参照してください。</p><p>アイソレートを使用することで、Dartコードは複数の独立したタスクを同時に実行することができます。アイソレートはスレッドやプロセスのようなものですが、各アイソレートは独自のメモリとイベントループを実行する単一のスレッドを持ちます。</p><div class="info custom-block"><p class="custom-block-title">Platform note</p><p>Dart Nativeプラットフォームのみがアイソレートを実装しています。Dart Web プラットフォームの詳細については、「Web での同時実行」セクションを参照してください。</p></div><h2 id="主なアイソレート" tabindex="-1">主なアイソレート <a class="header-anchor" href="#主なアイソレート" aria-label="Permalink to &quot;主なアイソレート&quot;">​</a></h2><p>ほとんどの場合、アイソレートについて考える必要は全くありません。Dartのプログラムはデフォルトでメインアイソレートで実行されます。下図に示すように、プログラムの実行を開始するスレッドです：</p><p>(図)実行され、イベントに応答し、終了するメインのアイソレートを示す。</p><p>単一分離プログラムでもスムーズに実行できる。次の行に進む前に、これらのアプリはasync-awaitを使って非同期処理の完了を待つ。お行儀の良いアプリは素早く開始し、できるだけ早くイベントループに入る。そして、必要に応じて非同期処理を使用しながら、キューに入れられた各イベントに迅速に応答します。</p><h2 id="アイソレートのライフサイクル" tabindex="-1">アイソレートのライフサイクル <a class="header-anchor" href="#アイソレートのライフサイクル" aria-label="Permalink to &quot;アイソレートのライフサイクル&quot;">​</a></h2><p>以下の図が示すように、すべてのアイソレートはmain()関数などのDartコードを実行することから始まります。このDartコードは、例えばユーザー入力やファイルI/Oに応答するためのイベントリスナーを登録するかもしれません。アイソレートの初期関数が戻ると、アイソレートはイベントを処理する必要がある場合に残ります。イベントを処理した後、アイソレートは終了します。</p><p>より一般的な図は、アイソレートがいくつかのコードを実行し、オプションでイベントに応答し、終了することを示しています。</p><h2 id="イベントハンドリング" tabindex="-1">イベントハンドリング <a class="header-anchor" href="#イベントハンドリング" aria-label="Permalink to &quot;イベントハンドリング&quot;">​</a></h2><p>クライアントアプリでは、メインアイソレートのイベントキューに再描画要求やタップなどの UI イベントの通知が含まれることがあります。例えば、下図は再描画イベントの後にタップイベントが続き、その後に2つの再描画イベントが続いています。イベント・ループは、先入れ先出しの順番でキューからイベントを受け取ります。</p><p>（図）イベントが1つずつイベント・ループに送り込まれる</p><p>イベント処理は、main() が終了した後、メイン・アイソレートで行われます。下図では、main() が終了した後、main isolate は最初の repaint イベントを処理します。その後、main isolate は tap イベントを処理し、続いて repaint イベントを処理します。</p><p>同期処理に時間がかかりすぎると、アプリが応答しなくなることがあります。次の図では、タップ処理のコードに時間がかかりすぎるため、後続のイベントの処理が遅すぎます。アプリがフリーズしたように見えたり、アニメーションがぎこちなくなったりします。</p><p>(図)実行時間が長すぎるタップ・ハンドラを示す</p><p>クライアント・アプリでは、長すぎる同期操作の結果、UIアニメーションがぎこちなくなる（スムーズでなくなる）ことがよくある。さらに悪いことに、UIがまったく反応しなくなることもあります。</p><h2 id="バックグラウンドワーカー" tabindex="-1">バックグラウンドワーカー <a class="header-anchor" href="#バックグラウンドワーカー" aria-label="Permalink to &quot;バックグラウンドワーカー&quot;">​</a></h2><p>例えば大きな JSON ファイルの解析など、時間のかかる計算によってアプリの UI が応答しなくなった場合、しばしばバックグラウンドワーカーと呼ばれるワーカーアイソレートに計算をオフロードすることを検討してください。次の図に示す一般的なケースは、計算を実行して終了する単純なワーカーアイソレートを生成することです。ワーカーアイソレートは、終了時にその結果をメッセージで返します。</p><p>(図)メインアイソレートと単純なワーカーアイソレートを示す</p><p>ワーカーアイソレートはI/O（ファイルの読み書きなど）やタイマーの設定などを行うことができます。独自のメモリを持ち、メインアイソレートと状態を共有することはありません。ワーカーアイソレートは他のアイソレートに影響を与えることなくブロックすることができます。</p><h2 id="アイソレートの使用" tabindex="-1">アイソレートの使用 <a class="header-anchor" href="#アイソレートの使用" aria-label="Permalink to &quot;アイソレートの使用&quot;">​</a></h2><p>Dartでアイソレートを扱うには、使用ケースに応じて2つの方法がある：</p><ul><li>Isolate.run()を使用して、別のスレッドで単一の計算を実行します。</li><li>Isolate.spawn()を使用して、時間をかけて複数のメッセージを処理するアイソレート、またはバックグラウンドワーカーを作成します。長期間のアイソレートを扱うための詳細については、アイソレートのページを参照してください。</li></ul><p>ほとんどの場合、Isolate.runはバックグラウンドでプロセスを実行するために推奨されるAPIです。</p><h2 id="isolate-run" tabindex="-1">Isolate.run() <a class="header-anchor" href="#isolate-run" aria-label="Permalink to &quot;Isolate.run()&quot;">​</a></h2><p>静的なIsolate.run()メソッドは1つの引数を必要とします：新しく生成されたアイソレートで実行されるコールバックです。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> slowFib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> slowFib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> slowFib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Compute without blocking current isolate.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> slowFib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Fib(40) = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="パフォーマンスと複数のアイソレート" tabindex="-1">パフォーマンスと複数のアイソレート <a class="header-anchor" href="#パフォーマンスと複数のアイソレート" aria-label="Permalink to &quot;パフォーマンスと複数のアイソレート&quot;">​</a></h2><p>アイソレートがIsolate.spawn()を呼び出すと、2つのアイソレートは同じ実行可能コードを持ち、同じアイソレートグループになります。新しいアイソレートは、アイソレートグループが所有するコードを即座に実行します。また、Isolate.exit() はアイソレートが同じアイソレート・グループ内にある場合にのみ動作します。</p><p>特殊なケースでは、Isolate.spawnUri()を使用する必要があるかもしれません。これは、指定されたURIにあるコードのコピーで新しいアイソレートを設定します。しかし、spawnUri()はspawn()よりもはるかに遅く、新しいアイソレートはそのスポナーのアイソレートグループに含まれません。もう1つのパフォーマンス上の影響は、アイソレートが異なるグループにある場合にメッセージの受け渡しが遅くなることです。</p><h2 id="複数のアイソレートのリミット" tabindex="-1">複数のアイソレートのリミット <a class="header-anchor" href="#複数のアイソレートのリミット" aria-label="Permalink to &quot;複数のアイソレートのリミット&quot;">​</a></h2><h2 id="アイソレートはスレッドではない" tabindex="-1">アイソレートはスレッドではない <a class="header-anchor" href="#アイソレートはスレッドではない" aria-label="Permalink to &quot;アイソレートはスレッドではない&quot;">​</a></h2><p>マルチスレッド機能を持つ言語からDartに来たのであれば、アイソレートがスレッドのように振る舞うことを期待するのが妥当だろうが、そうではない。各アイソレートは独自のステートを持ち、アイソレート内のどのステートも他のアイソレートからアクセスできないようになっています。そのため、アイソレートは自身のメモリへのアクセスによって制限される。</p><p>例えば、グローバルなミュータブル変数を持つアプリケーションがある場合、その変数はスポーンしたアイソレート内の別の変数になります。スポーンしたアイソレートでその変数を変更しても、メインのアイソレートでは変更されずに残ります。これはアイソレートがどのように機能するかということであり、アイソレートの使用を検討する際には覚えておくことが重要です。</p><h2 id="メッセージの種類" tabindex="-1">メッセージの種類 <a class="header-anchor" href="#メッセージの種類" aria-label="Permalink to &quot;メッセージの種類&quot;">​</a></h2><p>SendPort 経由で送信されるメッセージは、ほぼすべてのタイプの Dart オブジェクトを使用できますが、いくつかの例外があります：</p><ul><li>Socketのようなネイティブリソースを持つオブジェクト。</li><li>ReceivePort</li><li>DynamicLibrary</li><li>Finalizable</li><li>Finalizer</li><li>NativeFinalizer</li><li>Pointer</li><li>UserTag</li><li>@pragma(&#39;vm:isolate-unsendable&#39;)でマークされたクラスのインスタンス。</li></ul><p>これらの例外を除けば、どんなオブジェクトでも送信できます。詳細はSendPort.sendのドキュメントを参照してください。</p><p>Isolate.spawn()とIsolate.exit()はSendPortオブジェクトを抽象化しているため、同じ制限を受けることに注意してください。</p><h2 id="ウェブ上での同時実行" tabindex="-1">ウェブ上での同時実行 <a class="header-anchor" href="#ウェブ上での同時実行" aria-label="Permalink to &quot;ウェブ上での同時実行&quot;">​</a></h2><p>すべての Dart アプリは、async-await、Future、および Stream を使用して、ノンブロッキングでインターリーブされた計算を行うことができます。ただし、Dart Web プラットフォームはアイソレートをサポートしていません。Dart Web アプリでは、Web ワーカーを使用して、アイソレートと同様にバックグラウンドのスレッドでスクリプトを実行できます。しかし、ウェブワーカーの機能と性能はアイソレートとは多少異なります。</p><p>例えば、ウェブワーカーがスレッド間でデータを送信する場合、データを前後にコピーします。しかしデータのコピーは、特に大きなメッセージの場合、非常に時間がかかることがある。アイソレートも同じですが、代わりにメッセージを保持するメモリをより効率的に転送できるAPIを提供します。</p><p>ウェブワーカーとアイソレートの作成方法も異なります。ウェブ ワーカーを作成するには、別のプログラムのエントリーポイントを宣言し、別にコンパイルする必要があります。ウェブワーカーの起動は、Isolate.spawnUri を使ってアイソレートを起動するのと似ています。Isolate.spawnを使用してアイソレートを開始することもできますが、これはスポーンするアイソレートと同じコードとデータの一部を再利用するため、必要なリソースが少なくなります。Webワーカーには同等のAPIがありません。</p><h2 id="その他のリソース" tabindex="-1">その他のリソース <a class="header-anchor" href="#その他のリソース" aria-label="Permalink to &quot;その他のリソース&quot;">​</a></h2><ul><li>多くのアイソレートを使用する場合は、FlutterのIsolateNameServerや、Flutter以外のDartアプリケーションに同様の機能を提供するpackage:isolate_name_serverを検討してください。</li><li>DartのアイソレートがベースとしているActorモデルについてはこちらを参照。</li><li>Isolate APIに関する追加ドキュメント： <ul><li>Isolate.exit()</li><li>Isolate.spawn()</li><li>ReceivePort</li><li>SendPort</li></ul></li></ul>`,90)]))}const y=i(h,[["render",l]]);export{g as __pageData,y as default};
