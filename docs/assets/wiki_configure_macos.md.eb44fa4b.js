import{_ as s,o as a,c as e,Q as l}from"./chunks/framework.fec3dccb.js";const g=JSON.parse('{"title":"macOSでRaiaEngineの開発環境を構築する","description":"","frontmatter":{},"headers":[],"relativePath":"wiki/configure_macos.md","filePath":"wiki/configure_macos.md"}'),n={name:"wiki/configure_macos.md"},o=l(`<h1 id="macosでraiaengineの開発環境を構築する" tabindex="-1">macOSでRaiaEngineの開発環境を構築する <a class="header-anchor" href="#macosでraiaengineの開発環境を構築する" aria-label="Permalink to &quot;macOSでRaiaEngineの開発環境を構築する&quot;">​</a></h1><h2 id="検証環境" tabindex="-1">検証環境 <a class="header-anchor" href="#検証環境" aria-label="Permalink to &quot;検証環境&quot;">​</a></h2><p>使用したMacの環境は以下のとおりです。</p><ul><li>マシン: Mac mini</li><li>チップ: Apple M1</li><li>メモリ: 16GB</li><li>OS: macOS Ventura バージョン 13.2</li></ul><p>また、環境構築はMacを工場出荷時の設定にリセットした状態から行っています。</p><div class="info custom-block"><p class="custom-block-title">工場出荷時の設定にリセット</p><p>検証環境では「すべてのコンテンツと設定を消去」を使ってmacOSを工場出荷時の設定にリセットしています。詳しくは <a href="https://support.apple.com/ja-jp/HT212749" target="_blank" rel="noreferrer">Mac を消去して工場出荷時の設定にリセットする</a>を参照してください。</p></div><h2 id="コマンドラインデベロッパーツールをインストールする" tabindex="-1">コマンドラインデベロッパーツールをインストールする <a class="header-anchor" href="#コマンドラインデベロッパーツールをインストールする" aria-label="Permalink to &quot;コマンドラインデベロッパーツールをインストールする&quot;">​</a></h2><h3 id="ターミナルを起動する" tabindex="-1">ターミナルを起動する <a class="header-anchor" href="#ターミナルを起動する" aria-label="Permalink to &quot;ターミナルを起動する&quot;">​</a></h3><p>ターミナルを起動します。ターミナルは「アプリケーション」フォルダの「ユーティリティ」サブフォルダにあります。</p><div class="info custom-block"><p class="custom-block-title">Spotlightからアプリケーションを起動する</p><p>MacではSpotlightからアプリケーションを起動することができます。</p><ul><li>MacのメニューバーでSpotlightアイコン をクリックするか、Commandキー＋スペースバーを押します。</li><li>検索フィールドにアプリケーションの名前を入力します。今回は「ターミナル」と入力します。</li><li>エンターキーを押すか、検索結果のアプリケーション名をクリックして実行します。</li></ul></div><h3 id="コマンドラインデベロッパーツールのインストール" tabindex="-1">コマンドラインデベロッパーツールのインストール <a class="header-anchor" href="#コマンドラインデベロッパーツールのインストール" aria-label="Permalink to &quot;コマンドラインデベロッパーツールのインストール&quot;">​</a></h3><p>ターミナルに以下のコマンドを入力して、コマンドラインデベロッパーツールをインストールします。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">xcode-select</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">xcode-select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--install</span></span></code></pre></div><p>コマンドを実行するとポップアップウィンドウが表示され、コマンドラインデベロッパーツールをインストールするかどうかを尋ねられます。インストールを続行するための指示に従ってください。</p><div class="info custom-block"><p class="custom-block-title">詳細な手順</p><ul><li>「インストール」をクリックします。</li><li>「同意する」をクリックします。 <ul><li>ソフトウェアのダウンロードとインストールが開始されます（検証環境では10分程度かかりました）</li></ul></li><li>「完了」をクリックします。</li></ul></div><h3 id="インストールの確認" tabindex="-1">インストールの確認 <a class="header-anchor" href="#インストールの確認" aria-label="Permalink to &quot;インストールの確認&quot;">​</a></h3><p>以下のコマンドをターミナルに入力して、正しくインストールされたことを確認します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span></code></pre></div><p>このコマンドを実行すると、インストールされた<code>git</code>のバージョン情報が表示されます。バージョン情報が表示されたら、コマンドラインデベロッパーツールのインストールに成功しています。</p><p>検証環境での結果:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git version 2.39.2 (Apple Git-143)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git version 2.39.2 (Apple Git-143)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">補足</p><p>工場出荷時の状態で<code>git</code>等のコマンドを実行しようとすると、<code>xcode-select --install</code>を実行したときと同様に、コマンドラインデベロッパーツールをインストールするためのポップアップが表示されます。</p></div><h2 id="xcodeをインストールする" tabindex="-1">Xcodeをインストールする <a class="header-anchor" href="#xcodeをインストールする" aria-label="Permalink to &quot;Xcodeをインストールする&quot;">​</a></h2><p>Mac App StoreでXcodeを入手する インストール完了までしばらく待つ。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xcodebuild</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-license</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xcodebuild</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-license</span></span></code></pre></div><p>ターミナルに表示されるライセンスを読んだのち、<code>agree</code>を打ち込む。</p><h2 id="homebrewをインストールする" tabindex="-1">Homebrewをインストールする <a class="header-anchor" href="#homebrewをインストールする" aria-label="Permalink to &quot;Homebrewをインストールする&quot;">​</a></h2><p><a href="https://brew.sh" target="_blank" rel="noreferrer">https://brew.sh</a> のトップにあるコードをターミナルで実行する</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">/bin/bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-fsSL</span><span style="color:#9ECBFF;"> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">/bin/bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-fsSL</span><span style="color:#032F62;"> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span></code></pre></div><p>パスワードを求められるのでMacのパスワードを入力する。ENTERキーを押して続行するとインストールが始まる。</p><p>ターミナルに表示された <code>==&gt; Next steps</code> の <code>... Homebrew to your PATH:</code> の次のコマンドをターミナルで実行する。</p><p>例:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> /Users/UserName/.zprofile</span></span>
<span class="line"><span style="color:#79B8FF;">eval</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;$(</span><span style="color:#B392F0;">/opt/homebrew/bin/brew</span><span style="color:#9ECBFF;"> shellenv)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">echo</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> /Users/UserName/.zprofile</span></span>
<span class="line"><span style="color:#005CC5;">eval</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;$(</span><span style="color:#6F42C1;">/opt/homebrew/bin/brew</span><span style="color:#032F62;"> shellenv)&quot;</span></span></code></pre></div><p>※ UserName の箇所があなたのユーザー名になっているはずです</p><h2 id="ninjaをインストールする" tabindex="-1">Ninjaをインストールする <a class="header-anchor" href="#ninjaをインストールする" aria-label="Permalink to &quot;Ninjaをインストールする&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">brew</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ninja</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">brew</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ninja</span></span></code></pre></div><h2 id="raiaengineのリポジトリをクローンする" tabindex="-1">RaiaEngineのリポジトリをクローンする <a class="header-anchor" href="#raiaengineのリポジトリをクローンする" aria-label="Permalink to &quot;RaiaEngineのリポジトリをクローンする&quot;">​</a></h2><p>引き続きターミナルを使います。</p><p><code>git</code> を使って GitHub からリポジトリをクローンする方法を、手順を追って説明します。</p><h3 id="適切なディレクトリに移動する-オプション" tabindex="-1">適切なディレクトリに移動する (オプション) <a class="header-anchor" href="#適切なディレクトリに移動する-オプション" aria-label="Permalink to &quot;適切なディレクトリに移動する (オプション)&quot;">​</a></h3><p>クローンを作成したい場所へ移動します。たとえば、Documents フォルダ内にクローンする場合、以下のコマンドを実行します:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/Documents</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/Documents</span></span></code></pre></div><p>このドキュメントでは開発環境の作業ディレクトリとして <code>~/Documents</code> を使用するものとして解説をします。実際に使用されるディレクトリに置き換えて読み進めてください。</p><div class="tip custom-block"><p class="custom-block-title">開発環境の作業ディレクトリをどこに作成するか</p><p>開発環境の作業ディレクトリの場所を決める際の一般的な選択肢とそれぞれのメリットとデメリットを以下に示します。</p><ul><li>ホームディレクトリ直下 (例: <code>~/MyProject</code>) <ul><li>メリット: <ul><li>アクセスが簡単。ターミナルを開いたときのデフォルトの場所がホームディレクトリであるため、直接作業ディレクトリに移動しやすい。</li><li>権限の問題が少ない。ホームディレクトリはユーザーの所有であるため、ファイルやフォルダの操作に関する問題が発生しにくい。</li></ul></li><li>デメリット: <ul><li>プロジェクトが増えてくると、ホームディレクトリが散らかってしまう可能性がある。</li></ul></li></ul></li><li>ホームディレクトリに専用のサブディレクトリ (例: <code>~/Projects/MyProject</code>) <ul><li>メリット: <ul><li>整理されている。全ての開発関連のプロジェクトやファイルが一箇所にまとまるため、管理がしやすい。</li><li>他のユーザーとの共同作業やバックアップを考えた場合、このディレクトリだけを対象にすることが簡単。</li></ul></li><li>デメリット: <ul><li>最初にサブディレクトリを作成し、管理する必要がある。</li></ul></li></ul></li><li>書類ディレクトリ (例: <code>~/Documents/MyProject</code>) <ul><li>メリット: <ul><li>macOSの場合、iCloudバックアップの対象にできる</li></ul></li></ul></li><li>外部ドライブやUSB <ul><li>メリット: <ul><li>ポータブル。作業を持ち運びやすく、異なるコンピュータ間での作業が容易。</li><li>主要なストレージからの物理的な分離が可能。</li></ul></li><li>デメリット: <ul><li>I/O のパフォーマンスが低下する可能性がある。</li><li>破損や紛失のリスクが高まる。</li></ul></li></ul></li><li>クラウド同期フォルダ (例: Dropbox, Google Drive) <ul><li>メリット: <ul><li>自動的なバックアップや複数のデバイス間での同期が容易。</li><li>外部からのアクセスが可能。</li></ul></li><li>デメリット: <ul><li>インターネット接続の有無や速度に依存。</li><li>クラウドサービスの同期エラーや競合のリスクがある。</li><li>プライバシーやセキュリティの懸念。</li></ul></li></ul></li></ul></div><h3 id="リポジトリをクローンする" tabindex="-1">リポジトリをクローンする <a class="header-anchor" href="#リポジトリをクローンする" aria-label="Permalink to &quot;リポジトリをクローンする&quot;">​</a></h3><p>次の git clone コマンドを使って、リポジトリをクローンします:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/dolphilia/raia-engine.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/dolphilia/raia-engine.git</span></span></code></pre></div><p>このコマンドは、GitHub から raia-engine リポジトリのコピーをカレントディレクトリ（この例では Documents フォルダ）に raia-engine という名前のフォルダとしてダウンロードします。</p><h2 id="angle-を-ビルドする" tabindex="-1">ANGLE を ビルドする <a class="header-anchor" href="#angle-を-ビルドする" aria-label="Permalink to &quot;ANGLE を ビルドする&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/Documents</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/Documents</span></span></code></pre></div><h3 id="depot-tools-のビルド" tabindex="-1">depot_tools のビルド <a class="header-anchor" href="#depot-tools-のビルド" aria-label="Permalink to &quot;depot_tools のビルド&quot;">​</a></h3><p><a href="https://github.com/google/angle/blob/main/doc/DevSetup.md" target="_blank" rel="noreferrer">https://github.com/google/angle/blob/main/doc/DevSetup.md</a></p><p>Xcodeを使用する。 Python3を使用する。コマンドラインデベロッパーツールに入っている。</p><p>depot_toolsリポジトリをクローンする</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://chromium.googlesource.com/chromium/tools/depot_tools.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://chromium.googlesource.com/chromium/tools/depot_tools.git</span></span></code></pre></div><p>パスを通す</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> PATH</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">~/Documents/depot_tools:</span><span style="color:#E1E4E8;">$PATH</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> PATH</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">~/Documents/depot_tools:</span><span style="color:#24292E;">$PATH</span></span></code></pre></div><p><a href="https://github.com/google/angle/blob/main/doc/DevSetup.md" target="_blank" rel="noreferrer">https://github.com/google/angle/blob/main/doc/DevSetup.md</a></p><p>depot_toolsを使ってANGLEのソースコードを取得する。完了までしばらく待つ。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">angle</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">angle</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">angle</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">angle</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">angle</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">angle</span></span></code></pre></div><p>ninjaファイルを生成する。必要に応じて<code>out/Debug</code>を生成する。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">gn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">out/Release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">gn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">out/Release</span></span></code></pre></div><p><code>autoninja</code>を使ってコンパイルする。必要に応じて<code>out/Debug</code>をコンパイルする。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">autoninja</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-C</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">out/Release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">autoninja</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-C</span><span style="color:#24292E;"> </span><span style="color:#032F62;">out/Release</span></span></code></pre></div><p>しばらく待つ。</p><h3 id="共有ライブラリとヘッダーファイルのコピー" tabindex="-1">共有ライブラリとヘッダーファイルのコピー <a class="header-anchor" href="#共有ライブラリとヘッダーファイルのコピー" aria-label="Permalink to &quot;共有ライブラリとヘッダーファイルのコピー&quot;">​</a></h3><p><code>~/Documents/angle/out/Release</code> に生成された <code>.dylib</code> 共有ライブラリを<code>raia-engine/sdk/macos/arm64/lib</code> にコピーする。</p><p>実際に使用するのは以下の共有ライブラリ。</p><ul><li><code>libc++_chrome.dylib</code></li><li><code>libcrohe_zlib.dylib</code></li><li><code>libEGL.dylib</code></li><li><code>libGLESv2.dylib</code></li><li><code>libthird_party_abseil-cpp_absl.dylib</code></li></ul><p><code>~/Documents/angle/include</code> 内のすべてのファイルを <code>~/Documents/raia-engine/sdk/macos/arm64/include</code> にコピーする。</p><h2 id="v8-のビルド" tabindex="-1">v8 のビルド <a class="header-anchor" href="#v8-のビルド" aria-label="Permalink to &quot;v8 のビルド&quot;">​</a></h2><p><code>depot_tools</code> を <code>~/Documents/depot_tools</code> にある前提。またexportでパスを通している前提。</p><p>ディレクトリを作成して移動する</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v8</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v8</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v8</span></span></code></pre></div><p>V8をクローンする。depot_toolsの<code>fetch</code>を使用します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v8</span></span></code></pre></div><p>クローンしたディレクトリに移動する。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v8</span></span></code></pre></div><p>しばらく待つ。</p><p>生成</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">python3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tools/dev/v8gen.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arm64.release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tools/dev/v8gen.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arm64.release</span></span></code></pre></div><p>out.gn/args.gn を編集する</p><p>macOSでV8をビルドするときの設定</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">dcheck_always_on = false</span></span>
<span class="line"><span style="color:#e1e4e8;">is_component_build = false</span></span>
<span class="line"><span style="color:#e1e4e8;">is_debug = false</span></span>
<span class="line"><span style="color:#e1e4e8;">target_cpu = &quot;arm64&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_monolithic = true</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_use_external_startup_data = false</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_enable_pointer_compression = false</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_enable_31bit_smis_on_64bit_arch = false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">dcheck_always_on = false</span></span>
<span class="line"><span style="color:#24292e;">is_component_build = false</span></span>
<span class="line"><span style="color:#24292e;">is_debug = false</span></span>
<span class="line"><span style="color:#24292e;">target_cpu = &quot;arm64&quot;</span></span>
<span class="line"><span style="color:#24292e;">v8_monolithic = true</span></span>
<span class="line"><span style="color:#24292e;">v8_use_external_startup_data = false</span></span>
<span class="line"><span style="color:#24292e;">v8_enable_pointer_compression = false</span></span>
<span class="line"><span style="color:#24292e;">v8_enable_31bit_smis_on_64bit_arch = false</span></span></code></pre></div><details class="details custom-block"><summary>WindowsでV8をビルドするときのargs.gnの設定</summary><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">is_debug = false</span></span>
<span class="line"><span style="color:#e1e4e8;">target_cpu = &quot;x64&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">treat_warnings_as_errors = false</span></span>
<span class="line"><span style="color:#e1e4e8;">is_component_build = false</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_enable_i18n_support = false</span></span>
<span class="line"><span style="color:#e1e4e8;">symbol_level = 0</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_use_external_startup_data = false</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_static_library = true</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_enable_i18n_support = false</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_monolithic = true</span></span>
<span class="line"><span style="color:#e1e4e8;">use_custom_libcxx = false #おそらく削除</span></span>
<span class="line"><span style="color:#e1e4e8;">v8_enable_pointer_compression = false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">is_debug = false</span></span>
<span class="line"><span style="color:#24292e;">target_cpu = &quot;x64&quot;</span></span>
<span class="line"><span style="color:#24292e;">treat_warnings_as_errors = false</span></span>
<span class="line"><span style="color:#24292e;">is_component_build = false</span></span>
<span class="line"><span style="color:#24292e;">v8_enable_i18n_support = false</span></span>
<span class="line"><span style="color:#24292e;">symbol_level = 0</span></span>
<span class="line"><span style="color:#24292e;">v8_use_external_startup_data = false</span></span>
<span class="line"><span style="color:#24292e;">v8_static_library = true</span></span>
<span class="line"><span style="color:#24292e;">v8_enable_i18n_support = false</span></span>
<span class="line"><span style="color:#24292e;">v8_monolithic = true</span></span>
<span class="line"><span style="color:#24292e;">use_custom_libcxx = false #おそらく削除</span></span>
<span class="line"><span style="color:#24292e;">v8_enable_pointer_compression = false</span></span></code></pre></div></details><p>ソースコードをコンパイルする</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ninja -C out.gn/arm64.release v8_monolith</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ninja -C out.gn/arm64.release v8_monolith</span></span></code></pre></div><p>しばらく待つ。</p><p><code>~/Documents/v8/v8/out.gn/arm64.release/obj</code>ディレクトリに生成された、</p><ul><li><code>libv8_monolith.a</code> （容量が3GB以上ある）</li><li><code>libv8_libbase.a</code></li><li><code>libv8_libplatform.a</code></li></ul><p>静的ライブラリを <code>~/Documents/raia-engine/sdk/macos/arm64/lib</code> にコピーする</p><hr><hr><h3 id="raiaengineディレクトリに移動する" tabindex="-1">RaiaEngineディレクトリに移動する <a class="header-anchor" href="#raiaengineディレクトリに移動する" aria-label="Permalink to &quot;RaiaEngineディレクトリに移動する&quot;">​</a></h3><p>クローンが成功すると、raia-engine という名前の新しいディレクトリが作成されます。以下のコマンドを使って、そのディレクトリ内に移動して中身を確認できます:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">raia-engine</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">raia-engine</span></span></code></pre></div><p>ls ls コマンドを実行すると、クローンしたリポジトリのファイルやフォルダが表示されます。</p>`,97),p=[o];function t(c,i,r,d,h,u){return a(),e("div",null,p)}const b=s(n,[["render",t]]);export{g as __pageData,b as default};
