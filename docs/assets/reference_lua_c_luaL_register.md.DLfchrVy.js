import{_ as e,c as i,a2 as s,o as l}from"./chunks/framework.DPuwY6B9.js";const k=JSON.parse('{"title":"luaL_register","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/luaL_register.md","filePath":"reference/lua_c/luaL_register.md","lastUpdated":null}'),t={name:"reference/lua_c/luaL_register.md"};function n(h,a,d,r,o,p){return l(),i("div",null,a[0]||(a[0]=[s('<h1 id="lual-register" tabindex="-1">luaL_register <a class="header-anchor" href="#lual-register" aria-label="Permalink to &quot;luaL_register&quot;">​</a></h1><p>新しいライブラリを登録します。</p><p><code>[-(0|1), +1, m]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">libname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> luaL_Reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>ライブラリをオープンします。</p><p><code>libname</code>が<code>NULL</code>に等しい場合、単にリスト<code>l</code>内のすべての関数（<code>luaL_Reg</code>を参照）をスタックのトップにあるテーブルに登録します。</p><p><code>libname</code>が非<code>null</code>で呼び出された場合、<code>luaL_register</code>は新しいテーブル<code>t</code>を作成し、グローバル変数<code>libname</code>の値として設定し、<code>package.loaded[libname]</code>の値として設定し、リスト<code>l</code>のすべての関数をそれに登録します。<code>package.loaded[libname]</code>や変数<code>libname</code>にテーブルがある場合は、新しいテーブルを作成する代わりにこのテーブルを再利用します。</p><p>いずれの場合も、関数はテーブルをスタックのトップに残します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mylib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mylib);</span></span></code></pre></div><p>このコードは、ライブラリ<code>mylib</code>を登録し、関数をLuaに公開します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>luaL_Reg</li><li>luaL_openlibs</li></ul>',16)]))}const u=e(t,[["render",n]]);export{k as __pageData,u as default};
