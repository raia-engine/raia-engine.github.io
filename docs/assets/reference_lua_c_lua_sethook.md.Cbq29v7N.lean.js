import{_ as s,c as i,a2 as e,o as t}from"./chunks/framework.CKGreiRV.js";const r=JSON.parse('{"title":"lua_sethook","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_sethook.md","filePath":"reference/lua_c/lua_sethook.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/lua_sethook.md"};function h(o,a,n,k,d,p){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="lua-sethook" tabindex="-1">lua_sethook <a class="header-anchor" href="#lua-sethook" aria-label="Permalink to &quot;lua_sethook&quot;">​</a></h1><p>デバッグフック関数を設定します。</p><p><code>[-0, +0, -]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_sethook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Hook </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>デバッグフック関数を設定します。</p><p>引数<code>f</code>はフック関数です。<code>mask</code>はフックが呼び出されるイベントを指定し、<code>LUA_MASKCALL</code>, <code>LUA_MASKRET</code>, <code>LUA_MASKLINE</code>, <code>LUA_MASKCOUNT</code>の定数のビット単位のORによって形成されます。<code>count</code>引数は、<code>mask</code>が<code>LUA_MASKCOUNT</code>を含む場合にのみ意味があります。各イベントについて、フックは以下に説明されるように呼び出されます：</p><ul><li>コールフック：インタプリタが関数を呼び出すときに呼び出されます。フックはLuaが新しい関数に入った直後、関数がその引数を得る前に呼び出されます。</li><li>戻りフック：インタプリタが関数から戻るときに呼び出されます。フックはLuaが関数を離れる直前に呼び出されます。関数によって返される値にアクセスすることはできません。</li><li>ラインフック：インタプリタが新しいコード行の実行を開始しようとするとき、またはコード内で後戻りするとき（同じ行に戻る場合でも）に呼び出されます。（このイベントはLuaがLua関数を実行している間のみ発生します。）</li><li>カウントフック：インタプリタがカウント命令ごとに実行するときに呼び出されます。（このイベントはLuaがLua関数を実行している間のみ発生します。）</li></ul><p>フックは<code>mask</code>をゼロに設定することで無効になります。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_sethook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, my_hook, LUA_MASKCALL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LUA_MASKRET, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>このコードは、関数呼び出しと関数からの戻り時にフック関数<code>my_hook</code>を呼び出すように設定します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_gethook</li><li>lua_Hook</li></ul>',16)]))}const u=s(l,[["render",h]]);export{r as __pageData,u as default};
