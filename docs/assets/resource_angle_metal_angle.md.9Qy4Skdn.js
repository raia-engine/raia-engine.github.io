import{_ as t,c as a,a2 as l,o as r}from"./chunks/framework.DzmM640o.js";const h=JSON.parse('{"title":"MetalANGLE - OpenGL ESからApple Metal APIへの変換レイヤー","description":"","frontmatter":{},"headers":[],"relativePath":"resource/angle/metal_angle.md","filePath":"resource/angle/metal_angle.md","lastUpdated":1732720247000}'),o={name:"resource/angle/metal_angle.md"};function i(n,e,s,p,g,c){return r(),a("div",null,e[0]||(e[0]=[l('<h1 id="metalangle-opengl-esからapple-metal-apiへの変換レイヤー" tabindex="-1">MetalANGLE - OpenGL ESからApple Metal APIへの変換レイヤー <a class="header-anchor" href="#metalangle-opengl-esからapple-metal-apiへの変換レイヤー" aria-label="Permalink to &quot;MetalANGLE - OpenGL ESからApple Metal APIへの変換レイヤー&quot;">​</a></h1><p><a href="https://github.com/kakashidinho/metalangle/blob/master/README.md" target="_blank" rel="noreferrer">原文</a></p><p>Googleの<a href="https://chromium.googlesource.com/angle/angle" target="_blank" rel="noreferrer">ANGLEプロジェクト</a>をフォークしたものです。Metal APIのバックエンドサポートを追加しています。Appleは2018年にOpenGL(ES)の非推奨を発表しました。そこで、MetalANGLEの目的は、OpenGL ESの描画コールをMetalの描画コールにフード内で変換することにより、OpenGL ESアプリケーションがAppleプラットフォーム上で引き続き動作するようにすることです。また、OpenGL ES &amp; Metalの相互運用もサポートします。</p><p><strong>2021年6月30日更新:</strong> このレポのOpenGL ES 3.0をMetalで実装するコードのほとんどは、公式の <code>ANGLE</code> レポにマージされています。当初、Metalのバックエンドの開発はここだけで行われていました。アップル社も修正を行っており、その変更を公式の <code>ANGLE</code> にマージしている最中なので、現在はそうではありません。現在の [MetalANGLEと公式ANGLEの違い] (#differences-between-metalangle-and-googles-angle) を参照してください。</p><p>MetalベースのWebGLベンチマーク（<a href="https://github.com/kakashidinho/metalangle/tree/gles3-dev" target="_blank" rel="noreferrer">gles3-dev branch</a>のコードをベースにした予備的なものです。）</p><ul><li>Metal（54fps）対ネイティブOpenGL（46fps）で20k匹の魚を描画。:</li><li>このベンチマークは、AMD Radeon Pro 560 GPUを使用したChromiumブラウザ上で<a href="https://webglsamples.org/aquarium/aquarium.html" target="_blank" rel="noreferrer">https://webglsamples.org/aquarium/aquarium.html</a>を実行します。.</li></ul><h3 id="現在のmetalバックエンドの実装状況" tabindex="-1">現在のMetalバックエンドの実装状況 <a class="header-anchor" href="#現在のmetalバックエンドの実装状況" aria-label="Permalink to &quot;現在のMetalバックエンドの実装状況&quot;">​</a></h3><ul><li>MetalANGLEはANGLEの公式レポに移行されました。現在の<a href="#differences-between-metalangle-and-googles-angle">MetalANGLEと公式ANGLEの違い</a>をご覧ください。</li><li><strong>OpenGL ES 2.0</strong> の機能は100％完成しています。</li><li><strong>OpenGL ES 3.0</strong> の状態になります。 <ul><li>[x] オクルージョンのクエリ。</li><li>[x] MSAA.</li><li>[x] 複数のレンダーターゲット (<strong>古い iOS GPU では、<a href="https://developer.apple.com/documentation/metal/texturesunderstanding_color-renderable_pixel_format_sizes?language=objc" target="_blank" rel="noreferrer">ピクセルストレージの制限</a> のため、すべての GL フォーマットがサポートされているわけではありません</strong>。問題64](<a href="https://github.com/kakashidinho/metalangle/issues/64" target="_blank" rel="noreferrer">https://github.com/kakashidinho/metalangle/issues/64</a>)を参照してください)。</li><li>[x] 3D、アレイ、シャドウテクスチャ。</li><li>[x] テクスチャースウィズル (<strong>supported on iOS 13.0+, macOS 10.15+ only</strong>).</li><li>[x] ユニフォームバッファー。</li><li>[x] フェンスシンク (<strong>supported on iOS 12.0+, macOS 10.14+ only</strong>).</li><li>[x] ピクセルバッファオブジェクト。</li><li>[ ] プリミティブなリスタートMetalのプリミティブリスタートは確実に動作しません。</li><li>[ ] 最後に生成された頂点でフラットシェーディングを行う。Metalのデフォルトは最初の頂点です。</li><li>[x] フィードバックを変換する。</li></ul></li><li><strong>OpenGL ES 1.0</strong> は使用することをお勧めしません。この実装はオリジナルの <code>ANGLE</code> プロジェクトによって積極的にメンテナンスされておらず、現在バグだらけで完全には準拠していない。</li><li>基本的なサンプルはすべて動作しています。</li><li><strong>ANGLEのエンドツーエンドテストは、ほぼ全て合格しています</strong>. 失敗したテストの一覧を参照してください。</li><li><strong>OpenGL ES 2.0コンフォーマンステストの98%に合格</strong>. <strong>90%以上のOpenGL ES 3.0コンフォーマンステストに合格</strong>. <a href="https://github.com/KhronosGroup/VK-GL-CTS" target="_blank" rel="noreferrer">Khronos VK-GL-CTS</a>をご参照ください。</li><li>これらの拡張機能は実装されています。 <ul><li>[x] <a href="https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_instanced_arrays.txt" target="_blank" rel="noreferrer">EXT_instanced_arrays</a>/<a href="https://www.khronos.org/registry/OpenGL/extensions/ANGLE/ANGLE_instanced_arrays.txt" target="_blank" rel="noreferrer">ANGLE_instanced_arrays</a>: GLES 2.0用のインスタンスドローコール。</li><li>[x] <a href="https://www.khronos.org/registry/OpenGL/extensions/OES/OES_depth_texture.txt" target="_blank" rel="noreferrer">OES_depth_texture</a>.</li><li>[x] <a href="https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_draw_buffers.txt" target="_blank" rel="noreferrer">EXT_draw_buffers</a>: GLES 2.0に対応した複数のレンダーターゲット。</li><li>[x] <a href="https://www.khronos.org/registry/OpenGL/extensions/ANGLE/ANGLE_framebuffer_blit.txt" target="_blank" rel="noreferrer">ANGLE_framebuffer_blit</a>.</li><li>[x] <a href="https://www.khronos.org/registry/OpenGL/extensions/APPLE/APPLE_clip_distance.txt" target="_blank" rel="noreferrer">APPLE_clip_distance</a>: カスタムクリッププレーン</li></ul></li><li>MGLKitユーティリティクラスが追加されました。AppleのGLKitと似たような機能を提供します。</li><li>Urho3Dエンジンのデモは、MetalANGLEを使用して問題なくテストされています。<a href="https://github.com/kakashidinho/Urho3D/tree/angle-metal-backend" target="_blank" rel="noreferrer">Urho3D&#39;s MetalANGLE integration testing branch</a>を参照してください。</li><li>Irrlicht EngineのMetalANGLEサンプルとの連携。 <a href="https://github.com/kakashidinho/irrlicht" target="_blank" rel="noreferrer">https://github.com/kakashidinho/irrlicht</a>.</li><li>Metalとの相互運用がサポートされています。Qtの例: <a href="https://github.com/kakashidinho/qml-metalangle" target="_blank" rel="noreferrer">https://github.com/kakashidinho/qml-metalangle</a> を参照してください。</li><li><s>No <code>GL_TRIANGLE_FAN</code> &amp; <code>GL_LINE_LOOP</code> support in draw calls yet.</s></li><li>Metalはバッファオフセットが4バイトの倍数でないことや、アトリビュートサイズの倍数でないことを許しません。したがって、サポートされていないオフセット、ストライド、および頂点フォーマットを使用する描画コールは、MetalANGLEがオンザフライで変換を行うことを余儀なくされます。</li><li><s>MSAA is not supported yet.</s></li><li>古いOpenGL ES 2.0のみの実装は、<a href="https://github.com/kakashidinho/metalangle/tree/gles2" target="_blank" rel="noreferrer">gles2 branch</a>で見ることができます。</li><li><strong>対応プラットフォーム</strong>: <ul><li>MetalANGLEは、Macの <strong>MacOS 10.13+</strong> のみ対応しています。.</li><li>iOSの場合、最小サポートバージョンは <strong>iOS 9.0</strong> です。それ以前のバージョンでは、Metalの代わりにApple OpenGL ESのネイティブ実装を使用するようになります。さらに、ほとんどのサンプルアプリは <strong>iOS11.0+</strong> 用にコンパイルされています。そのため、10.0以下のデバイスでサンプルアプリをテストしたい場合、一部のもの（例：MGLKitSampleApp_ios9.0）を除き、実行することはできません。</li><li>iPhone 5以下はサポート対象外です。</li><li><strong>MacCatalyst 13.0+</strong> に対応しています。</li></ul></li></ul><h4 id="todo-lists" tabindex="-1">TODO lists <a class="header-anchor" href="#todo-lists" aria-label="Permalink to &quot;TODO lists&quot;">​</a></h4><ul><li>[ ] ANGLEのすべてのテストに合格していることを確認。</li><li>[x] <s>Support <code>GL_TRIANGLE_FAN</code> &amp; <code>GL_LINE_LOOP</code> by generating index buffer on the fly using Metal compute shader.</s></li><li>[x] <s>Use compute shader to convert unsupported offsets, strides &amp; vertex formats.</s></li><li>[x] <s>Support MSAA.</s></li><li>[ ] OpenGL ES 3.0に完全対応。</li></ul><h2 id="macos-ios用metal-angleのビルド方法" tabindex="-1">MacOS &amp; iOS用Metal ANGLEのビルド方法 <a class="header-anchor" href="#macos-ios用metal-angleのビルド方法" aria-label="Permalink to &quot;MacOS &amp; iOS用Metal ANGLEのビルド方法&quot;">​</a></h2><p>MetalバックエンドのDevセットアップ手順をご覧ください。</p><p>現在、便宜上、MetalANGLEは <code>ios/xcode</code> と <code>mac/xcode</code> フォルダにあるXcodeプロジェクトを使ってビルドすることもできます。このXcodeプロジェクトでは、アップルが提供するGLKitのクラスである <code>CAEAGLContext</code>, <code>MGLLayer</code>, <code>MGLKView</code>, <code>GLKViewController</code> と同様のユーティリティラッパーである MGLKit も構築されています。このライブラリを使ったiOSアプリのサンプルは <code>MGLKitSamples.xcodeproj</code> を開いてください。この documents には <code>GLKit</code> アプリを <code>MGLKit</code> に移植するためのいくつかのガイドが含まれています。</p><p>それでも、MetalバックエンドのDevセットアップ手順 にあるように、必要な環境と依存関係を適切に設定することが先決です。</p><h2 id="metalangleとgoogleのangleの相違点" tabindex="-1">MetalANGLEとGoogleのANGLEの相違点 <a class="header-anchor" href="#metalangleとgoogleのangleの相違点" aria-label="Permalink to &quot;MetalANGLEとGoogleのANGLEの相違点&quot;">​</a></h2><ul><li>2021年6月以前は、Metalのバックエンドのコードの大半は <code>MetalANGLE</code> と <code>ANGLE</code> で共有されています。</li><li>2021年8月～9月以降、アップルから直接 <code>ANGLE</code> リポジトリにいくつかの変更が加えられる予定です。これらの変更は、開発上のコンフリクトのため <code>MetalANGLE</code> に含まれないかもしれません。Appleの変更のほとんどは、WebkitのWebGLの標準に役立つもので、通常の使用では最適なパフォーマンスが得られないかもしれません。Apple からの変更点は以下の通りです。 <ul><li>フラットシェーディングの最後の挑発頂点をサポートするために、 インデックスバッファをオンザフライで書き直しました。これは、OpenGL ES のフラットシェーディングの仕様に準拠 するのに役立ちますが、フラットシェーディングを使用する描画コールが 遅くなります。多くの使用例では、フラットシェーディングが最後の頂点と最初の頂点 のどちらを使用するかは、ユーザは気にしないでしょう。</li></ul></li><li><code>MetalANGLE</code> は iOS をサポートし、Apple の非推奨 API である <code>EAGL</code> &amp; <code>GLKit</code> を模倣した MGLKit などの高レベル API を含んでいます。これらの機能は <code>ANGLE</code> にマージされることはないでしょう。なぜなら <code>ANGLE</code> プロジェクトは近い将来 iOS をサポートする予定がないからです。</li></ul>',16)]))}const L=t(o,[["render",i]]);export{h as __pageData,L as default};
