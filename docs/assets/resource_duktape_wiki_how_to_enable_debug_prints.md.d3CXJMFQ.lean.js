import{_ as s,c as a,a2 as l,o as e}from"./chunks/framework.CKGreiRV.js";const o=JSON.parse('{"title":"デバッグプリントを有効にする方法","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/wiki/how_to_enable_debug_prints.md","filePath":"resource/duktape/wiki/how_to_enable_debug_prints.md","lastUpdated":1732350347000}'),t={name:"resource/duktape/wiki/how_to_enable_debug_prints.md"};function n(h,i,k,p,d,r){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="デバッグプリントを有効にする方法" tabindex="-1">デバッグプリントを有効にする方法 <a class="header-anchor" href="#デバッグプリントを有効にする方法" aria-label="Permalink to &quot;デバッグプリントを有効にする方法&quot;">​</a></h1><h2 id="duktape-1-x" tabindex="-1">Duktape 1.x <a class="header-anchor" href="#duktape-1-x" aria-label="Permalink to &quot;Duktape 1.x&quot;">​</a></h2><ul><li>DUK_OPT_DEBUGを有効にする / DUK_USE_DEBUG</li><li>DUK_OPT_DPRINTを有効にする / DUK_USE_DPRINT 最小限のログを取得する。</li><li>DUK_OPT_DDPRINTも有効にする / DUK_USE_DDPRINT 詳細なログを出力する場合</li><li>DUK_OPT_DDDPRINTも有効にする / DUK_USE_DDDPRINT 非常に冗長なログを出力します。</li></ul><p>ログは標準エラー出力に書き込まれます。</p><h2 id="duktape-2-x" tabindex="-1">Duktape 2.x <a class="header-anchor" href="#duktape-2-x" aria-label="Permalink to &quot;Duktape 2.x&quot;">​</a></h2><ul><li>Enable DUK_USE_DEBUG</li><li>DUK_USE_DEBUG_LEVEL=<code>&lt;n&gt;</code>を定義する。nは最小ログを0、冗長ログを1、超冗長ログを2にする。</li><li>DUK_USE_DEBUG_WRITE(level,file,line,func,msg) を定義して、ログエントリを書き出す; これにより、デバッグログがどこに行くかを完全に制御できる</li></ul><p>手動で編集した duk_config.h の DUK_USE_DEBUG_WRITE の例です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DUK_USE_DEBUG_WRITE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stderr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%ld</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">): </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (level), (file), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (line), (func), (msg));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>tools/configure.py の引数と同じ関数です。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&#39;-DDUK_USE_DEBUG_WRITE(level,file,line,func,msg)=do {fprintf(stderr, &quot;D%ld %s:%ld (%s): %s\\n&quot;, (long) (level), (file), (long) (line), (func), (msg));} while(0)&#39;</span></span></code></pre></div>`,10)]))}const g=s(t,[["render",n]]);export{o as __pageData,g as default};
