import{_ as i,c as a,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"Terra API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"resource/terra/api.md","filePath":"resource/terra/api.md","lastUpdated":null}'),n={name:"resource/terra/api.md"};function l(h,s,p,r,o,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="terra-api-reference" tabindex="-1">Terra API Reference <a class="header-anchor" href="#terra-api-reference" aria-label="Permalink to &quot;Terra API Reference&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#list">List</a></li><li><a href="#terra-reflection-api">Terra Reflection API</a><ul><li><a href="#generic">Generic</a></li><li><a href="#function">Function</a></li><li><a href="#types">Types</a></li><li><a href="#quotes">Quotes</a></li><li><a href="#symbol">Symbol</a></li><li><a href="#values">Values</a></li><li><a href="#global-variables">Global Variables</a></li><li><a href="#constant">Constant</a></li><li><a href="#label">Label</a></li><li><a href="#macro">Macro</a></li><li><a href="#built-in-macros">Built-in Macros</a></li><li><a href="#exotypes-structs">Exotypes (Structs)</a></li><li><a href="#lua-api">Lua API</a></li><li><a href="#overloaded-functions">Overloaded Functions</a></li><li><a href="#escapes">Escapes</a></li></ul></li><li><a href="#using-c-inside-terra">Using C Inside Terra</a></li><li><a href="#converting-between-lua-values-and-terra-values">Converting between Lua values and Terra values</a></li><li><a href="#loading-terra-code">Loading Terra Code</a></li><li><a href="#compilation-api">Compilation API</a><ul><li><a href="#saving-terra-code">Saving Terra Code</a></li><li><a href="#targets">Targets</a></li></ul></li><li><a href="#debugging">Debugging</a></li><li><a href="#embedding-terra-inside-c-code">Embedding Terra inside C code</a></li><li><a href="#embedding-new-languages-inside-lua">Embedding New Languages Inside Lua</a><ul><li><a href="#a-simple-example">A Simple Example</a></li><li><a href="#loading-and-running-the-language">Loading and Running the Language</a></li><li><a href="#interacting-with-lua-symbols">Interacting with Lua symbols</a></li><li><a href="#recursively-parsing-lua">Recursively Parsing Lua</a></li><li><a href="#extending-statements">Extending Statements</a></li><li><a href="#higher-level-parsing-via-pratt-parsers">Higher-Level Parsing via Pratt Parsers</a></li><li><a href="#the-language-and-lexer-api">The Language and Lexer API</a></li></ul></li><li><a href="#intermediate-representations-with-abstract-syntax-description-language">Intermediate Representations with Abstract Syntax Description Language</a><ul><li><a href="#creating-asdl-classes">Creating ASDL Classes</a></li><li><a href="#using-asdl-classes">Using ASDL Classes</a></li><li><a href="#adding-methods-to-asdl-classes">Adding Methods To ASDL Classes</a></li><li><a href="#namespaces">Namespaces</a></li><li><a href="#unique">Unique</a></li></ul></li></ul></nav><h2 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h2><p>API calls in <code>terralib</code> that return arrays will always return a List object, which is a more complete List data type for use inside Lua code.</p><p>The List type is a plain Lua table with additional methods that come from:</p><ol><li>all the methods in Lua&#39;s &#39;table&#39; global</li><li>a list of higher-order functions based on <a href="http://sml-family.org/Basis/list.html" target="_blank" rel="noreferrer">SML&#39;s (fairly minimal) list type</a>.</li></ol><p>These make it easier to meta-program Terra objects.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terralist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- empty list</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 3 element list</span></span></code></pre></div><p>Creates a new list, possibly initialized by a table.</p><p>List also has the following functions:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Lua&#39;s string.sub, but for lists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i,j)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- reverse list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() : List[A]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- app fn to every element</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B) : {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- apply map to every element resulting in new list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B) : List[B]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- new list with elements where fn(e) is true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean) : List[A]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- apply map to every element, resulting in lists which are all concatenated together</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List[B]) : List[B]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- find the first element in list satisfying condition</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean) : A?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- apply k,v = fn(e) to each element and group the values &#39;v&#39; into bin of the same &#39;k&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {K,V}) : Map[ K,List[V] ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- recurrence fn(a[2],fn(a[1],init)) ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : B,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {B,A} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- recurrence fn(a[3],fn(a[2],a[1]))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {B,A} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- is any fn(e) true in list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean) : boolean</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- are all fn(e) true in list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean) : boolean</span></span></code></pre></div><p>Every function that takes a higher-order function also has an <code>i</code> variant that also provides the list index to the function:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mapi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {int,A} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List[B]</span></span></code></pre></div><p>List functions like <code>map</code> are higher-order functions that take a function as an argument. For each function that is an argument of a high-order List function can be either:</p><ol><li>a real Lua function</li><li>a string of an operator &quot;+&quot; (see op table in <code>src/terralist.lua</code>)</li><li>a string that specifies a field or method to call on the object</li></ol><p>Example:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mylist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a,b,c }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mylist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- selects the fields:  a.foo, b.foo, c.foo, etc.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  -- if a.foo is a function it will be treated as a method a:foo()</span></span></code></pre></div><p>Extra arguments to the higher-order function are passed through to these function. Rationale: Lua inline function syntax is verbose, this functionality avoids inline functions in many cases.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terralist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isclassof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exp)</span></span></code></pre></div><p>True if <code>exp</code> is a list.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">israwlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l)</span></span></code></pre></div><p>Returns true if <code>l</code> is a table that has no keys or has a contiguous range of integer keys from <code>1</code> to <code>N</code> for some <code>N</code>, and contains no other keys.</p><h2 id="terra-reflection-api" tabindex="-1">Terra Reflection API <a class="header-anchor" href="#terra-reflection-api" aria-label="Permalink to &quot;Terra Reflection API&quot;">​</a></h2><p>Every Terra entity is also a first-class Lua object. These include Terra <a href="#Functions">Functions</a>, Terra <a href="#Types">Types</a>, and Terra <a href="#global_variables">Global Variables</a>. <a href="#quotes">Quotes</a> are the objects returned by Terra&#39;s quotation syntax (backtick and <code>quote</code>), representing a fragment of Terra code not yet inside a Terra function. <a href="#symbols">Symbols</a> represent a unique name for a variables and are used to define new parameters and locals.</p><p>When a Terra function returns a value that cannot be converted into an equivalent Lua object, it turns into a Terra <a href="#values">Value</a>, which is a wrapper that can be accessed from Lua (Internally this is a LuaJIT <code>&quot;cdata&quot;</code> object).</p><p>Each object provides a Lua API to manipulate it. For instance, you can disassemble a function (<code>terrafn:disas()</code>), or query properties of a type (<code>typ:isarithmetic()</code>).</p><h3 id="generic" tabindex="-1">Generic <a class="header-anchor" href="#generic" aria-label="Permalink to &quot;Generic&quot;">​</a></h3><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terraobj)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terraobj)</span></span></code></pre></div><p>All Terra objects have a string representation that you can use for debugging.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">islist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isquote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ismacro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isglobalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">islabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isoverloadedfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span></code></pre></div><p>Checks that a particular object is a type of Terra class.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o)</span></span></code></pre></div><p>Extended version of <code>type(o)</code> with the following definition:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> terralib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terrafunction&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terratype&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ismacro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terramacro&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isglobalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terraglobalvariable&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isquote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terraquote&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terratree&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">islist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;list&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terrasymbol&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terrafunction&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">islabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terralabel&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isoverloadedfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;overloadedterrafunction&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">memoized_fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">memoize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a,b,c,...) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Memoize the result of a function. The first time a function is call with a particular set of arguments, it calls the function to calculate the return value and caches it. Subsequent calls with the same arguments (using Lua equality) will return that value. Useful for generating templated values, such as <code>Vector(T)</code> where the same vector type should be returned everytime for the same <code>T</code>.</p><h3 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h3><p>Terra functions are entry-points into Terra code. Functions can be either defined or undefined (<code>myfunction:isdefined()</code>). An undefined function has a known type but its implementation has not yet been provided. The definition of a function can be changed via <code>myfunction:resetdefinition(another_function)</code> until it is first run.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[local] terra myfunctionname :: type_expresion</span></span>
<span class="line"><span>[local] terra myfunctionname :: {int,bool} -&gt; {int}</span></span></code></pre></div><p><em>Terra function declaration</em>. It creates a new undefined function and stores it in the Lua variable <code>myfunctionname</code>. If the optional <code>local</code> keyword is used, then <code>myfunctionname</code> is first defined as a new local Lua variable. When used without the <code>local</code> keyword, <code>myfunctionname</code> can be a table specifier (e.g. <code>a.b.c</code>).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">myfunctionname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arg0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : type0,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                             ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                             argN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : typeN)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><em>Terra function definition</em>. Defines <code>myfunctioname</code> using the body of code specified. If <code>myfunctioname</code> already exists and is undefined, then it adds the definition to the existing function declaration. Otherwise it first creates a new function declaration and then adds the definition.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">externfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function_name,function_type)</span></span></code></pre></div><p>Create a Terra function bound to an externally defined function. Example:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atoi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">externfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;atoi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{rawstring} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {int})</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">myfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,argN)</span></span></code></pre></div><p><code>myfunction</code> is a Terra function. Invokes <code>myfunction</code> from Lua. It is an error to call this on undefined functions. Arguments are translated to Terra using the <a href="#converting-lua-values-to-terra-values-of-known-type">rules for translating Lua values to Terra</a> and return values are translated by using the <a href="#converting-terra-values-to-lua-values">rules for translating Terra values to Lua</a>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isdefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><code>true</code> if function has a filled in definition. To define a function use <code>func:adddefinition</code>, <code>func:resetdefinition</code> or using function definition syntax <code>terra func(...) ... end</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isextern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><code>true</code> if this function is bound to an external symbol like libc&#39;s <code>printf</code>. External functions are created either through importing C functions via <code>terralib.includec</code>, or by calling <code>terralib.externfunction</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">adddefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(another_function)</span></span></code></pre></div><p>Sets the definition of <code>func</code> to the current definition of <code>another_function</code>. <code>another_function</code> must be defined and <code>func</code> must be undefined. The types of <code>func</code> and <code>another_function</code> must match.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resetdefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(another_function)</span></span></code></pre></div><p>Sets (or resets) the definition of <code>func</code> to the current definition of <code>another_function</code>. <code>another_function</code> must be defined. <code>func</code> may or may not be defined. It is an error to call this on a function that has already been compiled.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printstats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Prints statistics about how long this function took to compile and JIT. Will cause the function to compile.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Disassembles all of the function definitions into x86 assembly and optimized LLVM, and prints them out. Useful for debugging performance. Will cause the function definition to compile.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printpretty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([quote_per_line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Print out a visual representation of the code in this function. By default, this prints each part of the code that was originally specified on a separate line as a individual lines. If <code>quote_per_line</code> is <code>false</code>, it will print a more collapsed representation that may be easier to read.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argN)</span></span></code></pre></div><p>Invokes <code>myfunction</code> from Lua. Arguments are converted into the expected Terra types using the <a href="#converting-between-lua-values-and-terra-values">rules</a> for converting between Terra values and Lua values. Return values are converted back into Lua values using the same rules. Causes the function to be compiled to machine code.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Compile the function into machine code. Ensures that every function and global variable needed by the function is also defined.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">function_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gettype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Return the <a href="#types">type</a> of the function. <code>function_type.parameters</code> is a list of the parameters types. <code>function_type.returntype</code> is the return type. If the function returns multiple values, this return type will be a tuple.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getpointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Return the LuaJIT <code>ctype</code> object that points to the machine code for this function. Will cause the function to be compiled.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str)</span></span></code></pre></div><p>Get or set the pretty name for the function. This is useful when viewing generated code but does not otherwise change the behavior of the function.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setinlined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bool)</span></span></code></pre></div><p>When <code>true</code> function when be always inlined. When <code>false</code> the function will never be inlined. By default, functions will be inlined at the discretion of LLVM&#39;s function inliner.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setoptimized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bool)</span></span></code></pre></div><p>All Terra functions are optimized by default (equivalent of Clang <code>-O3</code>). Pass <code>false</code> to this method to disable optimization (equivalent of Clang <code>-O0</code>).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setcallingconv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string)</span></span></code></pre></div><p>Set the calling convention of the function. LLVM&#39;s default calling convention is used by default. Valid values are the same as can be specified in <a href="https://llvm.org/docs/LangRef.html#calling-conventions" target="_blank" rel="noreferrer">LLVM&#39;s text-based assembly language</a>. (Note that, as of the time of writing, the official LLVM documentation is incomplete, particularly for target-specific calling conventions. For additional calling conventions, it may be necessary to consult the <a href="https://github.com/llvm/llvm-project/blob/llvmorg-13.0.0/llvm/lib/IR/AsmWriter.cpp#L289-L339" target="_blank" rel="noreferrer">source code directly</a>.)</p><h3 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h3><p>Type objects are first-class Lua values that represent the types of Terra objects. Terra&#39;s built-in type system closely resembles that of low-level languages like C. Type constructors (like <code>&amp;int</code>) are valid Lua expressions that return Terra type objects. To support recursive types like linked lists, <a href="#exotypes-structs">structs</a> can be declared before their members and methods are fully specified. When a struct is declared but not defined, it is <em>incomplete</em> and cannot be used as value. However, pointers to incomplete types can be used as long as no pointer arithmetic is required. A type will become <em>complete</em> when it needs to be fully specified (e.g. we are using it in a compiled function, or we want to allocate a global variable with the type). At this point a full definition for the type must be available.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int int8 int16 int32 int64</span></span>
<span class="line"><span>uint  uint8 uint16 uint32 uint64</span></span>
<span class="line"><span>bool</span></span>
<span class="line"><span>float double</span></span></code></pre></div><p>Primitive types.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&amp;typ</span></span></code></pre></div><p>Constructs a pointer to <code>typ</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>typ[N]</span></span></code></pre></div><p>Constructs an array of <code>N</code> instances of type <code>typ</code>. <code>N</code> must be a positive integer.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typ,N)</span></span></code></pre></div><p>Constructs a vector of <code>N</code> instances of type <code>typ</code>. <code>N</code> must be an integer and <code>typ</code> must be a primitive type. These types are abstractions vector instruction sets like <a href="http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions" target="_blank" rel="noreferrer">SSE</a>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> returntype</span></span></code></pre></div><p>Constructs a function pointer. Both <code>parameters</code> and <code>returns</code> can be lists of types (e.g. <code>{int,int}</code>) or a single type like <code>int</code>. If <code>returntype</code> is a list, a <code>tuple</code> of the values in the list is the type returned from the function.</p><p>To specify a void return type, use the empty tuple <code>{}</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">field0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : type0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fieldN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : typeN }</span></span></code></pre></div><p>Constructs a user-defined type, or exotype. Each call to <code>struct</code> creates a unique type since we use a <a href="http://en.wikipedia.org/wiki/Nominative_type_system" target="_blank" rel="noreferrer">nominative</a> type systems. See <a href="#exotypes-structs">Exotypes</a> for more information.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type0,type1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,typeN)</span></span></code></pre></div><p>Constructs a tuple, which is a special kind of <code>struct</code> that contains the values <code>type0</code>... <code>typeN</code> as fields <code>obj._0</code> .... <code>obj._N</code>. Unlike normal structs, each call to <code>tuple</code> with the same arguments will return the same type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span></code></pre></div><p>True if <code>t</code> is a type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isprimitive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is a primitive type (see above).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isintegral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is any integer type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is <code>float</code> or <code>double</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isarithmetic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is integral or float.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">islogical</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is <code>bool</code> (we might eventually supported sized boolean types that are closer to the machine representation of flags in vector instructions).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">canbeord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if the <code>type</code> can be used in expressions <code>or</code> and <code>and</code> (i.e. integral and logical but not float).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ispointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is a pointer. <code>type.type</code> is the type pointed to.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isarray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is an array. <code>type.N</code> is the length. <code>type.type</code> is the element type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is a function (not a function pointer). <code>type.parameters</code> is a list of parameter types. <code>type.returntype</code> is return type. If a function returns multiple values this type will be a <code>tuple</code> of the values.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isstruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is a <a href="#exotypes-structs">struct</a>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ispointertostruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is a pointer to a struct.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ispointertofunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is a pointer to a function.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isaggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if <code>type</code> is an array or a struct (any type that can hold arbitrary types).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iscomplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if the <code>type</code> is fully defined and ready to use in code. This is always true for non-aggregate types. For aggregate types, this is true if all types that they contain have been defined. Call type:complete() to force a type to become complete.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isvector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if the <code>type</code> is a vector. <code>type.N</code> is the length. <code>type.type</code> is the element type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isunit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if the <code>type</code> is the empty tuple. The empty tuple is also the return type of functions that return no values.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(isprimitive|isintegral|isarithmetic|islogical|canbeord)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">orvector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>True if the <code>type</code> is a primitive type with the requested property, or if it is a vector of a primitive type with the requested property.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Forces the type to be complete. For structs, this will calculate the layout of the struct (possibly calling <code>__getentries</code> and <code>__staticinitialize</code> if defined), and recursively complete any types that this type references.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printpretty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Print the type, including its members if it is a struct.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terratype)</span></span></code></pre></div><p>Wrapper around <code>ffi.sizeof</code>. Completes the <code>terratype</code> and returns its size in bytes.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offsetof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terratype,field)</span></span></code></pre></div><p>Wrapper around <code>ffi.offsetof</code>. Completes the <code>terratype</code> and returns the offset in bytes of <code>field</code> inside <code>terratype</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typ, [addrspace])</span></span></code></pre></div><p><strong>Experimental.</strong> Alternative spelling for <code>&amp;typ</code> that allows an <a href="https://llvm.org/docs/LangRef.html#pointer-type" target="_blank" rel="noreferrer">LLVM address space</a> to be specified. Note that the semantics of non-zero address spaces are target-specific.</p><h3 id="quotes" tabindex="-1">Quotes <a class="header-anchor" href="#quotes" aria-label="Permalink to &quot;Quotes&quot;">​</a></h3><p>Quotes are the Lua objects that get returned by terra quotation operators (backtick and <code>quote ... in ... end</code>). They represent a fragment of Terra code (a statement or expression) that has not been placed into a function yet. The escape operators (<code>[...]</code> and <code>escape ... emit ... end</code>) splice quotes into the surround Terra code. Quotes have a short form for generating just one <em>expression</em> and long form for generating <em>statements and expressions</em>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`terraexpr</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- \`create a quotation</span></span></code></pre></div><p>The short form of a quotation. The backtick operator creates a quotation that contains a single terra <em>expression</em>. <code>terraexpr</code> can be any Terra expression. Any escapes that <code>terraexpr</code> contains will be evaluated when the expression is constructed.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    terrastmts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>The long form of a quotation. The <code>quote</code> operator creates a quotation that contains a list of terra <em>statements</em>. This quote can appear where an expression or a statement would be legal in Terra code. If it appears in an expression context, its type is the empty tuple.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    terrastmts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    terraexp1,terraexp2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,terraexpN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>The long <code>quote</code> operation can also include an optional <code>in</code> statement that creates several expressions. When this <code>quote</code> is spliced into Terra code where an expression would normally appear, its value is the tuple constructed by those expressions.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [a] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &#39;a&#39; has type int.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isquote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span></code></pre></div><p>Returns true if <code>t</code> is a quote.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quoteobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gettype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Return the Terra type of this quotation.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quoteobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">astype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Try to interpret this quote as if it were a Terra type object. This is normally used in <a href="#macros">macros</a> that expect a type as an argument (e.g. <code>sizeof([&amp;int])</code>). This function converts the <code>quote</code> object to the type (e.g. <code>&amp;int</code>).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quoteobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">islvalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><code>true</code> if the quote can be used on the left hand size of an assignment (i.e. it is an l-value).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">luaval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quoteobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asvalue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Try to interpret this quote as if it were a simple Lua value. This is normally used in <a href="#macros">macros</a> that expect constants as an argument. Only works for a subset of values (anything that can be a Constant expression). Consider using an escape rather than a macro when you want to pass more complicated data structures to generative code.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quoteobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printpretty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Print out a visual representation of the code in this quote. Because quotes are not type-checked until they are placed into a function, this will print an untyped representation of the function.</p><h3 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h3><p>Symbols are abstract representations of Terra identifiers. They can be used in Terra code where an identifier is expected, e.g. a variable use, a variable definition, a function argument, a field name, a method name, a label (see also <a href="#escapes">Escapes</a>). They are similar to the symbols returned by LISP&#39;s <code>gensym</code> function.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span></code></pre></div><p>True if <code>s</code> is a symbol.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typ,[displayname])</span></span></code></pre></div><p>Construct a new symbol. This symbol will be unique from any other symbol. <code>typ</code> is the type for the symbol. <code>displayname</code> is an optional name that will be printed out in error messages when this symbol is encountered.</p><h3 id="values" tabindex="-1">Values <a class="header-anchor" href="#values" aria-label="Permalink to &quot;Values&quot;">​</a></h3><p>We provide wrappers around LuaJIT&#39;s <a href="http://luajit.org/ext_ffi.html" target="_blank" rel="noreferrer">FFI API</a> that allow you to allocate and manipulate Terra objects directly from Lua.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span></code></pre></div><p>Return the Terra type of <code>obj</code>. Object must be a LuaJIT <code>ctype</code> that was previously allocated using calls into the Terra API, or as the return value of a Terra function.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terratype,[init])</span></span></code></pre></div><p>Wrapper around LuaJIT&#39;s <code>ffi.new</code>. Allocates a new object with the type <code>terratype</code>. <code>init</code> is an optional initializer that follows the <a href="#converting-between-lua-values-and-terra-values">rules</a> for converting between Terra values and Lua values. This object will be garbage collected if it is no longer reachable from Lua.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terratype,obj)</span></span></code></pre></div><p>Wrapper around <code>ffi.cast</code>. Converts <code>obj</code> to <code>terratype</code> using the <a href="#converting-between-lua-values-and-terra-values">rules</a> for converting between Terra values and Lua values.</p><h3 id="global-variables" tabindex="-1">Global Variables <a class="header-anchor" href="#global-variables" aria-label="Permalink to &quot;Global Variables&quot;">​</a></h3><p>Global variables are Terra values that are shared among all Terra functions.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[init,name,isextern,isconstant,addrspace])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(init,[name,isextern,isconstant,addrspace])</span></span></code></pre></div><p>Creates a new global variable of type <code>type</code> given the initial value <code>init</code>. Either <code>type</code> or <code>init</code> must be specified. If <code>type</code> is not specified we attempt to infer it from <code>init</code>. If <code>init</code> is not specified the global is left uninitialized. <code>init</code> is converted to a Terra value using the normal conversion <a href="#converting-between-lua-values-and-terra-values">rules</a>. If <code>init</code> is specified, this <a href="#types">completes</a> the type.</p><p><code>init</code> can also be a <a href="#quote">Quote</a>, which will be treated as a <a href="#constants">constant expression</a> used to initialized the global. <code>name</code> is used as the debugging name for the global.</p><p>If <code>isextern</code> is true, then this global is bound to an externally defined variable with the name <code>name</code>.</p><p>If <code>isconstant</code> is true, then the contents of the global are considered to be constant.</p><p>If <code>addrspace</code> is not <code>nil</code>, then the global is placed in the corresponding <a href="https://llvm.org/docs/LangRef.html#pointer-type" target="_blank" rel="noreferrer">LLVM address space</a>. Note that the semantics of non-zero address spaces are target-specific.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getpointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the <code>ctype</code> object that is the pointer to this global variable in memory. <a href="#types">Completes</a> the type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Gets the value of this global as a LuaJIT <code>ctype</code> object. <a href="#types">Completes</a> the type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span></code></pre></div><p>Converts <code>v</code> to a Terra values using the normal conversion <a href="#converting-between-lua-values-and-terra-values">rules</a>, and the global variable to this value. <a href="#types">Completes</a> the type.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> globalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Set or get the debug name for this global variable. This can help with debugging but does not otherwise change the behavior of the global.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> globalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gettype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Get the terra type of the global variable.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalvar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setinitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(init)</span></span></code></pre></div><p>Set or change the initializer expression for this global. Only valid before the global is compiled. This can be used to update the value of a globalvar as you add more code to the system. For instance, if you have a global variable storing the vtable for you class, you can add more values to it as you add methods to the class.</p><h3 id="constant" tabindex="-1">Constant <a class="header-anchor" href="#constant" aria-label="Permalink to &quot;Constant&quot;">​</a></h3><p>Terra constants represent constant values used in Terra code. For instance, if you want to create a <a href="http://en.wikipedia.org/wiki/Lookup_table" target="_blank" rel="noreferrer">lookup table</a> for the <code>sin</code> function, you might first use Lua to calculate the values and then create a constant Terra array of floating point numbers to hold the values. Since the compiler knows the array is constant (as opposed to a global variable), it can make more aggressive optimizations.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],init)</span></span></code></pre></div><p>Create a new constant. <code>init</code> is converted to a Terra value using the normal conversion <a href="#converting-between-lua-values-and-terra-values">rules</a>. If the optional <a href="#types">type</a> is specified, then <code>init</code> is converted to that <code>type</code> explicitly. <a href="#types">Completes</a> the type.</p><p><code>init</code> can also be a Terra <a href="#quotes">quote</a> object. In this case the quote is treated as a <em>constant initializer expresssion</em>:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> complexobject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Complex { 3, 4 })</span></span></code></pre></div><p>Constant expressions are a subset of Terra expressions whose values are guaranteed to be constant and correspond roughly to LLVM&#39;s concept of a constant expression. They can include things whose values will be constant after compilation but whose value is not known beforehand such as the value of a function pointer:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- array of function pointers to a,b, and c.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functionarray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`array(a,b,c))</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isconstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span></code></pre></div><p>True if <code>obj</code> is a Terra constant.</p><h3 id="label" tabindex="-1">Label <a class="header-anchor" href="#label" aria-label="Permalink to &quot;Label&quot;">​</a></h3><p>Labels are abstract code locations that can be used e.g., with the <code>goto</code> statement. Like symbols, label values allow programmatic generation of code locations.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">islabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l)</span></span></code></pre></div><p>True if <code>l</code> is a label.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([displayname])</span></span></code></pre></div><p>Construct a new label. This label will be unique from any other label, even if it has the same <code>displayname</code>. <code>displayname</code> is an optional name that will be printed out in error messages when this label is encountered.</p><h3 id="macro" tabindex="-1">Macro <a class="header-anchor" href="#macro" aria-label="Permalink to &quot;Macro&quot;">​</a></h3><p>Macros allow you to insert custom behavior into the compiler during type-checking. Because they run during compilation, they should be aware of <a href="#asynchronous-compilation">asynchronous compilation</a> when calling back into the compiler.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">macro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg0,arg1,...,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">argN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a new macro. The function will be invoked at compile time for each call in Terra code. Each argument will be a Terra <a href="#quote">quote</a> representing the argument. For instance, the call <code>mymacro(a,b,foo())</code>), will result in three quotes as arguments to the macro. The macro must return a single value that will be converted to a Terra object using the compilation-time conversion <a href="#converting-between-lua-values-and-terra-values">rules</a>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ismacro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span></code></pre></div><p>True if <code>t</code> is a macro.</p><h3 id="built-in-macros" tabindex="-1">Built-in Macros <a class="header-anchor" href="#built-in-macros" aria-label="Permalink to &quot;Built-in Macros&quot;">​</a></h3><p>The following macros are built in to Terra.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intrinsic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns a Terra function that calls the LLVM intrinsic corresponding to <code>name</code>, with the type <code>type</code>. For example, LLVM provides the following intrinsic for <code>sqrt</code>:</p><pre><code>local sqrt = terralib.intrinsic(&quot;llvm.sqrt.f32&quot;, float -&gt; float)
</code></pre><p>Now <code>sqrt</code> can be called, and this should generate efficient code for the target platform.</p><p>Please note that the precise sets of available intrinsics depends on the LLVM version and the target platform, and is not under Terra&#39;s control.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attrload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addr, attrs)</span></span></code></pre></div><p>Performs a load on the address <code>addr</code> with the attributes <code>attrs</code>. The attributes must be a literal table with one or more of the following keys:</p><ul><li><code>nontemporal</code> (optional): if <code>true</code>, the load is non-temporal.</li><li><code>align</code> (optional): specifies the alignment of <code>addr</code>.</li><li><code>isvolatile</code> (optional): if <code>true</code>, the contents of <code>addr</code> are considered volatile.</li></ul><p>For example, the following <code>attrload</code> returns <code>123</code>:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attrload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&amp;i, { align </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attrstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addr, value, attrs)</span></span></code></pre></div><p>Performs a store on the address <code>addr</code> with the value <code>value</code> and attributes <code>attrs</code>. The attributes are the same as for <code>attrload</code>, above.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attrs)</span></span></code></pre></div><p><strong>Experimental.</strong> Issues a fence operation. Depending on the attributes specified, prevents reordering of atomic instructions around the fence. The semantics of this operation are determined by <a href="https://llvm.org/docs/LangRef.html#fence-instruction" target="_blank" rel="noreferrer">LLVM</a>.</p><p>The following attributes may be specified (note that the list of allowed attributes is specific to each kind of atomic operation):</p><ul><li><code>syncscope</code> (optional): an <a href="https://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints" target="_blank" rel="noreferrer">LLVM syncscope</a>. Note that many of these values are target-specific.</li><li><code>ordering</code> (<strong>required</strong>): an <a href="https://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints" target="_blank" rel="noreferrer">LLVM memory ordering</a>.</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cmpxchg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addr, cmp, new, attrs)</span></span></code></pre></div><p><strong>Experimental.</strong> Performs an atomic compare-and-exchange (cmpxchg) operation on the address <code>addr</code>. If the value at <code>addr</code> is the same as <code>cmp</code>, writes the value <code>new</code> at the address, otherwise the value at the address is unmodified. Returns a tuple containing the original value at <code>addr</code> (regardless of whether the exchange succeeds), as well as a boolean that specifies whether the exchange succeeded or not.</p><p>The following attributes may be specified (note that the list of allowed attributes is specific to each kind of atomic operation):</p><ul><li><code>syncscope</code> (optional): an <a href="https://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints" target="_blank" rel="noreferrer">LLVM syncscope</a>. Note that many of these values are target-specific.</li><li><code>success_ordering</code> (<strong>required</strong>): an <a href="https://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints" target="_blank" rel="noreferrer">LLVM memory ordering</a> that applies <em>if the exchange is successful</em>.</li><li><code>failure_ordering</code> (<strong>required</strong>): an <a href="https://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints" target="_blank" rel="noreferrer">LLVM memory ordering</a> that applies <em>if the exchange fails</em>.</li><li><code>align</code> (optional): specifies the alignment of <code>addr</code>. Note that unlike <code>attrload</code>, the value of <code>align</code> must be <em>greater than or equal to</em> the size of the contents of <code>addr</code> (<a href="https://llvm.org/docs/LangRef.html#cmpxchg-instruction" target="_blank" rel="noreferrer">see here</a>).</li><li><code>isvolatile</code> (optional): if <code>true</code>, the contents of <code>addr</code> are considered volatile.</li><li><code>isweak</code> (optional): if <code>true</code>, then spurious failure is allowed. The operation may not write even if <code>cmp</code> matches <code>new</code>.</li></ul><p>For example, the in following example code, the first <code>cmpxchg</code> fails (assuming a single thread of execution), returning <code>{1, false}</code>, while the second succeeds with <code>{1, true}</code>. The final value of <code>i</code> is <code>4</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cmpxchg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&amp;i, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {success_ordering </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;acq_rel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, failure_ordering </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;monotonic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cmpxchg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&amp;i, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {success_ordering </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;acq_rel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, failure_ordering </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;monotonic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">atomicrmw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, addr, value, atomicattrs)</span></span></code></pre></div><p><strong>Experimental.</strong> Performs an atomic read-modify-write (RMW) operation on the address <code>addr</code> with the value <code>value</code> and operator <code>op</code>. The operation is performed atomically. Returns the original value at <code>addr</code>.</p><p>The valid operations that can be performed are specified in the <a href="https://llvm.org/docs/LangRef.html#atomicrmw-instruction" target="_blank" rel="noreferrer">LLVM documentation</a>. Note that <code>fadd</code> and <code>fsub</code> operations require floating-point types; most other operations require integer (or pointer) types. The specific set of available operations may depend on the LLVM version and target platform.</p><p>The following attributes may be specified (note that the list of allowed attributes is specific to each kind of atomic operation):</p><ul><li><code>syncscope</code> (optional): an <a href="https://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints" target="_blank" rel="noreferrer">LLVM syncscope</a>. Note that many of these values are target-specific.</li><li><code>ordering</code> (<strong>required</strong>): an <a href="https://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints" target="_blank" rel="noreferrer">LLVM memory ordering</a>.</li><li><code>align</code> (optional): specifies the alignment of <code>addr</code>. Note that unlike <code>attrload</code>, the value of <code>align</code> must be <em>greater than or equal to</em> the size of the contents of <code>addr</code> (<a href="https://llvm.org/docs/LangRef.html#atomicrmw-instruction" target="_blank" rel="noreferrer">see here</a>).</li><li><code>isvolatile</code> (optional): if <code>true</code>, the contents of <code>addr</code> are considered volatile.</li></ul><p>For example, the following <code>atomicrmw</code> writes <code>21</code> into <code>i</code> and returns <code>1</code> (assuming a single thread of execution):</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">atomicrmw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, &amp;i, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {ordering </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;acq_rel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="exotypes-structs" tabindex="-1">Exotypes (Structs) <a class="header-anchor" href="#exotypes-structs" aria-label="Permalink to &quot;Exotypes (Structs)&quot;">​</a></h3><p>We refer to Terra&#39;s way of creating user-defined aggregate types as exotypes because they are defined <em>external</em> to Terra itself, using a Lua API. The design tries to provide the raw mechanisms for defining the behavior of user-defined types without imposing any language-specific policies. Policy-based class systems such as those found in Java or C++ can then be created as libraries on top of these raw mechanisms. For conciseness and familiarity, we use the keyword <code>struct</code> to refer to these types in the language itself.</p><p>We also provide syntax sugar for defining exotypes for the most common cases. This section first discuses the Lua API itself, and then shows how the syntax sugar translates into it.</p><p>More information on the rationale for this design is available in our <a href="./publications.html">publications</a>.</p><h3 id="lua-api" tabindex="-1">Lua API <a class="header-anchor" href="#lua-api" aria-label="Permalink to &quot;Lua API&quot;">​</a></h3><p>A new user-defined type is created with the following call:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mystruct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">newstruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([displayname])</span></span></code></pre></div><p><code>displayname</code> is an optional name that will be displayed by error messages, but each call to <code>newstruct</code> creates a unique type regardless of name (We use a <a href="http://en.wikipedia.org/wiki/Nominative_type_system" target="_blank" rel="noreferrer">nominative</a> type system. The type can then be used in Terra programs:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : mystruct </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--instance of mystruct type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>The memory layout and behavior of the type when used in Terra programs is defined by setting <em>property functions</em> in the types <code>metamethods</code> table:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mystruct.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metamethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myproperty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span></code></pre></div><p>When the Terra typechecker needs to know information about the type, it will call the property function in the metamethods table of the type. If a property is not set, it may have a default behavior which is discussed for each property individually.</p><p>The following fields in <code>metamethods</code> are supported:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __getentries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A <em>Lua</em> function that determines the fields in a struct computationally. The <code>__getentries</code> function will be called by the compiler once when it first requires the list of entries in the struct. Since the type is not yet complete during this call, doing anything in this method that requires the type to be complete will result in an error. <code>entries</code> is a <a href="#list">List</a> of field entries. Each field entry is one of:</p><ul><li>A table <code>{ field = stringorsymbol, type = terratype }</code>, specifying a named field.</li><li>A table <code>{stringorsymbol,terratype}</code>, also specifying a named field.</li><li>A <a href="#list">List</a> of field entries that will be allocated together in a union sharing the same memory.</li></ul><p>By default, <code>__getentries</code> just returns the <code>self.entries</code> table, which is set by the <code>struct</code> definition syntax.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __getmethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,methodname)</span></span></code></pre></div><p>A <em>Lua</em> function looks up a method for a struct when the compiler sees a method invocation <code>mystruct:mymethod(...)</code> or a static method lookup <code>mystruct.mymethod</code>. <code>mymethod</code> may be either a string or a <a href="#symbol">symbol</a>. This metamethod will be called by the compiler for every static invocation of <code>methodname</code> on this type. Since it can be called multiple times for the same <code>methodname</code>, any expensive operations should be memoized across calls. <code>method</code> may be a Terra function, a Lua function, or a <a href="#macro">macros</a> which will run during typechecking.</p><p>Assuming that <code>__getmethod</code> returns the value <code>method</code>, then in Terra code the expression <code>myobj:mymethod(arg0,...argN)</code> turns into <code>[method](myobj,arg0,...,argN)</code> if type of <code>myobj</code> is <code>T</code>.</p><p>If the type of <code>myobj</code> is <code>&amp;T</code> then it desugars to <code>[method](@myobj,arg0,...,argN)</code>. If, when a method is invoked, <code>myobj</code> has type <code>T</code> but the formal parameter has type <code>&amp;T</code> then the argument will be automatically converted to a pointer by taking its address. This <em>method receiver cast</em> allows method calls on objects to modify the object.</p><p>By default, <code>__getmethod(self,methodname)</code> will return <code>self.methods[methodname]</code>, which is set by the method definition syntax sugar. If the table does not contain the method, then the typechecker will call <code>__methodmissing</code> as described below.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__staticinitialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A <em>Lua</em> function called after the type is complete but before the compiler returns to user-defined code. Since the type is complete, you can now do things that require a complete type such as create vtables, or examine offsets using the <code>terralib.offsetof</code>. The static initializers for entries in a struct will run before the static initializer for the struct itself.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">castedexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from,to,exp)</span></span></code></pre></div><p>A <em>Lua</em> function that can define conversions between your type and another type. <code>from</code> is the type of <code>exp</code>, and <code>to</code> is the type that is required. For type <code>mystruct</code>, <code>__cast</code> will be called when either <code>from</code> or <code>to</code> is of type <code>mystruct</code> or type <code>&amp;mystruct</code>. If there is a valid conversion, then the method should return <code>castedexp</code> where <code>castedexp</code> is the expression that converts <code>exp</code> to <code>to</code>. Otherwise, it should report a descriptive error using the <code>error</code> function. The Terra compiler will try any applicable <code>__cast</code> metamethod until it finds one that works (i.e. does not call <code>error</code>).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterable,body)</span></span></code></pre></div><p><strong>Experimental.</strong> A <em>Lua</em> function that generates the loop to iterate the specified type. The value of <code>iterable</code> will be an expression that generates a value of the specified type. The <code>body</code> is a Lua function that, when called with the loop iterator variable, executes one iteration of the loop. <strong>Note that both <code>iterable</code> and the argument to <code>body</code> must be protected from multiple evaluation.</strong> The result of the <code>__for</code> metamethod must be a quote.</p><p>For example, an implementation of a simple <code>Range</code> type might look like:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">struct </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Range.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metamethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iter,body)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        var it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__methodmissing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mymethod,myobj,arg1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,argN)</span></span></code></pre></div><p>When a method is called <code>myobj:mymethod(arg0,...,argN)</code> and <code>__getmethod</code> is not set, then the macro <code>__methodmissing</code> will be called if <code>mymethod</code> is not found in the method table of the type. It should return a Terra <a href="#quote">quote</a> to use in place of the method call.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__entrymissing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entryname,myobj)</span></span></code></pre></div><p>If <code>myobj</code> does not contain the filed <code>entryname</code>, then <code>__entrymissing</code> will be called whenever the typechecker sees the expression <code>myobj.entryname</code>. It must be a macro and should return a Terra <a href="#quote">quote</a> to use in place of the field.</p><p>Custom operators:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__sub, __add, __mul, __div, __mod, __lt, __le, __gt, __ge,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__eq, __ne, __and, __or, __not, __xor, __lshift, __rshift,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__select, __apply</span></span></code></pre></div><p>Can be either a Terra method, or a macro. These are invoked when the type is used in the corresponding operator. <code>__apply</code> is used for function application, and <code>__select</code> for <code>terralib.select</code>. In the case of binary operators, at least one of the two arguments will have type <code>mystruct</code>. The interface for custom operators hasn&#39;t been heavily tested and is subject to change.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A <em>Lua</em> function that generates a string that names the type. This name will be used in error messages and <code>tostring</code>.</p><h4 id="syntax-sugar" tabindex="-1">Syntax Sugar <a class="header-anchor" href="#syntax-sugar" aria-label="Permalink to &quot;Syntax Sugar&quot;">​</a></h4><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] struct mystruct</span></span></code></pre></div><p><em>Struct declaration</em> If <code>mystruct</code> is not already a Terra struct, it creates a new struct by calling <code>terralib.types.newstruct(&quot;mystruct&quot;)</code> and stores it in the Lua variable <code>mystruct</code>. If <code>mystruct</code> is already a struct, then it does not modify it. If the optional <code>local</code> keyword is used, then <code>mystruct</code> is first defined as a new local Lua variable. When used without the <code>local</code> keyword, <code>mystruct</code> can be a table specifier (e.g. <code>a.b.c</code>).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] struct </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mystruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    field0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : type0;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        fieldUnion0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : type1;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        fieldUnion1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : type2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fieldN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : typeN;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>Struct definition</em>. If <code>mystruct</code> is not already a Struct, then it creates a new struct with the behavior of struct declarations. It then fills in the <code>entries</code> table of the struct with the fields and types specified in the body of the definition. The <code>union</code> block can be used to specify that a group of fields should share the same location in memory. If <code>mystruct</code> was previously given a definition, then defining it again will result in an error.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mystruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mymethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arg0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : type0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">argN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : typeN)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><em>Method definition</em>. If <code>mystruct.methods.mymethod</code> is not a Terra function, it creates one. Then it adds the method definition. The formal parameter <code>self</code> with type <code>&amp;mystruct</code> will be added to beginning of the formal parameter list.</p><h3 id="overloaded-functions" tabindex="-1">Overloaded Functions <a class="header-anchor" href="#overloaded-functions" aria-label="Permalink to &quot;Overloaded Functions&quot;">​</a></h3><p>Overloaded functions are separate objects from normal Functions and are created using an API call:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overloadedfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                terra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : double) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>You can also add methods later:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">adddefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : float) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Unlike normal functions overloaded functions cannot be called directly from Lua.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">overloaded_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getdefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the <a href="#lists">List</a> of definitions for this function.</p><h3 id="escapes" tabindex="-1">Escapes <a class="header-anchor" href="#escapes" aria-label="Permalink to &quot;Escapes&quot;">​</a></h3><p>Escapes are a special construct adapted from <a href="http://www.cs.rice.edu/~taha/MSP/" target="_blank" rel="noreferrer">multi-stage programming</a> that allow you to use Lua to generate Terra expressions. Escapes are created using the bracket operator and contain a single lua expression (e.g. <code>[ 4 + 5 ]</code>) that is evaluated when the surrounding Terra code is <em>defined</em> (note: this is different from <a href="#macros">macros</a> which run when a function is <em>compiled</em>). Escapes are evaluated in the lexical scope of the Terra code. In addition to including the identifiers in the surround Lua scope, this scope will include any identifiers defined in the Terra code. In Lua code these identifiers are represented as <a href="#symbol">symbols</a>. For example, in the following escape:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dosomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a,b)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>The arguments <code>a</code> and <code>b</code> to <code>dosomething</code> will be <a href="#symbols">symbols</a> that are references to the variables defined in the Terra code.</p><p>We also provide syntax sugar for escapes of identifiers and table selects when they are used in expressions or statements. For instance the Terra expression <code>ident</code> is treated as the escape <code>[ident]</code>, and the table selection <code>a.b.c</code> is treated as the escape <code>[a.b.c]</code> when both <code>a</code> and <code>b</code> are Lua tables.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [luaexpr],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[luaexpr]\` </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is a single</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expression escape. </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`luaexpr\` </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is a single Lua expression that is evaluated to a Lua value when the </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _defined_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resulting</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Lua</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> expression</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> converted</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Terra</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> the</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-time conversion [rules](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">converting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">between</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-and-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">values). If the conversion results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a list of Terra values, it is truncated to a single value.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`lua</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[luaexpr])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><code>[luaexpr]</code> is a multiple-expression escape since it occurs as the last expression in a list of expressions. It has the same behavior as a single expression escape, except when the conversion of <code>luaexpr</code> results in multiple Terra expressions. In this case, the values are appended to the end of the expression list (in this case, the list of arguments to the call to <code>bar</code>).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [luaexpr]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><code>[luaexpr]</code> is a statement escape. This form has the same behavior as a multiple-expression escape but is also allowed to return <a href="#quote">quotes</a> of Terra statements. If the conversion from <code>luaexpr</code> results in a list of Terra values, then are all inserted into the current block.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([luaexpr] : int)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var [luaexpr] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mystruct.[luaexpr]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Each <code>[luaexpr]</code> is an example of a escape of an identifier. <code>luaexpr</code> must result in a <a href="#symbol">symbol</a>. For field selectors (<code>a.[luaexpr]</code>), methods (<code>a:[luaexpr]()</code>) or labels (<code>goto [luaexpr]</code>), <code>luaexpr</code> can also result in a string. This form allows you to define identifiers programmatically. When a symbol with an explicitly defined type is used to define a variable, then the variable will take the type of the symbol unless the type of the variable is explicitly specified. For instance if we construct a symbol (<code>foo = symbol(int)</code>), the <code>var [foo]</code> will have type <code>int</code>, and <code>var [foo] : float</code> will have type <code>float</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int, [luaexpr])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><code>[luaexpr]</code> is an escape of a list of identifiers. In this case, it behaves similarly to an escape of a single identifier, but may also return a list of explicitly typed symbols which will be appended as parameters in the parameter list.</p><h2 id="using-c-inside-terra" tabindex="-1">Using C Inside Terra <a class="header-anchor" href="#using-c-inside-terra" aria-label="Permalink to &quot;Using C Inside Terra&quot;">​</a></h2><p>Terra uses the <a href="http://clang.llvm.org" target="_blank" rel="noreferrer">Clang</a> frontend to allow Terra code to be backwards compatible with C. The current implementation of this functionality currently supports importing all functions, types, and enums from C header files. It will also import any macros whose definitions are a single number representable in a double such as:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FOO</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p>However, we currently do not support importing global variables or constants. This will be improved in the future.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">includecstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code,[args,target])</span></span></code></pre></div><p>Import the string <code>code</code> as C code. Returns a Lua table mapping the names of included C functions to Terra <a href="#function">function</a> objects, and names of included C types (e.g. typedefs) to Terra <a href="#types">types</a>. The Lua variable <code>terralib.includepath</code> can be used to add additional paths to the header search. It is a semi-colon separated list of directories to search. <code>args</code> is an optional list of strings that are flags to Clang (e.g. <code>includecstring(code,&quot;-I&quot;,&quot;..&quot;)</code>). <code>target</code> is a <a href="#targets">target</a> object that makes sure the headers are imported correctly for the target desired.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">includec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename,[args,target])</span></span></code></pre></div><p>Similar to <code>includecstring</code> except that C code is loaded from <code>filename</code>. This uses Clangs default path for header files. <code>...</code> allows you to pass additional arguments to Clang (including more directories to search).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">linklibrary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename)</span></span></code></pre></div><p>Load the dynamic library in file <code>filename</code>. If header files imported with <code>includec</code> contain declarations whose definitions are not linked into the executable in which Terra is run, then it is necessary to dynamically load the definitions with <code>linklibrary</code>. This situation arises when using external libraries with the <code>terra</code> REPL/driver application.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> llvmobj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">linkllvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> llvmobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">extern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(functionname,functiontype)</span></span></code></pre></div><p>Link an LLVM bitcode file <code>filename</code> with extension <code>.bc</code> generated with <code>clang</code> or <code>clang++</code>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clang++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -emit-llvm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycode.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mybitcode.bc</span></span></code></pre></div><p>The code is loaded as bitcode rather than machine code. This allows for more aggressive optimization (such as inlining the function calls) but will take longer to initialize in Terra since it must be compiled to machine code. To extract functions from this bitcode file, call the <code>llvmobj:extern</code> method providing the function&#39;s name in the bitcode and its Terra-equivalent type (e.g. <code>int -&gt; int</code>).</p><h2 id="converting-between-lua-values-and-terra-values" tabindex="-1">Converting between Lua values and Terra values <a class="header-anchor" href="#converting-between-lua-values-and-terra-values" aria-label="Permalink to &quot;Converting between Lua values and Terra values&quot;">​</a></h2><p>When compiling or invoking Terra code, it is necessary to convert values between Terra and Lua. Internally, we implement this conversion on top of LuaJIT&#39;s <a href="http://luajit.org/ext_ffi.html" target="_blank" rel="noreferrer">foreign-function interface</a>, which makes it possible to call C functions and use C values directly from Lua. Since Terra type system is similar to that of C&#39;s, we can reuse most of this infrastructure.</p><h4 id="converting-lua-values-to-terra-values-of-known-type" tabindex="-1">Converting Lua values to Terra values of known type <a class="header-anchor" href="#converting-lua-values-to-terra-values-of-known-type" aria-label="Permalink to &quot;Converting Lua values to Terra values of known type&quot;">​</a></h4><p>When converting Lua values to Terra, we sometimes know the expected type (e.g. when the type is specified in a <code>terralib.cast</code> or <code>terralib.constant</code> call). In the case, we follow LuaJIT&#39;s <a href="http://luajit.org/ext_ffi_semantics.html#convert-fromlua" target="_blank" rel="noreferrer">conversion semantics</a>, substituting the equivalent C type for each Terra type.</p><h4 id="converting-lua-values-to-terra-values-with-unknown-type" tabindex="-1">Converting Lua values to Terra values with unknown type <a class="header-anchor" href="#converting-lua-values-to-terra-values-with-unknown-type" aria-label="Permalink to &quot;Converting Lua values to Terra values with unknown type&quot;">​</a></h4><p>When a Lua value is used directly from Terra code through an <a href="#escapes">escape</a>, or a Terra value is create without specifying the type (e.g. <code>terralib.constant(3)</code>), then we attempt the infer the type of the object. If successful, then the standard conversion is applied. If the <code>type(value)</code> is:</p><ul><li><code>cdata</code> -- If it was previously allocated from the Terra API, or returned from Terra code, then it is converted into the Terra type equivalent to the <code>ctype</code> of the object.</li><li><code>number</code> -- If <code>floor(value) == value</code> and value can fit into an <code>int</code> then the type is an <code>int</code> otherwise it is <code>double</code>.</li><li><code>boolean</code> -- the type is <code>bool</code>.</li><li><code>string</code> -- converted into a <code>rawstring</code> (i.e. a <code>&amp;int8</code>). We may eventually add a special string type.</li><li>otherwise -- the type cannot be inferred. If you know the type of the object, then you use a <code>terralib.cast</code> function to specify it.</li></ul><h4 id="compile-time-conversions" tabindex="-1">Compile-time conversions <a class="header-anchor" href="#compile-time-conversions" aria-label="Permalink to &quot;Compile-time conversions&quot;">​</a></h4><p>When a Lua value is used as the result of an <a href="#escapes">escape</a> operator in a Terra function, additional conversions are allowed:</p><ul><li><a href="#global-variable">Global Variable</a> -- value becomes a lvalue reference to the global variable in Terra code.</li><li><a href="#symbol">Symbol</a> -- value becomes a lvalue reference to the variable defined using the symbol. If the variable is not in scope, this will become a compile-time error.</li><li><a href="#quote">Quote</a> -- the code defined in the quote will be spliced into the Terra code. If the quote contains only statements, it can only be spliced in where a statement appears.</li><li><a href="#constant">Constant</a> -- the constant is spliced into the Terra code.</li><li>Lua Function -- If used in a function call, the lua function is <code>terralib.cast</code> to the Terra function type that has no return values, and whose parameters are the Terra types of the actual parameters of the function call. If not use in a function call, results in an error.</li><li><a href="#macro">Macro</a> -- If used as a function call, the macro will be run at compile time. The result of the macro will then be convert to Terra using the compile-time conversion rules and spliced in place.</li><li><a href="#types">Type</a> -- If used as an argument to a macro call, it will be passed-through such that calling <code>arg:astype()</code> will return the value. If used as a function call (e.g. <code>[&amp;int](v)</code>, it acts as an explicit cast to that type.</li><li><a href="#list">List</a> or a rawlist (as classified by <code>terralib.israwlist</code>) -- Each member of the list is recursively converted to a Lua value using compile-time conversions (excluding the conversions for Lists). If used as a statement or where multiple expressions can appear, all values of the list are spliced in place. Otherwise, if used where only a single expression can appear, the list is truncated to 1 value.</li><li><code>cdata</code> aggregates (structs and arrays) -- If a Lua <code>cdata</code> aggregate of Terra type <code>T</code> is referenced directly in Terra code, the value in Terra code will be an lvalue reference of type <code>T</code> to the Lua-allocated memory that holds that aggregate.</li><li>otherwise -- the value is first converted to a Terra vlue using the standard rules for converting Lua to Terra values with unknown type. The resulting value is then spliced in place as a <em>constant</em>.</li></ul><h4 id="converting-terra-values-to-lua-values" tabindex="-1">Converting Terra values to Lua values <a class="header-anchor" href="#converting-terra-values-to-lua-values" aria-label="Permalink to &quot;Converting Terra values to Lua values&quot;">​</a></h4><p>When converting Terra values back into Lua values (e.g. from the results of a function call), we follow LuaJIT&#39;s <a href="http://luajit.org/ext_ffi_semantics.html#convert-tolua" target="_blank" rel="noreferrer">conversion semantics</a> from C types to Lua objects, substituting the equivalent C type for each Terra type. If the result is a <code>cdata</code> object, it can be used with the Terra <a href="#values">Value API</a>.</p><h2 id="loading-terra-code" tabindex="-1">Loading Terra Code <a class="header-anchor" href="#loading-terra-code" aria-label="Permalink to &quot;Loading Terra Code&quot;">​</a></h2><p>These functions allow you to load chunks of mixed Terra-Code code at runtime.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(readerfn)</span></span></code></pre></div><p>Lua equivalent of C API call <code>terra_load</code>. <code>readerfn</code> behaves the same as in Lua&#39;s <code>load</code> function.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span></code></pre></div><p>Lua equivalent of C API call <code>terra_loadstring</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename)</span></span></code></pre></div><p>Lua equivalent of C API call <code>terra_loadfile</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modulename)</span></span></code></pre></div><p>Load the terra code <code>modulename</code>. Terra adds an additional code loader to Lua&#39;s <code>package.loaders</code> to handle the loading of Terra code as a module. <code>require</code> first checks if <code>modulename</code> has already been loaded by a previous call to <code>require</code>, returning the previously loaded results if available. Otherwise it searches <code>package.terrapath</code> for the module. <code>package.terrapath</code> is a semi-colon separated list of templates, e.g.:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lib/?.t;./?.t&quot;</span></span></code></pre></div><p>The <code>modulename</code> is first converted into a path by replacing any <code>.</code> with a directory separator, <code>/</code>. Then each template is tried until a file is found. For instance, using the example path, the call <code>require(&quot;foo.bar&quot;)</code> will try to load <code>lib/foo/bar.t</code> or <code>foo/bar.t</code>. If a file is found, then <code>require</code> will return the result of calling <code>terralib.loadfile</code> on the file. By default, <code>package.terrapath</code> is set to the environment variable <code>TERRA_PATH</code>. If <code>TERRA_PATH</code> is not set then <code>package.terrapath</code> will contain the default path (<code>./?.t</code>). The string <code>;;</code> in <code>TERRA_PATH</code> will be replaced with this default path if it exists.</p><p>Note that normal Lua code is also imported using <code>require</code>. There are two search paths <code>package.path</code> (env <code>LUA_PATH</code>), which will load code as pure Lua, and <code>package.terrapth</code> (env: <code>TERRA_PATH</code>), which will load code as Lua-Terra code.</p><h2 id="compilation-api" tabindex="-1">Compilation API <a class="header-anchor" href="#compilation-api" aria-label="Permalink to &quot;Compilation API&quot;">​</a></h2><h3 id="saving-terra-code" tabindex="-1">Saving Terra Code <a class="header-anchor" href="#saving-terra-code" aria-label="Permalink to &quot;Saving Terra Code&quot;">​</a></h3><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename [, filetype], functiontable[, arguments, target, optimize])</span></span></code></pre></div><p>Save Terra code to an external representation such as an object file, or executable. <code>filetype</code> can be one of <code>&quot;object&quot;</code> (an object file <code>*.o</code>), <code>&quot;asm&quot;</code> (an assembly file <code>*.s</code>), <code>&quot;bitcode&quot;</code> (LLVM bitcode <code>*.bc</code>), <code>&quot;llvmir&quot;</code> (LLVM textual IR <code>*.ll</code>), or <code>&quot;executable&quot;</code> (no extension). If <code>filetype</code> is missing then it is inferred from the extension. <code>functiontable</code> is a table from strings to Terra functions. These functions will be included in the code that is written out with the name given in the table. <code>arguments</code> is an additional list that can contain flags passed to the linker when <code>filetype</code> is <code>&quot;executable&quot;</code>. If <code>filename</code> is <code>nil</code>, then the file will be written in memory and returned as a Lua string.</p><p>To cross-compile objects for a different architecture, you can specific a <a href="#targets">target</a> object, which describes the architecture to compile for. Otherwise <code>saveobj</code> will use the native architecture.</p><p>By default, <code>saveobj</code> compiles code with the equivalent of Clang <code>-O3</code>. This optimization profile can be customized to either disable optimizations, or to enable additional, potentially unsafe fast-math optimizations. The possible values of <code>optimize</code> are:</p><ul><li><code>true</code> or <code>false</code>: Enable or disable optimizations (equivalent of <code>-O3</code>). Default is enabled. Does not include any fast-math optimizations.</li><li><code>{optimize = ..., fastmath = ...}</code>: A table specifying an optimization profile. The <code>optimize</code> key takes boolean values <code>true</code> or <code>false</code> as described above (default <code>true</code> if left unspecified). The possible values for <code>fastmath</code> are described below.</li></ul><p>The <code>fastmath</code> key in an optimization profile may take any of the following values:</p><ul><li><code>true</code> or <code>false</code>: Enable or disable all <a href="https://llvm.org/docs/LangRef.html#fast-math-flags" target="_blank" rel="noreferrer">LLVM fast-math flags</a>. Default is <code>false</code> if unspecified.</li><li><code>&quot;flag&quot;</code>: A string specifying a single fast-math flag enables just that one flag. All other flags are disabled.</li><li><code>{&quot;flag1&quot;, &quot;flag2&quot;}</code>: A list of strings specifying zero or more fast-math flags enable all of the listed flags. All other flags are disabled.</li></ul><p>The list of valid LLVM fast-math flags can be seen <a href="https://llvm.org/docs/LangRef.html#fast-math-flags" target="_blank" rel="noreferrer">here</a>. Note that the precise set of available flags may depend on the LLVM version, and is outside of Terra&#39;s control.</p><p>Examples:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a.o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Disable optimizations.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a.o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {fastmath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Enable all fast-math optimizations.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a.o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {fastmath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;contract&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nnan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Enable contract and nnan.</span></span></code></pre></div><h3 id="targets" tabindex="-1">Targets <a class="header-anchor" href="#targets" aria-label="Permalink to &quot;Targets&quot;">​</a></h3><p>The functions <code>terralib.saveobj</code> and <code>terralib.includec</code> take an optional target object, that tells the compiler to compile the code for a different architecture. These targets can be used for cross-compilation. For example, to use an x86 machine to to compile ARM code for a Raspberry Pi, you can create the following target object:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> armtarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">newtarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Triple </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;armv6-unknown-linux-gnueabi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- LLVM target triple</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CPU </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;arm1176jzf-s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- LLVM CPU name,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Features </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- LLVM feature string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FloatABIHard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- For ARM, use floating point registers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>All entries in the table except the <code>Triple</code> field are optional. <a href="http://clang.llvm.org/docs/CrossCompilation.html" target="_blank" rel="noreferrer">Documentation</a> for <code>clang</code> includes more information about what these strings should be set to.</p><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>Terra provides a few library functions to help debug and performance tune code. Except for <code>currenttimeinseconds</code>, these debugging facilities are only available on OSX and Linux.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">currenttimeinseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Lua function that returns the current time in seconds since some fixed time in the past. Useful for performance tuning Terra code.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">traceback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;opaque)</span></span></code></pre></div><p>A Terra function that can be called from Terra code to print a stack trace. If <code>uctx</code> is <code>nil</code> then this will print the current stack. <code>uctx</code> can also be a pointer to a <code>ucontext_t</code> object (see <code>ucontext.h</code>) and will print the stack trace for that context. By default, the interpreter will print this information when a program segfaults.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">backtrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;&amp;opaque, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">naddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : uint64, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;opaque, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frameaddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;opaque)</span></span></code></pre></div><p>A low-level interface used to get the return addresses from a machine stack. <code>addresses</code> must be a pointer to a buffer that can hold at least <code>naddr</code> pointers. <code>ip</code> should be the address of the current instruction and will be the first entry in <code>addresses</code>, while <code>frameaddress</code> should be the value of the base pointer. <code>addresses</code> will be filled with the return addresses on the stack. Requires debugging mode to be enabled (<code>-g</code>) for it to work correctly.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;opaque, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nbytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : uint64, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : uint64)</span></span></code></pre></div><p>A low-level interface to the disassembler. Print the disassembly of instructions starting at <code>addr</code>. Will print <code>nbytes</code> of instructions or <code>ninst</code> instructions, whichever causes more instructions to be printed.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lookupsymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;opaque, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;&amp;opaque, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;uint64, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;rawstring, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">namelength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;uint64) : bool</span></span></code></pre></div><p>Attempts to look up information about a Terra function given a pointer <code>ip</code> to any instruction in the function. Returns <code>true</code> if successful, filling in <code>addr</code> with the start of the function and <code>size</code> with the size of the function in bytes. Fills in <code>name</code> with a pointer to a fixed-width string of to <code>namemax</code> characters holding the function name.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lookupline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fnaddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;opaque, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;opaque, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;rawstring, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">namelength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;uint64, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : &amp;uint64) : bool</span></span></code></pre></div><p>Attempts to look up information about a Terra instruction given a pointer <code>ip</code> to the instruction and a pointer <code>fnaddr</code> to the start of the function containing it. Returns <code>true</code> if successful, filling in <code>line</code> with line on which the instruction occurred and <code>filename</code> with a pointer to a fixed-width string of to <code>namemax</code> characters holding the filename. Fills up to <code>namemax</code> characters of the function&#39;s name into <code>name</code>.</p><h2 id="embedding-terra-inside-c-code" tabindex="-1">Embedding Terra inside C code <a class="header-anchor" href="#embedding-terra-inside-c-code" aria-label="Permalink to &quot;Embedding Terra inside C code&quot;">​</a></h2><p>Like Lua, Terra is designed to be embedded into existing code. The C API for Terra serves as the entry-point for running Terra-Lua programs. In fact, the <code>terra</code> executable and REPL are just clients of the C API. The Terra C API extends <a href="http://www.lua.org/manual/5.1/manual.html#3" target="_blank" rel="noreferrer">Lua&#39;s API</a> with a set of Terra-specific functions. A client first creates a <code>lua_State</code> object and then calls <code>terra_init</code> on it to initialize the Terra extensions. Terra provides equivalents to the <code>lua_load</code> set of functions (e.g. <code>terra_loadfile</code>), which treat the input as Terra-Lua code.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L);</span></span></code></pre></div><p>Initializes the internal Terra state for the <code>lua_State</code> <code>L</code>. <code>L</code> must be an already initialized <code>lua_State</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typedef </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* default values are 0 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    int verbose; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Sets verbosity of debugging output.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    Valid values are 0 (no debug output)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    to 2 (very verbose). */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    int debug;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Turns on debug information in Terra compiler.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    Enables base pointers and line number</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    information in stack traces. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} terra_Options;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_initwithoptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L, terra_Options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options);</span></span></code></pre></div><p>Initializes the internal Terra state for the <code>lua_State</code> <code>L</code>. <code>L</code> must be an already initialized <code>lua_State</code>. <code>terra_Options</code> holds additional configuration options.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               lua_Reader reader,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               void </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               const char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunkname);</span></span></code></pre></div><p>Loads a combined Terra-Lua chunk. Terra equivalent of <code>lua_load</code>. This function takes the same arguments as <code>lua_load</code> and performs identically except it parses the input as a combined Terra-Lua program (i.e. a Lua program that has Terra extensions). Currently there is no binary format for combined Lua-Terra code, so the input must be text.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_loadfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L, const char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file);</span></span></code></pre></div><p>Loads the file as a combined Terra-Lua chunk. Terra equivalent of <code>luaL_loadfile</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_loadbuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         const char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         size_t size,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         const char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name);</span></span></code></pre></div><p>Loads a buffer as a combined Terra-Lua chunk. Terra equivalent of <code>luaL_loadbuffer</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, const char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s);</span></span></code></pre></div><p>Loads string <code>s</code> as a combined Terra-Lua chunk. Terra equivalent of <code>luaL_loadstring</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_dofile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, file)</span></span></code></pre></div><p>Loads and runs the file <code>file</code>. Equivalent to</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_loadfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, fn) || </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LUA_MULTRET, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_dostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, s)</span></span></code></pre></div><p>Loads and runs the string <code>s</code>. Equivalent to</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terra_loadstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, s) || </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LUA_MULTRET, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="embedding-new-languages-inside-lua" tabindex="-1">Embedding New Languages Inside Lua <a class="header-anchor" href="#embedding-new-languages-inside-lua" aria-label="Permalink to &quot;Embedding New Languages Inside Lua&quot;">​</a></h2><p>Language extensions in the Terra system allow you to create custom Lua statements and expressions that you can use to implement your own embedded language. Each language registers a set of entry-point keywords that indicate the start of a statement or expression in your language. If the Terra parser sees one of these keywords at the beginning of a Lua expression or statement, it will switch control of parsing over to your language, where you can parse the tokens into an abstract syntax tree (AST), or other intermediate representation. After creating the AST, your language then returns a <em>constructor</em> function back to Terra parser. This function will be called during execution when your statement or expression should run.</p><p>This guide introduces language extensions with a simple stand-alone example, and shows how to register the extension with Terra. We then expand on this example by showing how it can interact with the Lua environment. The end of the guide documents the language extension interface, and the interface to the lexer in detail.</p><h3 id="a-simple-example" tabindex="-1">A Simple Example <a class="header-anchor" href="#a-simple-example" aria-label="Permalink to &quot;A Simple Example&quot;">​</a></h3><p>To get started, let&#39;s add a simple language extension to Lua that sums up a list of numbers. The syntax will look like <code>sum 1,2,3 done</code>, and when run it will sum up the numbers, producing the value <code>6</code>. A language extension is defined using a Lua table. Here is the table for our language</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sumlanguage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sumlanguage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--name for debugging</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- list of keywords that will start our expressions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entrypoints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keywords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--list of keywords specific to this language</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   --called by Terra parser to enter this language</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self,lex)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    --implementation here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>We list <code>&quot;sum&quot;</code> in the <code>entrypoints</code> list since we want Terra to hand control over to our language when it encounters this token at the beginning of an expression. We also list <code>&quot;done&quot;</code> as a keyword since we are using it to end our expression. When the Terra parser sees the <code>sum</code> token it will call the <code>expression</code> function passing in an interface to the lexer, <code>lex</code>. Here is the implementation:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self,lex)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--first token should be &quot;sum&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    repeat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      --parse a number, return its value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    --if there is a comma, consume it and continue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    until</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nextif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  --return a function that is run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  --when this expression would be evaluated by Lua</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment_function)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>We use the <code>lex</code> object to interact with the tokens. The interface is documented below. Since the statement only allows numeric constants, we can perform the summation during parsing. Finally, we return a <em>constructor</em> function that will be run every time this statement is executed. We can use it in Lua code like so:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- prints 6</span></span></code></pre></div><p>The file <code>tests/lib/sumlanguage.t</code> contains the code for this example, and <code>tests/sumlanguage1.t</code> has an example of its use.</p><h3 id="loading-and-running-the-language" tabindex="-1">Loading and Running the Language <a class="header-anchor" href="#loading-and-running-the-language" aria-label="Permalink to &quot;Loading and Running the Language&quot;">​</a></h3><p>In order to use our language extension, it needs to be <em>imported</em>. The language extension mechanism includes an <code>import</code> statment to load the language extension:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lib/sumlanguage&quot; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--active the new parsing rules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done</span></span></code></pre></div><p>Since <code>import</code> statements are evaluated at <em>parse</em> time, the argument must be a string literal. The parser will then call <code>require</code> on the string literal to load the language extension file. The file specified should <em>return</em> the Lua table describing your language:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sumlanguage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--fill in your table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sumlanguage</span></span></code></pre></div><p>The imported language will be enabled only in the local scope where the import statement occured:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lib/sumlanguage&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--ok, in scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ok, still in scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--error! sumlanguage is not in scope</span></span></code></pre></div><p>Multiple languages can be imported in the same scope as long as their <code>entrypoints</code> do not overlap. If their entrypoints do overlap, the languages can still be imported in the same file as long as the <code>import</code> statements occur in different scopes.</p><h3 id="interacting-with-lua-symbols" tabindex="-1">Interacting with Lua symbols <a class="header-anchor" href="#interacting-with-lua-symbols" aria-label="Permalink to &quot;Interacting with Lua symbols&quot;">​</a></h3><p>One of the advantages of Terra is that it shares the same lexical scope as Lua, making it easy to parameterize Terra functions. Extension languages can also access Lua&#39;s static scope. Let&#39;s extend our sum language so that it supports both constant numbers, as well as Lua variables:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum a,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--prints 7</span></span></code></pre></div><p>To do this we need to modify the code in our <code>expression</code> function:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self,lex)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terralib.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">newlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    repeat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --if it is a variable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        --tell the Terra parser</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        --we will access a Lua variable, &#39;name&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        --add its name to the list of variables</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    until</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nextif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment_function)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    --capture the local environment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    --a table from variable name =&gt; value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> environment_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i,v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ipairs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(variables) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mysum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env[v]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Now an expression can be a variable name (<code>lex.name</code>). Unlike constants, we don&#39;t know the value of this variable at parse time, so we cannot calculate the entire sum before execution. Instead, we save the variable name (<code>variables:insert(name)</code>) and tell the Terra parser that will need the value of this variable at runtime (<code>lex:ref(name)</code>). In our <em>constructor</em> we now capture the local lexical environment by calling the <code>environment_function</code> parameter, and look up the values of our variables in the environment to compute the sum. It is important to call <code>lex:ref(name)</code>. If we had not called it, then this environment table will not contain the variables we need.</p><h3 id="recursively-parsing-lua" tabindex="-1">Recursively Parsing Lua <a class="header-anchor" href="#recursively-parsing-lua" aria-label="Permalink to &quot;Recursively Parsing Lua&quot;">​</a></h3><p>Sometimes in the middle of your language you may want to call back into the Lua parser to parse an entire Lua expression. For instance, Terra types are Lua expressions:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : int </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>In this example, <code>int</code> is actually a Lua expression.</p><p>The method <code>lex:luaexpr()</code> will parse a Lua expression. It returns a Lua function that implements the expression. This functions takes the local lexical environment, and returns the value of the expression in that environment. As an example, let&#39;s add a concise way of specifying a single argument Lua function, <code>def(a) exp</code>, where <code>a</code> is a single argument and <code>exp</code> is a Lua expression. This is similar to Pythons <code>lambda</code> statement. Here is our language extension:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entrypoints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keywords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self,lex)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expfn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">luaexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment_function)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      --return our result, a single argument lua function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(actual)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> environment_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        --bind the formal argument</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        --to the actual one in our environment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        env[formal] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actual</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        --evaluate our expression in the environment</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> expfn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The full code for this example can be found in <code>tests/lib/def.t</code> and <code>tests/def1.t</code>.</p><h3 id="extending-statements" tabindex="-1">Extending Statements <a class="header-anchor" href="#extending-statements" aria-label="Permalink to &quot;Extending Statements&quot;">​</a></h3><p>In addition to extending the syntax of expressions, you can also define new syntax for statements and local variable declarations:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- a new statement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> terra </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- a new local variable declaration</span></span></code></pre></div><p>This is done by specifying the <code>statement</code> and <code>localstatement</code> functions in your language table. These function behave the same way as the <code>expression</code> function, but they can optionally return a list of names that they define. The file <code>test/lib/def.t</code> shows how this would work for the <code>def</code> constructor to support statements:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">def </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) luaexpr </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--defines global variable foo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> def </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) luaexpr </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--defines local variable bar</span></span></code></pre></div><h3 id="higher-level-parsing-via-pratt-parsers" tabindex="-1">Higher-Level Parsing via Pratt Parsers <a class="header-anchor" href="#higher-level-parsing-via-pratt-parsers" aria-label="Permalink to &quot;Higher-Level Parsing via Pratt Parsers&quot;">​</a></h3><p>Writing a parser that directly uses the lexer interface can be tedious. One simple approach that makes parsing easier (especially for expressions with multiple precedence levels) is Pratt parsing, or top-down precedence parsing (for more information, see <a href="http://javascript.crockford.com/tdop/tdop.html" target="_blank" rel="noreferrer">http://javascript.crockford.com/tdop/tdop.html</a>). We&#39;ve provided a library built on top of the Lexer interface to help do this. It can be found, along with documentation of the API in <code>tests/lib/parsing.t</code>. An example extension written using this library is found in <code>tests/lib/pratttest.t</code> and an example program using it in <code>tests/pratttest1.t</code>.</p><h3 id="the-language-and-lexer-api" tabindex="-1">The Language and Lexer API <a class="header-anchor" href="#the-language-and-lexer-api" aria-label="Permalink to &quot;The Language and Lexer API&quot;">​</a></h3><p>This section describes the API for defining languages and interacting with the <code>lexer</code> object in detail.</p><h4 id="language-table" tabindex="-1">Language Table <a class="header-anchor" href="#language-table" aria-label="Permalink to &quot;Language Table&quot;">​</a></h4><p>A language extension is defined by a Lua table containing the following fields.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span></span></code></pre></div><p>a name for your language used for debugging</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entrypoints</span></span></code></pre></div><p>A Lua list specifying the keywords that can begin a term in your language. These keywords must not be a Terra or Lua keyword and cannot overlap with entry-points for other loaded languages (In the future, we may allow you to rename entry-points when you load a language to resolve conflicts). These keywords must be valid Lua identifiers (i.e. they must be alphanumeric and cannot start with a number). In the future, we may expand this to allow arbitrary operators (e.g. <code>+=</code>) as well.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keywords</span></span></code></pre></div><p>A Lua list specifying any additional keywords used in your language. Like entry-points, these also must be valid identifiers. A keyword in Lua or Terra is always considered a keyword in your language, so you do not need to list them here.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expression</span></span></code></pre></div><p>(Optional) A Lua method <code>function(self,lexer)</code> that is called whenever the parser encounters an entry-point keyword at the beginning of a Lua expression. <code>self</code> is your language object, and <code>lexer</code> is a Lua object used to interact with Terra&#39;s lexer to retrieve tokens and report errors. Its API is described below. The <code>expression</code> method should return a <em>constructor</em> function <code>function(environment_function)</code>. The constructor is called every time the expression is evaluated and should return the value of the expression as it should appear in Lua code. Its argument, <code>environment_function</code>, is a function that when called, returns the local lexical environment as Lua table from variable names to values.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statement</span></span></code></pre></div><p>(Optional) A Lua method <code>function(self,lexer)</code> called when the parser encounters an entry-point keyword at the beginning of a Lua <em>statement</em>. Similar to <code>expression</code>, it returns a constructor function. Additionally, it can return a second argument that is a list of assignements that the statement performs to variables. For instance, the value <code>{ &quot;a&quot;, &quot;b&quot;, {&quot;c&quot;,&quot;d&quot;} }</code> will behave like the Lua statement <code>a,b,c.d = constructor(...)</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localstatement</span></span></code></pre></div><p>(Optional) A Lua method <code>function(self,lexer)</code> called when the parser encounters an entry-point keyword at the beginning of a <code>local</code> statment (e.g. <code>local terra foo() end</code>). Similar to <code>statement</code> this method can also return a list of names (e.g. <code>{&quot;a&quot;,&quot;b&quot;}</code>). However, in this case, these names will be defined as local variables <code>local a, b = constructor(...)</code></p><h4 id="tokens" tabindex="-1">Tokens <a class="header-anchor" href="#tokens" aria-label="Permalink to &quot;Tokens&quot;">​</a></h4><p>The methods in the language are given an interface <code>lexer</code> to Terra <em>lexer</em>, which can be used to examine the stream of <em>tokens</em>, and to report errors. A <em>token</em> is a Lua table with fields:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span></span></code></pre></div><p>The <em>token type</em>. For keywords and operators this is just a string (e.g. <code>&quot;and&quot;</code>, or <code>&quot;+&quot;</code>). The values <code>lexer.name</code>, <code>lexer.number</code>, <code>lexer.string</code> indicate the token is respectively an identifier (e.g. <code>myvar</code>), a number (e.g. 3), or a string (e.g. <code>&quot;my string&quot;</code>). The type <code>lexer.eof</code> indicates the end of the token stream.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span></span></code></pre></div><p>For names, strings, and numbers this is the specific value (e.g. <code>3.3</code>). Numbers are represented as Lua numbers when they would fit (floating point or 32-bit integers) and &#39;[u]int64_t&#39; cdata types for 64-bit integers.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valuetype</span></span></code></pre></div><p>For numbers this is the Terra type of the literal parsed. <code>3</code> will have type <code>int</code>, <code>3.3</code> is <code>double</code>, <code>3.f</code> is <code>float</code>, <code>3ULL</code> is <code>uint64</code>, <code>3LL</code> is <code>int64</code>, and <code>3U</code> is <code>uint</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">linenumber</span></span></code></pre></div><p>The linenumber on which this token occurred (not available for lookahead tokens).</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offset</span></span></code></pre></div><p>The offset in characters from the beginning of the file where this token occurred (not available for lookahead tokens).</p><h4 id="lexer" tabindex="-1">Lexer <a class="header-anchor" href="#lexer" aria-label="Permalink to &quot;Lexer&quot;">​</a></h4><p>The <code>lexer</code> object provides the following methods fields and methods. The <code>lexer</code> itself is only valid during parsing. For instance, it should <em>not</em> be called from the constructor function.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the current <em>token</em>. Does not modify the position.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lookahead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the <em>token</em> following the current token. Does not modify the position. Only 1 token of lookahead is allowed to keep the implementation simple.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokentype)</span></span></code></pre></div><p>shorthand for <code>lexer:cur().type == tokentype</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lookaheadmatches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokentype)</span></span></code></pre></div><p>Shorthand for <code>lexer:lookahead().type == tokentype</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the current token, and advances to the next token.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nextif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokentype)</span></span></code></pre></div><p>If <code>tokentype</code> matches the <code>type</code> of the current token, it returns the token and advances the lexer. Otherwise, it returns <code>false</code> and does not advance the lexer. This function is useful when you want to try to parse many alternatives.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokentype)</span></span></code></pre></div><p>If <code>tokentype</code> matches the type of the current token, it returns the token and advances the lexer. Otherwise, it stops parsing and emits an error. It is useful to use when you know what token should appear.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expectmatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokentype,openingtokentype,linenumber)</span></span></code></pre></div><p>Same as <code>expect</code> but provides better error reporting for matched tokens. For instance, to parse the closing brace <code>}</code> of a list you can call <code>lexer:expectmatch(&#39;}&#39;,&#39;{&#39;,lineno)</code>. It will report a mismatched bracket as well as the opening and closing lines.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lexer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span></span></code></pre></div><p>A string containing the filename, or identifier for the stream (useful for future error reporting)</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg)</span></span></code></pre></div><p>Report a parse error and give up. <code>msg</code> is a string. Does not return.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">errorexpected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg)</span></span></code></pre></div><p>Report that the string <code>msg</code> was expected but did not appear. Does not return.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span></code></pre></div><p><code>name</code> is a string. Indicates to the Terra parser that your language may refer to the Lua variable <code>name</code>. This function must be called for any free identifiers that you are interested in looking up. Otherwise, the identifier may not appear in the lexical environment passed to your <em>constructor</em> functions. It is safe (though less efficient) to call it for identifiers that it may not reference.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">luaexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Parses a single Lua expression from the token stream. This can be used to switch back into the Lua language for expressions in your language. For instance, Terra uses this to parse its types (which are just Lua expressions): <code>var a : aluaexpression(4) = 3</code>. It returns a function <code>function(lexicalenv)</code> that takes a table of the current lexical scope (such as the one return from <code>environment_function</code> in the constructor) and returns the value of the expression evaluated in that scope. This function is not intended to be used to parse a Lua expression into an AST. Currently, parsing a Lua expression into an AST requires you to writing the parser yourself. In the future we plan to add a library which will let you pick and choose pieces of Lua/Terra&#39;s grammar to use in your language.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">luastats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Parses a set of Lua statement from the token stream until it reaches an end of block keyword (<code>end</code>, <code>else</code>, <code>elseif</code>, etc.). This can be used to help build domain specific languages that are supersets of Lua without having to reimplement all of the Lua parser.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terraexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Parses a single Terra expression from the token stream. This can be used to help build domain specific languages that are supersets of Terra without having to reimplement all of the Terra parser.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terrastats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Parses a set of Terra statement from the token stream until it reaches an end of block keyword (<code>end</code>, <code>else</code>, <code>elseif</code>, etc.). This can be used to help build domain specific languages that are supersets of Terra without having to reimplement all of the Terra parser.</p><h2 id="intermediate-representations-with-abstract-syntax-description-language" tabindex="-1">Intermediate Representations with Abstract Syntax Description Language <a class="header-anchor" href="#intermediate-representations-with-abstract-syntax-description-language" aria-label="Permalink to &quot;Intermediate Representations with Abstract Syntax Description Language&quot;">​</a></h2><p><a href="https://www.usenix.org/legacy/publications/library/proceedings/dsl97/full_papers/wang/wang.pdf" target="_blank" rel="noreferrer">Abstract Syntax Description Language (ASDL)</a> is a way of describing compiler intermediate representations (IR) and other tree- or graph-based data structures in a concise way. It is similar in many ways to algebraic data types, but offers a consistent cross-language specification. ASDL is used in the Python compiler to describe its grammar, and is also used internally in Terra to represent Terra code.</p><p>We provide a Lua library for parsing ASDL specifications that can be used to implement IR and other data-structures that are useful when building domain-specific languages. It allows you to parse ASDL specifications to create a set of Lua classes (actually specially defined meta-tables) for building IR. The library automatically sets up the classes with constructors for building the IR, and additional methods can be added to the classes using standard Lua method definitions.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asdl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;asdl&#39;</span></span></code></pre></div><p>The ASDL package comes with Terra.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asdl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NewContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>ASDL classes are defined inside a context. Different contexts do not share anything. Each class inside a context must have a unique name.</p><h3 id="creating-asdl-classes" tabindex="-1">Creating ASDL Classes <a class="header-anchor" href="#creating-asdl-classes" aria-label="Permalink to &quot;Creating ASDL Classes&quot;">​</a></h3><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asdl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NewContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Define</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [[</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   # define a simple record type with two members</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Real = (number mantissa, number exp)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   #       ^~~~ field type         ^~~~~ field name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   # define a tagged union (aka a variant, discriminated union, sum type)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   # with several optional data types.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   # Here the type Stm has three sub-types</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Stm = Compound(Stm head, Stm next)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       | Assign(string lval, Exp rval)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   # &#39;*&#39; specifies that a field is a List object</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   # &#39;?&#39; marks a field optional (may be nil as well as the type)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       | Print(Exp* args, string? format)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Exp = Id(string name)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       | Num(number v)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       | Op(Exp lhs, BinOp op, Exp rhs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   # Omitting () on a tagged union creates a singleton value</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   BinOp = Plus | Minus</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span></code></pre></div><p>Types can be Lua primitives returned by <code>type(v)</code> (e.g. number table function string boolean), other ASDL types, or checked with arbitrary functions registered with <code>context:Extern</code>.</p><p>External types can be used by registering a name for the type and a function that returns true for objects of that type:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Extern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;File&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;file&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="using-asdl-classes" tabindex="-1">Using ASDL Classes <a class="header-anchor" href="#using-asdl-classes" aria-label="Permalink to &quot;Using ASDL Classes&quot;">​</a></h3><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assign </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,exp)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> real </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;terralist&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {exp})</span></span></code></pre></div><p>Values are created by calling the Class as function. Arguments are checked to be the correct type on construction. Helpful warnings are emitted when the types are wrong.</p><p>Fields are initialized by the constructor:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1</span></span></code></pre></div><p>By default classes have a string representation</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assign) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Assign(lval = x,rval = Num(v = 1))</span></span></code></pre></div><p>And you can check for membership using :isclassof</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isclassof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assign))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isclassof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assign))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isclassof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assign) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Singletons are not classes but values:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BinOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isclassof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Classes are the metatables of their values and have <code>Class.__index = Class</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getmetatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assign) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Tagged unions have a string field .kind that identifies which variant in the union the value is</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assign.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Assign&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="adding-methods-to-asdl-classes" tabindex="-1">Adding Methods To ASDL Classes <a class="header-anchor" href="#adding-methods-to-asdl-classes" aria-label="Permalink to &quot;Adding Methods To ASDL Classes&quot;">​</a></h3><p>You can define additional methods on the classes to add additional behavior</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">op</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lhs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Plus&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lhs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Minus&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lhs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,Types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>You can also define methods on the super classes which will be defined for sub-classes as well:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>WARNING: To keep the metatable structure simple, this is not implemented with chained tables. Instead definitions on the superclass also copy their method to the subclass because of this design YOU MUST DEFINE PARENT METHODS BEFORE CHILD METHODS. Otherwise, the parent method will clobber the child.</p><p>IF YOU NEED TO OVERRIDE AN ALREADY DEFINE METHOD LIKE __tostring SET IT TO NILFIRST IN THE SUPERCLASS:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__tostring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__tostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;Stm&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="namespaces" tabindex="-1">Namespaces <a class="header-anchor" href="#namespaces" aria-label="Permalink to &quot;Namespaces&quot;">​</a></h3><p>As an extension to ASDL, you can use the module keyword to define a namespace. This helps when you have many different kinds of Exp and Type in your compiler.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Define</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   module Foo {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Bar = (number a)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Baz = (Bar b)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Outside = (Foo.Baz x)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="unique" tabindex="-1">Unique <a class="header-anchor" href="#unique" aria-label="Permalink to &quot;Unique&quot;">​</a></h3><p>Another extension allows you to mark any concrete type &#39;unique&#39;. Unique types are memoized on construction so that if constructed with the same arguments (under Lua equality), the same Lua object is returned again. This works for types containing Lists (*) and Options (?) as well</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Define</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   module U {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Exp = Id(string name) unique</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          | Num(number v) unique</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">U</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">U</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,546)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
