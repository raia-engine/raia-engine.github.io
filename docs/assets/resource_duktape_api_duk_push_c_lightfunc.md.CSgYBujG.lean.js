import{_ as s,c as a,a2 as t,o as h}from"./chunks/framework.CuCbyi2k.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/api/duk_push_c_lightfunc.md","filePath":"resource/duktape/api/duk_push_c_lightfunc.md","lastUpdated":1732350347000}'),n={name:"resource/duktape/api/duk_push_c_lightfunc.md"};function e(l,i,p,k,d,c){return h(),a("div",null,i[0]||(i[0]=[t(`<h2 id="duk-push-c-lightfunc" tabindex="-1">duk_push_c_lightfunc() <a class="header-anchor" href="#duk-push-c-lightfunc" aria-label="Permalink to &quot;duk_push_c_lightfunc()&quot;">​</a></h2><p>stack light func function</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_push_c_lightfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duk_c_function </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_int_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> magic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | -&gt; | ... | func |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>C 関数に関連付けられた新しい lightfunc 値をスタックにプッシュします。プッシュされた lightfunc の非負のインデックス (スタックの底に相対的) を返します。</p><p>lightfunc は、Duktape/C 関数ポインタと、関連するヒープ割り当てのない小さな内部制御フラグのセットを含むタグ付き値です。内部制御フラグは、nargs、length、および magic 値をエンコードし、それゆえ、重要な制限を持ちます。</p><p>nargsは[0,14]またはDUK_VARARGSでなければなりません。 length は [0,15] でなければならず、lightfunc の仮想長プロパティにマップされます。 magic は、[-128,127] でなければなりません。 lightfunc は、独自のプロパティを保持できず、仮想の名前と長さのプロパティのみを持ち、その他のプロパティは Function.prototype から継承されます。</p><p>nargs 引数は、func が入力されたときにバリュースタックがどのように見えるかを制御し、通常の Duktape/C 関数のように動作します（ duk_push_c_function() を参照してください）。</p><p>作成された関数は、通常の関数 (func()) としても、コンストラクタ (new func()) としても呼び出すことが可能です。この 2 つの呼び出し方は duk_is_constructor_call() を使って区別することができます。この関数はコンストラクタとして使用できますが、通常の Function オブジェクトのようにプロトタイププロパティを持つことはできません。</p><p>プッシュされた lightfunc をコンストラクタとして使用するつもりで、（Object.prototype の代わりに）カスタム プロトタイプ オブジェクトを使用したい場合、lightfunc はオブジェクト値を返さなければなりません。このオブジェクトは、コンストラクタのために自動的に作成されたデフォルトのインスタンス（これにバインドされている）を置き換え、新しい MyLightFunc() 式の値となります。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func_idx;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">func_idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_push_c_lightfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, my_addtwo, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*nargs*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*length*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*magic*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_push_c_function</p>`,17)]))}const g=s(n,[["render",e]]);export{u as __pageData,g as default};
