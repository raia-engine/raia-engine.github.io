import{_ as i,c as s,a2 as e,o as t}from"./chunks/framework.DzmM640o.js";const c=JSON.parse('{"title":"luaL_buffinit","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/luaL_buffinit.md","filePath":"reference/lua_c/luaL_buffinit.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/luaL_buffinit.md"};function n(h,a,r,p,d,u){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="lual-buffinit" tabindex="-1">luaL_buffinit <a class="header-anchor" href="#lual-buffinit" aria-label="Permalink to &quot;luaL_buffinit&quot;">​</a></h1><p>バッファ<code>B</code>を初期化します。</p><p><code>[-0, +0, -]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_buffinit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, luaL_Buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>バッファ<code>B</code>を初期化します。この関数は空間を割り当てません。バッファは変数として宣言される必要があります（<code>luaL_Buffer</code>を参照）。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">luaL_Buffer b;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luaL_buffinit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>このコードは、<code>luaL_Buffer</code>を初期化します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>luaL_Buffer</li><li>luaL_addstring</li></ul>`,13)]))}const k=i(l,[["render",n]]);export{c as __pageData,k as default};
