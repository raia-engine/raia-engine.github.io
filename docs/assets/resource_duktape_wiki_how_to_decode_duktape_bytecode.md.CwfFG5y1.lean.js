import{_ as a,c as t,a2 as r,o}from"./chunks/framework.DPuwY6B9.js";const h=JSON.parse('{"title":"Duktapeバイトコードのデコード方法","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/wiki/how_to_decode_duktape_bytecode.md","filePath":"resource/duktape/wiki/how_to_decode_duktape_bytecode.md","lastUpdated":1732350347000}'),d={name:"resource/duktape/wiki/how_to_decode_duktape_bytecode.md"};function l(u,e,p,s,b,i){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="duktapeバイトコードのデコード方法" tabindex="-1">Duktapeバイトコードのデコード方法 <a class="header-anchor" href="#duktapeバイトコードのデコード方法" aria-label="Permalink to &quot;Duktapeバイトコードのデコード方法&quot;">​</a></h1><p>バイトコード」という用語は、関数ダンプ/ロード形式を指す場合と、より狭 義にはバイトコードオペコード形式のみを指す場合があります。</p><h2 id="バイトコードオプコードのデコード方法" tabindex="-1">バイトコードオプコードのデコード方法 <a class="header-anchor" href="#バイトコードオプコードのデコード方法" aria-label="Permalink to &quot;バイトコードオプコードのデコード方法&quot;">​</a></h2><p>Duktapeのオペコード形式はバージョン保証がなく、単にランタイムコンパイラとエグゼキュータコンポーネントで共有される内部形式です。オペコードフォーマットは、例えばバイトコードの制限を拡張したり、性能を向上させたりするために、マイナーリリースで何度か変更されています。現在、ソースコード以外にオペコードフォーマットの仕様はなく、そのような仕様は簡単に時代遅れになる。</p><p>デバッグクライアントなどでバイトコードオペコードフォーマットをデコードするためのリソースを以下に紹介します。</p><ul><li>バイトコードヘッダーの定義: <a href="https://github.com/svaarala/duktape/blob/master/src-input/duk_js_bytecode.h" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/src-input/duk_js_bytecode.h</a></li><li>Node.js デバッガ ウェブ UI が命令を印刷可能な形式にデコードするために使用するバイトコードメタデータ: <a href="https://github.com/svaarala/duktape/blob/master/debugger/duk_opcodes.yaml" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/debugger/duk_opcodes.yaml</a></li><li>Node.js デバッガ ウェブ UI のデコーダ/フォーマット機能: <a href="https://github.com/svaarala/duktape/blob/v1.4.0/debugger/duk_debug.js#L1044-L1133" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/v1.4.0/debugger/duk_debug.js#L1044-L1133</a> (リンクは 1.4.0 のものです。最新版はマスターをご確認ください)</li></ul><p>なお、バイトコードのフォーマットはバージョン間で変更されています。Duktape 1.xと2.xの間でバイトコードの大幅な見直しが行われましたが、マイナーバージョン間でも大きな変更があります。</p><h2 id="dump-loadバイトコードフォーマットをデコードする" tabindex="-1">dump/loadバイトコードフォーマットをデコードする <a class="header-anchor" href="#dump-loadバイトコードフォーマットをデコードする" aria-label="Permalink to &quot;dump/loadバイトコードフォーマットをデコードする&quot;">​</a></h2><p>dump/load形式は、関数の実際のバイトコード（オペコードリスト）だけでなく、定数、内部関数、関数のメタデータも含みます。オペコード形式と同様に、dump/load 形式はバージョンに依存し、ソースコードにのみ記述されています。参照してください。</p><ul><li>dump/load に関するドキュメント: <a href="https://github.com/svaarala/duktape/blob/master/doc/bytecode.rst" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/doc/bytecode.rst</a></li><li>ダンプファイルをデコードして印刷するユーティリティ: <a href="https://github.com/svaarala/duktape/blob/v1.4.0/util/dump_bytecode.py" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/v1.4.0/util/dump_bytecode.py</a> (リンク先は 1.4.0 のものです。最新版はマスターをご確認ください)</li></ul>',10)]))}const k=a(d,[["render",l]]);export{h as __pageData,k as default};
