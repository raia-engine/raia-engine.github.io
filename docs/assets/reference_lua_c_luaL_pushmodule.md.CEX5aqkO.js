import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.CKGreiRV.js";const u=JSON.parse('{"title":"luaL_pushmodule","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/luaL_pushmodule.md","filePath":"reference/lua_c/luaL_pushmodule.md","lastUpdated":1731828945000}'),e={name:"reference/lua_c/luaL_pushmodule.md"};function h(t,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="lual-pushmodule" tabindex="-1">luaL_pushmodule <a class="header-anchor" href="#lual-pushmodule" aria-label="Permalink to &quot;luaL_pushmodule&quot;">​</a></h1><p>指定された名前のモジュールテーブルをスタックにプッシュする</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_pushmodule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sizehint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>luaL_pushmodule</code> は、モジュールテーブルを操作するための便利な関数で、指定された名前のモジュールテーブルをスタックにプッシュします。モジュールがまだ作成されていない場合は、新しいテーブルを作成します。</p><h3 id="引数" tabindex="-1">引数 <a class="header-anchor" href="#引数" aria-label="Permalink to &quot;引数&quot;">​</a></h3><ol><li><p><strong><code>L</code></strong><br> Lua ステートへのポインタ。</p></li><li><p><strong><code>modname</code></strong><br> モジュールの名前。この名前は、Lua の <code>_LOADED</code> テーブルとグローバル環境でモジュールを検索または作成するために使用されます。</p></li><li><p><strong><code>sizehint</code></strong><br> 新しいモジュールテーブルを作成する際のサイズのヒント。モジュールが既に存在する場合、この値は無視されます。</p></li></ol><h3 id="戻り値" tabindex="-1">戻り値 <a class="header-anchor" href="#戻り値" aria-label="Permalink to &quot;戻り値&quot;">​</a></h3><p>この関数は戻り値を持ちませんが、スタックのトップに対象のモジュールテーブルを残します。</p><h3 id="動作" tabindex="-1">動作 <a class="header-anchor" href="#動作" aria-label="Permalink to &quot;動作&quot;">​</a></h3><ol><li><code>_LOADED</code> テーブルを取得し、その中に <code>modname</code> に対応するエントリを探します。</li><li><code>modname</code> に対応する値が存在し、それがテーブルであれば、そのテーブルをスタックにプッシュします。</li><li>値が存在しないか、テーブルでない場合： <ul><li>新しいテーブルを作成します。</li><li>そのテーブルを <code>_LOADED</code> に登録します。</li><li>さらに、グローバル環境にも登録します。</li></ul></li><li>最終的に、スタックのトップには対象のモジュールテーブルが存在します。</li></ol><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><p>以下は <code>luaL_pushmodule</code> を使用してモジュールを操作する例です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;lua.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;lauxlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;lualib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register_my_module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;mymodule&quot; という名前のモジュールテーブルをプッシュ</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    luaL_pushmodule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mymodule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // モジュールにフィールドを設定</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lua_pushstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Lua!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lua_setfield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // スタックのクリーンアップは不要：luaL_pushmodule でトップに配置される</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_newstate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    luaL_openlibs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    register_my_module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Lua スクリプトからモジュールを使用する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    luaL_dostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;print(mymodule.greeting)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &quot;Hello, Lua!&quot; と出力</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lua_close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li><code>luaL_pushmodule</code> は、モジュール名 <code>mymodule</code> を <code>_LOADED</code> およびグローバル環境で探します。</li><li>見つからない場合、新しいテーブルを作成し、スタックのトップに配置します。</li><li>作成したモジュールテーブルにフィールド <code>greeting</code> を追加します。</li></ol><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>luaL_findtable</li><li>luaL_register</li><li>lua_setfield</li><li>lua_getfield</li></ul>`,19)]))}const E=i(e,[["render",h]]);export{u as __pageData,E as default};
