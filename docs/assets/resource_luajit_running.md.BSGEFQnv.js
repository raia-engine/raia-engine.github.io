import{_ as d,c as i,a2 as a,o as e}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"LuaJITを実行する","description":"","frontmatter":{},"headers":[],"relativePath":"resource/luajit/running.md","filePath":"resource/luajit/running.md","lastUpdated":null}'),s={name:"resource/luajit/running.md"};function l(o,t,n,r,c,h){return e(),i("div",null,t[0]||(t[0]=[a('<h1 id="luajitを実行する" tabindex="-1">LuaJITを実行する <a class="header-anchor" href="#luajitを実行する" aria-label="Permalink to &quot;LuaJITを実行する&quot;">​</a></h1><blockquote><p>このドキュメントはLuaJIT 2.1向けです。バージョン固有のドキュメントについては、各gitブランチのdocディレクトリを確認してください。</p></blockquote><p>LuaJITには、POSIXシステムでは<code>luajit</code>、Windowsでは<code>luajit.exe</code>と呼ばれる単一のスタンドアロン実行ファイルのみがあります。これを使って、コマンドラインから簡単なLuaステートメントや完全なLuaアプリケーションを実行できます。対話モードもあります。</p><h2 id="コマンドラインオプション" tabindex="-1">コマンドラインオプション <a class="header-anchor" href="#コマンドラインオプション" aria-label="Permalink to &quot;コマンドラインオプション&quot;">​</a></h2><p><code>luajit</code>スタンドアロン実行ファイルは、通常の<code>lua</code>スタンドアロン実行ファイルのわずかに修正されたバージョンです。基本的なオプションも同様にサポートされています。<code>luajit -h</code>は利用可能なオプションの短いリストを表示します。詳細についてはLuaマニュアルをご覧ください。</p><p>LuaJITにはいくつか追加のオプションがあります：</p><h3 id="b-options-input-output" tabindex="-1"><code>-b[options] input output</code> <a class="header-anchor" href="#b-options-input-output" aria-label="Permalink to &quot;`-b[options] input output`&quot;">​</a></h3><p>このオプションはバイトコードを保存またはリストします。以下の追加オプションが受け入れられます：</p><ul><li><code>-l</code> — バイトコードのみをリストします。</li><li><code>-s</code> — デバッグ情報を削除します（これがデフォルトです）。</li><li><code>-g</code> — デバッグ情報を保持します。</li><li><code>-W</code> — 32ビット（非GC64）バイトコードを生成します。</li><li><code>-X</code> — 64ビット（GC64）バイトコードを生成します。</li><li><code>-d</code> — 確定的な方法でバイトコードを生成します。</li><li><code>-n name</code> — モジュール名を設定します（デフォルト：入力名から自動検出）。</li><li><code>-t type</code> — 出力ファイルタイプを設定します（デフォルト：出力名から自動検出）。</li><li><code>-a arch</code> — オブジェクトファイルのアーキテクチャを上書きします（デフォルト：ネイティブ）。</li><li><code>-o os</code> — オブジェクトファイルのOSを上書きします（デフォルト：ネイティブ）。</li><li><code>-F name</code> — ファイル名を上書きします（デフォルト：入力ファイル名）。</li><li><code>-e chunk</code> — 入力としてチャンク文字列を使用します。</li><li><code>-</code>（ハイフン1つ）— 入力として標準入力、出力として標準出力を使用します。</li></ul><p>出力ファイルタイプは、出力ファイル名の拡張子から自動的に検出されます：</p><ul><li><code>c</code> — Cソースファイル、エクスポートされたバイトコードデータ。</li><li><code>cc</code> — C++ソースファイル、エクスポートされたバイトコードデータ。</li><li><code>h</code> — C/C++ヘッダファイル、静的バイトコードデータ。</li><li><code>obj</code>または<code>o</code> — オブジェクトファイル、エクスポートされたバイトコードデータ（OSおよびアーキテクチャ固有）。</li><li><code>raw</code>またはその他の拡張子 — 生のバイトコードファイル（ポータブル）。</li></ul><div class="info custom-block"><p class="custom-block-title">メモ</p><ul><li>バイトコードの移植性と互換性に関する情報については、<code>string.dump()</code>も参照してください。</li><li>生のバイトコード形式のファイルは自動的に検出され、任意のLuaソースファイルと同様にロードできます。例えば、コマンドラインから直接、または<code>loadfile()</code>、<code>dofile()</code>などで。</li><li>アプリケーションにモジュールのバイトコードを静的に埋め込むには、オブジェクトファイルを生成し、それをアプリケーションとリンクします。</li><li>ほとんどのELFベースのシステム（例：Linux）では、アプリケーションをリンクするときにグローバルシンボルを明示的にエクスポートする必要があります。例えば、<code>-Wl,-E</code>を使って。</li><li><code>require()</code>はエクスポートされたシンボル（Windowsでは*.exeまたはlua51.dll内）およびpackage.cpath内の共有ライブラリから埋め込みバイトコードデータをロードしようとします。</li></ul></div><p>典型的な使用例：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.lua</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.out</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # test.outにバイトコードを保存</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -bg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.lua</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.out</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # デバッグ情報を保持して保存</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;print(&#39;hello world&#39;)&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.out</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # コマンドラインスクリプトを保存</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -bl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.lua</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # 標準出力にリスト表示</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -bl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.lua</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # test.txtにリスト表示</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;print(&#39;hello world&#39;)&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # コマンドラインスクリプトをリスト表示</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.lua</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.obj</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # オブジェクトファイルを生成</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># アプリケーションとリンクして、require(&quot;test&quot;)でロード</span></span></code></pre></div><h3 id="j-cmd-arg-arg" tabindex="-1"><code>-j cmd[=arg[,arg...]]</code> <a class="header-anchor" href="#j-cmd-arg-arg" aria-label="Permalink to &quot;`-j cmd[=arg[,arg...]]`&quot;">​</a></h3><p>このオプションはLuaJIT制御コマンドを実行するか、ロード可能な拡張モジュールのいずれかをアクティベートします。コマンドは最初に<code>jit.*</code>ライブラリで検索されます。一致する関数が見つからない場合は、<code>jit.&lt;cmd&gt;</code>という名前のモジュールがロードされ、モジュールの<code>start()</code>関数が指定された引数（あれば）で呼び出されます。<code>-j</code>とcmdの間のスペースはオプショナルです。</p><p>利用可能なLuaJIT制御コマンドは以下の通りです：</p><ul><li><code>-jon</code> — JITコンパイラをオンにします（デフォルト）。</li><li><code>-joff</code> — JITコンパイラをオフにし、インタープリタのみを使用します。</li><li><code>-jflush</code> — コンパイルされたコードのキャッシュ全体をフラッシュします。</li><li><code>-jv</code> — JITコンパイラの進行状況に関する詳細情報を表示します。</li><li><code>-jdump</code> — 様々なコンパイラステージで使用されるコードと構造をダンプします。</li><li><code>-jp</code> — 統合プロファイラを開始します。</li></ul><p><code>-jv</code>と<code>-jdump</code>コマンドはLuaで書かれた拡張モジュールです。これらは主にJITコンパイラ自体のデバッグに使用されます。オプションと出力フォーマットの説明については、ソースの先頭にあるコメントブロックを読んでください。これらはソース配布のlibディレクトリ内に存在するか、またはjitディレクトリの下にインストールされています。デフォルトでは、これはPOSIXシステム上で<code>/usr/local/share/luajit-XX.YY.ZZ/jit</code>です（XX.YY.ZZをインストールされたバージョンに置き換えてください）。</p><h3 id="o-level" tabindex="-1"><code>-O[level]</code> <a class="header-anchor" href="#o-level" aria-label="Permalink to &quot;`-O[level]`&quot;">​</a></h3><h3 id="o-flag-o-flag" tabindex="-1"><code>-O[+]flag</code>, <code>-O-flag</code> <a class="header-anchor" href="#o-flag-o-flag" aria-label="Permalink to &quot;`-O[+]flag`, `-O-flag`&quot;">​</a></h3><h3 id="oparam-value" tabindex="-1"><code>-Oparam=value</code> <a class="header-anchor" href="#oparam-value" aria-label="Permalink to &quot;`-Oparam=value`&quot;">​</a></h3><p>このオプションは、JITコンパイラによって使用される最適化の微調整制御を可能にします。これは主にLuaJIT自体のデバッグを目的としています。JITコンパイラは非常に高速（マイクロ秒からミリ秒の範囲の話）であることに注意してください。最適化を無効にしてもそのオーバーヘッドに目に見える影響はありませんが、通常は実行速度が遅くなるコードを生成します。</p><p>最初の形式は最適化レベルを設定します。これにより、特定の最適化フラグのミックスが有効になります。-O0はすべての最適化をオフにし、より高い数字はより多くの最適化を有効にします。レベルを省略する（つまり-Oのみ）と、現在のバージョンでのデフォルトの最適化レベル（-O3）が設定されます。</p><p>二番目の形式は個々の最適化フラグを追加または削除します。三番目の形式はVMまたはJITコンパイラのパラメータを特定の値に設定します。</p><p>このオプションを複数回使用することも（例：-Ocse -O-dce -Ohotloop=10）、複数の設定をコンマで区切ることもできます（例：-O+cse,-dce,hotloop=10）。設定は左から右に適用され、後の設定は前のものを上書きします。三つの形式を自由に組み合わせることができますが、最適化レベルを設定すると、以前のすべてのフラグが上書きされることに注意してください。</p><p>-Ofmaは、浮動小数点の結果の精度に影響を与えるため、どのレベルでもデフォルトでは有効になっていません。性能（向上）、決定性（低下）、数値精度（向上）のトレードオフを完全に理解している場合のみ、これを有効にしてください。</p><p>利用可能なフラグとその最適化レベルの有効化状況は以下の通りです：</p><table tabindex="0"><thead><tr><th>フラグ</th><th>-O1</th><th>-O2</th><th>-O3</th></tr></thead><tbody><tr><td>fold</td><td>•</td><td>•</td><td>•</td></tr><tr><td>cse</td><td>•</td><td>•</td><td>•</td></tr><tr><td>dce</td><td>•</td><td>•</td><td>•</td></tr><tr><td>narrow</td><td></td><td>•</td><td>•</td></tr><tr><td>loop</td><td></td><td>•</td><td>•</td></tr><tr><td>fwd</td><td></td><td></td><td>•</td></tr><tr><td>dse</td><td></td><td></td><td>•</td></tr><tr><td>abc</td><td></td><td></td><td>•</td></tr><tr><td>sink</td><td></td><td></td><td>•</td></tr><tr><td>fuse</td><td></td><td></td><td>•</td></tr><tr><td>fma</td><td></td><td></td><td></td></tr></tbody></table><p>パラメータとそのデフォルト設定は以下の通りです：</p><table tabindex="0"><thead><tr><th>パラメータ</th><th>デフォルト</th><th></th></tr></thead><tbody><tr><td>maxtrace</td><td>1000</td><td>キャッシュ内のトレースの最大数</td></tr><tr><td>maxrecord</td><td>4000</td><td>記録されたIR命令の最大数</td></tr><tr><td>maxirconst</td><td>500</td><td>トレースのIR定数の最大数</td></tr><tr><td>maxside</td><td>100</td><td>ルートトレースのサイドトレースの最大数</td></tr><tr><td>maxsnap</td><td>500</td><td>トレースのスナップショットの最大数</td></tr><tr><td>hotloop</td><td>56</td><td>ホットループまたはホットコールを検出するための反復回数</td></tr><tr><td>hotexit</td><td>10</td><td>サイドトレースを開始するために取られた終了の回数</td></tr><tr><td>tryside</td><td>4</td><td>サイドトレースをコンパイルするための試行回数</td></tr><tr><td>instunroll</td><td>4</td><td>不安定なループの最大展開係数</td></tr><tr><td>loopunroll</td><td>15</td><td>サイドトレース内のループ演算の最大展開係数</td></tr><tr><td>callunroll</td><td>3</td><td>疑似再帰呼び出しの最大展開係数</td></tr><tr><td>recunroll</td><td>2</td><td>真の再帰のための最小展開係数</td></tr><tr><td>sizemcode</td><td>32</td><td>各マシンコード領域のサイズ（Kバイト）（Windows: 64K）</td></tr><tr><td>maxmcode</td><td>512</td><td>すべてのマシンコード領域の最大合計サイズ（Kバイト）</td></tr></tbody></table>',31)]))}const k=d(s,[["render",l]]);export{u as __pageData,k as default};
