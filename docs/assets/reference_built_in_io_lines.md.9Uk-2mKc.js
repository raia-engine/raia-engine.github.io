import{_ as a,c as s,a2 as e,o as l}from"./chunks/framework.6x3wfQve.js";const c=JSON.parse('{"title":"io.lines","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/io/lines.md","filePath":"reference/built_in/io/lines.md","lastUpdated":null}'),t={name:"reference/built_in/io/lines.md"};function n(h,i,r,o,d,p){return l(),s("div",null,i[0]||(i[0]=[e(`<h1 id="io-lines" tabindex="-1">io.lines <a class="header-anchor" href="#io-lines" aria-label="Permalink to &quot;io.lines&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">io.lines</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([filename])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>ファイルを開き、それを一行ずつ読み取るイテレータを返します。引数なしで呼び出すと、デフォルトの入力ファイルからの行を反復処理します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.lines</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>この例では、ファイルの各行を繰り返し処理し、行ごとに出力しています。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><ul><li>64ビットファイルオフセットを扱う。</li><li><code>io.read()</code>のオプションを処理する。(Lua5.2から)</li></ul><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./file_lines.html"><code>file:lines</code></a></li></ul>`,13)]))}const u=a(t,[["render",n]]);export{c as __pageData,u as default};
