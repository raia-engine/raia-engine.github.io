import{_ as a,c as i,a2 as n,o as p}from"./chunks/framework.DzmM640o.js";const r=JSON.parse('{"title":"チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"resource/meson/tutorial.md","filePath":"resource/meson/tutorial.md","lastUpdated":1732376957000}'),t={name:"resource/meson/tutorial.md"};function e(l,s,h,k,d,c){return p(),i("div",null,s[0]||(s[0]=[n(`<h1 id="チュートリアル" tabindex="-1">チュートリアル <a class="header-anchor" href="#チュートリアル" aria-label="Permalink to &quot;チュートリアル&quot;">​</a></h1><p>このページでは、単純なプロジェクトの Meson ビルド定義を作成する方法を一から説明します。そして、それを拡張して外部の依存関係を使用し、いかに簡単にプロジェクトに統合できるかを紹介します。</p><p>このチュートリアルは、主に Linux での使用を想定して書かれています。システム上に GTK 開発ライブラリーがあることを想定しています。UbuntuのようなDebian由来のシステムでは、以下のコマンドでインストールすることができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt install libgtk-3-dev</span></span></code></pre></div><p>WindowsやmacOSなど、他のプラットフォームでGUIアプリケーションを構築することも可能ですが、必要な依存関係をインストールする必要があります。</p><h2 id="謙虚な始まり" tabindex="-1">謙虚な始まり <a class="header-anchor" href="#謙虚な始まり" aria-label="Permalink to &quot;謙虚な始まり&quot;">​</a></h2><p>最も基本的なプログラム、古典的なhelloの例から始めましょう。まず、ソースを格納するファイルmain.cを作成します。これは次のようなものです。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mainはすべてのプログラムの実行を開始する場所</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello there.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次に、Mesonのビルド記述を作成し、同じディレクトリのmeson.buildというファイルに記述します。その内容は以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>project(&#39;tutorial&#39;, &#39;c&#39;)</span></span>
<span class="line"><span>executable(&#39;demo&#39;, &#39;main.c&#39;)</span></span></code></pre></div><p>以上です。Autotoolsとは異なり、ソースヘッダをソースのリストに追加する必要はないことに注意してください。</p><p>これで、アプリケーションをビルドする準備ができました。まず、ソースディレクトリに移動して、以下のコマンドを実行して、ビルドを初期化する必要があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ meson setup builddir</span></span></code></pre></div><p>コンパイラの出力をすべて保持するために、別のビルドディレクトリを作成します。Meson は他のいくつかのビルドシステムと異なり、インソースビルドを許可していません。常に別のビルドディレクトリを作成する必要があります。一般的な慣例では、デフォルトのビルドディレクトリをトップレベルのソースディレクトリのサブディレクトリに配置します。</p><p>Mesonを実行すると、次のような出力が表示されます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The Meson build system</span></span>
<span class="line"><span> version: 0.13.0-research</span></span>
<span class="line"><span>Source dir: /home/jpakkane/mesontutorial</span></span>
<span class="line"><span>Build dir: /home/jpakkane/mesontutorial/builddir</span></span>
<span class="line"><span>Build type: native build</span></span>
<span class="line"><span>Project name is &quot;tutorial&quot;.</span></span>
<span class="line"><span>Using native c compiler &quot;ccache cc&quot;. (gcc 4.8.2)</span></span>
<span class="line"><span>Creating build target &quot;demo&quot; with 1 files.</span></span></code></pre></div><p>これで、コードをビルドする準備ができました。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ cd builddir</span></span>
<span class="line"><span>$ ninja</span></span></code></pre></div><p>Meson のバージョンが 0.55.0 より新しい場合、新しい backend-agnostic ビルドコマンドを使用することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ cd builddir</span></span>
<span class="line"><span>$ meson compile</span></span></code></pre></div><p>この文書では、後者の形式を使用します。</p><p>実行ファイルがビルドされたら、それを実行することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ ./demo</span></span></code></pre></div><p>これにより、期待通りの出力が得られます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello there.</span></span></code></pre></div><h2 id="依存関係の追加" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#依存関係の追加" aria-label="Permalink to &quot;依存関係の追加&quot;">​</a></h2><p>テキストを印刷するだけでは少し古い。代わりにグラフィカルなウィンドウを作成するようにプログラムを更新してみましょう。GTK+ ウィジェットツールキットを使いましょう。まず、メインファイルを編集してGTK+を使うようにします。新しいバージョンは次のようなものです。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;gtk/gtk.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Should provided the active view for a GTK application</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GtkApplication</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gpointer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GtkWidget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GtkWidget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gtk_application_window_new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (app);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gtk_label_new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello GNOME!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  gtk_container_add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GTK_CONTAINER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window), label);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  gtk_window_set_title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GTK_WINDOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to GNOME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  gtk_window_set_default_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GTK_WINDOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  gtk_widget_show_all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // end of function activate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main is where all program execution starts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GtkApplication </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gtk_application_new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, G_APPLICATION_FLAGS_NONE);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  g_signal_connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;activate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">G_CALLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activate), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g_application_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">G_APPLICATION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app), argc, argv);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  g_object_unref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // end of function main</span></span></code></pre></div><p>次に、Meson ファイルを編集して、GTK+ ライブラリを見つけて使用するように指示します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>project(&#39;tutorial&#39;, &#39;c&#39;)</span></span>
<span class="line"><span>gtkdep = dependency(&#39;gtk+-3.0&#39;)</span></span>
<span class="line"><span>executable(&#39;demo&#39;, &#39;main.c&#39;, dependencies : gtkdep)</span></span></code></pre></div><p>アプリで複数のライブラリを使用する必要がある場合、以下のようにそれぞれ別のdependency()コールを使用する必要があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gtkdeps = [dependency(&#39;gtk+-3.0&#39;), dependency(&#39;gtksourceview-3.0&#39;)]</span></span></code></pre></div><p>今の例では必要ない。</p><p>これでビルドの準備ができました。ここで注目すべきは、ビルドディレクトリを再作成したり、魔法のようなコマンドを実行したりする必要がないことです。代わりに、ビルドシステムを変更せずに、コードを再構築するのと全く同じコマンドを入力するだけです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ meson compile</span></span></code></pre></div><p>最初にビルド・ディレクトリを設定したら、もう二度とmesonコマンドを実行する必要はありません。いつも meson compile を実行するだけです。ビルド定義に変更があった場合、Mesonが自動的に検出し、ユーザーが気にしなくていいように、すべてを処理します。この場合、次のような出力が得られます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[1/1] Regenerating build files</span></span>
<span class="line"><span>The Meson build system</span></span>
<span class="line"><span> version: 0.13.0-research</span></span>
<span class="line"><span>Source dir: /home/jpakkane/mesontutorial</span></span>
<span class="line"><span>Build dir: /home/jpakkane/mesontutorial/builddir</span></span>
<span class="line"><span>Build type: native build</span></span>
<span class="line"><span>Project name is &quot;tutorial&quot;.</span></span>
<span class="line"><span>Using native c compiler &quot;ccache cc&quot;. (gcc 4.8.2)</span></span>
<span class="line"><span>Found pkg-config version 0.26.</span></span>
<span class="line"><span>Dependency gtk+-3.0 found: YES</span></span>
<span class="line"><span>Creating build target &quot;demo&quot; with 1 files.</span></span>
<span class="line"><span>[1/2] Compiling c object demo.dir/main.c.o</span></span>
<span class="line"><span>[2/2] Linking target demo</span></span></code></pre></div><p>Mesonがビルド定義が変更されたことに気づき、自動的に再実行したことにご注目ください。これでプログラムを実行する準備ができました。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ ./demo</span></span></code></pre></div><p>これにより、以下のようなGUIアプリケーションが作成されます。</p><p>GTK+サンプルアプリケーションのスクリーンショット</p>`,41)]))}const g=a(t,[["render",e]]);export{r as __pageData,g as default};
