import{_ as d,c as e,a2 as o,o as r}from"./chunks/framework.CuCbyi2k.js";const b=JSON.parse('{"title":"Class modifiers reference","description":"","frontmatter":{},"headers":[],"relativePath":"resource/dart/language/class_modifiers/reference.md","filePath":"resource/dart/language/class_modifiers/reference.md","lastUpdated":1732376957000}'),s={name:"resource/dart/language/class_modifiers/reference.md"};function n(a,t,c,i,l,m){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="class-modifiers-reference" tabindex="-1">Class modifiers reference <a class="header-anchor" href="#class-modifiers-reference" aria-label="Permalink to &quot;Class modifiers reference&quot;">​</a></h1><p>This page contains reference information for class modifiers.</p><h2 id="valid-combinations" tabindex="-1">Valid combinations <a class="header-anchor" href="#valid-combinations" aria-label="Permalink to &quot;Valid combinations&quot;">​</a></h2><p>The valid combinations of class modifiers and their resulting capabilities are:</p><table tabindex="0"><thead><tr><th>Declaration</th><th>Construct?</th><th>Extend?</th><th>Implement?</th><th>Mix in?</th><th>Exhaustive?</th></tr></thead><tbody><tr><td><code>class</code></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td>No</td><td>No</td></tr><tr><td><code>base class</code></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td>No</td><td>No</td><td>No</td></tr><tr><td><code>interface class</code></td><td><strong>Yes</strong></td><td>No</td><td><strong>Yes</strong></td><td>No</td><td>No</td></tr><tr><td><code>final class</code></td><td><strong>Yes</strong></td><td>No</td><td>No</td><td>No</td><td>No</td></tr><tr><td><code>sealed class</code></td><td>No</td><td>No</td><td>No</td><td>No</td><td><strong>Yes</strong></td></tr><tr><td><code>abstract class</code></td><td>No</td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td>No</td><td>No</td></tr><tr><td><code>abstract base class</code></td><td>No</td><td><strong>Yes</strong></td><td>No</td><td>No</td><td>No</td></tr><tr><td><code>abstract interface class</code></td><td>No</td><td>No</td><td><strong>Yes</strong></td><td>No</td><td>No</td></tr><tr><td><code>abstract final class</code></td><td>No</td><td>No</td><td>No</td><td>No</td><td>No</td></tr><tr><td><code>mixin class</code></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td>No</td></tr><tr><td><code>base mixin class</code></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td>No</td><td><strong>Yes</strong></td><td>No</td></tr><tr><td><code>abstract mixin class</code></td><td>No</td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td>No</td></tr><tr><td><code>abstract base mixin class</code></td><td>No</td><td><strong>Yes</strong></td><td>No</td><td><strong>Yes</strong></td><td>No</td></tr><tr><td><code>mixin</code></td><td>No</td><td>No</td><td><strong>Yes</strong></td><td><strong>Yes</strong></td><td>No</td></tr><tr><td><code>base mixin</code></td><td>No</td><td>No</td><td>No</td><td><strong>Yes</strong></td><td>No</td></tr></tbody></table><h2 id="invalid-combinations" tabindex="-1">Invalid combinations <a class="header-anchor" href="#invalid-combinations" aria-label="Permalink to &quot;Invalid combinations&quot;">​</a></h2><p>Certain combinations of modifiers are not allowed:</p><table tabindex="0"><thead><tr><th>Combination</th><th>Reasoning</th></tr></thead><tbody><tr><td><code>base</code>, <code>interface</code>, and <code>final</code></td><td>All control the same two capabilities (<code>extend</code> and <code>implement</code>), so are mutually exclusive.</td></tr><tr><td><code>sealed</code> and <code>abstract</code></td><td>Neither can be constructed, so are redundant together.</td></tr><tr><td><code>sealed</code> with <code>base</code>, <code>interface</code>, or <code>final</code></td><td><code>sealed</code> types already cannot be mixed in, extended or implemented from another library, so are redundant to combine with the listed modifiers.</td></tr><tr><td><code>mixin</code> and <code>abstract</code></td><td>Neither can be constructed, so are redundant together.</td></tr><tr><td><code>mixin</code> and <code>interface</code>, <code>final</code>, or <code>sealed</code></td><td>A <code>mixin</code> or <code>mixin class</code> declaration is intended to be mixed in, which the listed modifiers prevent.</td></tr><tr><td><code>enum</code> and any modifiers</td><td><code>enum</code> declarations can&#39;t be extended, implemented, mixed in, and can always be instantiated, so no modifiers apply to <code>enum</code> declarations.</td></tr><tr><td><code>extension type</code> and any modifiers</td><td><code>extension type</code> declarations can&#39;t be extended or mixed in, and can only be implemented by other <code>extension type</code> declarations.</td></tr></tbody></table>',8)]))}const h=d(s,[["render",n]]);export{b as __pageData,h as default};
