import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.CKGreiRV.js";const F=JSON.parse('{"title":"構築とテスト","description":"","frontmatter":{},"headers":[],"relativePath":"resource/yyjson/BuildAndTest.md","filePath":"resource/yyjson/BuildAndTest.md","lastUpdated":1732350347000}'),p={name:"resource/yyjson/BuildAndTest.md"};function h(t,s,e,k,d,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="構築とテスト" tabindex="-1">構築とテスト <a class="header-anchor" href="#構築とテスト" aria-label="Permalink to &quot;構築とテスト&quot;">​</a></h1><p>yyjsonをプロジェクトに組み込むには、ソースコード、パッケージマネージャ、CMakeなどの方法があります。</p><h1 id="ソースコード" tabindex="-1">ソースコード <a class="header-anchor" href="#ソースコード" aria-label="Permalink to &quot;ソースコード&quot;">​</a></h1><p>このライブラリは、クロスプラットフォームのJSONライブラリを提供することを目的としているので、ANSI C（実際にはC99ですが、厳密にはC89と互換性があります）で記述されています。yyjson.h<code>とyyjson.c</code>をあなたのプロジェクトにコピーすれば、何の設定もなしに使い始めることができます。</p><p>このライブラリは、<code>gcc</code>, <code>clang</code>, <code>msvc</code>, <code>tcc</code> の各コンパイラで <a href="https://github.com/ibireme/yyjson/actions" target="_blank" rel="noreferrer">CI</a> でテストされています。コンパイルに問題がある場合は、<a href="https://github.com/ibireme/yyjson/issues/new?template=bug_report.md" target="_blank" rel="noreferrer">バグ報告</a> をしてください。</p><p>このライブラリは、デフォルトですべての機能が有効になっていますが、コンパイル時のオプションを追加することで、いくつかの機能を切り捨てることができます。例えば、シリアライズが不要な場合にバイナリサイズを小さくするためにJSONライターを無効にしたり、解析のパフォーマンスを向上させるためにコメントサポートを無効にしたりします。詳しくは<code>コンパイル時オプション</code>を参照してください。</p><h1 id="パッケージマネージャー" tabindex="-1">パッケージマネージャー <a class="header-anchor" href="#パッケージマネージャー" aria-label="Permalink to &quot;パッケージマネージャー&quot;">​</a></h1><p>vcpkg<code>、</code>conan<code>、</code>xmake\`など、yyjsonのダウンロードとインストールに人気のあるパッケージマネージャを使用することができます。これらのパッケージマネージャのyyjsonパッケージは、コミュニティの貢献者によって最新に保たれています。もし、バージョンが古い場合は、彼らのリポジトリにissueやpull requestを作成してください。</p><h2 id="vcpkgを使う" tabindex="-1">vcpkgを使う <a class="header-anchor" href="#vcpkgを使う" aria-label="Permalink to &quot;vcpkgを使う&quot;">​</a></h2><p><a href="https://github.com/Microsoft/vcpkg/" target="_blank" rel="noreferrer">vcpkg</a>依存性マネージャを使ってyyjsonをビルドしインストールすることができます：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Microsoft/vcpkg.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vcpkg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bootstrap-vcpkg.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ./bootstrap-vcpkg.bat for Powershell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vcpkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> integrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vcpkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yyjson</span></span></code></pre></div><p>バージョンが古い場合は、vcpkgリポジトリに<a href="https://github.com/Microsoft/vcpkg" target="_blank" rel="noreferrer">create a issue or pull request</a>をお願いします。</p><h1 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h1><h2 id="cmakeを使ってライブラリをビルドする" tabindex="-1">CMakeを使ってライブラリをビルドする <a class="header-anchor" href="#cmakeを使ってライブラリをビルドする" aria-label="Permalink to &quot;CMakeを使ってライブラリをビルドする&quot;">​</a></h2><p>リポジトリをクローンし、ビルドディレクトリを作成する：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/ibireme/yyjson.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>静的ライブラリーを構築する：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>共有ライブラリを構築する：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_SHARED_LIBS=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>サポートされているCMakeのオプション</p><ul><li><p><code>-DYYJSON_BUILD_TESTS=ON</code> すべてのテストをビルドします。</p></li><li><p><code>-DYYJSON_BUILD_FUZZER=ON</code> LibFuzzingでファザーを構築する。</p></li><li><p><code>-DYYJSON_BUILD_MISC=ON</code> ビルドミスク。</p></li><li><p><code>-DYYJSON_BUILD_DOC=ON</code> doxygenでドキュメントをビルドする。</p></li><li><p><code>-DYYJSON_ENABLE_COVERAGE=ON</code> テストのコードカバレッジを有効にする。</p></li><li><p><code>-DYYJSON_ENABLE_VALGRIND=ON</code> テスト用のvalgrindメモリチェッカーを有効にする。</p></li><li><p><code>-DYYJSON_ENABLE_SANITIZE=ON</code> テスト用のサニタイザーを有効にする。</p></li><li><p><code>-DYYJSON_ENABLE_FASTMATH=ON</code> テスト用のfast-mathを有効にする。</p></li><li><p><code>-DYYJSON_FORCE_32_BIT=ON</code> テスト用に32ビットを強制するようにした(gcc/clang/icc)。</p></li><li><p><code>-DYYJSON_DISABLE_READER=ON</code> JSONリーダーが不要な場合は無効にしてください。</p></li><li><p><code>-DYYJSON_DISABLE_WRITER=ON</code> JSONライターを必要としない場合は、無効にしてください。</p></li><li><p><code>-DYYJSON_DISABLE_UTILS=ON</code> JSON Pointer、JSON Patch、JSON Merge Patchを無効化する。</p></li><li><p><code>-DYYJSON_DISABLE_FAST_FP_CONV=ON</code> 内蔵の高速浮動小数点数変換を無効にする。</p></li><li><p><code>-DYYJSON_DISABLE_NON_STANDARD=ON</code> コンパイル時に非標準のJSONサポートを無効化する。</p></li></ul><h2 id="cmakeを依存関係として使用する" tabindex="-1">CMakeを依存関係として使用する <a class="header-anchor" href="#cmakeを依存関係として使用する" aria-label="Permalink to &quot;CMakeを依存関係として使用する&quot;">​</a></h2><p>yyjsonをダウンロードしてプロジェクトフォルダに解凍し、<code>CMakeLists.txt</code>ファイルにリンクさせることができます：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># オプションを追加する（オプション）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(YYJSON_DISABLE_NON_STANDARD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CACHE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INTERNAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \`yyjson\`サブディレクトリの追加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vendor/yyjson)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># yyjsonをターゲットにリンクさせる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(your_target </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yyjson)</span></span></code></pre></div><p>CMakeのバージョンが3.14より高い場合は、以下の方法でCMakeに自動的にダウンロードさせることができます：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FetchContent)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CMakeにyyjsonをダウンロードさせる</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FetchContent_Declare(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    yyjson</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GIT_REPOSITORY https://github.com/ibireme/yyjson.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GIT_TAG master </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># master、またはバージョン番号（例：0.6.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FetchContent_MakeAvailable(yyjson)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># yyjsonをターゲットにリンクさせる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(your_target </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yyjson)</span></span></code></pre></div><h2 id="cmakeを使ってプロジェクトを生成する" tabindex="-1">CMakeを使ってプロジェクトを生成する <a class="header-anchor" href="#cmakeを使ってプロジェクトを生成する" aria-label="Permalink to &quot;CMakeを使ってプロジェクトを生成する&quot;">​</a></h2><p>他のコンパイラやIDEで<code>yyjson</code>をビルドしたりデバッグしたりしたい場合は、以下のコマンドを試してみてください：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clang for Linux/Unix:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_C_COMPILER=clang</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_CXX_COMPILER=clang++</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Intel ICC for Linux/Unix:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_C_COMPILER=icc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_CXX_COMPILER=icpc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Other version of GCC:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_C_COMPILER=/usr/local/gcc-8.2/bin/gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_CXX_COMPILER=/usr/local/gcc-8.2/bin/g++</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Microsoft Visual Studio for Windows:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Visual Studio 16 2019&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Visual Studio 16 2019&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Win32</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Visual Studio 15 2017 Win64&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Xcode for macOS:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Xcode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Xcode for iOS:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Xcode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_SYSTEM_NAME=iOS</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Xcode with XCTest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Xcode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_TESTS=ON</span></span></code></pre></div><h2 id="cmakeを使ってドキュメントを生成する" tabindex="-1">CMakeを使ってドキュメントを生成する <a class="header-anchor" href="#cmakeを使ってドキュメントを生成する" aria-label="Permalink to &quot;CMakeを使ってドキュメントを生成する&quot;">​</a></h2><p>yyjson は <a href="https://www.doxygen.nl/" target="_blank" rel="noreferrer">doxygen</a> を使ってドキュメントを生成します (<code>doxygen</code> をインストールする必要があります)：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_DOC=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>このスクリプトを実行すると、doxygenは生成されたhtmlファイルを <code>build/doxygen/html</code> に出力します。また、生成されたドキュメントはオンラインで読むことができます: <a href="https://ibireme.github.io/yyjson/doc/doxygen/html/" target="_blank" rel="noreferrer">https://ibireme.github.io/yyjson/doc/doxygen/html/</a></p><h2 id="cmakeとctestを使ったテスト" tabindex="-1">CMakeとCTestを使ったテスト <a class="header-anchor" href="#cmakeとctestを使ったテスト" aria-label="Permalink to &quot;CMakeとCTestを使ったテスト&quot;">​</a></h2><p>すべてのテストをビルドして実行する：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_TESTS=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output-on-failure</span></span></code></pre></div><p><a href="https://valgrind.org/" target="_blank" rel="noreferrer">valgrind</a>メモリチェッカーでテストをビルドして実行する（<code>valgrind</code>がインストールされている必要があります）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_TESTS=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_ENABLE_VALGRIND=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output-on-failure</span></span></code></pre></div><p>サニタイザー（コンパイラは <code>gcc</code> または <code>clang</code> ）でビルドしてテストを実行する：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_TESTS=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_ENABLE_SANITIZE=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output-on-failure</span></span></code></pre></div><p><code>gcc</code>でビルドしてコードカバレッジを実行する：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Debug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_TESTS=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_ENABLE_COVERAGE=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output-on-failure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lcov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./CMakeFiles</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*/yyjson.*&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cov.info</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">genhtml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cov.info</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./cov_report</span></span></code></pre></div><p><code>clang</code>でビルドしてコードカバレッジを実行する：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Debug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_TESTS=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_ENABLE_COVERAGE=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_C_COMPILER=clang</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_CXX_COMPILER=clang++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debug</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LLVM_PROFILE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cov/profile-%p.profraw</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output-on-failure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctest_files</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test_\\w\\+ &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CTestTestfile.cmake</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uniq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctest_files</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ctest_files </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/  $//&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;s/ / -object /g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">llvm-profdata</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sparse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cov/profile-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.profraw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> coverage.profdata</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">llvm-cov</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ctest_files </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-instr-profile=coverage.profdata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -format=html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> coverage.html</span></span></code></pre></div><p><a href="https://llvm.org/docs/LibFuzzer.html" target="_blank" rel="noreferrer">LibFuzzer</a> を使ってファズテストをビルドして実行します (コンパイラは <code>LLVM Clang</code> とします。<code>Apple Clang</code> や <code>gcc</code> はサポートしません)：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DYYJSON_BUILD_FUZZER=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_C_COMPILER=clang</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_CXX_COMPILER=clang++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./fuzzer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dict=fuzzer.dict</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./corpus</span></span></code></pre></div><h1 id="コンパイル時オプション" tabindex="-1">コンパイル時オプション <a class="header-anchor" href="#コンパイル時オプション" aria-label="Permalink to &quot;コンパイル時オプション&quot;">​</a></h1><p>yyjsonはいくつかのコンパイル時オプションをサポートしており、これらのマクロを<code>1</code>として定義することで、コンパイル時にいくつかの機能を無効化することができます。</p><p>● <strong>YYJSON_DISABLE_READER</strong><br>を指定します。 1として定義すると、JSONリーダーを無効にします。<br>。 これは、コンパイル時にこれらの関数を無効にします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_read_opts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_read_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>これにより、バイナリサイズを約60%削減することができます。<br>。 JSONをパースする必要がない場合におすすめです。</p><p>● <strong>YYJSON_DISABLE_WRITER</strong><br>を指定します。 1として定義すると、JSONライターを無効化します。 これは、コンパイル時にこれらの関数を無効にします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_write_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_write_opts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_val_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_val_write_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_val_write_opts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_write_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_write_opts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_val_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_val_write_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_val_write_opts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>これにより、バイナリサイズを約30%削減できます。<br>。 JSONをシリアライズする必要がない場合に推奨されます。</p><p>● <strong>YYJSON_DISABLE_UTILS</strong><br>を指定します。 JSON Pointer、JSON Patch、JSON Merge Patchのサポートを無効にする場合は1を指定します。</p><p>これにより、コンパイル時にこれらの機能を無効にすることができます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_ptr_xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_ptr_xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_doc_ptr_xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_doc_ptr_xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_merge_patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yyjson_mut_merge_patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>これらの機能が不要な場合におすすめです。</p><p>● <strong>YJSON_DISABLE_FAST_FP_CONV</strong><br> です。 1として定義すると、yyjsonの高速浮動小数点数変換を無効にし、代わりにlibcの <code>strtod/snprintf</code> を使用します。<br> これにより、バイナリサイズを約30%削減できますが、浮動小数点数の読み書きの速度が著しく低下します。<br> また、浮動小数点数の読み書きの速度が低下するため、浮動小数点数の読み書きの速度が低下します。 浮動小数点数を多く含むJSONを扱う必要がない場合は、この方法をお勧めします。</p><p>● <strong>YYJSON_DISABLE_NON_STANDARD</strong><br>を指定します。 1として定義すると、コンパイル時に非標準のJSONサポートを無効にします：</p><ul><li><code>NaN</code>、<code>Infinity</code>などのinf/nanリテラルの読み書きができます。</li><li>1行および複数行のコメント</li><li>オブジェクトや配列の末尾にカンマが1つある。</li><li>文字列の値で無効なユニコード</li></ul><p>これは、これらのランタイムオプションも無効にします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YYJSON_READ_ALLOW_INF_AND_NAN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YYJSON_READ_ALLOW_COMMENTS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YYJSON_READ_ALLOW_TRAILING_COMMAS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YYJSON_READ_ALLOW_INVALID_UNICODE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YYJSON_WRITE_ALLOW_INF_AND_NAN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YYJSON_WRITE_ALLOW_INVALID_UNICODE</span></span></code></pre></div><p>これにより、バイナリサイズを約10%削減し、パフォーマンスを若干向上させます。<br> 非標準のJSONを扱う必要がない場合に推奨されます。</p><p>● <strong>YYJSON_EXPORTS</strong><br>を指定します。 Windows DLLとしてライブラリをビルドする際に、シンボルをエクスポートする場合に1として定義します。</p><p>● <strong>YYJSON_IMPORTS</strong><br>を指定します。 Windows DLLとしてライブラリを使用する際に、シンボルをインポートするために1として定義してください。</p>`,67)]))}const g=i(p,[["render",h]]);export{F as __pageData,g as default};
