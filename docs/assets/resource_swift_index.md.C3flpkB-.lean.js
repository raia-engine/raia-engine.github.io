import{_ as t,c as i,a2 as o,o as l}from"./chunks/framework.CKGreiRV.js";const f=JSON.parse('{"title":"Swiftプログラミング言語 (6)","description":"","frontmatter":{},"headers":[],"relativePath":"resource/swift/index.md","filePath":"resource/swift/index.md","lastUpdated":null}'),s={name:"resource/swift/index.md"};function n(g,r,a,e,b,d){return l(),i("div",null,r[0]||(r[0]=[o('<h1 id="swiftプログラミング言語-6" tabindex="-1">Swiftプログラミング言語 (6) <a class="header-anchor" href="#swiftプログラミング言語-6" aria-label="Permalink to &quot;Swiftプログラミング言語 (6)&quot;">​</a></h1><h2 id="トピック" tabindex="-1">トピック <a class="header-anchor" href="#トピック" aria-label="Permalink to &quot;トピック&quot;">​</a></h2><h3 id="swiftへようこそ" tabindex="-1">Swiftへようこそ <a class="header-anchor" href="#swiftへようこそ" aria-label="Permalink to &quot;Swiftへようこそ&quot;">​</a></h3><ul><li><strong>Swiftについて</strong><br> 言語の高レベルな目標を理解します。</li><li><strong>バージョン互換性</strong><br> 旧バージョンの言語モードで利用可能な機能について学びます。</li><li><strong>Swiftツアー</strong><br> Swiftの機能と構文を探索します。</li></ul><h3 id="言語ガイド" tabindex="-1">言語ガイド <a class="header-anchor" href="#言語ガイド" aria-label="Permalink to &quot;言語ガイド&quot;">​</a></h3><ul><li><strong>基本</strong><br> よく使われるデータ型と基本的な構文の書き方を学びます。</li><li><strong>基本演算子</strong><br> 代入、算術、比較などの操作を行います。</li><li><strong>文字列と文字</strong><br> テキストを格納および操作します。</li><li><strong>コレクション型</strong><br> 配列、セット、辞書を使ってデータを整理します。</li><li><strong>制御フロー</strong><br> 分岐、ループ、早期終了を用いてコードを構成します。</li><li><strong>関数</strong><br> 関数の定義と呼び出し、引数へのラベル付け、戻り値の使用を学びます。</li><li><strong>クロージャ</strong><br> 名前付き関数を作らずに、一緒に実行されるコードをグループ化します。</li><li><strong>列挙型</strong><br> 取りうる値のリストを定義するカスタム型をモデル化します。</li><li><strong>構造体とクラス</strong><br> データをカプセル化するカスタム型をモデル化します。</li><li><strong>プロパティ</strong><br> インスタンスや型の一部である格納・計算プロパティにアクセスします。</li><li><strong>メソッド</strong><br> インスタンスや型の一部として関数を定義および呼び出します。</li><li><strong>サブスクリプト</strong><br> コレクションの要素にアクセスします。</li><li><strong>継承</strong><br> サブクラスを使用して機能を追加またはオーバーライドします。</li><li><strong>初期化</strong><br> 型の格納プロパティに初期値を設定し、一度きりのセットアップを行います。</li><li><strong>デイニシャライゼーション</strong><br> カスタムのクリーンアップが必要なリソースを解放します。</li><li><strong>オプショナルチェーン</strong><br> オプショナル値をアンラップせずに、そのメンバーにアクセスします。</li><li><strong>エラーハンドリング</strong><br> エラーへの対応と回復を行います。</li><li><strong>並行処理</strong><br> 非同期操作を実行します。</li><li><strong>マクロ</strong><br> コンパイル時にコードを生成するためのマクロを使用します。</li><li><strong>型キャスト</strong><br> 値の実行時の型を確認し、より具体的な型情報を付与します。</li><li><strong>ネスト型</strong><br> 別の型のスコープ内に型を定義します。</li><li><strong>拡張</strong><br> 既存の型に機能を追加します。</li><li><strong>プロトコル</strong><br> 準拠する型が実装すべき要件を定義します。</li><li><strong>ジェネリクス</strong><br> 複数の型で動作するコードを記述し、それらの型に対する要件を指定します。</li><li><strong>不透明型とボックス化プロトコル型</strong><br> 値の型に関する実装の詳細を隠蔽します。</li><li><strong>自動参照カウント (ARC)</strong><br> オブジェクトのライフタイムとその関係をモデル化します。</li><li><strong>メモリ安全性</strong><br> メモリアクセスの競合を回避するようにコードを構成します。</li><li><strong>アクセス制御</strong><br> 宣言、ファイル、およびモジュールごとにコードの可視性を管理します。</li><li><strong>高度な演算子</strong><br> カスタム演算子の定義、ビット演算、ビルダー構文を使用します。</li></ul><h3 id="言語リファレンス" tabindex="-1">言語リファレンス <a class="header-anchor" href="#言語リファレンス" aria-label="Permalink to &quot;言語リファレンス&quot;">​</a></h3><ul><li><strong>言語リファレンスについて</strong><br> 形式文法が使用する表記について学びます。</li><li><strong>字句構造</strong><br> 構文の最も低レベルな要素を使用します。</li><li><strong>型</strong><br> 組み込みの名前付き型や合成型を使用します。</li><li><strong>式</strong><br> 値へのアクセス、変更、および代入を行います。</li><li><strong>文</strong><br> 式をグループ化し、実行の流れを制御します。</li><li><strong>宣言</strong><br> 型、演算子、変数、およびその他の名前や構造を導入します。</li><li><strong>属性</strong><br> 宣言や型に情報を追加します。</li><li><strong>パターン</strong><br> 値のマッチングおよび分解を行います。</li><li><strong>ジェネリックパラメータと引数</strong><br> 宣言を一般化し、具体的な型から抽象化します。</li><li><strong>文法のまとめ</strong><br> 形式文法全体を読みます。</li></ul><h3 id="改訂履歴" tabindex="-1">改訂履歴 <a class="header-anchor" href="#改訂履歴" aria-label="Permalink to &quot;改訂履歴&quot;">​</a></h3><ul><li><strong>ドキュメントの改訂履歴</strong><br> この書籍への最近の変更を確認します。</li></ul><hr>',11)]))}const u=t(s,[["render",n]]);export{f as __pageData,u as default};
