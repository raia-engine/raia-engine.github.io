import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"プログラミング・マニュアル","description":"","frontmatter":{},"headers":[],"relativePath":"resource/miniaudio/programming_manual.md","filePath":"resource/miniaudio/programming_manual.md","lastUpdated":null}'),p={name:"resource/miniaudio/programming_manual.md"};function h(e,s,l,k,d,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="プログラミング・マニュアル" tabindex="-1">プログラミング・マニュアル <a class="header-anchor" href="#プログラミング・マニュアル" aria-label="Permalink to &quot;プログラミング・マニュアル&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1-はじめに">1. はじめに</a><ul><li><a href="#_1-1-低レベルapi">1.1. 低レベルAPI</a></li><li><a href="#_1-2-高レベルapi">1.2. 高レベルAPI</a></li></ul></li><li><a href="#_2-ビルド">2. ビルド</a><ul><li><a href="#_2-1-windows">2.1. Windows</a></li><li><a href="#_2-2-macosおよびios">2.2. macOSおよびiOS</a></li><li><a href="#_2-3-linux">2.3. Linux</a></li><li><a href="#_2-4-bsd">2.4. BSD</a></li><li><a href="#_2-5-android">2.5. Android</a></li><li><a href="#_2-6-emscripten">2.6. Emscripten</a></li><li><a href="#_2-7-ビルドオプション">2.7. ビルドオプション</a></li></ul></li><li><a href="#_3-定義">3. 定義</a><ul><li><a href="#_3-1-サンプル">3.1. サンプル</a></li><li><a href="#_3-2-フレーム-pcmフレーム">3.2. フレーム / PCMフレーム</a></li><li><a href="#_3-3-チャンネル">3.3. チャンネル</a></li><li><a href="#_3-4-サンプルレート">3.4. サンプルレート</a></li><li><a href="#_3-5-フォーマット">3.5. フォーマット</a></li></ul></li><li><a href="#_4-データソース">4. データソース</a><ul><li><a href="#_4-1-カスタムデータソース">4.1. カスタムデータソース</a></li></ul></li><li><a href="#_5-エンジン">5. エンジン</a></li><li><a href="#_6-リソース管理">6. リソース管理</a><ul><li><a href="#_6-1-非同期ローディングと同期">6.1. 非同期ローディングと同期</a></li><li><a href="#_6-2-リソースマネージャの実装詳細">6.2. リソースマネージャの実装詳細</a></li></ul></li><li><a href="#_7-ノードグラフ">7. ノードグラフ</a><ul><li><a href="#_7-1-タイミング">7.1. タイミング</a></li><li><a href="#_7-2-スレッドセーフティとロック">7.2. スレッドセーフティとロック</a></li></ul></li><li><a href="#_8-デコード">8. デコード</a><ul><li><a href="#_8-1-カスタムデコーダ">8.1. カスタムデコーダ</a></li></ul></li><li><a href="#_9-エンコーディング">9. エンコーディング</a></li><li><a href="#_10-データ変換">10. データ変換</a><ul><li><a href="#_10-1-サンプルフォーマット変換">10.1. サンプルフォーマット変換</a></li><li><a href="#_10-1-1-ディザリング">10.1.1. ディザリング</a></li><li><a href="#_10-2-チャンネル変換">10.2. チャンネル変換</a></li><li><a href="#_10-2-1-チャンネルマッピング">10.2.1. チャンネルマッピング</a></li><li><a href="#_10-3-リサンプリング">10.3. リサンプリング</a></li><li><a href="#_10-4-一般的なデータ変換">10.4. 一般的なデータ変換</a></li></ul></li><li><a href="#_11-フィルタリング">11. フィルタリング</a><ul><li><a href="#_11-1-バイカッドフィルタリング">11.1. バイカッドフィルタリング</a></li><li><a href="#_11-2-ローパスフィルタリング">11.2. ローパスフィルタリング</a></li><li><a href="#_11-3-ハイパスフィルタリング">11.3. ハイパスフィルタリング</a></li><li><a href="#_11-4-バンドパスフィルタリング">11.4. バンドパスフィルタリング</a></li><li><a href="#_11-5-ノッチフィルタリング">11.5. ノッチフィルタリング</a></li><li><a href="#_11-6-ピーキングeqフィルタリング">11.6. ピーキングEQフィルタリング</a></li><li><a href="#_11-7-ローシェルフフィルタリング">11.7. ローシェルフフィルタリング</a></li><li><a href="#_11-8-ハイシェルフフィルタリング">11.8. ハイシェルフフィルタリング</a></li></ul></li><li><a href="#_12-波形とノイズの生成">12. 波形とノイズの生成</a><ul><li><a href="#_12-1-波形">12.1. 波形</a></li><li><a href="#_12-2-ノイズ">12.2. ノイズ</a></li></ul></li><li><a href="#_13-オーディオバッファ">13. オーディオバッファ</a></li><li><a href="#_14-リングバッファ">14. リングバッファ</a></li><li><a href="#_15-バックエンド">15. バックエンド</a><ul><li><a href="#_15-1-wasapi">15.1. WASAPI</a></li><li><a href="#_15-2-pulseaudio">15.2. PulseAudio</a></li><li><a href="#_15-3-android">15.3. Android</a></li><li><a href="#bsd">BSD</a></li><li><a href="#_15-4-uwp">15.4. UWP</a></li><li><a href="#_15-5-web-audio-emscripten">15.5. Web Audio / Emscripten</a></li></ul></li><li><a href="#_16-最適化のヒント">16. 最適化のヒント</a><ul><li><a href="#_16-1-低レベルapi">16.1. 低レベルAPI</a></li><li><a href="#_16-2-高レベルapi">16.2. 高レベルAPI</a></li></ul></li><li><a href="#_17-その他の注意事項">17. その他の注意事項</a></li></ul></nav><h2 id="_1-はじめに" tabindex="-1">1. はじめに <a class="header-anchor" href="#_1-はじめに" aria-label="Permalink to &quot;1. はじめに&quot;">​</a></h2><p>miniaudioは、オーディオの再生とキャプチャのためのシングルファイルライブラリです。使用するには、以下のように1つの.cファイルに記述します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MINIAUDIO_IMPLEMENTATION</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;miniaudio.h&quot;</span></span></code></pre></div><p>他の部分のプログラムでも、通常のヘッダーと同様に<code>#include &quot;miniaudio.h&quot;</code>と記述することができます。</p><p>miniaudioには、低レベルAPIと高レベルAPIの両方が含まれています。低レベルAPIは、自分でミキシングをすべて行いたい人や、基盤となるオーディオデバイスに軽量なインターフェースを求める人に適しています。一方、高レベルAPIは、複雑なミキシングやエフェクトの要件がある人に適しています。</p><p>miniaudioでは、オブジェクトは透明な構造体です。他の多くのライブラリとは異なり、不透明なオブジェクトへのハンドルはありません。そのため、オブジェクトのメモリを自分で確保する必要があります。このドキュメントに示されている例では、オブジェクトがスタック上に宣言されていることがよくあります。これらの例を自分のコードに翻訳する際には、オブジェクトを誤ってスタック上に宣言してしまい、関数が戻ると無効になってしまわないよう注意が必要です。また、オブジェクトのメモリアドレスがその寿命中ずっと同じであることを確保しなければなりません。したがって、オブジェクトのコピーを作成することはできません。</p><p>ライブラリ全体で、config/initパターンが使用されています。このパターンは、configオブジェクトを設定し、それを初期化ルーチンに渡すというものです。このシステムの利点は、configオブジェクトを論理的なデフォルト値で初期化し、新しいプロパティを追加してもAPIを壊さないことです。configオブジェクトはスタック上に確保することができ、対応するオブジェクトの初期化後に保持する必要はありません。</p><h3 id="_1-1-低レベルapi" tabindex="-1">1.1. 低レベルAPI <a class="header-anchor" href="#_1-1-低レベルapi" aria-label="Permalink to &quot;1.1. 低レベルAPI&quot;">​</a></h3><p>低レベルAPIでは、オーディオデバイスの生のオーディオデータにアクセスできます。再生、キャプチャ、全二重通信、およびループバック（WASAPIのみ）をサポートしています。デバイスを列挙して、接続したい物理デバイスを特定できます。</p><p>低レベルAPIでは、物理デバイスの抽象化として「デバイス」の概念を使用します。このアイデアは、オーディオを発するまたはキャプチャする物理デバイスを選択し、miniaudioが指示する際にデバイスにデータを送受信するというものです。データはデバイスに対して、初期化時に指定するコールバックを通じて非同期に送受信されます。</p><p>デバイスを初期化する際には、まずそれを構成する必要があります。デバイス構成では、コールバックを通じて提供されるデータの形式、内部バッファのサイズ、およびオーディオを発するまたはキャプチャするデバイスのIDなどを指定できます。</p><p>デバイス構成を設定したら、デバイスを初期化できます。デバイスを初期化する際には、事前にデバイスオブジェクトのメモリを割り当てる必要があります。これにより、アプリケーションはメモリの割り当て方法を完全に制御できます。以下の例では、スタック上に再生デバイスを初期化していますが、状況に応じてヒープに割り当てることもできます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint32 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 再生モードではデータをpOutputにコピーします。キャプチャモードではpInputからデータを読み取ります。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 全二重モードでは、pOutputとpInputの両方が有効になり、pInputからpOutputにデータを移動できます。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // frameCount以上のフレームを処理しないようにしてください。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_device_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_device_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_device_type_playback);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.playback.format   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_format_f32;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // デバイスのネイティブフォーマットを使用するにはma_format_unknownを設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.playback.channels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // デバイスのネイティブチャンネル数を使用するには0を設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.sampleRate        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // デバイスのネイティブサンプルレートを使用するには0を設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.dataCallback      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data_callback;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // miniaudioがデータを必要とするときにこの関数が呼び出されます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.pUserData         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyCustomData;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // デバイスオブジェクト（device.pUserData）からアクセスできます。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_device device;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">device) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // デバイスの初期化に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_device_start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">device);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // デバイスはデフォルトでスリープ状態なので、手動で起動する必要があります。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここで何かを実行します。おそらくプログラムのメインループです。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_device_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">device);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、<code>data_callback()</code>がデバイスからオーディオデータを読み書きする場所です。再生モードでは、出力バッファ（例では<code>pOutput</code>）にオーディオデータを書き込むことでスピーカーから音を出します。キャプチャモードでは、入力バッファ（<code>pInput</code>）からデータを読み取り、マイクロフォンでキャプチャされた音を抽出します。<code>frameCount</code>パラメータは、出力バッファに書き込めるフレーム数と入力バッファから読み取れるフレーム数を示します。フレームとは、各チャンネルに対して1つのサンプルを指します。例えば、ステレオストリーム（2チャンネル）では、1フレームは2つのサンプル（左用と右用）です。チャンネル数はデバイス構成で定義され、各サンプルのバイトサイズはデバイス構成で指定されるサンプルフォーマットによって決まります。マルチチャンネルオーディオデータは常にインターリーブ形式で、各フレームのサンプルがメモリ内で隣接して格納されます。例えば、ステレオストリームでは、最初のペアのサンプルが最初のフレームの左と右のサンプル、次のペアが2番目のフレームの左と右のサンプル、という具合です。</p><p>デバイスの構成は<code>ma_device_config</code>構造体で定義されます。構成オブジェクトは常に<code>ma_device_config_init()</code>で初期化されます。これにより、論理的なデフォルトで初期化され、新しいメンバーが<code>ma_device_config</code>構造体に追加されてもプログラムが壊れないようにします。上記の例では、比較的シンプルで標準的なデバイス構成を使用しています。<code>ma_device_config_init()</code>の呼び出しには1つのパラメータがあり、それはデバイスが再生、キャプチャ、デュプレックスまたはループバックデバイスかどうかを指定します（ループバックデバイスはすべてのバックエンドでサポートされているわけではありません）。<code>config.playback.format</code>メンバーはサンプルフォーマットを設定し、以下のいずれかになります（すべてのフォーマットはネイティブエンディアンです）：</p><table tabindex="0"><thead><tr><th>記号</th><th>説明</th><th>範囲</th></tr></thead><tbody><tr><td>ma_format_f32</td><td>32ビット浮動小数点</td><td>[-1, 1]</td></tr><tr><td>ma_format_s16</td><td>16ビット符号付き整数</td><td>[-32768, 32767]</td></tr><tr><td>ma_format_s24</td><td>24ビット符号付き整数（タイトパック）</td><td>[-8388608, 8388607]</td></tr><tr><td>ma_format_s32</td><td>32ビット符号付き整数</td><td>[-2147483648, 2147483647]</td></tr><tr><td>ma_format_u8</td><td>8ビット符号なし整数</td><td>[0, 255]</td></tr></tbody></table><p><code>config.playback.channels</code>メンバーは、デバイスで使用するチャンネル数を設定します。チャンネル数は<code>MA_MAX_CHANNELS</code>を超えることはできません。<code>config.sampleRate</code>メンバーはサンプルレートを設定し（フルデュプレックス構成では再生とキャプチャの両方で同じでなければなりません）、通常は44100または48000に設定されますが、任意の値に設定できます。ただし、8000から384000の間に保つことが推奨されます。</p><p>フォーマット、チャンネル数、およびサンプルレートをデフォルト値のままにすると、内部デバイスのネイティブ構成が使用されるため、miniaudioの自動データ変換のオーバーヘッドを回避したい場合に便利です。</p><p>サンプルフォーマット、チャンネル数、サンプルレートに加えて、データコールバックとユーザーデータポインタも構成を介して設定されます。ユーザーデータポインタはコールバックにパラメータとして渡されるのではなく、<code>ma_device</code>の<code>pUserData</code>メンバーに設定されます。これは、すべてのminiaudio構造体が透明であるため、直接アクセスできます。</p><p>デバイスの初期化は<code>ma_device_init()</code>で行います。これにより、何か問題があれば結果コードが返されます。成功した場合は<code>MA_SUCCESS</code>が返されます。初期化が完了すると、デバイスは停止状態になります。起動するには<code>ma_device_start()</code>を使用します。デバイスの初期化解除はデバイスを停止させますが、上記の例が行っているように、<code>ma_device_stop()</code>でもデバイスを停止できます。デバイスを再開するには、単に再び<code>ma_device_start()</code>を呼び出します。コールバック内でデバイスを停止または起動しないことが重要です。これを行うとデッドロックが発生します。代わりに、デバイスを停止する必要があることを示す変数を設定するか、イベントをシグナルして、別のスレッドで処理します。以下のAPIはコールバック内で呼び出してはいけません：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_init_ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>コールバック内でデバイスの初期化解除や再初期化を試みてはいけません。また、コールバック内でデバイスを停止および起動することも避けるべきです。他にも要件に応じてコールバック内で行うべきでないことがいくつかありますが、これはスレッドセーフの問題ではなく、リアルタイム処理の問題であり、この入門の範囲を超えています。</p><p>上記の例では再生デバイスの初期化を示していますが、キャプチャでも全く同じように機能します。設定時にデバイスタイプを<code>ma_device_type_playback</code>から<code>ma_device_type_capture</code>に変更するだけです。例えば次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_device_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_device_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_device_type_capture);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.capture.format   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MY_FORMAT;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.capture.channels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MY_CHANNEL_COUNT;</span></span></code></pre></div><p>データコールバック内では、入力バッファ（上記の例では<code>pInput</code>）からデータを読み取り、出力バッファはそのままにします（デバイスタイプが<code>ma_device_type_capture</code>に設定されている場合、出力バッファはNULLになります）。</p><p>以下は利用可能なデバイスタイプと、コールバック内でのバッファの扱い方です：</p><table tabindex="0"><thead><tr><th>デバイスタイプ</th><th>コールバックの動作</th></tr></thead><tbody><tr><td>ma_device_type_playback</td><td>出力バッファに書き込み、入力バッファはそのまま。</td></tr><tr><td>ma_device_type_capture</td><td>入力バッファから読み取り、出力バッファはそのまま。</td></tr><tr><td>ma_device_type_duplex</td><td>入力バッファから読み取り、出力バッファに書き込み。</td></tr><tr><td>ma_device_type_loopback</td><td>入力バッファから読み取り、出力バッファはそのまま。</td></tr></tbody></table><p>上記の例では、サンプルフォーマットとチャンネル数が再生とキャプチャで別々に指定されていることに気づくでしょう。これは、フルデュプレックスシステムにおいて再生デバイスとキャプチャデバイスで異なるデータフォーマットをサポートするためです。例えば、モノラルストリーム（一つのチャンネル）としてオーディオデータをキャプチャし、ステレオスピーカーシステムに音を出力したい場合があります。フルデュプレックス構成で再生とキャプチャに異なるフォーマットを使用する場合は、自分でデータを変換する必要があります。これを助けるための関数が用意されており、それについては後で説明します。</p><p>上記の例では、接続する物理デバイスを指定していないため、オペレーティングシステムのデフォルトデバイスが使用されます。複数の物理デバイスが接続されていて、特定のデバイスを使用したい場合は、構成内でデバイスIDを指定する必要があります。以下のように設定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.playback.pDeviceID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyPlaybackDeviceID;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 再生またはデュプレックスデバイスの場合のみ。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.capture.pDeviceID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyCaptureDeviceID;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // キャプチャ、デュプレックス、またはループバックデバイスの場合のみ。</span></span></code></pre></div><p>デバイスIDを取得するには、デバイス列挙を実行する必要があります。しかし、これは「コンテキスト」という新しい概念の使用を必要とします。概念的には、コンテキストはデバイスの上位に位置します。1つのコンテキストには多くのデバイスが属します。コンテキストの目的は、バックエンドをよりグローバルなレベルで表現し、個々のデバイスの範囲外の操作を実行することです。主に、バックエンドライブラリに対するランタイムリンクの実行、バックエンドの初期化、およびデバイスの列挙に使用されます。以下の例はデバイスを列挙する方法を示しています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_context context;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_context_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_device_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pPlaybackInfos;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint32 playbackCount;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_device_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pCaptureInfos;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint32 captureCount;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_context_get_devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pPlaybackInfos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">playbackCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pCaptureInfos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">captureCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 各デバイス情報をループ処理し、何らかの操作を行います。ここでは、インデックスと共に名前を印刷しています。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ユーザーにどのデバイスを使用するか選択させることができます。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ma_uint32 iDevice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; iDevice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playbackCount; iDevice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, iDevice, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pPlaybackInfos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[iDevice].name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_device_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_device_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_device_type_playback);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.playback.pDeviceID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pPlaybackInfos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[chosenPlaybackDeviceIndex].id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.playback.format    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MY_FORMAT;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.playback.channels  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MY_CHANNEL_COUNT;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.sampleRate         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MY_SAMPLE_RATE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.dataCallback       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data_callback;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.pUserData          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyCustomData;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_device device;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_device_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_context_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>この例で最初に行うことは、<code>ma_context_init()</code>を使用して<code>ma_context</code>オブジェクトを初期化することです。最初のパラメータは<code>ma_backend</code>値のリストへのポインタで、デフォルトのバックエンド優先順位を上書きするために使用されます。この例のようにNULLの場合、miniaudioのデフォルト優先順位が使用されます。2番目のパラメータは、最初のパラメータが指す配列にリストされているバックエンドの数です。3番目のパラメータは<code>ma_context_config</code>オブジェクトへのポインタで、NULLにするとデフォルト値が使用されます。コンテキスト構成は、ログコールバック、カスタムメモリ割り当てコールバック、ユーザー定義データ、および一部のバックエンド固有の構成を設定するために使用されます。</p><p>コンテキストを初期化すると、デバイスを列挙できます。上記の例では、よりシンプルな<code>ma_context_get_devices()</code>を使用していますが、<code>ma_context_enumerate_devices()</code>を使用してデバイスを処理するコールバックを使用することもできます。<code>ma_context_get_devices()</code>を使用する場合、出力時にma_device_info構造体のリストを含むバッファへのポインタが設定されるポインタを提供します。また、返されたバッファ内の項目数を受け取るunsigned integerへのポインタも提供します。返されたバッファはminiaudioが内部でメモリ管理を行うため、自分で解放しないでください。</p><p><code>ma_device_info</code>構造体には、デバイス構成に渡すIDである<code>id</code>メンバーが含まれています。また、UIを介してユーザーにデバイスのリストを提示するのに役立つデバイス名も含まれています。</p><p>自分のコンテキストを作成する場合、デバイスを初期化するときにそれを<code>ma_device_init()</code>に渡します。最初の例のようにNULLを渡すと、miniaudioがコンテキストを作成しますが、既にコンテキストを作成している場合はそれを避けたいでしょう。内部的にコンテキストはそのポインタによってのみ追跡されるため、<code>ma_context</code>オブジェクトの位置を変更してはいけません。もしこれが問題になる場合は、<code>malloc()</code>を使用してコンテキストのメモリを確保することを検討してください。</p><h3 id="_1-2-高レベルapi" tabindex="-1">1.2. 高レベルAPI <a class="header-anchor" href="#_1-2-高レベルapi" aria-label="Permalink to &quot;1.2. 高レベルAPI&quot;">​</a></h3><p>高レベルAPIは主に次の3つの部分から構成されています：</p><ul><li>サウンドの読み込みとストリーミングのためのリソース管理</li><li>高度なミキシングとエフェクト処理のためのノードグラフ</li><li>リソースマネージャーとノードグラフをラップする高レベル「エンジン」</li></ul><p>リソースマネージャー（<code>ma_resource_manager</code>）は、サウンドの読み込みに使用されます。完全にメモリにサウンドを読み込むことや、ストリーミングをサポートしています。また、参照カウントを処理し、同じサウンドが複数回読み込まれるのを防ぎます。</p><p>ノードグラフはミキシングとエフェクト処理に使用されます。アイデアとしては、各ノードの出力を別のノードの入力に接続することで、複数のノードをグラフに接続します。各ノードは独自のエフェクトを実装できます。ノードを連鎖させることで、高度なミキシングとエフェクト処理が可能になります。</p><p>エンジンはリソースマネージャーとノードグラフの両方をカプセル化して、シンプルで使いやすい高レベルAPIを提供します。リソースマネージャーとノードグラフのAPIについては、このマニュアルの後のセクションで詳しく説明します。</p><p>以下のコードは、デフォルトの構成を使用してエンジンを初期化する方法を示しています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine engine;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // エンジンの初期化に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これはエンジンインスタンスを作成し、内部的にデバイスを初期化します。このデバイスには<code>ma_engine_get_device()</code>を使用してアクセスできます。また、リソースマネージャーも初期化され、<code>ma_engine_get_resource_manager()</code>を使用してアクセスできます。エンジン自体はノードグラフ（<code>ma_node_graph</code>）であるため、エンジンオブジェクトへのポインタを任意の<code>ma_node_graph</code> APIにキャストして渡すことができます。代わりに、キャストの代わりに<code>ma_engine_get_node_graph()</code>を使用することもできます。</p><p>miniaudioのすべてのオブジェクト、上記の例にある<code>ma_engine</code>オブジェクトを含む、は透明な構造体です。miniaudioには不透明な構造体へのハンドルはありませんので、それらをどのように宣言するかに注意が必要です。上記の例ではスタック上に宣言していますが、これでは関数が戻ると構造体が無効になります。エンジンをヒープに割り当てる方が適切な場合、標準の<code>malloc()</code>呼び出しや好きなヒープ割り当てルーチンを使用して簡単に行えます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pEngine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pEngine));</span></span></code></pre></div><p><code>ma_engine</code> APIはminiaudio全体で使用されるconfig/initパターンを使用しています。エンジンを構成するには、<code>ma_engine_config</code>オブジェクトに記入し、それを<code>ma_engine_init()</code>の最初のパラメータに渡します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine engine;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine_config engineConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.pResourceManager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCustomResourceManager;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &lt;-- 前の段階で初期化されたもの。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これにより、カスタム設定を使用してエンジンインスタンスが作成されます。この例では、エンジンが内部的にリソースマネージャを初期化するのではなく、カスタムリソースマネージャを指定する方法を示しています。これは、複数のエンジンが同じリソースマネージャを共有したい場合に特に便利です。</p><p>エンジンは不要になったときに<code>ma_engine_uninit()</code>で初期化解除する必要があります。</p><p>デフォルトではエンジンは開始されますが、サウンドが初期化されていないため何も再生されません。最も簡単で柔軟性のないサウンド再生方法は次のようになります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_play_sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>これは、miniaudioが「インライン」サウンドと呼ぶものを再生します。この方法では、サウンドは一度再生され、その後内部サウンドはリサイクルのために準備されます。最後のパラメータはサウンドが関連付けられるサウンドグループを指定するために使用されますが、これは後で説明します。この方法は簡単ですが、柔軟性と機能に欠けます。より柔軟な方法は、最初にサウンドを初期化することです：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_sound sound;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_sound_init_from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>これは指定されたサウンドファイルの単一インスタンスを表す<code>ma_sound</code>オブジェクトを返します。同じファイルを同時に複数回再生したい場合、インスタンスごとにサウンドを作成する必要があります。</p><p>サウンドは<code>ma_sound_uninit()</code>で初期化解除する必要があります。</p><p>サウンドはデフォルトでは開始されません。<code>ma_sound_start()</code>でサウンドを開始し、<code>ma_sound_stop()</code>で停止します。サウンドが停止されても最初に巻き戻されることはありません。サウンドの最初に戻るには、<code>ma_sound_seek_to_pcm_frame(&amp;sound, 0)</code>を使用します。デフォルトでは、サウンドの開始と停止は即時に行われますが、特定の時間にサウンドを開始または停止するようにスケジュールすることが便利な場合があります。これは次の関数を使用して行えます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_start_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_start_time_in_milliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_stop_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_stop_time_in_milliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>開始/停止時間はエンジンによって制御される絶対タイマーに基づいて指定する必要があります。現在のグローバルタイム（PCMフレーム単位）は<code>ma_engine_get_time_in_pcm_frames()</code>で取得できます。必要に応じて、同期目的のためにエンジンのグローバルタイムを<code>ma_engine_set_time_in_pcm_frames()</code>で変更できます。開始時間をスケジュールするには、明示的に<code>ma_sound_start()</code>を呼び出す必要があります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_start_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_get_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_get_sample_rate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>ma_sound_init_from_file()</code>の第3パラメータは、サウンドの読み込み方法とそのサウンドの機能を制御するフラグのセットです。デフォルトでは、サウンドはファイルシステムから完全にメモリに同期的に読み込まれ、デコードは行われません。サウンドをメモリに格納する前にデコードしたい場合は、<code>MA_SOUND_FLAG_DECODE</code>フラグを指定する必要があります。これは、ロード段階などの早い段階でデコードのコストを負担したい場合に便利です。このオプションを指定しない場合、デコードはミキシング時に動的に行われ、オーディオスレッドで高コストになる可能性があります。</p><p>サウンドを非同期で読み込みたい場合は、<code>MA_SOUND_FLAG_ASYNC</code>フラグを指定できます。これにより、<code>ma_sound_init_from_file()</code>はすぐに戻りますが、サウンドがデコードされるまで再生は開始されません。</p><p>第4パラメータはサウンドグループへのポインタです。サウンドグループは、エフェクト処理とボリュームコントロールを持つグループにサウンドを整理するためのメカニズムです。例として、ゲームでは効果音（sfx）、ボイス、音楽に別々のグループを持つことがあります。これらの各グループは独立したボリュームコントロールを持ちます。サウンドグループを初期化するには、<code>ma_sound_group_init()</code>または<code>ma_sound_group_init_ex()</code>を使用します。</p><p>サウンドとサウンドグループはエンジンのノードグラフ内のノードであり、任意の<code>ma_node</code> APIに接続できます。これにより、サウンドとサウンドグループをエフェクトノードに接続して複雑なエフェクトチェーンを作成することが可能になります。</p><p>サウンドのボリュームは<code>ma_sound_set_volume()</code>で変更できます。デシベルボリュームコントロールを好む場合は、<code>ma_volume_db_to_linear()</code>を使用してデシベル表現からリニア表現に変換できます。</p><p>パンニングとピッチングは<code>ma_sound_set_pan()</code>と<code>ma_sound_set_pitch()</code>でサポートされています。サウンドのピッチが<code>ma_sound_set_pitch()</code>やドップラー効果で変更されることがない場合、最適化のためにサウンドの初期化時に<code>MA_SOUND_FLAG_NO_PITCH</code>フラグを指定できます。</p><p>デフォルトでは、サウンドとサウンドグループには空間化（スペーシャライゼーション）が有効になっています。サウンドを空間化したくない場合は、<code>MA_SOUND_FLAG_NO_SPATIALIZATION</code>フラグを指定してサウンドを初期化します。空間化モデルは比較的シンプルで、機能面ではOpenALとほぼ同等です。HRTF（頭部伝達関数）や環境閉塞は現在サポートされていませんが、将来的には計画されています。サポートされている機能には以下が含まれます：</p><ul><li>サウンドとリスナーの位置と向きの制御（コーンを使用）</li><li>減衰モデル：なし、逆数、線形、指数</li><li>ドップラー効果</li></ul><p>サウンドは<code>ma_sound_set_fade_in_pcm_frames()</code>を使用してフェードインおよびフェードアウトさせることができます。</p><p>サウンドが現在再生中かどうかを確認するには、<code>ma_sound_is_playing()</code>を使用します。サウンドが終わりに到達しているかどうかを確認するには、<code>ma_sound_at_end()</code>を使用します。サウンドのループ再生は、<code>ma_sound_set_looping()</code>で制御できます。サウンドがループ再生されているかどうかを確認するには、<code>ma_sound_is_looping()</code>を使用します。</p><h2 id="_2-ビルド" tabindex="-1">2. ビルド <a class="header-anchor" href="#_2-ビルド" aria-label="Permalink to &quot;2. ビルド&quot;">​</a></h2><p>miniaudioは、依存関係をダウンロードまたはインストールすることなく、そのまま動作するはずです。プラットフォーム固有の詳細については以下を参照してください。</p><p>GCCおよびClangでは、SIMD最適化のために<code>-msse2</code>, <code>-mavx2</code>などが必要です。</p><p><code>__sync_val_compare_and_swap_8</code>, <code>__atomic_load_8</code>などの未定義の参照に関するエラーが発生した場合、<code>-latomic</code>でリンクする必要があります。</p><h3 id="_2-1-windows" tabindex="-1">2.1. Windows <a class="header-anchor" href="#_2-1-windows" aria-label="Permalink to &quot;2.1. Windows&quot;">​</a></h3><p>Windowsビルドは、すべての一般的なコンパイラでインクルードパスやライブラリのリンクを設定することなくクリーンにコンパイルされるはずです。</p><p>UWPビルドでは、<code>ActivateAudioInterfaceAsync()</code>の未解決外部シンボルに関するエラーが発生した場合、<code>mmdevapi.lib</code>とリンクする必要があります。</p><h3 id="_2-2-macosおよびios" tabindex="-1">2.2. macOSおよびiOS <a class="header-anchor" href="#_2-2-macosおよびios" aria-label="Permalink to &quot;2.2. macOSおよびiOS&quot;">​</a></h3><p>macOSビルドは、依存関係をダウンロードしたり、ライブラリやフレームワークにリンクしたりすることなくクリーンにコンパイルされるはずです。iOSビルドはObjective-Cとしてコンパイルされ、関連するフレームワークにリンクする必要がありますが、Xcodeでそのままクリーンにコンパイルされるはずです。コマンドラインからコンパイルする場合は、<code>-lpthread</code>および<code>-lm</code>とリンクする必要があります。</p><p>miniaudioがランタイムにフレームワークにリンクする方法のため、アプリケーションがAppleの公証プロセスに合格しない可能性があります。これを修正するためには、次の2つのオプションがあります。1つ目は、以下のように<code>MA_NO_RUNTIME_LINKING</code>オプションを使用する方法です：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __APPLE__</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MA_NO_RUNTIME_LINKING</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MINIAUDIO_IMPLEMENTATION</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;miniaudio.h&quot;</span></span></code></pre></div><p>これにより、<code>-framework CoreFoundation -framework CoreAudio -framework AudioToolbox</code>とリンクする必要があります。<code>AudioToolbox</code>に関するエラーが発生した場合は、代わりに<code>-framework AudioUnit</code>を試してください。これは、古いバージョンのiOSを使用している場合に発生する可能性があります。代替手段として、ランタイムリンクを継続して使用したい場合は、<code>entitlements.xcent</code>ファイルに次の内容を追加します：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.apple.security.cs.allow-dyld-environment-variables&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><p>詳しくは、このディスカッションを参照してください：<a href="https://github.com/mackron/miniaudio/issues/203%E3%80%82" target="_blank" rel="noreferrer">https://github.com/mackron/miniaudio/issues/203。</a></p><h3 id="_2-3-linux" tabindex="-1">2.3. Linux <a class="header-anchor" href="#_2-3-linux" aria-label="Permalink to &quot;2.3. Linux&quot;">​</a></h3><p>Linuxビルドでは、<code>-ldl</code>, <code>-lpthread</code>, <code>-lm</code>にリンクするだけで動作します。開発パッケージは必要ありません。32ビットARM向けにコンパイルする場合は、<code>-latomic</code>にリンクする必要があるかもしれません。</p><h3 id="_2-4-bsd" tabindex="-1">2.4. BSD <a class="header-anchor" href="#_2-4-bsd" aria-label="Permalink to &quot;2.4. BSD&quot;">​</a></h3><p>BSDビルドでは、<code>-lpthread</code>, <code>-lm</code>にリンクするだけで動作します。NetBSDはaudio(4)を使用し、OpenBSDはsndioを使用し、FreeBSDはOSSを使用します。32ビットARM向けにコンパイルする場合は、<code>-latomic</code>にリンクする必要があるかもしれません。</p><h3 id="_2-5-android" tabindex="-1">2.5. Android <a class="header-anchor" href="#_2-5-android" aria-label="Permalink to &quot;2.5. Android&quot;">​</a></h3><p>Androidでは、AAudioが最優先のバックエンドです。これはコンパイラの設定なしでそのまま動作するはずです。AAudioのサポートはAndroid 8から始まるため、それ以前のバージョンではOpenSL|ESにフォールバックし、これはAPIレベル16以上が必要です。</p><p>一部のAndroidベースのデバイスで、<code>dlopen()</code>が「libOpenSLES.so」を開けないためにOpenSL|ESバックエンドが初期化に失敗するという報告があります。この問題が発生する場合は、<code>MA_NO_RUNTIME_LINKING</code>を使用してランタイムリンクを無効にし、<code>-lOpenSLES</code>とリンクする必要があります。</p><h3 id="_2-6-emscripten" tabindex="-1">2.6. Emscripten <a class="header-anchor" href="#_2-6-emscripten" aria-label="Permalink to &quot;2.6. Emscripten&quot;">​</a></h3><p>EmscriptenビルドはWeb Audio JavaScriptを直接出力し、そのままクリーンにコンパイルされるはずです。<code>-std=c*</code>コンパイラフラグや<code>-ansi</code>は使用できません。</p><p>AudioWorkletの使用を有効にするには、<code>MA_ENABLE_AUDIO_WORKLETS</code>を定義し、次のオプションでコンパイルします：</p><p><code>AUDIO_WORKLET=1 -sWASM_WORKERS=1 -sASYNCIFY</code></p><p>AudioWorkletサポートを有効にしてコンパイルする例は次のようになります：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> program.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/program.html</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DMA_ENABLE_AUDIO_WORKLETS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sAUDIO_WORKLET=1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sWASM_WORKERS=1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sASYNCIFY</span></span></code></pre></div><p>ローカルで実行するには、<code>emrun</code>を使用する必要があります：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emrun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/program.html</span></span></code></pre></div><h3 id="_2-7-ビルドオプション" tabindex="-1">2.7. ビルドオプション <a class="header-anchor" href="#_2-7-ビルドオプション" aria-label="Permalink to &quot;2.7. ビルドオプション&quot;">​</a></h3><p>以下のオプションを <code>miniaudio.h</code> をインクルードする前に <code>#define</code> してください。</p><table tabindex="0"><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td>MA_NO_WASAPI</td><td>WASAPI バックエンドを無効にします。</td></tr><tr><td>MA_NO_DSOUND</td><td>DirectSound バックエンドを無効にします。</td></tr><tr><td>MA_NO_WINMM</td><td>WinMM バックエンドを無効にします。</td></tr><tr><td>MA_NO_ALSA</td><td>ALSA バックエンドを無効にします。</td></tr><tr><td>MA_NO_PULSEAUDIO</td><td>PulseAudio バックエンドを無効にします。</td></tr><tr><td>MA_NO_JACK</td><td>JACK バックエンドを無効にします。</td></tr><tr><td>MA_NO_COREAUDIO</td><td>Core Audio バックエンドを無効にします。</td></tr><tr><td>MA_NO_SNDIO</td><td>sndio バックエンドを無効にします。</td></tr><tr><td>MA_NO_AUDIO4</td><td>audio(4) バックエンドを無効にします。</td></tr><tr><td>MA_NO_OSS</td><td>OSS バックエンドを無効にします。</td></tr><tr><td>MA_NO_AAUDIO</td><td>AAudio バックエンドを無効にします。</td></tr><tr><td>MA_NO_OPENSL</td><td>OpenSL バックエンドを無効にします。</td></tr><tr><td>MA_NO_WEBAUDIO</td><td>Web Audio バックエンドを無効にします。</td></tr><tr><td>MA_NO_NULL</td><td>null バックエンドを無効にします。</td></tr><tr><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS</td><td>デフォルトで全てのバックエンドを無効にし、特定のバックエンドを有効にするには MA_ENABLE_* を設定します。</td></tr><tr><td>MA_ENABLE_WASAPI</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して WASAPI バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_DSOUND</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して DirectSound バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_WINMM</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して WinMM バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_ALSA</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して ALSA バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_PULSEAUDIO</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して PulseAudio バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_JACK</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して JACK バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_COREAUDIO</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して Core Audio バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_SNDIO</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して sndio バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_AUDIO4</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して audio(4) バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_OSS</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して OSS バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_AAUDIO</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して AAudio バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_OPENSL</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して OpenSL バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_WEBAUDIO</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して Web Audio バックエンドを有効にします。</td></tr><tr><td>MA_ENABLE_NULL</td><td>MA_ENABLE_ONLY_SPECIFIC_BACKENDS と併用して null バックエンドを有効にします。</td></tr><tr><td>MA_NO_DECODING</td><td>デコードAPIを無効にします。</td></tr><tr><td>MA_NO_ENCODING</td><td>エンコードAPIを無効にします。</td></tr><tr><td>MA_NO_WAV</td><td>組み込みの WAV デコーダーとエンコーダーを無効にします。</td></tr><tr><td>MA_NO_FLAC</td><td>組み込みの FLAC デコーダーを無効にします。</td></tr><tr><td>MA_NO_MP3</td><td>組み込みの MP3 デコーダーを無効にします。</td></tr><tr><td>MA_NO_DEVICE_IO</td><td>再生と録音を無効にします。これにより、<code>ma_context</code> と <code>ma_device</code> API が無効になります。miniaudioのデータ変換および/またはデコードAPIのみを使用したい場合に便利です。</td></tr><tr><td>MA_NO_RESOURCE_MANAGER</td><td>リソースマネージャを無効にします。エンジンを使用する場合、次の関数も無効になります：<code>ma_sound_init_from_file()</code>, <code>ma_sound_init_from_file_w()</code>, <code>ma_sound_init_copy()</code>, <code>ma_engine_play_sound_ex()</code>, <code>ma_engine_play_sound()</code>。<code>ma_sound</code> オブジェクトを初期化する唯一の方法は、データソースから初期化することです。</td></tr><tr><td>MA_NO_NODE_GRAPH</td><td>ノードグラフAPIを無効にします。これにより、ノードグラフに依存するエンジンAPIも無効になります。</td></tr><tr><td>MA_NO_ENGINE</td><td>エンジンAPIを無効にします。</td></tr><tr><td>MA_NO_THREADING</td><td><code>ma_thread</code>, <code>ma_mutex</code>, <code>ma_semaphore</code>, <code>ma_event</code> API を無効にします。このオプションは、データ変換、デコード、および/またはエンコードのためにのみ miniaudio を使用する場合に便利です。いくつかのAPIファミリーはスレッド化を必要とするため、次のオプションも設定する必要があります：<code>MA_NO_DEVICE_IO</code>。</td></tr><tr><td>MA_NO_GENERATION</td><td><code>ma_waveform</code> や <code>ma_noise</code> のような生成APIを無効にします。</td></tr><tr><td>MA_NO_SSE2</td><td>SSE2最適化を無効にします。</td></tr><tr><td>MA_NO_AVX2</td><td>AVX2最適化を無効にします。</td></tr><tr><td>MA_NO_NEON</td><td>NEON最適化を無効にします。</td></tr><tr><td>MA_NO_RUNTIME_LINKING</td><td>ランタイムリンクを無効にします。これはAppleの公証プロセスを通過するために便利です。これを有効にすると、<code>timespec</code> や <code>timeval</code> データ型との競合によりコンパイルエラーが発生する可能性があるため、Linuxビルドで <code>-std=c89</code> や <code>-std=c99</code> の使用を避ける必要があります。ターゲットプラットフォームが <code>dlopen()</code> を介したランタイムリンクを許可しない場合にこれを有効にする必要があります。</td></tr><tr><td>MA_DEBUG_OUTPUT</td><td>デバッグログ（<code>MA_LOG_LEVEL_DEBUG</code>）の <code>printf()</code> 出力を有効にします。</td></tr><tr><td>MA_COINIT_VALUE</td><td>Windows専用。内部の <code>CoInitializeEx()</code> 呼び出しに渡す値。デフォルトは <code>COINIT_MULTITHREADED</code>。</td></tr><tr><td>MA_API</td><td>パブリックAPIの装飾方法を制御します。デフォルトは <code>extern</code>。</td></tr></tbody></table><h2 id="_3-定義" tabindex="-1">3. 定義 <a class="header-anchor" href="#_3-定義" aria-label="Permalink to &quot;3. 定義&quot;">​</a></h2><p>このセクションでは、miniaudio全体で使用される一般的な用語を定義します。オーディオ分野では用語の使用に曖昧さがあることが多いため、ここではminiaudioが各用語をどのように使用しているかを明確にします。</p><h3 id="_3-1-サンプル" tabindex="-1">3.1. サンプル <a class="header-anchor" href="#_3-1-サンプル" aria-label="Permalink to &quot;3.1. サンプル&quot;">​</a></h3><p>サンプルは、オーディオデータの単一単位です。サンプルフォーマットがf32の場合、1サンプルは1つの32ビット浮動小数点数です。</p><h3 id="_3-2-フレーム-pcmフレーム" tabindex="-1">3.2. フレーム / PCMフレーム <a class="header-anchor" href="#_3-2-フレーム-pcmフレーム" aria-label="Permalink to &quot;3.2. フレーム / PCMフレーム&quot;">​</a></h3><p>フレームは、チャンネル数に等しい数のサンプルのグループです。例えば、ステレオストリームのフレームは2サンプル、モノラルフレームは1サンプル、5.1サラウンドサウンドフレームは6サンプルです。miniaudioでは「フレーム」と「PCMフレーム」は同じ意味です。これは圧縮フレームとは異なることに注意してください。miniaudioが圧縮フレーム（例えばFLACフレーム）を参照する必要がある場合は、必ず「FLACフレーム」のように明確にします。</p><h3 id="_3-3-チャンネル" tabindex="-1">3.3. チャンネル <a class="header-anchor" href="#_3-3-チャンネル" aria-label="Permalink to &quot;3.3. チャンネル&quot;">​</a></h3><p>スピーカーシステムの個々のスピーカーから出力される、またはマイクシステムの個々のマイクから受信されるモノラルオーディオのストリームです。ステレオストリームには2つのチャンネル（左チャンネルと右チャンネル）があり、5.1サラウンドサウンドシステムには6つのチャンネルがあります。一部のオーディオシステムでは、チャンネルを他のチャンネルとミックスして最終的なミックスを作成する複雑なオーディオストリームとして参照することがありますが、これはminiaudioの「チャンネル」という用語の使用法とは完全に異なり、混同しないでください。</p><h3 id="_3-4-サンプルレート" tabindex="-1">3.4. サンプルレート <a class="header-anchor" href="#_3-4-サンプルレート" aria-label="Permalink to &quot;3.4. サンプルレート&quot;">​</a></h3><p>miniaudioにおけるサンプルレートは常にHzで表され、例えば44100、48000などです。これは、1秒あたりに処理されるPCMフレームの数を示します。</p><h3 id="_3-5-フォーマット" tabindex="-1">3.5. フォーマット <a class="header-anchor" href="#_3-5-フォーマット" aria-label="Permalink to &quot;3.5. フォーマット&quot;">​</a></h3><p>miniaudio全体で、さまざまなサンプルフォーマットが参照されます：</p><table tabindex="0"><thead><tr><th>記号</th><th>説明</th><th>範囲</th></tr></thead><tbody><tr><td>ma_format_f32</td><td>32ビット浮動小数点</td><td>[-1, 1]</td></tr><tr><td>ma_format_s16</td><td>16ビット符号付き整数</td><td>[-32768, 32767]</td></tr><tr><td>ma_format_s24</td><td>24ビット符号付き整数（タイトパック）</td><td>[-8388608, 8388607]</td></tr><tr><td>ma_format_s32</td><td>32ビット符号付き整数</td><td>[-2147483648, 2147483647]</td></tr><tr><td>ma_format_u8</td><td>8ビット符号なし整数</td><td>[0, 255]</td></tr></tbody></table><p>すべてのフォーマットはネイティブエンディアンです。</p><h2 id="_4-データソース" tabindex="-1">4. データソース <a class="header-anchor" href="#_4-データソース" aria-label="Permalink to &quot;4. データソース&quot;">​</a></h2><p>miniaudioのデータソース抽象化は、何らかのソースからオーディオデータを取得するために使用されます。例としては、<code>ma_decoder</code>、<code>ma_noise</code>、<code>ma_waveform</code>などがあります。miniaudioの上位レベルの概念を理解するためには、データソースについて理解しておく必要があります。</p><p><code>ma_data_source</code> APIは、データソースから読み取るための汎用インターフェースです。データソースインターフェースを実装する任意のオブジェクトは、任意の<code>ma_data_source</code>関数に接続できます。</p><p>データソースからデータを読み取るには、以下のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 framesRead;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDataSource, pFramesOut, frameCount, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">framesRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // データソースからのデータ読み取りに失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>読み取られたフレーム数が必要ない場合は、<code>pFramesRead</code>パラメータにNULLを渡すことができます。この関数が要求されたフレーム数より少ない値を返す場合、それはファイルの終端に到達したことを意味します。読み取られたフレーム数が0の場合にのみ<code>MA_AT_END</code>が返されます。</p><p><code>ma_data_source_init()</code>および<code>ma_data_source_uninit()</code>を除く任意のデータソース関数を呼び出す場合、データソースを実装する任意のオブジェクトを渡すことができます。例えば、デコーダを次のように接続できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 framesRead;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_decoder decoder;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &lt;-- これは ma_decoder_init_*() で初期化されます。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, frameCount, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">framesRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // デコーダからのデータ読み取りに失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>前方にシークしたい場合は、<code>pFramesOut</code>パラメータにNULLを渡すことができます。あるいは、<code>ma_data_source_seek_pcm_frames()</code>を使用することもできます。</p><p>特定のPCMフレームにシークするには、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_seek_to_pcm_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDataSource, frameIndex);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // PCMフレームへのシークに失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>データソースの全長をPCMフレームで取得することもできますが、ノイズや波形のように長さの概念がないデータソースや、一部のデコーダのように長さを決定する方法がないデータソースもあります。長さを取得するには、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 length;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_get_length_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDataSource, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 長さの取得に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>基礎となるデコーダが長さの不定なデータストリーム（インターネットラジオや放送など）からデータを引き出している場合、長さの取得には注意が必要です。この場合、<code>ma_data_source_get_length_in_pcm_frames()</code>が返ってこないことがあります。</p><p>カーソルの現在位置をPCMフレームで取得することもできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 cursor;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_get_cursor_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDataSource, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // カーソル位置の取得に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>読み取り後に返されるデータ形式を知る必要があることがよくあります。これを取得するには次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_format format;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint32 channels;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint32 sampleRate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_channel </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channelMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MA_MAX_CHANNELS];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_get_data_format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDataSource, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sampleRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, channelMap, MA_MAX_CHANNELS);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // データ形式の取得に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特定のデータ形式プロパティが必要ない場合は、対応するパラメータにNULLを渡します。</p><p>基礎となるデータの特定の範囲内のみを読み取りたい場合は、範囲を使用できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_set_range_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDataSource, rangeBegInFrames, rangeEndInFrames);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 範囲の設定に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは、複数のサウンドが同じファイルに保存されているサウンドバンクがあり、そのうちの1つのサブサウンドだけをデータソースで再生したい場合に便利です。範囲が設定されると、カーソルやループポイントなどの位置を取るすべてのものは、常に範囲の開始から相対的に扱う必要があることに注意してください。範囲が設定されると、以前に定義されたループポイントはリセットされます。</p><p>カスタムループポイントもデータソースで使用できます。デフォルトでは、データソースはデータソースの終端に達した後にループしますが、特定の場所でループする必要がある場合は、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_set_loop_point_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDataSource, loopBegInFrames, loopEndInFrames);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ループポイントの設定に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ループポイントは現在の範囲に対して相対的です。</p><p>データソースを連結してシームレスな移行を実現することが有用な場合があります。これを行うには、連結を使用します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_decoder decoder1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_decoder decoder2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... デコーダを ma_decoder_init_*() で初期化する ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_set_next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 次のデータソースの設定に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, frameCount, pFramesRead);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // デコーダからの読み取りに失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、デコーダを使用しています。連結されたチェーンから読み取る場合は、常にチェーンの最上位のデータソースから読み取る必要があります。上記の例では、decoder1がチェーンの最上位のデータソースです。decoder1が終端に達すると、decoder2がシームレスに開始されます。</p><p>ループが有効な場合、ループされるのは現在のデータソースのみです。チェーン全体をループさせるには、次のようにループ内でリンクします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_data_source_set_next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // decoder1 -&gt; decoder2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_data_source_set_next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // decoder2 -&gt; decoder1（最初に戻るループ）。</span></span></code></pre></div><p>チェーンの設定はスレッドセーフではないため、オーディオスレッドが読み取り中にリンクを動的に変更する場合は注意が必要です。</p><p>同じサウンドの複数のインスタンスを同時に再生するために、<code>ma_decoder_seek_to_pcm_frame()</code>を使用してデータソースを再利用する手段として使用しないでください。データソースの種類によっては非常に非効率であり、内部フィルタの状態の微妙な変化によってグリッチが発生する可能性があります。その代わりに、各インスタンスのために複数のデータソースを初期化してください。</p><h3 id="_4-1-カスタムデータソース" tabindex="-1">4.1. カスタムデータソース <a class="header-anchor" href="#_4-1-カスタムデータソース" aria-label="Permalink to &quot;4.1. カスタムデータソース&quot;">​</a></h3><p><code>ma_data_source_vtable</code>の関数を実装することでカスタムデータソースを実装できます。カスタムオブジェクトは、最初のメンバーとして<code>ma_data_source_base</code>を持つ必要があります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_data_source</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_data_source_base base;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>初期化ルーチンでは、ベースオブジェクト（<code>ma_data_source_base</code>）を設定するために<code>ma_data_source_init()</code>を呼び出す必要があります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_data_source_read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_data_source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pFramesOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint64 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pFramesRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここでデータを読み取ります。出力は my_data_source_get_data_format() で返されるのと同じ形式にします。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_data_source_seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_data_source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint64 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここで特定のPCMフレームにシークします。シークがサポートされていない場合は MA_NOT_IMPLEMENTED を返します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_data_source_get_data_format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_data_source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pSampleRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pChannelMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> channelMapCap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここでデータの形式を返します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_data_source_get_cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_data_source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pCursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここでカーソルの現在位置を取得します。カーソルの概念がない場合は MA_NOT_IMPLEMENTED を返し、*pCursor を 0 に設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_data_source_get_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_data_source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここで長さをPCMフレーム単位で取得します。長さの概念がない場合や長さが不明な場合は MA_NOT_IMPLEMENTED を返し、*pLength を 0 に設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_data_source_vtable g_my_data_source_vtable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_data_source_read,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_data_source_seek,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_data_source_get_data_format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_data_source_get_cursor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_data_source_get_length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_data_source_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_data_source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pMyDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_data_source_config baseConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    baseConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    baseConfig.vtable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_my_data_source_vtable;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baseConfig, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pMyDataSource-&gt;base);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... ここでカスタムデータソースの初期化を行います ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_data_source_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_data_source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pMyDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... ここでカスタムデータソースの初期化解除を行います ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ベースデータソースの初期化解除を行う必要があります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_data_source_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pMyDataSource-&gt;base);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ma_data_source_init()</code>と<code>ma_data_source_uninit()</code>はカスタムデータソースの外部で直接呼び出されることはありません。これらの関数はカスタムデータソース自体がその初期化/解除関数内で呼び出す必要があります。</p><h2 id="_5-エンジン" tabindex="-1">5. エンジン <a class="header-anchor" href="#_5-エンジン" aria-label="Permalink to &quot;5. エンジン&quot;">​</a></h2><p><code>ma_engine</code> APIは、サウンドとエフェクト処理を管理およびミキシングするための高レベルAPIです。<code>ma_engine</code>オブジェクトはリソースマネージャーとノードグラフをカプセル化しており、これらについては後で詳しく説明します。</p><p>サウンドは<code>ma_sound</code>と呼ばれ、エンジンから作成されます。サウンドは<code>ma_sound_group</code>というミキシンググループに関連付けることができ、これもエンジンから作成されます。<code>ma_sound</code>と<code>ma_sound_group</code>オブジェクトは、エンジンのノードグラフ内のノードです。</p><p>エンジンが初期化されると、通常は内部的にデバイスが作成されます。デバイスを自分で管理したい場合は、エンジンを初期化する際にデバイスへのポインタをエンジン構成を介して渡すことができます。また、デバイスを使用せずにエンジンを使用することもでき、これもエンジン構成で設定できます。</p><p>最も基本的なエンジンの初期化方法は、デフォルトの構成を使用することです。次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine engine;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // エンジンの初期化に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これにより、エンジンはオペレーティングシステムのデフォルトデバイスを使用して再生デバイスを初期化します。多くのユースケースではこれで十分ですが、より柔軟性が必要な場合は、エンジン構成を使用してエンジンを構成することができます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine engine;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine_config engineConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.pDevice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myDevice;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // エンジンの初期化に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、事前に初期化されたデバイスを渡しています。呼び出し側がデバイスのデータコールバックを制御しているため、データコールバック内で手動で<code>ma_engine_read_pcm_frames()</code>を呼び出す責任があります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> playback_data_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint32 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_engine_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_Engine, pOutput, frameCount, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>デバイスを全く使用せずにエンジンを使用することもできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine engine;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine_config engineConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.noDevice   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_TRUE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.channels   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // デバイスを使用しない場合は設定する必要があります。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.sampleRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // デバイスを使用しない場合は設定する必要があります。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // エンジンの初期化に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>デバイスを使用しない場合、設定でチャンネル数とサンプルレートを指定する必要があります。そうしないと、miniaudioが何を使用すればよいかわからなくなります（通常、miniaudioはデバイスを使用してこれを判断します）。デバイスを使用しない場合、<code>ma_engine_read_pcm_frames()</code>を使用してエンジンからオーディオデータを処理する必要があります。このような設定は、オフライン処理を行う場合や、SDLなどの別のオーディオシステムを再生に使用したい場合に便利です。</p><p>サウンドがロードされると、リソースマネージャを通過します。デフォルトでは、エンジンは内部的にリソースマネージャを初期化しますが、事前に初期化されたリソースマネージャを指定することもできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine engine1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine engine2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_engine_config engineConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_engine_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.pResourceManager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myResourceManager;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>この例では、同じリソースマネージャを共有する2つのエンジンを初期化しています。これは、複数のエンジン間で同じファイルをロードする場合にメモリを節約するのに特に便利です。共有リソースマネージャを使用しない場合、各エンジンインスタンスは独自のリソースマネージャを使用し、両方のエンジンで使用されるサウンドが2回ロードされることになります。共有リソースマネージャを使用することで、サウンドは1回だけロードされます。複数のエンジンを使用することは、例えばローカルマルチプレイヤーゲームで各プレイヤーが自分のヘッドフォンセットを使用している場合など、複数の再生デバイスに出力する必要があるときに便利です。</p><p>デフォルトではエンジンは開始状態になります。エンジンを自動的に開始しないようにするには、次のように設定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.noAutoStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_TRUE;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エンジンは手動で開始する必要があります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 後でエンジンは ma_engine_stop() で停止できます。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>エンジンの開始または停止の概念は、デバイスを使用している場合にのみ関連します。デバイスに関連付けられていないエンジンを開始または停止しようとすると、<code>MA_INVALID_OPERATION</code>が返されます。</p><p>エンジンのマスターボリュームは<code>ma_engine_set_volume()</code>で制御できます。この関数はリニアスケールを取り、0は無音を、1以上は増幅を意味します。デシベルベースのボリュームコントロールを好む場合は、<code>ma_volume_db_to_linear()</code>を使用してdBからリニアに変換します。</p><p>サウンドが空間化されると、リスナーに対して相対的に行われます。エンジンは複数のリスナーを持つように設定でき、これは次のように構成できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engineConfig.listenerCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>リスナーの最大数は<code>MA_ENGINE_MAX_LISTENERS</code>に制限されています。デフォルトでは、サウンドが空間化されるとき、それは最も近いリスナーに対して行われます。サウンドを特定のリスナーに固定することもできますが、それについては後で説明します。リスナーは位置、方向、コーン、速度（ドップラー効果用）を持ちます。リスナーはインデックスで参照され、その意味は呼び出し側に依存します（インデックスは0から始まり、リスナーの数-1を超えることはできません）。位置、方向、速度はすべて絶対値で指定されます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_listener_set_position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, listenerIndex, worldPosX, worldPosY, worldPosZ);</span></span></code></pre></div><p>リスナーの方向はその前方ベクトルを表します。リスナーの上向きベクトルも指定でき、デフォルトではY軸の+1になります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_listener_set_direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, listenerIndex, forwardX, forwardY, forwardZ);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_listener_set_world_up</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, listenerIndex, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>エンジンは指向性減衰をサポートしています。リスナーはコーンを持ち、リスナーの方向に基づいてサウンドがどのように減衰するかを制御できます。サウンドが内側のコーンと外側のコーンの間にある場合、それは1からコーンの外側ゲインの間で減衰します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_listener_set_cone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, listenerIndex, innerAngleInRadians, outerAngleInRadians, outerGain);</span></span></code></pre></div><p>サウンドが内側のコーン内にある場合、指向性減衰は適用されません。サウンドが外側のコーンの外にある場合、減衰は上記の例で<code>outerGain</code>に設定されます。サウンドが内側と外側のコーンの間にある場合、減衰は1と外側ゲインの間で補間されます。</p><p>エンジンの座標系はOpenGLの座標系に従い、正のX軸は右を指し、正のY軸は上を指し、負のZ軸は前方を指します。</p><p>サウンドを再生する最も簡単で柔軟性のない方法は次のとおりです：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_play_sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pGroup);</span></span></code></pre></div><p>これは「使い捨て」スタイルの関数です。エンジンは内部的に<code>ma_sound</code>オブジェクトを管理します。サウンドの再生が終了すると、それはリサイクルのために準備されます。より柔軟性が必要な場合は、サウンドオブジェクトを初期化します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_sound sound;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_sound_init_from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, flags, pGroup, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // サウンドのロードに失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>サウンドは<code>ma_sound_uninit()</code>で初期化解除する必要があります。</p><p>上記の例では、ファイルからサウンドをロードしています。リソースマネージャが無効化されている場合、この関数を使用できず、代わりにデータソースから直接サウンドを初期化する必要があります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_sound sound;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_sound_init_from_data_source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, flags, pGroup, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>各<code>ma_sound</code>オブジェクトはサウンドの単一インスタンスを表します。同じサウンドを同時に複数回再生したい場合は、別々の<code>ma_sound</code>オブジェクトを初期化する必要があります。</p><p>サウンドを初期化する際に最も柔軟性を持たせるには、<code>ma_sound_init_ex()</code>を使用します。これはminiaudioの標準のconfig/initパターンを使用します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_sound sound;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_sound_config soundConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_sound_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.pFilePath   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ファイルパスからロードする場合に設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.pDataSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 既存のデータソースから初期化する場合に設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.pInitialAttachment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">someNodeInTheNodeGraph;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.initialAttachmentInputBusIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.channelsIn  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.channelsOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エンジンのネイティブチャンネル数を使用するには0を設定します。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_sound_init_ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">soundConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、ファイルやデータソースを使わずにサウンドを初期化しています。これは有効で、この場合サウンドはノードグラフの中間ノードとして機能します。つまり、他のサウンドをこのサウンドに接続し、サウンドグループのように機能させることができます。実際、これはまさに<code>ma_sound_group</code>の機能です。</p><p>サウンドをロードする際、サウンドがどのようにロードされるかや、どの機能が有効になるかを制御する一連のフラグを指定します。フラグが設定されていない場合、サウンドはファイルシステムに保存されている形式のままメモリに完全にロードされます。リソースマネージャはメモリブロックを割り当て、ファイルを直接その中にロードします。オーディオデータを読み取る際、それは動的にデコードされます。オーディオスレッドでの処理時間を節約するために、サウンドを事前にデコードすることが有益かもしれません。これを行うには<code>MA_SOUND_FLAG_DECODE</code>フラグを使用します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_init_from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MA_SOUND_FLAG_DECODE, pGroup, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>デフォルトでは、サウンドは同期的にロードされます。つまり、<code>ma_sound_init_*()</code>はサウンドが完全にロードされるまで戻りません。これが問題になる場合は、<code>MA_SOUND_FLAG_ASYNC</code>フラグを指定してサウンドを非同期でロードすることができます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_init_from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MA_SOUND_FLAG_DECODE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SOUND_FLAG_ASYNC, pGroup, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>これにより、<code>ma_sound_init_*()</code>はすぐに戻りますが、サウンドはまだ完全にはロードされていません。サウンドを開始すると、一部のサウンドが利用可能になるまで何も出力しません。<code>MA_SOUND_FLAG_DECODE</code>が指定されている場合、サウンドが完全にデコードされる前にオーディオの出力を開始します。</p><p>非同期でロードされたサウンドが完全にロードされるのを待つ必要がある場合は、フェンスを使用できます。miniaudioのフェンスは、内部カウンタがゼロになるまで単純にブロックする同期機構です。フェンスは次のように指定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_fence fence;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_sound </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_fence_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サウンドを非同期でロードします。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iSound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; iSound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; iSound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_sound_init_from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engine, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mySoundFilesPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[iSound], MA_SOUND_FLAG_DECODE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SOUND_FLAG_ASYNC, pGroup, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fence, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[iSound]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... その間に他の処理を行います ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// すべてのサウンドのロードが完了するのを待ちます。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_fence_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>サウンド全体をメモリにロードするのが困難な場合は、エンジンを設定してオーディオデータをストリーミングすることもできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_init_from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MA_SOUND_FLAG_STREAM, pGroup, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>ストリーミングサウンドの場合、2秒分のオーディオデータがメモリに保存されます。短いサウンドにストリーミングを使用するのは非効率ですが、ゲームの音楽トラックのようなものには便利です。</p><p>ファイルパスからサウンドをロードする場合、エンジンはファイルがすでにメモリにロードされているかどうかを確認するために参照カウントを行います。サウンドを初期化解除すると、参照カウントがデクリメントされ、ゼロになるとサウンドはメモリからアンロードされます。この参照カウントシステムはストリームには使用されません。エンジンはファイルパスを比較する際にファイル名の64ビットハッシュを使用するため、名前の衝突が発生する可能性があります。これが問題になる場合は、衝突するファイルパスのいずれかに異なる名前を使用するか、ファイルからロードせずにデータソースからロードする必要があります。</p><p><code>ma_sound_init_copy()</code>を使用して、別のサウンドのコピーを初期化できます。ただし、これは<code>ma_sound_init_from_file()</code>で初期化され、<code>MA_SOUND_FLAG_STREAM</code>フラグがないサウンドに対してのみ機能します。</p><p>サウンドを初期化する際、サウンドグループを指定すると、そのサウンドは自動的にそのグループにアタッチされます。NULLに設定すると、サウンドは自動的にエンジンのエンドポイントにアタッチされます。デフォルトでサウンドをアタッチしないようにしたい場合は、<code>MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT</code>フラグを指定できます。これは、複雑なノードグラフを設定したい場合に便利です。</p><p>サウンドはデフォルトでは開始されません。サウンドを開始するには、<code>ma_sound_start()</code>を使用します。サウンドを停止するには、<code>ma_sound_stop()</code>を使用します。</p><p>サウンドのボリュームは、エンジンのマスターボリュームと同じように<code>ma_sound_set_volume()</code>で制御できます。</p><p>サウンドはステレオパンとピッチングをサポートしています。パンは<code>ma_sound_set_pan()</code>で設定します。パンを0に設定すると、サウンドはパンされません。-1に設定するとすべてが左にシフトし、+1に設定すると右にシフトします。ピッチは<code>ma_sound_set_pitch()</code>で制御できます。値が大きいほどピッチが高くなります。ピッチは0より大きい必要があります。</p><p>エンジンはサウンドの3D空間化をサポートしています。デフォルトではサウンドに空間化が有効になっていますが、空間化が不要な場合は無効にするのが最適です。サウンドの空間化を無効にする方法は2つあります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// フラグを使って初期化時に空間化を無効にする方法：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_init_from_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MA_SOUND_FLAG_NO_SPATIALIZATION, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初期化後に動的に空間化を無効または有効にする方法：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_spatialization_enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, isSpatializationEnabled);</span></span></code></pre></div><p>デフォルトでは、サウンドは最も近いリスナーに基づいて空間化されます。サウンドが常に特定のリスナーに対して空間化されるべき場合、それを特定のリスナーに固定できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_pinned_listener_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, listenerIndex);</span></span></code></pre></div><p>リスナーと同様に、サウンドには位置があります。デフォルトでは、サウンドの位置は絶対空間ですが、リスナーに対して相対的に変更することができます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_positioning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_positioning_relative);</span></span></code></pre></div><p>サウンドの相対位置設定は、リスナーが1人しかいない場合、またはサウンドが特定のリスナーに固定されている場合にのみ意味があります。サウンドの位置を設定するには、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, posX, posY, posZ);</span></span></code></pre></div><p>方向はリスナーと同じように機能し、サウンドの前方方向を表します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forwardX, forwardY, forwardZ);</span></span></code></pre></div><p>サウンドにも方向性減衰を制御するためのコーンがあります。これはリスナーと全く同じように機能します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_cone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, innerAngleInRadians, outerAngleInRadians, outerGain);</span></span></code></pre></div><p>サウンドの速度はドップラー効果に使用され、次のように設定できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_velocity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, velocityX, velocityY, velocityZ);</span></span></code></pre></div><p>エンジンは異なる減衰モデルをサポートしており、サウンドごとに設定できます。デフォルトの減衰モデルは<code>ma_attenuation_model_inverse</code>で、これはOpenALの<code>AL_INVERSE_DISTANCE_CLAMPED</code>に相当します。減衰モデルは次のように設定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_attenuation_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_attenuation_model_inverse);</span></span></code></pre></div><p>サポートされている減衰モデルには次のものがあります：</p><table tabindex="0"><thead><tr><th>減衰モデル</th><th>説明</th></tr></thead><tbody><tr><td>ma_attenuation_model_none</td><td>距離による減衰なし。</td></tr><tr><td>ma_attenuation_model_inverse</td><td><code>AL_INVERSE_DISTANCE_CLAMPED</code>に相当。</td></tr><tr><td>ma_attenuation_model_linear</td><td>線形減衰。</td></tr><tr><td>ma_attenuation_model_exponential</td><td>指数減衰。</td></tr></tbody></table><p>リスナーから離れるにつれてサウンドがどのように減衰するかを制御するには、ロールオフを設定する必要があります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_rolloff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rolloff);</span></span></code></pre></div><p>空間化による最小ゲインと最大ゲインを制御できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_min_gain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minGain);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_max_gain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxGain);</span></span></code></pre></div><p>同様に、減衰の計算では、最小距離と最大距離を制御できます。これは、リスナーが離れた後にサウンドが一定のボリューム以下に落ちないようにするため、またリスナーが一定の距離内にいるときにサウンドが最大ボリュームで再生されるようにするために役立ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_min_distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minDistance);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_max_distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxDistance);</span></span></code></pre></div><p>エンジンの空間化システムはドップラー効果をサポートしています。ドップラーファクターはサウンドごとに設定できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_doppler_factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dopplerFactor);</span></span></code></pre></div><p>サウンドのフェードインとフェードアウトは<code>ma_sound_set_fade_in_pcm_frames()</code>および<code>ma_sound_set_fade_in_milliseconds()</code>で設定できます。開始ボリュームとして現在のボリュームを使用するには、ボリュームを-1に設定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1秒でフェードインします。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_fade_in_milliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...しばらく後...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 現在のボリュームから始めて1秒でフェードアウトします。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_fade_in_milliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>デフォルトでは、サウンドは即時に開始されますが、タイミングや同期の目的でサウンドの開始や停止をスケジュールすることが有用な場合があります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1秒後にサウンドを開始します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_start_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_get_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_get_sample_rate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2秒後にサウンドを停止します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_set_stop_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_get_time_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_engine_get_sample_rate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>開始時間をスケジュールする場合でも、何かが再生される前に明示的に<code>ma_sound_start()</code>を呼び出す必要があることに注意してください。</p><p>時間はエンジンによって制御されるグローバルタイムで指定されます。エンジンの現在時刻は<code>ma_engine_get_time_in_pcm_frames()</code>で取得できます。エンジンのグローバルタイムはオーディオデータの読み取りに応じて自動的に増加しますが、何らかの理由で再同期する必要がある場合は<code>ma_engine_set_time_in_pcm_frames()</code>でリセットできます。</p><p>サウンドが現在再生中かどうかを判断するには、<code>ma_sound_is_playing()</code>を使用します。これにはスケジュールされた開始時間と停止時間が考慮されます。</p><p>サウンドをループさせるかどうかは<code>ma_sound_set_looping()</code>で制御できます。デフォルトではサウンドはループしません。サウンドがループしているかどうかを判断するには、<code>ma_sound_is_looping()</code>を使用します。</p><p><code>ma_sound_at_end()</code>を使用して、サウンドが現在終端にあるかどうかを確認できます。ループするサウンドの場合、これが<code>true</code>を返すことはありません。代わりに、サウンドが終端に達したときに発生するコールバックを設定できます。このコールバックはオーディオスレッドから発生するため、コールバックからサウンドを初期化解除することはできません。コールバックを設定するには、<code>ma_sound_set_end_callback()</code>を使用します。また、<code>ma_sound_init_ex()</code>を使用する場合は、次のように構成に渡すこともできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.endCallback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_end_callback;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">soundConfig.pEndCallbackUserData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyEndCallbackUserData;</span></span></code></pre></div><p>エンドコールバックは次のように宣言します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_end_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_sound</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pSound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>内部的には、サウンドはデータソースをラップしています。主に便利なために、基礎となるデータソースを制御するためのいくつかのAPIが存在します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_seek_to_pcm_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, frameIndex);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_get_data_format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sampleRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pChannelMap, channelMapCapacity);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_get_cursor_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_sound_get_length_in_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>サウンドグループもサウンドと同じAPIを持ちますが、<code>ma_sound_group</code>と呼ばれ、データソースの概念がないため、データソースに関連する機能は利用できません。</p><p>内部的には、サウンドデータは<code>ma_decoder</code> APIを介してロードされます。デフォルトでは、miniaudioで組み込みサポートされているファイル形式のみがサポートされますが、カスタムデコーダを使用して任意のファイル形式をサポートするように拡張できます。これを行うには、自己管理型のリソースマネージャを使用し、適切に設定する必要があります。これを設定する方法の詳細については、以下の「リソース管理」セクションを参照してください。</p><h2 id="_6-リソース管理" tabindex="-1">6. リソース管理 <a class="header-anchor" href="#_6-リソース管理" aria-label="Permalink to &quot;6. リソース管理&quot;">​</a></h2><p>多くのプログラムは、参照カウントやストリーミングのためにサウンドリソースを管理したいと考えるでしょう。これは<code>ma_resource_manager</code> APIを介してminiaudioでサポートされています。</p><p>リソースマネージャは主に以下の役割を担っています：</p><ul><li>参照カウントを使用してサウンドファイルをメモリにロードすること。</li><li>サウンドデータのストリーミング。</li></ul><p>サウンドファイルをロードすると、リソースマネージャは<code>ma_resource_manager_data_source</code>と呼ばれる<code>ma_data_source</code>互換のオブジェクトを返します。このオブジェクトは任意の<code>ma_data_source</code> APIに渡すことができ、これによりオーディオデータの読み取りやシークが可能になります。サウンドファイルをロードする際には、サウンドをメモリに完全にロードするか（オプションで事前デコードも可能）、ストリーミングするかを指定します。メモリにロードする場合、データを非同期でロードするかどうかも指定できます。</p><p>以下の例は、デフォルトの設定を使用してリソースマネージャを初期化する方法です：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resource_manager_config config;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resource_manager resourceManager;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resourceManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_device_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">device);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to initialize the resource manager.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>デコードされたオーディオデータのフォーマット、チャンネル数、サンプルレートを設定することができます。デフォルトではファイルのネイティブデータフォーマットが使用されますが、一貫したフォーマットを使用するように設定することも可能です。これは、データ変換のコストをミキシング時ではなくロード時にオフロードするのに役立ちます。これを行うには、以下のコードのようにデコードフォーマット、チャンネル数、サンプルレートを設定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.decodedFormat     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.playback.format;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.decodedChannels   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.playback.channels;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.decodedSampleRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.sampleRate;</span></span></code></pre></div><p>上記のコードでは、リソースマネージャが設定され、デコードされたオーディオデータがデバイスのネイティブデータフォーマットにロード時に事前変換されます。デフォルトを使用し、ファイルのデータフォーマットがデバイスのデータフォーマットと一致しない場合、ミキシング時にデータを変換する必要があり、これはゲームのような高性能および大規模なシナリオでは負担となる可能性があります。</p><p>内部的には、リソースマネージャは<code>ma_decoder</code> APIを使用してサウンドをロードします。これはデフォルトでminiaudioに組み込まれているデコーダのみをサポートすることを意味します。カスタムデコーダを使用して追加のエンコーディングフォーマットをサポートすることが可能です。これを行うには、カスタムデコーダの<code>ma_decoding_backend_vtable</code>をリソースマネージャの設定に渡します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_decoding_backend_vtable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pCustomBackendVTables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_ma_decoding_backend_vtable_libvorbis,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_ma_decoding_backend_vtable_libopus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resourceManagerConfig.ppCustomDecodingBackendVTables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pCustomBackendVTables;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resourceManagerConfig.customDecodingBackendCount     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pCustomBackendVTables) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pCustomBackendVTables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resourceManagerConfig.pCustomDecodingBackendUserData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>このシステムを使用すると、任意のファイル形式をサポートすることができます。カスタムデコーダを実装する方法の詳細については、「デコード」セクションを参照してください。miniaudioリポジトリには、libopusおよびlibopusfileを使用したOpus、libvorbisおよびlibvorbisfileを使用したVorbisの例が含まれています。</p><p>非同期性はジョブシステムを介して実現されます。ページのデコードなどの操作が必要な場合、ジョブがキューに投稿され、それがジョブスレッドによって処理されます。デフォルトでは、1つのジョブスレッドのみが実行されますが、次のように設定することで変更できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.jobThreadCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MY_JOB_THREAD_COUNT;</span></span></code></pre></div><p>デフォルトではジョブスレッドはリソースマネージャによって内部的に管理されますが、たとえば既存のジョブインフラにジョブ処理を統合したい場合や、単にリソースマネージャの方法が気に入らない場合は、ジョブスレッドを自分で管理することもできます。これを行うには、ジョブスレッドの数を0に設定し、手動でジョブを処理します。ジョブを処理するには、まず<code>ma_resource_manager_next_job()</code>を使用してジョブを取得し、次に<code>ma_job_process()</code>を使用してそれを処理します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.jobThreadCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // ジョブスレッドを内部で管理しない。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // オプション。ma_resource_manager_next_job() を非ブロッキングにします。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... カスタムジョブスレッドを初期化 ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_custom_job_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ma_job job;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_next_job</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pMyResourceManager, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">job);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_NO_DATA_AVAILABLE) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ジョブが利用可能ではありません。継続します。これはリソースマネージャが MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // で初期化された場合にのみ発生します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_CANCELLED) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // MA_JOB_TYPE_QUIT が投稿されました。終了します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 他のエラーが発生しました。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ma_job_process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">job);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、<code>MA_JOB_TYPE_QUIT</code>イベントが終了インジケータとして使用されていますが、スレッドを終了するために任意の方法を使用できます。<code>ma_resource_manager_next_job()</code>の呼び出しはデフォルトではブロッキングですが、<code>MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING</code>設定フラグを使用してリソースマネージャを初期化することで非ブロッキングに設定できます。<code>MA_JOB_TYPE_QUIT</code>はジョブキューから削除されることはありません。これは、すべてのスレッドがこのイベントをキャッチし、自然に終了する機会を持つためです。</p><p>ファイルをロードする際、標準の<code>fopen()</code>、<code>fclose()</code>などの代わりに、ファイルの開閉や読み取り方法をカスタマイズできると便利な場合があります。miniaudioはデフォルトでこれらの標準関数を使用しますが、リソースマネージャの設定の<code>pVFS</code>メンバーを設定することでカスタマイズできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// カスタムVFSオブジェクトを初期化します。VFSの情報についてはドキュメントを参照してください。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_custom_vfs vfs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_custom_vfs_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.pVFS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vfs;</span></span></code></pre></div><p>これは、通常のファイルシステムではなくアーカイブから直接読み取るようなゲームのようなプログラムに特に有用です。カスタムVFSを指定しない場合、リソースマネージャはオペレーティングシステムの通常のファイル操作を使用します。</p><p>サウンドファイルをロードしてデータソースを作成するには、<code>ma_resource_manager_data_source_init()</code>を呼び出します。サウンドをロードする際には、ファイルパスとサウンドのロード方法に関するオプションを指定する必要があります。デフォルトでは、サウンドは同期的にロードされます。返されるデータソースは呼び出し側が所有するため、データソースの割り当てと解放は呼び出し側の責任となります。以下はデータソースを初期化する例です：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resource_manager_data_source dataSource;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_data_source_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pResourceManager, pFilePath, flags, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ma_resource_manager_data_sourceオブジェクトはma_data_source APIと互換性があります。データを読み取るには、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通常のデータソースと同様にma_data_source_read_pcm_frames()を呼び出すだけです。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pDecodedData, frameCount, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">framesRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // PCMフレームの読み取りに失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_resource_manager_data_source_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>flags</code>パラメータはサウンドファイルのロード方法を指定します。次のフラグの組み合わせを使用できます：</p><ul><li>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM</li><li>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE</li><li>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC</li><li>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT</li></ul><p>フラグが指定されていない場合（0に設定）、サウンドはメモリに完全にロードされますが、デコードはされません。つまり、メモリには生のファイルデータが格納され、<code>ma_data_source_read_pcm_frames()</code>が呼び出されると動的にデコードされます。オーディオデータをメモリに格納する前にデコードしたい場合は、<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE</code>フラグを使用します。デフォルトでは、サウンドファイルは同期的にロードされ、<code>ma_resource_manager_data_source_init()</code>はファイル全体がロードされた後にのみ返されます。これはシンプルですが、非常に遅くなる可能性があります。代わりに、<code>MA_RESOURCE_MANAGER_DATA_SOURCE_ASYNC</code>フラグを使用してサウンドを非同期でロードできます。これにより、<code>ma_resource_manager_data_source_init()</code>はすぐに返されますが、データが利用可能になるまで<code>ma_data_source_read_pcm_frames()</code>からデータは返されません。非同期デコードが追いついていないためにデータが利用できない場合、<code>ma_data_source_read_pcm_frames()</code>は<code>MA_BUSY</code>を返します。</p><p>大きなサウンドの場合、ファイル全体をメモリに保存するのはコストがかかりすぎることがよくあります。これを軽減するために、<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM</code>フラグを指定してオーディオデータをストリーミングすることができます。ストリーミングの場合、データは1秒ごとにページ単位でデコードされます。新しいページをデコードする必要がある場合、ジョブがジョブキューに投稿され、その後ジョブスレッドで処理されます。</p><p>メモリ内サウンドの場合、参照カウントが使用され、データが一度だけロードされることを保証します。つまり、同じファイルパスで<code>ma_resource_manager_data_source_init()</code>を複数回呼び出すと、ファイルデータは一度だけロードされます。各<code>ma_resource_manager_data_source_init()</code>の呼び出しには、<code>ma_resource_manager_data_source_uninit()</code>の呼び出しを対応させる必要があります。プログラムが自己管理型の生オーディオデータを登録し、それをファイルパスに関連付けることが有用な場合があります。これを行うには、<code>ma_resource_manager_register_*()</code>および<code>ma_resource_manager_unregister_*()</code> APIを使用します。<code>ma_resource_manager_register_decoded_data()</code>は、指定されたデータ形式の生の自己管理型デコードオーディオデータへのポインタを指定された名前に関連付けるために使用されます。同様に、<code>ma_resource_manager_register_encoded_data()</code>は、生の自己管理型エンコードオーディオデータ（生ファイルデータ）へのポインタを指定された名前に関連付けるために使用されます。これらの名前は実際のファイルパスである必要はありません。<code>ma_resource_manager_data_source_init()</code>が呼び出されると（<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM</code>フラグなしで）、リソースマネージャはこれらの明示的に登録されたデータバッファを探し、見つかった場合はデータソースのバックデータとして使用します。リソースマネージャはこのデータのコピーを作成しないため、呼び出し元がそのポインタが有効であることを保証する必要があります。自己管理型データを登録解除するには、<code>ma_resource_manager_unregister_data()</code>を使用します。また、ファイルを登録および登録解除するために<code>ma_resource_manager_register_file()</code>および<code>ma_resource_manager_unregister_file()</code>を使用することもできます。自己管理型データポインタに対して<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM</code>フラグを使用するのは意味がありません。</p><h3 id="_6-1-非同期ローディングと同期" tabindex="-1">6.1. 非同期ローディングと同期 <a class="header-anchor" href="#_6-1-非同期ローディングと同期" aria-label="Permalink to &quot;6.1. 非同期ローディングと同期&quot;">​</a></h3><p>非同期ローディング時には、ローディングが完了したかどうかをポーリングすることが有用です。これを判断するには、<code>ma_resource_manager_data_source_result()</code>を使用します。メモリ内サウンドの場合、ファイルが完全にデコードされたときに<code>MA_SUCCESS</code>が返されます。サウンドがまだデコード中の場合、<code>MA_BUSY</code>が返されます。それ以外の場合、サウンドのロードに失敗した場合は他のエラーコードが返されます。ストリーミングデータソースの場合、最初のページがデコードされ、サウンドが再生準備が整ったときに<code>MA_SUCCESS</code>が返されます。最初のページがまだデコード中の場合、<code>MA_BUSY</code>が返されます。それ以外の場合、サウンドのロードに失敗した場合は他のエラーコードが返されます。</p><p>ポーリングに加えて、非同期でロードされたサウンドが終了するのを待つために「フェンス」と呼ばれるシンプルな同期オブジェクトを使用することもできます。これは<code>ma_fence</code>と呼ばれます。フェンスを使用する利点は、個々のサウンドを待つのではなく、一群のサウンドがロードを完了するのを待つために使用できることです。サウンドをロードするには2つのステージがあります：</p><ul><li>内部デコーダの初期化</li><li>ファイルのデコード完了（ファイルが完全にデコードされる）</li></ul><p>各ステージに対して別々のフェンスを指定できます。内部デコーダの初期化を待つことは、ファイルのサンプル形式、チャンネル数、およびサンプルレートを知る必要がある場合に重要です。</p><p>以下の例では、複数のサウンドをロードする際にフェンスを使用する方法を示しています：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// このフェンスはすべてのサウンドのロードが完全に終了したときに解除されます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_fence fence;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_fence_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// これは各サウンドの初期化ルーチンに渡されます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resource_manager_pipeline_notifications notifications </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_pipeline_notifications_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">notifications.done.pFence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fence;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ここで複数のサウンドをロードします：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iSound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; iSound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soundCount; iSound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_resource_manager_data_source_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pResourceManager, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pSoundFilePaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[iSound], flags, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">notifications, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pSoundSources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[iSound]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... サウンドがロードされている間に他の処理を行います ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サウンドのロードが終了するのを待ちます。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_fence_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>上記の例では、ファイル全体が完全にデコードされるのを待つためにフェンスを使用しました。内部デコーダの初期化が完了するのを待つだけで良い場合は、<code>ma_resource_manager_pipeline_notifications</code>オブジェクトの<code>init</code>メンバーを使用できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">notifications.init.pFence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fence;</span></span></code></pre></div><p>フェンスが適していない場合は、個別のサウンドごとにトリガーされるコールバックを使用することもできます。これはフェンスと非常に似た方法で行われます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_async_notification_callbacks cb;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyData;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} my_notification;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_notification_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_async_notification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_notification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyNotification </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (my_notification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)pNotification;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // サウンドのロード完了に応じて何かを行います。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_notification myCallback;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCallback.cb.onSignal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_notification_callback;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCallback.pMyData     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMyData;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resource_manager_pipeline_notifications notifications </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resource_manager_pipeline_notifications_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">notifications.done.pNotification </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCallback;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_resource_manager_data_source_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pResourceManager, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_sound.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, flags, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">notifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mySound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>上記の例では、<code>ma_async_notification_callbacks</code>オブジェクトを拡張し、そのインスタンスを<code>ma_resource_manager_pipeline_notifications</code>にフェンスと同様に渡していますが、<code>pFence</code>の代わりに<code>pNotification</code>を設定しています。これらの両方を同時に設定することができ、それぞれが期待通りに機能します。<code>pNotification</code>システムを使用する場合、<code>ma_async_notification_callbacks</code>オブジェクトが有効であることを確認する必要があります。</p><h3 id="_6-2-リソースマネージャの実装詳細" tabindex="-1">6.2. リソースマネージャの実装詳細 <a class="header-anchor" href="#_6-2-リソースマネージャの実装詳細" aria-label="Permalink to &quot;6.2. リソースマネージャの実装詳細&quot;">​</a></h3><p>リソースは主に次の2つの方法で管理されます：</p><ul><li>サウンド全体をメモリ内バッファ（データバッファと呼ばれる）に格納する方法</li><li>オーディオデータをリアルタイムでストリーミングする方法（データストリームと呼ばれる）</li></ul><p>リソース管理データソース（<code>ma_resource_manager_data_source</code>）は、データソースが<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM</code>フラグで初期化されたかどうかに応じて、データバッファまたはデータストリームをカプセル化します。フラグが指定された場合、<code>ma_resource_manager_data_stream</code>オブジェクトを使用します。そうでない場合は、<code>ma_resource_manager_data_buffer</code>オブジェクトを使用します。これらのオブジェクトはデータソースであるため、任意の<code>ma_data_source_*()</code> APIと一緒に使用できます。</p><p>リソースマネージャのもう一つの主要な機能は、オーディオファイルを非同期にデコードする能力です。これにより、オーディオスレッドが時間のかかるデコード作業から解放され、スケーラビリティに悪影響を与えずに済みます。非同期デコードはジョブシステムを通じて実現されます。中心にはマルチプロデューサー、マルチコンシューマー、固定容量のジョブキューがあります。非同期作業が必要な場合、ジョブがキューに投稿され、ジョブスレッドによって読み取られます。ジョブスレッドの数はスケーラビリティ向上のために設定可能で、ジョブスレッドは並行して実行され、実行順序を気にする必要はありません（これがどのように実現されるかは後述します）。</p><p>サウンドが非同期にロードされている場合、完全にデコードされる前に再生を開始できます。これにより、アプリケーションはサウンドの再生をすぐに開始し、同時にリソースマネージャがバックグラウンドでロードを続行できます。特定の時間にロードされているサウンドの数よりもスレッド数が少ない場合、デコード時間をバランスよく公平に保つために簡単なスケジューリングシステムが使用されます。リソースマネージャはデコードをページと呼ばれるチャンクに分割することでこれを解決します。デフォルトでは、各ページは1秒間です。ページがデコードされると、次のページのデコードを開始する新しいジョブが投稿されます。デコードをページに分割することで、個々のサウンドが他のすべてのサウンドの最初のページのデコードを遅らせることはありません。もちろん、多くのサウンドを同時にロードする場合、キュー内のジョブを処理するために必要な時間があり、負荷が高い状況では多少の遅延が発生することはあります。データソースがフレームの読み取り準備ができているかどうかを判断するには、<code>ma_resource_manager_data_source_get_available_frames()</code>を使用します。これは、現在の位置から利用可能なフレーム数を返します。</p><h4 id="_6-2-1-ジョブキュー" tabindex="-1">6.2.1. ジョブキュー <a class="header-anchor" href="#_6-2-1-ジョブキュー" aria-label="Permalink to &quot;6.2.1. ジョブキュー&quot;">​</a></h4><p>リソースマネージャは、マルチプロデューサー、マルチコンシューマー、固定容量のジョブキューを使用します。このジョブキューは現在、ロックフリーではなく、スピンロックを使用してスレッドセーフを実現しています。ジョブは固定数しか割り当てられず、キューに挿入されることができます。これは、固定サイズの配列にインデックスを割り当てるためのロックフリーデータ構造を介して行われ、ABA問題の緩和のために参照カウントを使用します。参照カウントは32ビットです。</p><p>多くのタイプのジョブでは、特定の順序で実行されることが重要です。このような場合、ジョブは直列に実行されます。リソースマネージャにおいては、ジョブの直列実行はオブジェクト単位（データバッファまたはデータストリームごと）でのみ必要です。各オブジェクトは実行カウンタを持っています。ジョブが投稿されると、それは実行カウンタと関連付けられます。ジョブが処理されるとき、ジョブの実行カウンタが所有オブジェクトの実行カウンタと一致するかどうかを確認し、一致する場合にジョブを処理します。カウンタが一致しない場合、ジョブは後で処理するためにジョブキューに再投稿されます。ジョブの処理が完了すると、メインオブジェクトの実行順序がインクリメントされます。このシステムにより、いくつのジョブスレッドが実行されても、個々のサウンドのデコードは常に直列に処理されます。同時に複数のサウンドをロードする場合、複数のスレッドを持つ利点が発揮されます。</p><p>リソースマネージャのジョブキューは100％ロックフリーではなく、ごく一部のコードセクションでスピンロックを使用してスレッドセーフを実現しています。これはリソースマネージャが複数のジョブスレッドを使用する場合にのみ関連します。デフォルトである単一のジョブスレッドを使用する場合、実際にはロックが待機状態になることはありません。ロックに費やす時間は非常に短いはずですが、厳密なロックフリー要件を持ち、複数のジョブスレッドを使用する必要がある場合は注意が必要です。このロックは将来のバージョンで削除する計画があります。</p><p>さらに、ジョブを投稿することでセマフォが解放されます。これはWin32では<code>ReleaseSemaphore</code>で実装され、POSIXプラットフォームでは条件変数を介して実装されます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pSemaphore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pSemaphore-&gt;value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pthread_cond_signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pSemaphore-&gt;cond);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pSemaphore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>これもまた、オーディオスレッドで厳密なロックフリー要件がある場合に関連します。これを回避するには、非ブロッキングモード（<code>MA_JOB_QUEUE_FLAG_NON_BLOCKING</code>フラグを使用）を使用し、独自のジョブ処理ルーチンを実装することができます（詳細は上記の「リソースマネージャ」セクションを参照してください）。</p><h4 id="_6-2-2-データバッファ" tabindex="-1">6.2.2. データバッファ <a class="header-anchor" href="#_6-2-2-データバッファ" aria-label="Permalink to &quot;6.2.2. データバッファ&quot;">​</a></h4><p>初期化時に<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM</code>フラグが除外されている場合、リソースマネージャはデータをメモリ内データバッファにロードしようとします。しかし、その前に指定されたファイルが既にロードされているかどうかを確認します。ロードされている場合、参照カウンタをインクリメントし、既にロードされているデータを使用します。これにより、時間とメモリを節約できます。データバッファが初期化解除されると、参照カウンタがデクリメントされます。カウンタがゼロになると、ファイルはアンロードされます。この点を理解しておくことが重要です。これにより、サウンドの過剰なロードおよびアンロードが発生する可能性があるためです。例えば、次のシーケンスは、ファイルが2回ロードされる結果になります：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_resource_manager_data_source_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pResourceManager, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ..., </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myDataBuffer0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 参照カウント = 1。初回ロード。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_resource_manager_data_source_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myDataBuffer0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                 // 参照カウント = 0。アンロード。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_resource_manager_data_source_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pResourceManager, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ..., </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myDataBuffer1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 参照カウント = 1。前回のuninit()により再ロード。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_resource_manager_data_source_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myDataBuffer1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                 // 参照カウント = 0。アンロード。</span></span></code></pre></div><p>バイナリ検索木（BST）は、データバッファの保存に使用されます。これは効率性とシンプルさのバランスが良いためです。BSTのキーは、<code>ma_resource_manager_data_source_init()</code>に渡されたファイルパスの64ビットハッシュです。ハッシュを使用する利点は、メモリの節約、比較の高速化、およびハッシュのランダムな性質によりほぼバランスの取れたBSTが得られることです。欠点は、ファイル名が大文字小文字を区別することと、名前の衝突の可能性があることです。大文字小文字の区別が問題になる場合は、データソースを初期化する前にファイル名を大文字または小文字に正規化するべきです。名前の衝突が問題になる場合は、衝突する名前の一方を変更するか、リソースマネージャを使用しないようにする必要があります。</p><p>サウンドファイルが既にロードされておらず、<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC</code>フラグが除外されている場合、ファイルは呼び出しスレッドによって同期的にデコードされます。データバッファにオーディオを保存する方法には、エンコードされたまま保存するか、デコードして保存するかの2つのオプションがあります。<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE</code>オプションが除外されている場合、生のファイルデータがメモリに保存されます。それ以外の場合は、メモリに保存する前にサウンドがデコードされます。同期ロードは非常にシンプルで標準的なプロセスであり、BSTにアイテムを追加し、メモリブロックを割り当て、次にデコードする（<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE</code>が指定されている場合）という手順です。</p><p><code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC</code>フラグが指定されている場合、データバッファのロードは非同期で行われます。この場合、ジョブがキューに投稿され、ロードが開始され、その後関数はすぐに戻り、内部結果コードが<code>MA_BUSY</code>に設定されます。この結果コードは、プログラムが<code>ma_resource_manager_data_source_result()</code>を呼び出したときに返されます。デコードが完全に完了すると、<code>MA_SUCCESS</code>が返されます。これにより、ロードが完全に完了したかどうかを確認できます。</p><p>非同期ロード時には、<code>MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE</code>タイプの単一ジョブがキューに投稿されます。これには、ファイルパスのコピーを作成し、それをジョブと関連付けることが含まれます。ジョブスレッドがジョブを処理するとき、まずリソースマネージャに関連付けられたVFSを使用してファイルをロードします。カスタムVFSを使用する場合、完全にスレッドセーフであることが重要です。個々のファイルは常に一度に1つのスレッドによってのみアクセスされるべきです。VFS経由でファイルを開いた後、ジョブはファイルがデコードされているかどうかを判断します。デコードされていない場合、メモリブロックを割り当てて生ファイル内容をロードし、戻ります。ファイルがデコードされている場合、まずヒープにデコーダを割り当てて初期化します。次に、ファイルの長さが既知かどうかを確認します。既知であれば、デコード出力を保存するためのメモリブロックを割り当て、無音に初期化します。サイズが不明な場合、1ページ分の領域を割り当てます。メモリが割り当てられた後、最初のページがデコードされます。サウンドが1ページより短い場合、結果コードは<code>MA_SUCCESS</code>に設定され、完了イベントがシグナルされ、ロードは完了します。しかし、デコードするものが残っている場合、<code>MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE</code>コードのジョブが投稿されます。このジョブは次のページをデコードし、終端に達すると同じプロセスを実行します。デコードするものがさらにある場合、次の<code>MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE</code>ジョブが投稿され、このプロセスはサウンドが完全にデコードされるまで続きます。長さが不明なサウンドの場合、各ページはリンクリストとしてリンクされます。内部的には、これは<code>ma_paged_audio_buffer</code>オブジェクトを介して実装されます。</p><h4 id="_6-2-3-データストリーム" tabindex="-1">6.2.3. データストリーム <a class="header-anchor" href="#_6-2-3-データストリーム" aria-label="Permalink to &quot;6.2.3. データストリーム&quot;">​</a></h4><p>データストリームは各インスタンスごとに常に2ページ分のデータのみを保存します。これらは、メモリに完全にデコードするとメモリを大量に消費するゲームの音楽トラックのような大きなサウンドに最適です。ページからの全フレームが読み取られると、次のページをロードするジョブがVFSから実行されるように投稿されます。</p><p>データストリームの場合、<code>MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC</code>フラグはデータソースの初期化が2ページ分のデコードを待つかどうかを決定します。このフラグが設定されていない場合、<code>ma_resource_manager_data_source_init()</code>は2ページ分がロードされるまで待ちます。それ以外の場合はすぐに戻ります。</p><p>データストリームからフレームを読み取るときに、利用可能なフレームがない場合、<code>ma_resource_manager_data_source_read_pcm_frames()</code>は<code>MA_BUSY</code>を返します。利用可能なフレームがある場合でも、要求された数より少ない場合は<code>MA_SUCCESS</code>を返しますが、実際に読み取られるフレーム数は要求された数より少なくなります。データストリームの非同期性のため、シークも非同期になります。データストリームがシークの途中である場合、フレームを読み取ろうとすると<code>MA_BUSY</code>が返されます。</p><p><code>ma_resource_manager_data_source_read_pcm_frames()</code>がページを完全に消費すると、新しいページをロードするジョブが投稿されます。これは<code>ma_resource_manager_data_source_read_pcm_frames()</code>を呼び出したのと同じスレッドから投稿されます。</p><p>データストリームはキューにジョブを投稿することによって初期化解除されますが、そのジョブが処理されるまで関数は戻りません。これは、呼び出し元がデータストリームオブジェクトを所有しており、miniaudioが呼び出し元に制御を戻す前にすべてが完了することを確認する必要があるためです。また、ページのデコードが進行中にデータストリームが初期化解除される場合、関連するオブジェクトを破棄する前にそれらが完了しなければならず、ジョブシステムがこれをクリーンに処理します。</p><p>新しいページをロードする必要がある場合、ジョブはオーディオスレッドからリソースマネージャのジョブスレッドに投稿されます。厳密なロックフリーオーディオスレッドが必要な場合は、イベントを投稿する際のロックに関する「ジョブキュー」セクションで言及された詳細を考慮する必要があります。</p><h2 id="_7-ノードグラフ" tabindex="-1">7. ノードグラフ <a class="header-anchor" href="#_7-ノードグラフ" aria-label="Permalink to &quot;7. ノードグラフ&quot;">​</a></h2><p>miniaudioのルーティングインフラはノードグラフのパラダイムに従います。基本的なアイデアは、出力が他のノードの入力に接続されたノードを作成し、グラフを形成することです。グラフ内にはさまざまなタイプのノードがあり、各ノードは入力データを処理して出力を生成し、それがチェーンを通じて伝達されます。グラフ内の各ノードは独自のカスタムエフェクトを適用できます。グラフの開始点には通常、データソースノードがあり、これらは入力を持たず、データソースからデータを取得します。グラフの終端にはエンドポイントがあり、最終出力がそこから抽出されます。</p><p>各ノードにはいくつかの入力バスと出力バスがあります。ノードの出力バスは他のノードの入力バスに接続されます。複数のノードが出力バスを他のノードの入力バスに接続することができ、その場合、出力はノードによって処理される前にミックスされます。以下は仮想ノードグラフの設定を示す図です：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; データは左から右に流れます &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>+---------------+                              +-----------------+</span></span>
<span class="line"><span>| データソース 1 =----+    +----------+    +----= ローパスフィルタ  =----+</span></span>
<span class="line"><span>+---------------+    |    |          =----+    +-----------------+    |    +----------+</span></span>
<span class="line"><span>                     +----= スプリッタ  |                                +----= エンドポイント |</span></span>
<span class="line"><span>+---------------+    |    |          =----+    +-----------------+    |    +----------+</span></span>
<span class="line"><span>| データソース 2 =----+    +----------+    +----= エコー / ディレイ  =----+</span></span>
<span class="line"><span>+---------------+                              +-----------------+</span></span></code></pre></div><p>上記のグラフでは、2つのデータソースから始まり、その出力がスプリッタノードの入力に接続されています。この時点で、2つのデータソースがミックスされます。ミックスの後、スプリッタは処理ルーチンを実行し、入力ストリームの複製を生成する2つの出力を生成します。1つの出力はローパスフィルタに接続され、もう1つの出力はエコー/ディレイに接続されます。ローパスフィルタとエコーの出力はエンドポイントに接続されており、両方とも同じ入力バスに接続されているため、ミックスされます。</p><p>各入力バスは同じチャンネル数を受け入れるように構成する必要がありますが、入力バスで使用されるチャンネル数は出力バスのチャンネル数と異なる場合があります。この場合、miniaudioは自動的に入力データを出力チャンネル数に変換してから処理します。あるノードの出力バスのチャンネル数は、それが接続される入力バスのチャンネル数と一致しなければなりません。ノードが初期化された後にチャンネル数を変更することはできません。出力バスを異なるチャンネル数の入力バスに接続しようとすると、接続は失敗します。</p><p>ノードグラフを使用するには、まず <code>ma_node_graph</code> オブジェクトを初期化する必要があります。これは、グラフ全体を囲むコンテナのようなものです。<code>ma_node_graph</code> オブジェクトは、後で説明するスレッドセーフの問題に必要です。<code>ma_node_graph</code> オブジェクトは、miniaudioの標準的な設定/初期化システムを使用して初期化されます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_node_graph_config nodeGraphConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_graph_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myChannelCount);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_graph_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraphConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 第2引数はアロケーションコールバックのポインタ。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ノードグラフの初期化に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ノードグラフを初期化するときに、エンドポイントのチャンネル数を指定します。エンドポイントは特別なノードであり、1つの入力バスと1つの出力バスを持ち、どちらも設定で指定された同じチャンネル数を持ちます。エンドポイントに直接接続するノードは、その出力バスのチャンネル数がエンドポイントのチャンネル数と一致するように構成する必要があります。ノードグラフからオーディオデータを読み取ると、設定で指定したチャンネル数のデータが取得されます。グラフからデータを読み取るには、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint32 framesRead;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_graph_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, frameCount, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">framesRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ノードグラフからのデータ読み取りに失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>オーディオデータを読み取るとき、miniaudioはノードグラフのエンドポイントノードから開始し、その入力アタッチメントからデータを取得します。これが再帰的にその入力からデータを取得し、最終的にデータソースノードにたどり着きます。グラフの開始点には、入力が0でデータソースから直接読み取るデータソースノードがあります。基本ノードは文字通り <code>ma_data_source</code> オブジェクトから読み取る必要はありませんが、常に何らかのオーディオソースとなる基底オブジェクトを持っています。<code>ma_data_source_node</code> ノードは <code>ma_data_source</code> から読み取るために使用できます。データは常に浮動小数点形式であり、グラフが初期化されたときに指定されたチャンネル数です。サンプルレートは基底のデータソースによって定義されます。これらが一貫した適切なサンプルレートを使用するようにするのはあなたの責任です。</p><p><code>ma_node</code> APIは、カスタムノードを比較的容易に実装できるように設計されていますが、miniaudioには一般的な機能のためのいくつかの標準ノードが含まれています。以下は、miniaudioに付属している標準ノードの1つであるデータソースから直接読み取るノード（<code>ma_data_source_node</code>）を初期化する方法です：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_data_source_node_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_node_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pMyDataSource);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_data_source_node dataSourceNode;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_source_node_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSourceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // データソースノードの作成に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>データソースノードは出力チャンネル数を使用して出力バスのチャンネル数を決定します。出力バスは1つで入力バスは0です（データはデータソースから直接取得されます）。データソースは浮動小数点形式（<code>ma_format_f32</code>）で出力する必要があります。そうでない場合、<code>ma_data_source_node_init()</code> はエラーを返します。</p><p>デフォルトでは、ノードはグラフに接続されていません。接続するには、<code>ma_node_attach_output_bus()</code>を使用します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_attach_output_bus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSourceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_graph_get_endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ノードの接続に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記のコードはデータソースノードをエンドポイントに直接接続します。データソースノードには単一の出力バスしかないため、インデックスは常に0です。同様に、エンドポイントには単一の入力バスしかないため、入力バスのインデックスも常に0です。</p><p>特定の出力バスを切り離すには、<code>ma_node_detach_output_bus()</code>を使用します。すべての出力バスを切り離すには、<code>ma_node_detach_all_output_buses()</code>を使用します。出力バスをある接続から別の接続に移動するだけの場合、最初に切り離す必要はありません。<code>ma_node_attach_output_bus()</code>を呼び出すだけで、自動的に処理されます。</p><p>カスタムエフェクトを適用するために独自の処理コールバックを実装する特殊なノードを作成する必要があることもあります。これは、標準ノードタイプの1つを初期化するのに似ていますが、今回は処理関数へのポインタと入力および出力バスの数を含むvtableへのポインタを指定する必要があります。例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_custom_node_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ppFramesIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pFrameCountIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ppFramesOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_uint32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pFrameCountOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ppFramesInの処理（入力バスごとに1つのオーディオデータストリーム）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pFramesIn_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ppFramesIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // インデックス0の入力バス。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pFramesIn_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ppFramesIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // インデックス1の入力バス。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pFramesOut_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ppFramesOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // インデックス0の出力バス。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 処理を行います。入力時に、pFrameCountInはppFramesIn内の各バッファの入力フレーム数、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // pFrameCountOutはppFramesOut内の各バッファの容量です。出力時には、pFrameCountInには</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ノードが消費した入力フレーム数を設定し、pFrameCountOutには生成された出力フレーム数を設定します。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // できるだけ多くのフレームを処理する必要があります。エフェクトが入力フレームを出力フレームと</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 同じ速度で消費する場合（リサンプリングを行わない限り常にそうです）、ppFramesOutを見て</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // その正確な数のフレームを処理するだけです。リサンプリングを行う場合は、pFrameCountInと</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // pFrameCountOutの両方を適切に設定する必要があります。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_node_vtable my_custom_node_vtable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_custom_node_process_pcm_frames,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // カスタムノードを処理するために呼び出される関数。ここでエフェクト処理を実装します。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // オプション。指定された出力フレーム数を処理するために必要な入力フレーム数を計算するためのコールバック。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 2つの入力バス。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 1つの出力バス。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // デフォルトフラグ。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 各バスにはチャンネル数を指定する必要があります。これを行うには、チャンネル数を配列で指定し、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// それをノード設定に渡します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint32 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inputChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // vtableで指定された入力チャンネルの数と同じサイズ。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint32 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">outputChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // vtableで指定された出力チャンネルの数と同じサイズ。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inputChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channelsIn;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inputChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channelsIn;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">outputChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channelsOut;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_node_config nodeConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.vtable          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_custom_node_vtable;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.pInputChannels  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputChannels;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.pOutputChannels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputChannels;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_node_base node;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ノードの初期化に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>カスタムノードを初期化する場合、上記のコードのように、通常はvtableを静的領域に配置します。入力バスと出力バスの数はvtableの一部として指定されます。ノードごとに可変数のバスが必要な場合、vtableの該当するバス数を<code>MA_NODE_BUS_COUNT_UNKNOWN</code>に設定する必要があります。この場合、バス数はノード設定で指定する必要があります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_node_vtable my_custom_node_vtable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_custom_node_process_pcm_frames,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // カスタムノードを処理するために呼び出される関数。ここでエフェクト処理を実装します。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // オプション。指定された出力フレーム数を処理するために必要な入力フレーム数を計算するためのコールバック。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MA_NODE_BUS_COUNT_UNKNOWN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 入力バスの数はノードごとに決定されます。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 1つの出力バス。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // デフォルトフラグ。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_node_config nodeConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.vtable          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_custom_node_vtable;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.inputBusCount   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myBusCount;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // &lt;-- vtableがMA_NODE_BUS_COUNT_UNKNOWNを指定している場合、入力バスの数をここで設定します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.pInputChannels  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputChannels;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // &lt;-- この配列にはnodeConfig.inputBusCount個の要素があることを確認してください。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.pOutputChannels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputChannels;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &lt;-- vtableが1つの出力バスを指定しているため、この配列には1つの要素がある必要があります。</span></span></code></pre></div><p>上記の例では、vtableが明示的なカウントを指定している場合、<code>inputBusCount</code>および<code>outputBusCount</code>メンバーをデフォルト以外の値に設定しないようにすることが重要です。これらのメンバーは、vtableが該当するバス数に<code>MA_NODE_BUS_COUNT_UNKNOWN</code>を指定している場合にのみ設定できます。</p><p>ほとんどの場合、ノードをいくつかの追加データと共にカプセル化する構造体を作成したくなるでしょう。この場合、<code>ma_node_base</code>オブジェクトが構造体の最初のメンバーであることを確認する必要があります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_node_base base;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &lt;-- 常に最初のメンバーであることを確認します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someCustomData;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} my_custom_node;</span></span></code></pre></div><p>このようにすることで、あなたのオブジェクトはすべての<code>ma_node</code> APIと互換性があり、他のノードと同様にグラフに接続できます。</p><p>カスタム処理コールバック（上記の例では<code>my_custom_node_process_pcm_frames()</code>）では、各バスのチャンネル数はノードが<code>ma_node_init()</code>で初期化されたときに設定で指定されたものです。さらに、各入力バスへのすべてのアタッチメントはminiaudioによって事前にミックスされています。設定により、各入力バスおよび出力バスのチャンネル数を個別に指定できます。エフェクトはそれを適切に処理する必要があり、処理できない場合は初期化ルーチンでエラーを返す必要があります。</p><p>カスタムノードには、その動作を説明するためのフラグを割り当てることができます。これらはvtableを介して設定され、以下のようなものがあります：</p><table tabindex="0"><thead><tr><th>フラグ名</th><th>説明</th></tr></thead><tbody><tr><td>MA_NODE_FLAG_PASSTHROUGH</td><td>オーディオ処理を行わず、時間の追跡、イベントの処理などに使用されるノードに便利です。また、内部エンドポイントノードでも使用されます。入力バスから出力バスに直接読み込みます。このフラグを持つノードは、正確に1つの入力バスと1つの出力バスを持ち、両方のバスは同じチャンネル数でなければなりません。</td></tr><tr><td>MA_NODE_FLAG_CONTINUOUS_PROCESSING</td><td>入力アタッチメントからデータを読み取ることができない場合でも、処理コールバックを呼び出します。ノードに少なくとも1つの入力バスがあり、入力が接続されていないか、入力がデータを提供しない場合、ノードの処理コールバックは呼び出されません。このフラグを設定すると、入力データが受信されているかどうかに関係なく、常にコールバックが呼び出されます。これは、エコーのような効果に有用です。この効果では、元のデータソースが終了した後でも処理する必要があるオーディオデータの尾部が残ります。入力が接続されていない場合でも処理コールバックを常に呼び出す必要があるノードにも有用です。</td></tr><tr><td>MA_NODE_FLAG_ALLOW_NULL_INPUT</td><td>MA_NODE_FLAG_CONTINUOUS_PROCESSINGと組み合わせて使用されます。これが設定されている場合、処理コールバックのppFramesInパラメータは、利用可能な入力フレームがない場合にNULLに設定されます。これが設定されていない場合、処理コールバックに対して無音が提供されます。</td></tr><tr><td>MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES</td><td>入力フレームと出力フレームが異なるレートで処理されることをminiaudioに伝えるために使用されます。リサンプリングを行うノードに対して設定する必要があります。</td></tr><tr><td>MA_NODE_FLAG_SILENT_OUTPUT</td><td>ノードが無音の出力のみを生成することをminiaudioに伝えます。これは、出力を最終ミックスに寄与させたくないノードに有用です。例として、ストリームを分割し、一方の分岐をファイルに出力する場合があります。このフラグを使用する場合、ノードの処理コールバックの出力バッファに書き込むのは避けるべきです。miniaudioはそれを無視するためです。</td></tr></tbody></table><p>エフェクト処理のためにオーディオストリームのコピーが必要な場合、<code>ma_splitter_node</code>と呼ばれるスプリッタノードを使用できます。これは1つの入力バスを持ち、ストリームを2つの出力バスに分割します。以下のように使用できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_splitter_node_config splitterNodeConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_splitter_node_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channels);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_splitter_node splitterNode;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_splitter_node_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNodeConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ノードの作成に失敗しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力バスを2つの異なる入力バス（2つの異なるノードでも可）に接続します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_attach_output_bus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_graph_get_endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // エンドポイントに直接接続。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_attach_output_bus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myEffectNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // あるエフェクトノードの入力バス0に接続。</span></span></code></pre></div><p>出力バスの音量はバスごとに設定できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_output_bus_volume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_output_bus_volume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>以下のコードでは、前述のスプリッターノードを使用し、コピーされた各ストリームの音量を変更しています。</p><p>ノードを開始および停止するには、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_node_state_started);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // デフォルトの状態。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">splitterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_node_state_stopped);</span></span></code></pre></div><p>デフォルトでは、ノードは開始状態にありますが、何にも接続されていないため、接続されるまでノードグラフによって実際には呼び出されません。ノードを停止すると、その入力接続からデータが読み取られなくなります。この特性を利用して、一連のサウンドを一度に停止できます。</p><p>ノードの初期状態を設定するには、その設定内で次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeConfig.initialState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_node_state_stopped;</span></span></code></pre></div><p>ストックされた特殊ノードの場合、すべての設定にはベースノードに使用する設定である<code>nodeConfig</code>メンバーがあります。これは、特殊ノードの初期状態を設定する場所です：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataSourceNodeConfig.nodeConfig.initialState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_node_state_stopped;</span></span></code></pre></div><p><code>ma_data_source_node</code>や<code>ma_splitter_node</code>などの特殊ノードを使用する場合は、<code>nodeConfig</code>オブジェクトの<code>vtable</code>メンバーを変更しないように注意してください。</p><h3 id="_7-1-タイミング" tabindex="-1">7.1. タイミング <a class="header-anchor" href="#_7-1-タイミング" aria-label="Permalink to &quot;7.1. タイミング&quot;">​</a></h3><p>ノードグラフは、ノードを特定の時間に開始および停止するスケジュールをサポートしています。これは、データソースノードをセットアップして、特定の時間に再生を開始する場合に特に便利です。時計にはローカルとグローバルの2種類があります。</p><p>ローカルクロックはノードごとに存在し、グローバルクロックはグラフ全体に存在します。開始および停止のスケジュール設定はグローバルクロックに基づいてのみ行えます。これは、ノードが停止している間はローカルクロックが進行しないためです。グローバルクロックは<code>ma_node_graph_read_pcm_frames()</code>が呼び出されるたびに進行します。一方、ローカルクロックはノードの処理コールバックが呼び出されると進行し、出力フレーム数に基づいて進行します。</p><p>グローバル時間を取得するには、<code>ma_node_graph_get_time()</code>を使用します。グローバル時間を設定するには、<code>ma_node_graph_set_time()</code>を使用します。これは、グローバルタイムライン上でシークを行う場合に役立ちます。ローカル時間の取得と設定も同様です。<code>ma_node_get_time()</code>を使用してローカル時間を取得し、<code>ma_node_set_time()</code>を使用してローカル時間を設定します。グローバル時間とローカル時間はオーディオスレッドによって進行するため、データ競合を避けるために注意が必要です。理想的には、ノード処理コールバックの外部でこれらの関数を呼び出すのは避けるべきです。処理コールバックは常にオーディオスレッド上で実行されます。</p><p>ノードの開始と停止のスケジュール設定には基本的なサポートがあります。一度に1つの開始と1つの停止しかスケジュールできません。これは主に、フレーム単位で正確にノードを開始または停止するために設計されています。このメカニズムがない場合、ノードの開始と停止は<code>ma_node_graph_read_pcm_frames()</code>の呼び出しの解像度に制限され、通常は数ミリ秒単位のブロックになります。以下のAPIを使用してノードの状態をスケジュールできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_state_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_get_state_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>時間は絶対値で、グローバルクロックに基づく必要があります。以下に例を示します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_state_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_node_state_started, sampleRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 1秒遅延して開始。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_state_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_node_state_stopped, sampleRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 5秒遅延して停止。</span></span></code></pre></div><p>相対時間を使用して状態を変更する例です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_state_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_node_state_started, sampleRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_graph_get_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myNodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_node_set_state_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ma_node_state_stopped, sampleRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_node_graph_get_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">myNodeGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>マルチスレッドの性質上、時間が100％正確でない場合があります。これが問題となる場合、処理コールバック内で状態変更をスケジュールすることを検討してください。パススルートリガーノードを使用して時間を追跡し、イベントを処理する方法が考えられます。</p><h3 id="_7-2-スレッドセーフティとロック" tabindex="-1">7.2. スレッドセーフティとロック <a class="header-anchor" href="#_7-2-スレッドセーフティとロック" aria-label="Permalink to &quot;7.2. スレッドセーフティとロック&quot;">​</a></h3><p>オーディオ処理時には、オーディオスレッドでロックを使用しないことが理想的です。<code>ma_node_graph_read_pcm_frames()</code>はオーディオスレッドで実行されることが期待されているため、ロックなしで実行されます。このセクションでは、miniaudioで使用されている実装と、この目標を達成するためにminiaudioが採用したいくつかの妥協点について説明します。現在の実装が理想的でない可能性があることに注意してください。フィードバックと批評は大歓迎です。</p><p>ノードグラフAPIは完全にロックフリーではありません。<code>ma_node_graph_read_pcm_frames()</code>のみがロックフリーであることが期待されています。ノードのアタッチ、デタッチ、アンイニシャライズには、実装を簡素化するためにロックが使用されますが、これらの操作はオーディオデータの読み取り時にはロックを必要としないように作成されています。これらの領域でのロックはスピンロックによって達成されます。</p><p><code>ma_node_graph_read_pcm_frames()</code>をロックフリーに保つための主な問題は、ノードがアンイニシャライズされ、そのメモリがオーディオスレッドで処理中に解放される可能性があるという事実に起因します。オーディオスレッドがノードを参照している場合があるため、ノードのアンイニシャライズプロセスは、オーディオスレッドが終了するまで戻りを遅延させ、呼び出し元に制御が渡されてノードのメモリを解放する機会が与えられないようにする必要があります。</p><p>オーディオスレッドがノードを処理する際には、そのノードの各出力バスからデータを読み取ります。ノードが出力バスのデータを処理するためには、各入力バスからデータを読み取る必要があります。そのため、ノードのすべての出力バスがデタッチされると、そのノード全体が切断され、出力バスが再接続されない限り（ノードがアンイニシャライズされる際には再接続は行われません）、それ以上の処理は行われなくなります。<code>ma_node_detach_output_bus()</code>がオーディオスレッドの処理が完了するまで待機することで、いくつかのことが簡素化されますが、その代わりに<code>ma_node_detach_output_bus()</code>が少し遅くなります。このようにすることで、<code>ma_node_uninit()</code>の実装が簡単になります。つまり、すべての出力ノードをデタッチし、その後、各入力ノードへの接続をデタッチし、最後に必要なクリーンアップを行います。</p><p>上記の設計において、最悪の場合、<code>ma_node_detach_output_bus()</code>はデタッチする出力バスの処理にかかる時間と同じだけの時間がかかります。これは、オーディオスレッドがそのノードの処理を開始したばかりのタイミングで呼び出された場合に発生します。<code>ma_node_detach_output_bus()</code>の呼び出し元は、オーディオスレッドが終了するまで待機しなければなりません。これには、入力データを再帰的に処理するコストも含まれます。これは、miniaudioが採用したロックフリーの処理システムにおける最大の妥協点です。パイプラインの初期段階（データソースなど）でのノードのデタッチコストは、最終的な後処理エンドポイントなどの上位レベルのノードのデタッチコストよりも安価です。大量のデタッチが必要な場合は、最下位のノードから始めて、最終エンドポイントノードに向かってデタッチを進めてください（ただし、ノードグラフのエンドポイントをデタッチしようとしないでください）。オーディオスレッドが実行されていない場合、デタッチは迅速に行われ、順序に関係なく同じ速度で行われます。ノードが入力接続の処理を完了するのを待つ必要があるのは、データソース間の同期ずれの可能性があるためです。ノードが入力の処理中に処理を終了すると、いくつかの基礎となるデータソースが読み取られ、他のデータソースは読み取られない可能性があります。これにより、上位レベルのノードをデタッチおよび再接続する際に同期ずれが発生する可能性があります。これを解決する1つの方法は、すべての入力接続を処理する前に処理を終了するオプションを持つことです。</p><p>もう1つの妥協点は、ノードのアタッチおよびデタッチ時のロックです。これは、メモリオーバーヘッドを減らすためにスピンロックを使用して達成されます。入力バスと出力バスのそれぞれにロックがあります。ノードの出力バスが他のノードの入力バスに接続されるとき、出力バスと入力バスの両方がロックされます。このロックは異なるスレッド間でのアタッチおよびデタッチのためのものであり、<code>ma_node_graph_read_pcm_frames()</code>には影響しません。ロックおよびアンロックは基本的に自明ですが、アタッチおよびデタッチが発生している間にリストを反復処理する必要がある場合のために、少し直感的でない側面もあります。</p><p>アタッチおよびデタッチは非常にシンプルです。ノードの出力バスが他のノードの入力バスに接続されると、リンクリストに追加されます。基本的に、入力バスはリンクリストであり、リストの各項目は出力バスです。実装を簡素化するために、リンクリストで行うことにいくつかの制約があります。まず、リストを反復処理する必要がある場合、前方方向にのみ行う必要があります。後方方向の反復処理はサポートされていません。また、項目はリストの先頭にのみ追加できます。</p><p>リンクリストは二重リンクリストであり、リストの各項目（出力バス）は次の項目へのポインタと前の項目へのポインタを持ちます。前の項目へのポインタはノードの高速デタッチのためにのみ必要であり、反復処理には使用されません。これは重要な特性であり、反復処理の観点から見ると、項目のアタッチおよびデタッチは単一のアトミックな代入で行うことができます。これは、アタッチおよびデタッチプロセスの両方で利用されます。ノードをアタッチする際、最初に行うのはノードのローカルな「次」および「前」のポインタの設定です。その後、項目はヘッドポインタを使用してアトミックに交換することでリストに「アタッチ」されます。その後、次の項目の「前」ポインタが設定されていなくても、反復処理の観点からはリストに「アタッチ」されます。反復処理は前方方向にのみ行われるため、「前」ポインタは実際には使用されません。同様のプロセスがデタッチにも適用されます。<code>ma_node_attach_output_bus()</code>および<code>ma_node_detach_output_bus()</code>の実装を参照してください。</p><h2 id="_8-デコード" tabindex="-1">8. デコード <a class="header-anchor" href="#_8-デコード" aria-label="Permalink to &quot;8. デコード&quot;">​</a></h2><p><code>ma_decoder</code> APIはオーディオファイルを読み取るために使用されます。デコーダはデバイスから完全に切り離されており、独立して使用することができます。以下の形式については、組み込みのサポートが含まれています：</p><table tabindex="0"><thead><tr><th>形式</th></tr></thead><tbody><tr><td>WAV</td></tr><tr><td>MP3</td></tr><tr><td>FLAC</td></tr></tbody></table><p>組み込みのデコーダを無効にするには、miniaudioの実装前に以下のオプションのうち1つまたは複数を指定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MA_NO_WAV</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MA_NO_MP3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MA_NO_FLAC</span></span></code></pre></div><p>miniaudioはカスタムデコーダのプラグイン機能をサポートしています。カスタムデコーダの使用方法については、以下のセクションを参照してください。</p><p>デコーダは、<code>ma_decoder_init_file()</code>でファイルから、<code>ma_decoder_init_memory()</code>でメモリブロックから、またはコールバック経由でデータを受け取る<code>ma_decoder_init()</code>から初期化できます。以下は、ファイルからデコーダをロードする例です：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_decoder decoder;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_decoder_init_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MySong.mp3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // エラーが発生しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_decoder_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>デコーダを初期化するときには、オプションで<code>ma_decoder_config</code>オブジェクトへのポインタを渡すことができます（上の例ではNULL引数）。これにより、出力形式、チャンネル数、サンプルレート、およびチャンネルマップを設定できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_decoder_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_decoder_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_format_f32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>ma_decoder_init*()</code>にデコーダ構成でNULLを渡すと、出力形式はデコードバックエンドによって定義されたものと同じになります。</p><p>デコーダからデータをPCMフレームとして読み取ります。これは実際に読み取られたPCMフレームの数を出力します。これが要求されたPCMフレーム数より少ない場合は、終端に達したことを意味します。返り値がMA_AT_ENDである場合、サンプルが読み取られず終端に達しています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_decoder_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDecoder, pFrames, framesToRead, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">framesRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (framesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> framesToRead) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 終端に達しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、特定のフレームにシークすることもできます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_decoder_seek_to_pcm_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDecoder, targetFrame);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // エラーが発生しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>先頭に戻ってループさせたい場合は、単に最初のPCMフレームにシークします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_decoder_seek_to_pcm_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pDecoder, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>デコーダをロードする際、miniaudioは適切なデコードバックエンドを見つけるために試行錯誤の手法を使用します。これはタイプが既に判明している場合、不要な非効率を引き起こす可能性があります。この場合、デバイス構成内の<code>encodingFormat</code>変数を使用してデコードしたい特定のエンコーディング形式を指定できます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoderConfig.encodingFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ma_encoding_format_wav;</span></span></code></pre></div><p>利用可能なエンコーディング形式については、<code>ma_encoding_format</code>列挙型を参照してください。</p><p><code>ma_decoder_init_file()</code> APIは、ファイル拡張子を使用して優先されるデコードバックエンドを判断しようとします。</p><h3 id="_8-1-カスタムデコーダ" tabindex="-1">8.1. カスタムデコーダ <a class="header-anchor" href="#_8-1-カスタムデコーダ" aria-label="Permalink to &quot;8.1. カスタムデコーダ&quot;">​</a></h3><p>カスタムデコーダを実装してminiaudioにプラグインすることが可能です。これは、<code>ma_decoder</code> APIを使用したいが、miniaudioが標準でサポートしていないエンコーディング形式をサポートする必要がある場合に非常に有用です。特に、<code>ma_engine</code>および/または<code>ma_resource_manager</code> APIを使用する際に役立ちます。これらは内部で<code>ma_decoder</code>を使用するためです。例えば、Opusをサポートしたい場合、カスタムデコーダを使用して実現できます（miniaudioリポジトリの&quot;extras&quot;フォルダには、libopus + libopusfileを使用した参考用のOpusデコーダがあります）。</p><p>カスタムデコーダはデータソースを実装する必要があります。<code>ma_decoding_backend_vtable</code>と呼ばれるvtableを実装し、デコーダ構成に渡します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_decoding_backend_vtable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pCustomBackendVTables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_ma_decoding_backend_vtable_libvorbis,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_ma_decoding_backend_vtable_libopus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoderConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_decoder_config_init_default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoderConfig.pCustomBackendUserData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoderConfig.ppCustomBackendVTables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pCustomBackendVTables;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoderConfig.customBackendCount     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pCustomBackendVTables) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pCustomBackendVTables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p><code>ma_decoding_backend_vtable</code> vtableには以下の関数があります：</p><ul><li><code>onInit</code></li><li><code>onInitFile</code></li><li><code>onInitFileW</code></li><li><code>onInitMemory</code></li><li><code>onUninit</code></li></ul><p>実装が必要なのは、<code>onInit</code>と<code>onUninit</code>の2つの関数だけです。他の関数は、ファイルパスやメモリからのロードに関する小さな最適化のために実装できます。これらが指定されていない場合、miniaudioが汎用実装を使用して処理します。</p><p>カスタムデータソースを初期化する際（vtableの<code>onInit</code>関数を実装することにより）、カスタムデコーダを実装する<code>ma_data_source</code>へのポインタを出力する必要があります。これの実装方法については、データソースに関するセクションを参照してください。または、miniaudioリポジトリの&quot;custom_decoders&quot;の例を参照してください。</p><p><code>onInit</code>関数は、任意のソースから生のオーディオデータを読み取るためのコールバックへのポインタを取ります。これらの関数を使用して生データから読み取り、デコードを行います。呼び出す際には、関連するパラメータに<code>pReadSeekTellUserData</code>ポインタを渡します。</p><p><code>onInit</code>の<code>pConfig</code>パラメータは、適切な場合にバックエンドを設定するために使用できます。これはあくまでヒントとして使われるものであり、無視しても構いません。しかし、これらのプロパティがデコーダに関連する場合、最適な実装ではこれらのプロパティを適切に処理します。</p><p>メモリ割り当てが必要な場合は、可能であれば指定された割り当てコールバック（<code>pAllocationCallbacks</code>パラメータ）を介して行うべきです。</p><p>デコーダの初期化中にエラーが発生した場合は、<code>ppBackend</code>を設定せずに、またはNULLに設定し、すべてを適切にクリーンアップして適切な結果コードを返すようにしてください。複数のカスタムバックエンドが指定されている場合、miniaudioはデコーダ設定に渡された配列にリストされている順序でvtableを巡回するため、初期化ルーチンがクリーンであることが重要です。</p><p>デコーダが初期化解除されると、<code>onUninit</code>コールバックが呼び出され、内部データをクリーンアップする機会が与えられます。</p><h2 id="_9-エンコーディング" tabindex="-1">9. エンコーディング <a class="header-anchor" href="#_9-エンコーディング" aria-label="Permalink to &quot;9. エンコーディング&quot;">​</a></h2><p><code>ma_encoding</code> APIはオーディオファイルの書き込みに使用されます。唯一サポートされている出力形式はWAVです。これを無効にするには、miniaudioの実装前に次のオプションを指定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MA_NO_WAV</span></span></code></pre></div><p>エンコーダは<code>ma_encoder_init_file()</code>を使用してファイルに書き込むために初期化するか、コールバックを介して提供されるデータから初期化します。以下は、エンコーダを初期化してファイルに出力する例です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_encoder_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_encoder_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_encoding_format_wav, FORMAT, CHANNELS, SAMPLE_RATE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_encoder encoder;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_encoder_init_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_file.wav&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_encoder_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>エンコーダを初期化する際には、<code>ma_encoder_config_init()</code>で初期化された設定を指定する必要があります。ここで、ファイルタイプ、出力サンプル形式、出力チャンネル数、出力サンプルレートを指定します。以下のファイルタイプがサポートされています：</p><table tabindex="0"><thead><tr><th>列挙型</th><th>説明</th></tr></thead><tbody><tr><td>ma_encoding_format_wav</td><td>WAV</td></tr></tbody></table><p>形式、チャンネル数、サンプルレートが出力ファイルタイプでサポートされていない場合はエラーが返されます。エンコーダはデータ変換を行わないため、オーディオデータを出力する前に変換する必要があります。オーディオデータを出力するには、以下の例のように<code>ma_encoder_write_pcm_frames()</code>を使用します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 framesWritten;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_encoder_write_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pPCMFramesToWrite, framesToWrite, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">framesWritten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ... エラー処理 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>framesWritten</code>変数には実際に書き込まれたPCMフレームの数が含まれます。これは任意であり、必要ない場合はNULLを渡すことができます。</p><p>エンコーダは<code>ma_encoder_uninit()</code>で初期化解除する必要があります。</p><h2 id="_10-データ変換" tabindex="-1">10. データ変換 <a class="header-anchor" href="#_10-データ変換" aria-label="Permalink to &quot;10. データ変換&quot;">​</a></h2><p>miniaudioには、ほとんどのデータ変換要件をサポートするデータ変換APIが含まれています。これには、サンプルフォーマット、チャンネル数（チャンネルマッピングを含む）、およびサンプルレート間の変換が含まれます。</p><h3 id="_10-1-サンプルフォーマット変換" tabindex="-1">10.1. サンプルフォーマット変換 <a class="header-anchor" href="#_10-1-サンプルフォーマット変換" aria-label="Permalink to &quot;10.1. サンプルフォーマット変換&quot;">​</a></h3><p>サンプルフォーマット間の変換は、ma_pcm_<em><em>to</em></em>()、ma_pcm_convert()、およびma_convert_pcm_frames_format() APIを使用して実現されます。特定のフォーマット間の変換にはma_pcm_<em><em>to</em></em>()を使用します。ma_pcm_convert()はma_format変数に基づいて変換を行います。ma_convert_pcm_frames_format()は、フレーム数とチャンネル数を変数として指定してPCMフレームを変換する場合に使用します。</p><h3 id="_10-1-1-ディザリング" tabindex="-1">10.1.1. ディザリング <a class="header-anchor" href="#_10-1-1-ディザリング" aria-label="Permalink to &quot;10.1.1. ディザリング&quot;">​</a></h3><p>ディザリングはditherModeパラメータを使用して設定できます。</p><p>効率の順に、異なるディザリングモードは次の通りです：</p><table tabindex="0"><thead><tr><th>タイプ</th><th>列挙子</th></tr></thead><tbody><tr><td>なし</td><td>ma_dither_mode_none</td></tr><tr><td>長方形</td><td>ma_dither_mode_rectangle</td></tr><tr><td>三角形</td><td>ma_dither_mode_triangle</td></tr></tbody></table><p>ディザーモードがma_dither_mode_none以外に設定されていても、ディザリングが必要ない変換では無視されることに注意してください。ディザリングは次の変換で利用可能です：</p><ul><li>s16 -&gt; u8</li><li>s24 -&gt; u8</li><li>s32 -&gt; u8</li><li>f32 -&gt; u8</li><li>s24 -&gt; s16</li><li>s32 -&gt; s16</li><li>f32 -&gt; s16</li></ul><p>ディザが使用されない変換でma_dither_mode_none以外を指定してもエラーにはなりません。ただし、無視されます。</p><h3 id="_10-2-チャンネル変換" tabindex="-1">10.2. チャンネル変換 <a class="header-anchor" href="#_10-2-チャンネル変換" aria-label="Permalink to &quot;10.2. チャンネル変換&quot;">​</a></h3><p>チャンネル変換は、チャンネルの再配置およびチャンネル数の変換に使用されます。ma_channel_converter APIはチャンネル変換に使用されます。以下は、モノラルからステレオへの単純なチャンネルコンバータを初期化する例です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_channel_converter_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_channel_converter_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_format,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      // サンプルフォーマット</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                              // 入力チャンネル数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           // 入力チャンネルマップ</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                              // 出力チャンネル数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           // 出力チャンネルマップ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_channel_mix_mode_default);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // チャンネルを組み合わせる際のミキシングアルゴリズム</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_channel_converter_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">converter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>変換を実行するには、次のようにma_channel_converter_process_pcm_frames()を呼び出します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_channel_converter_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">converter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, pFramesIn, frameCount);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>出力バッファが新しいPCMフレームを収容できる十分なサイズであることを呼び出し元が確認する必要があります。</p><p>入力および出力のPCMフレームは常にインターリーブされています。デインターリーブされたレイアウトはサポートされていません。</p><h3 id="_10-2-1-チャンネルマッピング" tabindex="-1">10.2.1. チャンネルマッピング <a class="header-anchor" href="#_10-2-1-チャンネルマッピング" aria-label="Permalink to &quot;10.2.1. チャンネルマッピング&quot;">​</a></h3><p>上記の例のように、チャンネル数を変換するだけでなく、チャンネルコンバータはチャンネルを再配置するためにも使用できます。チャンネルコンバータを初期化する際に、入力および出力フレームのチャンネルマップをオプションで渡すことができます。チャンネル数が同じで、各チャンネルマップに同じチャンネル位置が含まれている場合（順序が異なるだけの場合）、単純なチャンネルのシャッフルが行われます。しかし、チャンネル位置の1:1のマッピングが存在しない場合や、チャンネル数が異なる場合は、ma_channel_converter_configオブジェクトを初期化する際に指定されたミキシングモードに基づいて入力チャンネルがミックスされます。</p><p>モノラルからマルチチャンネルに変換する場合、モノラルチャンネルは各出力チャンネルに単純にコピーされます。逆にマルチチャンネルからモノラルに変換する場合は、各出力チャンネルの音声が単純に平均化され、モノラルチャンネルにコピーされます。</p><p>より複雑な場合では、ブレンディングが使用されます。ma_channel_mix_mode_simpleモードでは、余分なチャンネルを削除し、追加のチャンネルを無音にします。例えば、4チャンネルから2チャンネルに変換する場合、3番目と4番目のチャンネルは削除され、2チャンネルから4チャンネルに変換する場合、3番目と4番目のチャンネルには無音が入ります。</p><p>ma_channel_mix_mode_rectangleモードは、矩形に基づいた空間的な位置を使用して、入力と出力の間の単純な分布を計算します。部屋の中央に座り、壁に設置されたスピーカーがチャンネル位置を表していると想像してください。MA_CHANNEL_FRONT_LEFT位置は、前面と左側の壁の角にあると考えられます。</p><p>最後に、ma_channel_mix_mode_custom_weightsモードを使用して、カスタムのユーザー定義のウェイトを使用できます。カスタムウェイトは、ma_channel_converter_config_init()の最後のパラメータとして渡すことができます。</p><p>事前定義されたチャンネルマップは、ma_channel_map_init_standard()で取得できます。これは、最初のパラメータとしてma_standard_channel_map列挙を受け取り、以下のいずれかを指定できます：</p><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>ma_standard_channel_map_default</td><td>miniaudioが使用するデフォルトのチャンネルマップ。以下を参照。</td></tr><tr><td>ma_standard_channel_map_microsoft</td><td>Microsoftのビットフィールドチャンネルマップ。</td></tr><tr><td>ma_standard_channel_map_alsa</td><td>デフォルトのALSAチャンネルマップ。</td></tr><tr><td>ma_standard_channel_map_rfc3551</td><td>RFC 3551。AIFFに基づく。</td></tr><tr><td>ma_standard_channel_map_flac</td><td>FLACチャンネルマップ。</td></tr><tr><td>ma_standard_channel_map_vorbis</td><td>Vorbisチャンネルマップ。</td></tr><tr><td>ma_standard_channel_map_sound4</td><td>FreeBSDのsound(4)。</td></tr><tr><td>ma_standard_channel_map_sndio</td><td>sndioチャンネルマップ。<a href="http://www.sndio.org/tips.html%E3%80%82" target="_blank" rel="noreferrer">http://www.sndio.org/tips.html。</a></td></tr><tr><td>ma_standard_channel_map_webaudio</td><td><a href="https://webaudio.github.io/web-audio-api/#ChannelOrdering" target="_blank" rel="noreferrer">https://webaudio.github.io/web-audio-api/#ChannelOrdering</a></td></tr></tbody></table><p>以下は、miniaudioでデフォルトで使用されるチャンネルマップ（ma_standard_channel_map_default）です：</p><table tabindex="0"><thead><tr><th>チャンネル数</th><th>マッピング</th></tr></thead><tbody><tr><td>1 (モノラル)</td><td>0: MA_CHANNEL_MONO</td></tr><tr><td>2 (ステレオ)</td><td>0: MA_CHANNEL_FRONT_LEFT<br>1: MA_CHANNEL_FRONT_RIGHT</td></tr><tr><td>3</td><td>0: MA_CHANNEL_FRONT_LEFT<br>1: MA_CHANNEL_FRONT_RIGHT<br>2: MA_CHANNEL_FRONT_CENTER</td></tr><tr><td>4 (サラウンド)</td><td>0: MA_CHANNEL_FRONT_LEFT<br>1: MA_CHANNEL_FRONT_RIGHT<br>2: MA_CHANNEL_FRONT_CENTER<br>3: MA_CHANNEL_BACK_CENTER</td></tr><tr><td>5</td><td>0: MA_CHANNEL_FRONT_LEFT<br>1: MA_CHANNEL_FRONT_RIGHT<br>2: MA_CHANNEL_FRONT_CENTER<br>3: MA_CHANNEL_BACK_LEFT<br>4: MA_CHANNEL_BACK_RIGHT</td></tr><tr><td>6 (5.1)</td><td>0: MA_CHANNEL_FRONT_LEFT<br>1: MA_CHANNEL_FRONT_RIGHT<br>2: MA_CHANNEL_FRONT_CENTER<br>3: MA_CHANNEL_LFE<br>4: MA_CHANNEL_SIDE_LEFT<br>5: MA_CHANNEL_SIDE_RIGHT</td></tr><tr><td>7</td><td>0: MA_CHANNEL_FRONT_LEFT<br>1: MA_CHANNEL_FRONT_RIGHT<br>2: MA_CHANNEL_FRONT_CENTER<br>3: MA_CHANNEL_LFE<br>4: MA_CHANNEL_BACK_CENTER<br>4: MA_CHANNEL_SIDE_LEFT<br>5: MA_CHANNEL_SIDE_RIGHT</td></tr><tr><td>8 (7.1)</td><td>0: MA_CHANNEL_FRONT_LEFT<br>1: MA_CHANNEL_FRONT_RIGHT<br>2: MA_CHANNEL_FRONT_CENTER<br>3: MA_CHANNEL_LFE<br>4: MA_CHANNEL_BACK_LEFT<br>5: MA_CHANNEL_BACK_RIGHT<br>6: MA_CHANNEL_SIDE_LEFT<br>7: MA_CHANNEL_SIDE_RIGHT</td></tr><tr><td>その他</td><td>すべてのチャンネルは0に設定されます。これはデバイスと同じマッピングと同等です。</td></tr></tbody></table><h3 id="_10-3-リサンプリング" tabindex="-1">10.3. リサンプリング <a class="header-anchor" href="#_10-3-リサンプリング" aria-label="Permalink to &quot;10.3. リサンプリング&quot;">​</a></h3><p>リサンプリングは、ma_resamplerオブジェクトを使用して行われます。リサンプリングオブジェクトを作成するには、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resampler_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resampler_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_format_s16,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    channels,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sampleRateIn,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sampleRateOut,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_resample_algorithm_linear);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resampler resampler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resampler_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラーが発生しました...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>リサンプリングを終了するには、次のようにします：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_resampler_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>データを処理する例を以下に示します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 frameCountIn  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 frameCountOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resampler_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesIn, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCountIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCountOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラーが発生しました...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// この時点で、frameCountInには消費された入力フレーム数が、frameCountOutには書き込まれた出力フレーム数が含まれています。</span></span></code></pre></div><p>リサンプリングを初期化するには、最初にma_resampler_config_init()を使用してconfig（ma_resampler_config）を設定する必要があります。使用するサンプルフォーマット、チャンネル数、入力および出力のサンプルレート、およびアルゴリズムを指定する必要があります。</p><p>サンプルフォーマットはma_format_s16またはma_format_f32のいずれかです。別のフォーマットが必要な場合は、必要に応じて自分で前処理および後処理を行う必要があります。フォーマットは入力と出力の両方で同じです。初期化後にフォーマットを変更することはできません。</p><p>リサンプリングは複数のチャンネルをサポートしており、常にインターリーブ形式（入力と出力の両方）です。チャンネル数は初期化後に変更することはできません。</p><p>サンプルレートはゼロ以外の任意の値に設定でき、常にヘルツ（Hz）単位で指定されます。例えば、44100などに設定します。サンプルレートは、初期化後に変更できる唯一の設定プロパティです。</p><p>miniaudioのリサンプリングは、以下のアルゴリズムをサポートしています：</p><table tabindex="0"><thead><tr><th>アルゴリズム</th><th>Enumトークン</th></tr></thead><tbody><tr><td>リニア</td><td>ma_resample_algorithm_linear</td></tr><tr><td>カスタム</td><td>ma_resample_algorithm_custom</td></tr></tbody></table><p>アルゴリズムは初期化後に変更することはできません。</p><p>処理は常にPCMフレーム単位で行われ、入力と出力のインターリーブ形式を前提とします。ディインターリーブ形式の処理はサポートされていません。フレームを処理するには、ma_resampler_process_pcm_frames()を使用します。この関数は、入力として出力バッファに収まる出力フレーム数と入力バッファに含まれる入力フレーム数を取ります。出力では、これらの変数には出力バッファに書き込まれた出力フレーム数と処理中に消費された入力フレーム数が含まれます。入力バッファにNULLを渡すと、無限に大きなゼロのバッファとして扱われます。出力バッファもNULLにすることができ、その場合、処理はシークとして扱われます。</p><p>サンプルレートは動的に変更することができます。これを行うには、明示的なサンプルレートを使用するma_resampler_set_rate()や、比率（in/out）を使用するma_resampler_set_rate_ratio()を使います。</p><p>特定の出力フレーム数を出力するために必要な入力フレーム数を正確に知りたい場合があります。これにはma_resampler_get_required_input_frame_count()を使用します。同様に、特定の入力フレーム数に対して出力されるフレーム数を知りたい場合もあります。これにはma_resampler_get_expected_output_frame_count()を使用します。</p><p>リサンプリングの動作の特性上、リサンプリングにはある程度の遅延が生じます。この遅延は、入力レートおよび出力レートの両方でma_resampler_get_input_latency()およびma_resampler_get_output_latency()を使用して取得できます。</p><h4 id="_10-3-1-リサンプリングアルゴリズム" tabindex="-1">10.3.1. リサンプリングアルゴリズム <a class="header-anchor" href="#_10-3-1-リサンプリングアルゴリズム" aria-label="Permalink to &quot;10.3.1. リサンプリングアルゴリズム&quot;">​</a></h4><p>リサンプリングアルゴリズムの選択は、状況や要件によって異なります。</p><h5 id="_10-3-1-1-線形リサンプリング" tabindex="-1">10.3.1.1. 線形リサンプリング <a class="header-anchor" href="#_10-3-1-1-線形リサンプリング" aria-label="Permalink to &quot;10.3.1.1. 線形リサンプリング&quot;">​</a></h5><p>線形リサンプリングは最も高速ですが、その代わりに品質が低下します。ただし、線形リサンプリングの品質には一定の制御があり、要件に応じて適したオプションとなる場合があります。</p><p>線形リサンプリングは、サンプルレートの変換時にダウンサンプリングまたはアップサンプリングの前後でローパスフィルタリングを行います。サンプルレートを下げる場合、ダウンサンプリングの前にローパスフィルタが適用されます。サンプルレートを上げる場合は、アップサンプリングの後に適用されます。デフォルトでは4次のローパスフィルタが適用されますが、これはlpfOrder設定変数で構成できます。0に設定するとフィルタリングが無効になります。</p><p>ローパスフィルタにはカットオフ周波数があり、これはデフォルトで入力および出力サンプルレートのうち低い方の半分のサンプルレート（ナイキスト周波数）に設定されます。</p><p>線形リサンプラのAPIは、主なリサンプラAPIと同じですが、ma_linear_resamplerと呼ばれます。</p><h5 id="_10-3-2-カスタムリサンプラ" tabindex="-1">10.3.2. カスタムリサンプラ <a class="header-anchor" href="#_10-3-2-カスタムリサンプラ" aria-label="Permalink to &quot;10.3.2. カスタムリサンプラ&quot;">​</a></h5><p>カスタムリサンプラを実装するには、ma_resample_algorithm_customリサンプリングアルゴリズムを使用し、リサンプラ設定でvtableを設定します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_resampler_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_resampler_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(..., ma_resample_algorithm_custom);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.pBackendVTable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_customResamplerVTable;</span></span></code></pre></div><p>カスタムリサンプラは、標準のアルゴリズムが適していない場合に役立ちます。ma_resampling_backend_vtableに必要な関数を実装する必要があります。すべての関数を実装する必要はありませんが、実装可能であれば実装すべきです。</p><p>ma_linear_resamplerオブジェクトを使用して、vtableを実装する方法の例を確認できます。onGetHeapSizeコールバックは、指定された設定に基づいてカスタムリサンプラが必要とする内部ヒープ割り当てのサイズを計算するために使用されます。onInitコールバックを介してリサンプラを初期化するとき、ヒープ割り当てへのポインタが提供されるので、そこでヒープ割り当てデータを保存する必要があります。このデータはonUninitで解放しないでください。miniaudioが管理します。</p><p>onProcessコールバックは、実際にリサンプリングが行われる場所です。入力として、pFrameCountInはpFramesInバッファ内のフレーム数を含む変数を指し、pFrameCountOutはpFramesOutバッファの容量をフレーム単位で含む変数を指します。出力として、pFrameCountInは完全に消費された入力フレーム数に設定され、pFrameCountOutはpFramesOutに書き込まれたフレーム数に設定されます。</p><p>onSetRateコールバックはオプションで、サンプルレートを動的に変更するために使用されます。動的レート変更がサポートされていない場合、このコールバックをNULLに設定できます。</p><p>onGetInputLatencyおよびonGetOutputLatency関数は、それぞれ入力および出力レートの遅延を取得するために使用されます。これらはNULLに設定することもでき、その場合、遅延計算はNULLとして仮定されます。</p><p>onGetRequiredInputFrameCountコールバックは、指定された出力フレーム数を生成するために必要な入力フレーム数についてminiaudioにヒントを与えるために使用されます。同様に、onGetExpectedOutputFrameCountコールバックは、指定された入力フレーム数に対して生成される出力フレーム数を決定するために使用されます。miniaudioはこれらをヒントとして使用しますが、オプションであり、実装できない場合はNULLに設定できます。</p><h3 id="_10-4-一般的なデータ変換" tabindex="-1">10.4. 一般的なデータ変換 <a class="header-anchor" href="#_10-4-一般的なデータ変換" aria-label="Permalink to &quot;10.4. 一般的なデータ変換&quot;">​</a></h3><p>ma_data_converter APIは、サンプルフォーマット変換、チャンネル変換、およびリサンプリングを1つの操作にまとめるために使用できます。これは、デバイスが初期化されたときに要求されたフォーマットとバックエンドのネイティブデバイスのフォーマット間の変換を行うためにminiaudioが内部で使用しているものです。一般的なデータ変換のAPIはリサンプリングAPIと非常に似ています。ma_data_converterオブジェクトを次のように作成します：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_data_converter_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_converter_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inputFormat,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outputFormat,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inputChannels,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outputChannels,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inputSampleRate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outputSampleRate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_data_converter converter;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_converter_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">converter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラーが発生しました...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例ではma_data_converter_config_init()を使用してconfigを初期化していますが、チャンネルマップやリサンプリングの品質など、さらに多くのプロパティを構成できます。以下のような設定が、要件によってはより適しているかもしれません：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_data_converter_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_converter_config_init_default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.formatIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputFormat;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.formatOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputFormat;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.channelsIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputChannels;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.channelsOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputChannels;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.sampleRateIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputSampleRate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.sampleRateOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputSampleRate;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_channel_map_init_standard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_standard_channel_map_flac, config.channelMapIn, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.channelMapIn)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channelMapIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]), config.channelCountIn);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.resampling.linear.lpfOrder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_MAX_FILTER_ORDER;</span></span></code></pre></div><p>データコンバータを終了するには、次の操作を行います：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_data_converter_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">converter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>以下の例は、データを処理する方法を示しています：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 frameCountIn  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 frameCountOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_data_converter_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">converter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesIn, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCountIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCountOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラーが発生しました...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// この時点で、frameCountInには消費された入力フレームの数が、frameCountOutには出力されたフレームの数が入っています。</span></span></code></pre></div><p>データコンバータは複数のチャンネルをサポートしており、常にインターリーブ形式です（入力も出力も）。チャンネル数は初期化後に変更することはできません。</p><p>サンプルレートはゼロ以外の任意の値を指定できます。通常、44100Hzなどの値を設定します。サンプルレートは初期化後に変更できる唯一の構成プロパティですが、変更するにはma_data_converter_configのresampling.allowDynamicSampleRateメンバーをMA_TRUEに設定する必要があります。サンプルレートを変更するには、ma_data_converter_set_rate()またはma_data_converter_set_rate_ratio()を使用します。比率はin/outで指定します。リサンプリングアルゴリズムは初期化後に変更することはできません。</p><p>処理は常にPCMフレーム単位で行われ、常にインターリーブされた入力および出力を前提としています。デインターリーブされた処理はサポートされていません。フレームを処理するには、ma_data_converter_process_pcm_frames()を使用します。入力として、この関数は出力バッファに収まる出力フレーム数と、入力バッファに含まれる入力フレーム数を受け取ります。出力として、これらの変数には出力バッファに書き込まれた出力フレーム数と、処理中に消費された入力フレーム数が入ります。入力バッファにNULLを渡すと、無限大のゼロバッファとして扱われます。出力バッファもNULLにすることができ、その場合、処理はシークとして扱われます。</p><p>特定のフレーム数を出力するために必要な入力フレーム数を正確に知ることが有用な場合があります。これを計算するには、ma_data_converter_get_required_input_frame_count()を使用します。同様に、特定の入力フレーム数に対して出力されるフレーム数を正確に知ることも有用です。これを行うには、ma_data_converter_get_expected_output_frame_count()を使用します。</p><p>リサンプリングが必要な場合、その性質上、データコンバータはある程度の遅延を引き起こします。これは、入力レートおよび出力レートの両方に関して、ma_data_converter_get_input_latency()およびma_data_converter_get_output_latency()で取得できます。</p><h2 id="_11-フィルタリング" tabindex="-1">11. フィルタリング <a class="header-anchor" href="#_11-フィルタリング" aria-label="Permalink to &quot;11. フィルタリング&quot;">​</a></h2><h3 id="_11-1-バイカッドフィルタリング" tabindex="-1">11.1. バイカッドフィルタリング <a class="header-anchor" href="#_11-1-バイカッドフィルタリング" aria-label="Permalink to &quot;11.1. バイカッドフィルタリング&quot;">​</a></h3><p>バイカッドフィルタリングは <code>ma_biquad</code> API を使用して実現されます。例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_biquad_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_biquad_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_format_f32, channels, b0, b1, b2, a0, a1, a2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_biquad_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">biquad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラーが発生しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_biquad_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">biquad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, pFramesIn, frameCount);</span></span></code></pre></div><p>バイカッドフィルタリングは、変換直列形式2（transposed direct form 2）を使用して実装されています。分子の係数は b0、b1、b2 で、分母の係数は a0、a1、a2 です。a0 係数は必須で、係数は事前に正規化されていてはなりません。</p><p>サポートされているフォーマットは <code>ma_format_s16</code> と <code>ma_format_f32</code> です。異なるフォーマットを使用する場合は、事前に自分で変換する必要があります。<code>ma_format_s16</code> を使用する場合、バイカッドフィルタは固定小数点演算を使用し、<code>ma_format_f32</code> を使用する場合、浮動小数点演算を使用します。</p><p>入力と出力のフレームは常にインターリーブされています。</p><p>フィルタリングは、入力と出力バッファに同じポインタを渡すことでインプレースに適用できます。例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_biquad_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">biquad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pMyData, pMyData, frameCount);</span></span></code></pre></div><p>係数の値を変更する必要があるが、レジスタの値を保持したい場合は、<code>ma_biquad_reinit()</code> を使用できます。これは、フィルタの特性を変更しつつ、レジスタの値を有効に保ち、グリッチを避けるために役立ちます。<code>ma_biquad_init()</code> を使用しないでください。これはレジスタを0にクリアする完全な初期化を行います。初期化後にフォーマットやチャンネル数を変更することは無効であり、エラーが発生します。</p><h3 id="_11-2-ローパスフィルタリング" tabindex="-1">11.2. ローパスフィルタリング <a class="header-anchor" href="#_11-2-ローパスフィルタリング" aria-label="Permalink to &quot;11.2. ローパスフィルタリング&quot;">​</a></h3><p>ローパスフィルタリングは次のAPIを使用して実現されます：</p><table tabindex="0"><thead><tr><th>API</th><th>説明</th></tr></thead><tbody><tr><td>ma_lpf1</td><td>1次ローパスフィルタ</td></tr><tr><td>ma_lpf2</td><td>2次ローパスフィルタ</td></tr><tr><td>ma_lpf</td><td>高次ローパスフィルタ（バターワース）</td></tr></tbody></table><p>ローパスフィルタの例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_lpf_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_lpf_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ma_format_f32, channels, sampleRate, cutoffFrequency, order);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_lpf_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lpf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラーが発生しました。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_lpf_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lpf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pFramesOut, pFramesIn, frameCount);</span></span></code></pre></div><p>サポートされているフォーマットは <code>ma_format_s16</code> と <code>ma_format_f32</code> です。異なるフォーマットを使用する場合は、事前に自分で変換する必要があります。入力と出力のフレームは常にインターリーブされています。</p><p>フィルタリングは、入力と出力バッファに同じポインタを渡すことでインプレースに適用できます。例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_lpf_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lpf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pMyData, pMyData, frameCount);</span></span></code></pre></div><p>フィルタの最大順序は <code>MA_MAX_FILTER_ORDER</code> に制限されており、これは8に設定されています。これ以上の順序が必要な場合は、1次および2次フィルタを連結することができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; iFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterCount; iFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_lpf2_process_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lpf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[iFilter], pMyData, pMyData, frameCount);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>フィルタの設定を変更する必要があるが、内部レジスタの状態を保持したい場合、<code>ma_lpf_reinit()</code> を使用することができます。これにより、スムーズな遷移を維持しながらサンプルレートやカットオフ周波数を動的に変更する場合に役立ちます。初期化後にフォーマットやチャンネル数を変更することは無効であり、エラーが発生します。</p><p><code>ma_lpf</code> オブジェクトは設定可能な順序をサポートしていますが、1次フィルタのみが必要な場合は <code>ma_lpf1</code> を、2次フィルタのみが必要な場合は <code>ma_lpf2</code> を使用することを検討してください。これらを使用する利点は、より軽量で効率的であることです。</p><p>偶数のフィルタ順序が指定された場合、2次フィルタのシリーズがチェーンで処理されます。奇数のフィルタ順序が指定された場合、1次フィルタが適用され、その後に2次フィルタのシリーズがチェーンで処理されます。</p><h3 id="_11-3-ハイパスフィルタリング" tabindex="-1">11.3. ハイパスフィルタリング <a class="header-anchor" href="#_11-3-ハイパスフィルタリング" aria-label="Permalink to &quot;11.3. ハイパスフィルタリング&quot;">​</a></h3><p>ハイパスフィルタリングは次のAPIを使用して実現されます：</p><table tabindex="0"><thead><tr><th>API</th><th>説明</th></tr></thead><tbody><tr><td>ma_hpf1</td><td>1次ハイパスフィルタ</td></tr><tr><td>ma_hpf2</td><td>2次ハイパスフィルタ</td></tr><tr><td>ma_hpf</td><td>高次ハイパスフィルタ（バターワース）</td></tr></tbody></table><p>ハイパスフィルタはローパスフィルタと同じように動作しますが、APIは <code>ma_hpf1</code>、<code>ma_hpf2</code>、および <code>ma_hpf</code> と呼ばれます。ローパスフィルタの使用例を参照してください。</p><h3 id="_11-4-バンドパスフィルタリング" tabindex="-1">11.4. バンドパスフィルタリング <a class="header-anchor" href="#_11-4-バンドパスフィルタリング" aria-label="Permalink to &quot;11.4. バンドパスフィルタリング&quot;">​</a></h3><p>バンドパスフィルタリングは次のAPIを使用して実現されます：</p><table tabindex="0"><thead><tr><th>API</th><th>説明</th></tr></thead><tbody><tr><td>ma_bpf2</td><td>2次バンドパスフィルタ</td></tr><tr><td>ma_bpf</td><td>高次バンドパスフィルタ</td></tr></tbody></table><p>バンドパスフィルタはローパスフィルタと同じように動作しますが、APIは <code>ma_bpf2</code> と <code>ma_bpf</code> と呼ばれます。ローパスフィルタの使用例を参照してください。バンドパスフィルタの順序は偶数である必要があるため、ローパスフィルタやハイパスフィルタとは異なり、1次バンドパスフィルタは存在しません。</p><h3 id="_11-5-ノッチフィルタリング" tabindex="-1">11.5. ノッチフィルタリング <a class="header-anchor" href="#_11-5-ノッチフィルタリング" aria-label="Permalink to &quot;11.5. ノッチフィルタリング&quot;">​</a></h3><p>ノッチフィルタリングは次のAPIを使用して実現されます：</p><table tabindex="0"><thead><tr><th>API</th><th>説明</th></tr></thead><tbody><tr><td>ma_notch2</td><td>2次ノッチフィルタ</td></tr></tbody></table><h3 id="_11-6-ピーキングeqフィルタリング" tabindex="-1">11.6. ピーキングEQフィルタリング <a class="header-anchor" href="#_11-6-ピーキングeqフィルタリング" aria-label="Permalink to &quot;11.6. ピーキングEQフィルタリング&quot;">​</a></h3><p>ピーキングフィルタリングは次のAPIを使用して実現されます：</p><table tabindex="0"><thead><tr><th>API</th><th>説明</th></tr></thead><tbody><tr><td>ma_peak2</td><td>2次ピーキングフィルタ</td></tr></tbody></table><h3 id="_11-7-ローシェルフフィルタリング" tabindex="-1">11.7. ローシェルフフィルタリング <a class="header-anchor" href="#_11-7-ローシェルフフィルタリング" aria-label="Permalink to &quot;11.7. ローシェルフフィルタリング&quot;">​</a></h3><p>ローシェルフフィルタリングは次のAPIを使用して実現されます：</p><table tabindex="0"><thead><tr><th>API</th><th>説明</th></tr></thead><tbody><tr><td>ma_loshelf2</td><td>2次ローシェルフフィルタ</td></tr></tbody></table><p>ハイパスフィルタが低周波数を除去するのに対して、ローシェルフフィルタはそれらを完全に除去するのではなく、単に音量を下げるために使用できます。</p><h3 id="_11-8-ハイシェルフフィルタリング" tabindex="-1">11.8. ハイシェルフフィルタリング <a class="header-anchor" href="#_11-8-ハイシェルフフィルタリング" aria-label="Permalink to &quot;11.8. ハイシェルフフィルタリング&quot;">​</a></h3><p>ハイシェルフフィルタリングは次のAPIを使用して実現されます：</p><table tabindex="0"><thead><tr><th>API</th><th>説明</th></tr></thead><tbody><tr><td>ma_hishelf2</td><td>2次ハイシェルフフィルタ</td></tr></tbody></table><p>ハイシェルフフィルタはローシェルフフィルタと同じAPIを持っていますが、<code>ma_loshelf</code> の代わりに <code>ma_hishelf</code> を使用します。ローシェルフフィルタが低周波数の音量を調整するのに対し、ハイシェルフフィルタは高周波数の音量を調整します。</p><h2 id="_12-波形とノイズの生成" tabindex="-1">12. 波形とノイズの生成 <a class="header-anchor" href="#_12-波形とノイズの生成" aria-label="Permalink to &quot;12. 波形とノイズの生成&quot;">​</a></h2><h3 id="_12-1-波形" tabindex="-1">12.1. 波形 <a class="header-anchor" href="#_12-1-波形" aria-label="Permalink to &quot;12.1. 波形&quot;">​</a></h3><p>miniaudioは、サイン波、矩形波、三角波、のこぎり波の生成をサポートしています。これは、ma_waveform APIを使用して実現されます。例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_waveform_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_waveform_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FORMAT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CHANNELS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SAMPLE_RATE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_waveform_type_sine,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amplitude,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    frequency);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_waveform waveform;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_waveform_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">waveform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_waveform_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">waveform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pOutput, frameCount);</span></span></code></pre></div><p>振幅、周波数、タイプ、およびサンプルレートは、それぞれ ma_waveform_set_amplitude()、ma_waveform_set_frequency()、ma_waveform_set_type()、ma_waveform_set_sample_rate() を使用して動的に変更できます。</p><p>振幅を負の値に設定することで波形を反転できます。これを利用して、例えばのこぎり波が正のランプか負のランプかを制御できます。</p><p>サポートされている波形タイプは以下の通りです：</p><table tabindex="0"><thead><tr><th>列挙型名</th></tr></thead><tbody><tr><td>ma_waveform_type_sine</td></tr><tr><td>ma_waveform_type_square</td></tr><tr><td>ma_waveform_type_triangle</td></tr><tr><td>ma_waveform_type_sawtooth</td></tr></tbody></table><h3 id="_12-2-ノイズ" tabindex="-1">12.2. ノイズ <a class="header-anchor" href="#_12-2-ノイズ" aria-label="Permalink to &quot;12.2. ノイズ&quot;">​</a></h3><p>miniaudioは、ホワイトノイズ、ピンクノイズ、ブラウニアンノイズの生成をma_noise APIを介してサポートしています。例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_noise_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_noise_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FORMAT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CHANNELS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ma_noise_type_white,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SEED,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amplitude);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_noise noise;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_noise_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_noise_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pOutput, frameCount);</span></span></code></pre></div><p>ノイズAPIはシンプルなLCG乱数生成を使用しています。再現性が求められる自動テストなどに便利なカスタムシードをサポートしています。シードをゼロに設定すると、MA_DEFAULT_LCG_SEEDがデフォルトで使用されます。</p><p>振幅とシードは、それぞれ ma_noise_set_amplitude() および ma_noise_set_seed() を使用して動的に変更できます。</p><p>デフォルトでは、ノイズAPIは異なるチャンネルに異なる値を使用します。例えば、ステレオストリームの左チャンネルと右チャンネルは異なる値になります。同じランダム値を各チャンネルに使用するには、ノイズコンフィグのduplicateChannelsメンバーをtrueに設定します。例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.duplicateChannels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_TRUE;</span></span></code></pre></div><p>サポートされているノイズタイプは以下の通りです。</p><table tabindex="0"><thead><tr><th>列挙型名</th></tr></thead><tbody><tr><td>ma_noise_type_white</td></tr><tr><td>ma_noise_type_pink</td></tr><tr><td>ma_noise_type_brownian</td></tr></tbody></table><h2 id="_13-オーディオバッファ" tabindex="-1">13. オーディオバッファ <a class="header-anchor" href="#_13-オーディオバッファ" aria-label="Permalink to &quot;13. オーディオバッファ&quot;">​</a></h2><p>miniaudioは、ma_audio_buffer APIを介して生のオーディオデータのバッファからの読み取りをサポートしています。これは、アプリケーションによって管理されるメモリから読み取ることができますが、内部的にメモリ管理も行えます。メモリ管理は柔軟で、ほとんどの使用ケースに対応できます。</p><p>オーディオバッファは、miniaudio全体で使用される標準の構成システムを使用して初期化されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_audio_buffer_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_audio_buffer_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    channels,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sizeInFrames,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pExistingData,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">allocationCallbacks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_audio_buffer buffer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_audio_buffer_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_audio_buffer_uninit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>上記の例では、pExistingDataが指すメモリはコピーされず、これはアプリケーションが自己管理するメモリ割り当てを行う方法です。データをコピーしたい場合は、ma_audio_buffer_init_copy()を使用します。バッファの初期化解除には、ma_audio_buffer_uninit()を使用します。</p><p>場合によっては、ma_audio_buffer構造体と生のオーディオデータのメモリを連続したブロックに割り当てると便利です。つまり、生のオーディオデータはma_audio_buffer構造体の直後に配置されます。これを行うには、ma_audio_buffer_alloc_and_init()を使用します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_audio_buffer_config config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_audio_buffer_config_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    channels,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sizeInFrames,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pExistingData,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">allocationCallbacks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_audio_buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pBuffer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_audio_buffer_alloc_and_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ma_audio_buffer_uninit_and_free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>バッファをma_audio_buffer_alloc_and_init()で初期化した場合は、ma_audio_buffer_uninit_and_free()で初期化解除する必要があります。上記の例では、pExistingDataが指すメモリはバッファにコピーされます。これはma_audio_buffer_init()の動作とは異なります。</p><p>オーディオバッファにはデコーダと同様に再生カーソルがあります。バッファからフレームを読み取ると、カーソルは前方に進みます。最後のパラメータ（ループ）は、バッファをループさせるかどうかを決定するために使用されます。戻り値は実際に読み取られたフレーム数です。これが要求されたフレーム数より少ない場合は、終端に達したことを意味します。ループパラメータがtrueに設定されている場合、これは発生しません。手動で開始位置に戻す場合は、ma_audio_buffer_seek_to_pcm_frame(pAudioBuffer, 0)を使用できます。以下に、オーディオバッファからデータを読み取る例を示します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 framesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_audio_buffer_read_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pAudioBuffer, pFramesOut, desiredFrameCount, isLooping);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (framesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> desiredFrameCount) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ループしていない場合、これは終端に達したことを意味します。ループモードで有効な入力がある場合、これは発生しないはずです。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>時々、内部バッファと出力バッファ間のデータ移動のコストを避けたいことがあります。その代わりに、メモリマッピングを使用してデータのセグメントへのポインタを取得できます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pMappedFrames;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_uint64 frameCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameCountToTryMapping;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_audio_buffer_map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pAudioBuffer, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pMappedFrames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">frameCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // マッピングが成功しました。frameCountの値は、実際にマッピングされたフレーム数になります。バッファの終端に達したために少なくなることがあります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_copy_pcm_frames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pFramesOut, pMappedFrames, frameCount, pAudioBuffer-&gt;format, pAudioBuffer-&gt;channels);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バッファのマッピングを解除する必要があります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ma_audio_buffer_unmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pAudioBuffer, frameCount);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>メモリマッピングを使用するときは、ma_audio_buffer_unmap()に渡されたフレーム数によって読み取りカーソルが増加します。すべてのフレームを処理しない場合は、ma_audio_buffer_map()によって返された値より小さい値を渡すことができます。メモリマッピングを使用する際の欠点は、ループ処理を自動的に行わないことです。バッファが終端に達したかどうかを確認するには、ma_audio_buffer_at_end()を使用するか、ma_audio_buffer_unmap()の戻り値を調べて、それがMA_AT_ENDと等しいかどうかを確認します。ma_audio_buffer_unmap()がMA_AT_ENDを返した場合、それをエラーとして扱うべきではありません。</p><h2 id="_14-リングバッファ" tabindex="-1">14. リングバッファ <a class="header-anchor" href="#_14-リングバッファ" aria-label="Permalink to &quot;14. リングバッファ&quot;">​</a></h2><p>miniaudioは、ロックフリー（シングルプロデューサー、シングルコンシューマー）のリングバッファをサポートしており、これらはma_rbとma_pcm_rb APIを介して利用できます。ma_rb APIはバイト単位で動作し、ma_pcm_rbはPCMフレーム単位で動作します。それ以外の点では、ma_pcm_rbはma_rbのラッパーに過ぎないため、両者は同一です。</p><p>他の多くのminiaudioのAPIとは異なり、リングバッファはインターリーブおよびデインターリーブストリームの両方をサポートしています。呼び出し側は、リングバッファが内部で使用するメモリを自己管理のために割り当てることもできます。そうでない場合、リングバッファは内部メモリを管理します。</p><p>以下の例では、最も一般的に使用されるであろうPCMフレームバリアントのリングバッファを使用しています。リングバッファを初期化するには、次のようにします。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_pcm_rb rb;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ma_result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ma_pcm_rb_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FORMAT, CHANNELS, BUFFER_SIZE_IN_FRAMES, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MA_SUCCESS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ma_pcm_rb_init()関数は、リングバッファAPIのPCMバリアントであるため、サンプル形式とチャネル数をパラメータとして取ります。バイト単位で動作する通常のリングバッファの場合は、ma_rb_init()を呼び出し、これらのパラメータを省略し、フレーム数の代わりにバッファのサイズをバイト単位で指定します。第四パラメータはオプションの事前割り当てバッファであり、第五パラメータはカスタムメモリアロケーションルーチンのためのma_allocation_callbacks構造体へのポインタです。これにNULLを渡すと、MA_MALLOC()とMA_FREE()が使用されます。</p><p>デインターリーブバッファが必要な場合は、ma_pcm_rb_init_ex()を使用します。各サブバッファのデータはストライドに基づいてオフセットされます。サブバッファを管理するには、ma_pcm_rb_get_subbuffer_stride()、ma_pcm_rb_get_subbuffer_offset()、およびma_pcm_rb_get_subbuffer_ptr()を使用できます。</p><p>ma_pcm_rb_acquire_read()とma_pcm_rb_acquire_write()を使用して、リングバッファのセクションへのポインタを取得します。必要なフレーム数を指定すると、出力時に実際に取得されたフレーム数が設定されます。読み取りまたは書き込みポインタが、要求されたフレーム数がループを必要とする位置にある場合、それはバッファの終端にクランプされます。したがって、取得されるフレーム数は要求された数より少ない場合があります。</p><p>ma_pcm_rb_acquire_read()またはma_pcm_rb_acquire_write()を呼び出した後、バッファ上で作業を行い、ma_pcm_rb_commit_read()またはma_pcm_rb_commit_write()でそれを「コミット」します。これにより、読み取り/書き込みポインタが更新されます。コミットするときには、先にma_pcm_rb_acquire_read()またはma_pcm_rb_acquire_write()の呼び出しで返されたバッファを渡す必要があります。これは検証のためにのみ使用されます。ma_pcm_rb_commit_read()およびma_pcm_rb_commit_write()に渡すフレーム数は、ポインタをインクリメントするために使用され、最初に要求された数より少なくてもかまいません。</p><p>書き込みポインタと読み取りポインタの間のドリフトを修正したい場合は、ma_pcm_rb_pointer_distance()、ma_pcm_rb_seek_read()、ma_pcm_rb_seek_write()の組み合わせを使用できます。ポインタを前方にのみ移動できることに注意してください。また、読み取りポインタはコンシューマースレッドによって前方に移動され、書き込みポインタはプロデューサースレッドによって前方に移動されるべきです。ポインタ間にスペースが多すぎる場合は、読み取りポインタを前方に移動します。ポインタ間にスペースが少なすぎる場合は、書き込みポインタを前方に移動します。</p><p>バイトレベルのリングバッファを使用したい場合は、ma_rb APIを使用できます。これは完全に同じですが、ma_pcm_rbの代わりにma_rb関数を使用し、フレーム数の代わりにバイト数を渡します。</p><p>バッファの最大サイズは0x7FFFFFFF-(MA_SIMD_ALIGNMENT-1)バイトです。これは最上位ビットがループフラグのエンコードに使用され、内部管理バッファが常にMA_SIMD_ALIGNMENTに揃えられているためです。</p><p>リングバッファは、単一のコンシューマースレッドと単一のプロデューサースレッドによって使用される場合にのみスレッドセーフであることに注意してください。</p><h2 id="_15-バックエンド" tabindex="-1">15. バックエンド <a class="header-anchor" href="#_15-バックエンド" aria-label="Permalink to &quot;15. バックエンド&quot;">​</a></h2><p>miniaudioがサポートするバックエンドは以下の通りです。これらはデフォルトの優先順位順にリストされています。コンテキストやデバイスを初期化する際にバックエンドが指定されていない場合、miniaudioは以下の表に記載されている順にバックエンドを試行します。</p><p>ビルドターゲットによって使用できないバックエンドはビルドに含まれないことに注意してください。たとえば、Linux専用のALSAはWindowsビルドには含まれません。</p><table tabindex="0"><thead><tr><th>名前</th><th>列挙名</th><th>サポートされるオペレーティングシステム</th></tr></thead><tbody><tr><td>WASAPI</td><td>ma_backend_wasapi</td><td>Windows Vista+</td></tr><tr><td>DirectSound</td><td>ma_backend_dsound</td><td>Windows XP+</td></tr><tr><td>WinMM</td><td>ma_backend_winmm</td><td>Windows 95+</td></tr><tr><td>Core Audio</td><td>ma_backend_coreaudio</td><td>macOS, iOS</td></tr><tr><td>sndio</td><td>ma_backend_sndio</td><td>OpenBSD</td></tr><tr><td>audio(4)</td><td>ma_backend_audio4</td><td>NetBSD, OpenBSD</td></tr><tr><td>OSS</td><td>ma_backend_oss</td><td>FreeBSD</td></tr><tr><td>PulseAudio</td><td>ma_backend_pulseaudio</td><td>クロスプラットフォーム（Windows、BSD、Androidでは無効）</td></tr><tr><td>ALSA</td><td>ma_backend_alsa</td><td>Linux</td></tr><tr><td>JACK</td><td>ma_backend_jack</td><td>クロスプラットフォーム（BSD、Androidでは無効）</td></tr><tr><td>AAudio</td><td>ma_backend_aaudio</td><td>Android 8+</td></tr><tr><td>OpenSL ES</td><td>ma_backend_opensl</td><td>Android (APIレベル16+)</td></tr><tr><td>Web Audio</td><td>ma_backend_webaudio</td><td>Web (Emscripten経由)</td></tr><tr><td>カスタム</td><td>ma_backend_custom</td><td>クロスプラットフォーム</td></tr><tr><td>Null</td><td>ma_backend_null</td><td>クロスプラットフォーム（Webでは使用されない）</td></tr></tbody></table><p>一部のバックエンドには注意すべき微妙な詳細があります。</p><h3 id="_15-1-wasapi" tabindex="-1">15.1. WASAPI <a class="header-anchor" href="#_15-1-wasapi" aria-label="Permalink to &quot;15.1. WASAPI&quot;">​</a></h3><ul><li>アプリケーションが定義したサンプルレートがデバイスのネイティブサンプルレートと異なる場合、低遅延の共有モードは無効になります。この問題を回避するには、デバイス構成で<code>wasapi.noAutoConvertSRC</code>をtrueに設定してください。これは、<code>IAudioClient3_InitializeSharedAudioStream()</code>が<code>AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM</code>フラグを指定したときに失敗するためです。<code>wasapi.noAutoConvertSRC</code>を設定すると、miniaudioの内部リサンプラが使用され、それにより低遅延の共有モードが有効になります。</li></ul><h3 id="_15-2-pulseaudio" tabindex="-1">15.2. PulseAudio <a class="header-anchor" href="#_15-2-pulseaudio" aria-label="Permalink to &quot;15.2. PulseAudio&quot;">​</a></h3><ul><li>Arch Linuxでひどいグリッチングやノイズが発生する場合、Archのwikiにある以下の修正を試してください: <a href="https://wiki.archlinux.org/index.php/PulseAudio/Troubleshooting#Glitches,_skips_or_crackling%E3%80%82%E3%81%BE%E3%81%9F%E3%81%AF%E3%80%81ALSA%E3%81%AA%E3%81%A9%E3%81%AE%E5%88%A5%E3%81%AE%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E3%82%92%E6%A4%9C%E8%A8%8E%E3%81%97%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%80%82" target="_blank" rel="noreferrer">https://wiki.archlinux.org/index.php/PulseAudio/Troubleshooting#Glitches,_skips_or_crackling。または、ALSAなどの別のバックエンドを検討してください。</a></li></ul><h3 id="_15-3-android" tabindex="-1">15.3. Android <a class="header-anchor" href="#_15-3-android" aria-label="Permalink to &quot;15.3. Android&quot;">​</a></h3><ul><li>Androidで音声をキャプチャするには、マニフェストに<code>RECORD_AUDIO</code>の許可を追加することを忘れないでください: <code>&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;</code></li><li>OpenSL|ESを使用する場合、同時にアクティブにできる<code>ma_context</code>は1つだけです。これはOpenSL|ESの制限によるものです。</li><li>AAudioを使用する場合、デフォルトデバイスのみが列挙されます。これは、AAudioに列挙APIがなく（デバイスはJavaを通じて列挙されます）、ただし、Javaを使用して独自にデバイスを列挙し、そのIDを<code>ma_device_id</code>構造体に設定して<code>ma_device_init()</code>に渡すことができます。</li><li>バックエンドAPIは可能な限りリサンプリングを実行します。これは、ドライバーが実装する可能性のあるデバイス固有の最適化を活用するためです。</li></ul><h3 id="bsd" tabindex="-1">BSD <a class="header-anchor" href="#bsd" aria-label="Permalink to &quot;BSD&quot;">​</a></h3><ul><li>sndioバックエンドは現在、OpenBSDビルドでのみ有効です。</li><li>audio(4)バックエンドはOpenBSDでサポートされていますが、使用する前にsndiodを無効にする必要がある場合があります。</li></ul><h3 id="_15-4-uwp" tabindex="-1">15.4. UWP <a class="header-anchor" href="#_15-4-uwp" aria-label="Permalink to &quot;15.4. UWP&quot;">​</a></h3><ul><li>UWPはデフォルトの再生およびキャプチャデバイスのみをサポートしています。</li><li>UWPでは、アプリケーションのマニフェスト（<code>Package.appxmanifest</code>）でマイク機能を有効にする必要があります:</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Capabilities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DeviceCapability</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;microphone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Capabilities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_15-5-web-audio-emscripten" tabindex="-1">15.5. Web Audio / Emscripten <a class="header-anchor" href="#_15-5-web-audio-emscripten" aria-label="Permalink to &quot;15.5. Web Audio / Emscripten&quot;">​</a></h3><ul><li><code>-std=c*</code>や<code>-ansi</code>のコンパイラフラグは使用できません。これはEmscriptenビルドにのみ適用されます。</li><li>コンテキストが初めて初期化されるとき、&quot;miniaudio&quot;という名前のグローバルオブジェクトが作成され、主にデバイスオブジェクトのファクトリとして機能します。</li><li>現在、Web Audioバックエンドは<code>ScriptProcessorNode</code>を使用していますが、これらは非推奨になっているため、将来的には変更が必要になるかもしれません。</li><li>Googleは、ユーザーからの入力を受け取らない限り、自動的なメディア出力を禁止するポリシーをブラウザに実装しています。詳細は次のウェブページにあります: <a href="https://developers.google.com/web/updates/2017/09/autoplay-policy-changes%E3%80%82%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%85%A5%E5%8A%9B%E3%82%92%E5%87%A6%E7%90%86%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB%E5%86%8D%E7%94%9F%E3%82%92%E9%96%8B%E5%A7%8B%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%99%E3%82%8B%E3%81%A8%E3%80%81%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%AE%E9%96%8B%E5%A7%8B%E3%81%8C%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82" target="_blank" rel="noreferrer">https://developers.google.com/web/updates/2017/09/autoplay-policy-changes。ユーザー入力を処理する前に再生を開始しようとすると、デバイスの開始が失敗することがあります。</a></li></ul><h2 id="_16-最適化のヒント" tabindex="-1">16. 最適化のヒント <a class="header-anchor" href="#_16-最適化のヒント" aria-label="Permalink to &quot;16. 最適化のヒント&quot;">​</a></h2><p>以下に、パフォーマンスを向上させるためのヒントをいくつか紹介します。</p><h3 id="_16-1-低レベルapi" tabindex="-1">16.1. 低レベルAPI <a class="header-anchor" href="#_16-1-低レベルapi" aria-label="Permalink to &quot;16.1. 低レベルAPI&quot;">​</a></h3><ul><li>データコールバック内で、出力バッファにコピーする前にデータが既にクリップされている場合、デバイス構成の<code>noClip</code>オプションを<code>true</code>に設定してください。これにより、miniaudioの内蔵クリッピング機能が無効になります。</li><li>デフォルトでは、miniaudioはデータコールバックの出力バッファを事前に消音します。常に有効なデータを出力バッファに書き込むことが分かっている場合は、デバイス構成の<code>noPreSilence</code>オプションを<code>true</code>に設定して事前消音を無効にすることができます。</li></ul><h3 id="_16-2-高レベルapi" tabindex="-1">16.2. 高レベルAPI <a class="header-anchor" href="#_16-2-高レベルapi" aria-label="Permalink to &quot;16.2. 高レベルAPI&quot;">​</a></h3><ul><li>サウンドがドップラー効果やピッチシフトを必要としない場合、<code>MA_SOUND_FLAG_NO_PITCH</code>フラグを使用してサウンドを初期化することでピッチングを無効にすることを検討してください。</li><li>サウンドが空間化を必要としない場合、<code>MA_SOUND_FLAG_NO_SPATIALIZATION</code>フラグを使用してサウンドを初期化することで空間化を無効にします。初期化後に<code>ma_sound_set_spatialization_enabled()</code>で再度有効にすることもできます。</li><li>すべてのサウンドが常に同じサンプルレートであることが分かっている場合、エンジンのサンプルレートをサウンドのサンプルレートに合わせて設定してください。同様に、自己管理型リソースマネージャーを使用している場合は、デコードされたサンプルレートをサウンドに合わせて設定することを検討してください。すべての設定を一貫したサンプルレートにすることで、サンプルレート変換を回避できます。</li></ul><h2 id="_17-その他の注意事項" tabindex="-1">17. その他の注意事項 <a class="header-anchor" href="#_17-その他の注意事項" aria-label="Permalink to &quot;17. その他の注意事項&quot;">​</a></h2><ul><li>自動ストリームルーティングはバックエンドごとに有効になります。WASAPIとCore Audioでは明示的にサポートが有効になっていますが、PulseAudioなどの他のバックエンドでも自然にサポートされる場合がありますが、すべてがテストされているわけではありません。</li><li>VC6およびそれ以前のバージョンでコンパイルする場合、デコードは2GB未満のファイルに制限されます。これは、64ビットのファイルAPIが利用できないためです。</li></ul>`,620)]))}const g=i(p,[["render",h]]);export{c as __pageData,g as default};
