import{_ as i,c as l,a2 as e,o as t}from"./chunks/framework.CKGreiRV.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/guide/finalization.md","filePath":"resource/duktape/guide/finalization.md","lastUpdated":1732350347000}'),r={name:"resource/duktape/guide/finalization.md"};function o(n,a,u,p,d,s){return t(),l("div",null,a[0]||(a[0]=[e('<h2 id="finalization" tabindex="-1">ファイナライゼーション <a class="header-anchor" href="#finalization" aria-label="Permalink to &quot;ファイナライゼーション {#finalization}&quot;">​</a></h2><h3 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>Duktapeは、カスタム機能としてオブジェクトのファイナライゼーションをサポートしています。ファイナライザーは、オブジェクトが解放されようとするときに呼び出され、アプリケーション・コードが、例えば、オブジェクトに関連するネイティブ・リソースを解放できるようにします。ファイナライザーは、ECMAScript関数またはDuktape/C関数のいずれかにすることができます。しかし、ECMAScript のファイナライザはスクリプトのタイムアウトと悪い相互作用をする可能性があります。</p><p>例については、ファイナライザの使用方法を参照してください。</p><h3 id="現在のファイナライザーを取得・設定する" tabindex="-1">現在のファイナライザーを取得・設定する <a class="header-anchor" href="#現在のファイナライザーを取得・設定する" aria-label="Permalink to &quot;現在のファイナライザーを取得・設定する&quot;">​</a></h3><p>プロトタイプ・チェーンに（あるいはオブジェクト自体に）内部 _Finalizer プロパティを持つオブジェクトは、解放される前にファイナライズの対象となります。内部プロパティは直接アクセスしてはいけませんが、以下を使用して読み書きが可能です。</p><ul><li>Duktape.fin(obj) (ECMAScript) または duk_get_finalizer() (C) は、現在のファイナライザを取得します。</li><li>Duktape.fin(obj, fn) (ECMAScript) または duk_set_finalizer() (C) は、現在のファイナライザを設定します。</li></ul><h3 id="ファイナライザー関数の引数と戻り値" tabindex="-1">ファイナライザー関数の引数と戻り値 <a class="header-anchor" href="#ファイナライザー関数の引数と戻り値" aria-label="Permalink to &quot;ファイナライザー関数の引数と戻り値&quot;">​</a></h3><p>ファイナライザー関数は、2つの引数で呼び出されます。</p><ul><li>ファイナライズされるオブジェクト。</li><li>オブジェクトがヒープ破壊の一部として強制的に解放されるかどうかを示す boolean フラグ。この引数は Duktape 1.4.0 で追加されました。</li><li>false (通常の場合)の場合、ファイナライザは、戻る前にオブジェクトへのライブ参照を作成することによってオブジェクトを救出することができ、ファイナライザは後で再び呼ばれることが保証されています(遅くともヒープ破壊)。</li><li>true (ヒープ破棄時の強制終了) の場合、オブジェクトは救出できず、ファイナライザが終了した後に強制的に解放されます。ネイティブなリソースは、ファイナライザへのさらなる呼び出しを期待せずに解放する必要があります。</li></ul><p>ファイナライザーの戻り値は無視されます。ファイナライザがスローしたエラーも、静かに無視されます。</p><h3 id="ファイナライザ実行保証" tabindex="-1">ファイナライザ実行保証 <a class="header-anchor" href="#ファイナライザ実行保証" aria-label="Permalink to &quot;ファイナライザ実行保証&quot;">​</a></h3><p>主なファイナライザーの保証は以下の通りです。</p><ul><li>ファイナライザは、参照カウントやマーク・アンド・スイープで検出された到達不能な オブジェクトに対して実行されます。しかし、ファイナライザはすぐに実行されるわけではなく、参照カウントによって オブジェクトが到達不可能になったことが検出されても実行されません。</li><li>ファイナライザーは、Duktapeヒープが破壊されたときにも、到達可能な状態に関わらず、残りの全てのオブジェクトに対して実行されます。</li><li>ファイナライザーは、オブジェクトが再び到達可能になることで救済されない限り、遅くともヒープが破壊された時点で一度だけ呼び出されます。オブジェクトは、それ自身のファイナライザによって救済されることもあれば、 マーク・アンド・スイープでオブジェクトのセットをファイナライズする際に、他のオ ブジェクトのファイナライザによって救済されることもあります。たとえば、X.ref = Y で、X と Y の両方が到達不能になった場合、Y のファイナライザが実行され、後で X のファイナライザが X と Y の両方を救済することが可能です。</li><li>オブジェクトは任意の回数だけ救出される可能性があります。ファイナライザは「救出サイクル」ごとにちょうど1回だけ呼び出されます。この保証がある場合でも、ファイナライザーはリエントラントであることがベストプラクティスであり、例えば、再入力された場合にネイティブリソースを複数回解放することは慎重に避けなければなりません。</li><li>ファイナライザーは Proxy オブジェクトに対しては実行されず、プレーンなターゲットオブジェクトに対して実行されます。これにより、Proxy オブジェクトが作成されるときにファイナライザーが複数回実行されることがありません。</li></ul><p>これらを合わせると、ヒープが破壊される前のある時点でファイナライザが実行されることが保証され、これによりネイティブリソース（ソケットやファイルなど）が確実に解放されます。この保証にはいくつかの例外があり、詳細は以下を参照してください。</p><ul><li>ヒープ破壊時のファイナライザーのサニティ制限により、ファイナライザーが実行されないことがあります。</li><li>スクリプトのタイムアウトが現在のコールスタックから伝搬される場合、ECMAScript のファイナライザーは直ちにスクリプトのタイムアウトエラーを再投与します。Duktape/Cのファイナライザーは、通常通り実行されます。</li><li>Duktape がファイナライザーを呼び出そうとしたときに（緊急の GC にもかかわらず）メモリ不足になった場合、呼び出しエラーは黙って無視され、ファイナライザーはスキップされます。</li><li>オブジェクトがマーク＆スイープによってファイナライズされ、次のマーク＆スイープラウンドがレスキューを検出する前に到達不可能になった場合、そのオブジェクトのファイナライザは実行されません。</li></ul><p>Duktapeヒープが破壊されるとき、ファイナライザーの動作にはいくつかの制限があります。</p><ul><li>ファイナライザーは、到達可能なオブジェクトを含む、ヒープ内の全てのファイナライズ可能なオブジェクトに対して実行されます。</li><li>ファイナライザーはオブジェクトを救出することはできません。「救出」のセマンティクスが曖昧になります。ファイナライザーの第2引数は、ヒープ破棄時に呼び出された場合、救助が不可能であることを示すために真になります。</li><li>ファイナライザーは、ファイナライズ可能な新しいオブジェクトを作成することができ、これらのオブジェクトもファイナライズされます。例えば、ファイナライザーは、オブジェクトの破壊をHTTPで通知することができます。これは、独自のファイナライザーを持つネイティブのネットワークリソースを使用することができます。しかし、暴走したファイナライザーがヒープの破壊を防ぐことができないように、このプロセスにはサニティーの制限があります。</li><li>ファイナライザーのサニティ・アルゴリズムはバージョンに依存します。このアルゴリズムでは、ファイナライザ可能なオブジェクトの数が最初は増加しますが、合理的な時間内に減少しなければファイナライザ処理が中断され、一部のネイティブ リソース リークが発生する可能性があります。</li></ul><h3 id="その他の現在の制限事項" tabindex="-1">その他の現在の制限事項 <a class="header-anchor" href="#その他の現在の制限事項" aria-label="Permalink to &quot;その他の現在の制限事項&quot;">​</a></h3><ul><li>スクリプト実行タイムアウト (DUK_USE_EXEC_TIMEOUT_CHECK) が使用され、タイムアウトが発生した場合、ECMAScript ファイナライザが実行を開始しても、スクリプトタイムアウトによりすぐに失敗する可能性があります。これが具体的な懸念事項である場合、代わりにDuktape/Cネイティブファイナライザを使用してください。このファイナライザは、タイムアウトが伝播しても正常に実行されます。</li><li>ファイナライザーを実行するコンテキスト（Duktapeスレッド）は、現在ヒープ内の任意のコルーチンである可能性があります。これはサンドボックス化において考慮されなければなりません。</li><li>ファイナライザーは現在、降伏することができません。</li></ul>',20)]))}const f=i(r,[["render",o]]);export{h as __pageData,f as default};
