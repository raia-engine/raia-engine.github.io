import{_ as a,c as i,a2 as d,o as l}from"./chunks/framework.CKGreiRV.js";const h=JSON.parse('{"title":"API設計ガイドライン","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/doc/api-design-guidelines.md","filePath":"resource/duktape/doc/api-design-guidelines.md","lastUpdated":1732350347000}'),o={name:"resource/duktape/doc/api-design-guidelines.md"};function c(r,e,t,u,s,n){return l(),i("div",null,e[0]||(e[0]=[d('<h1 id="api設計ガイドライン" tabindex="-1">API設計ガイドライン <a class="header-anchor" href="#api設計ガイドライン" aria-label="Permalink to &quot;API設計ガイドライン&quot;">​</a></h1><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>一貫性のあるAPI設計は、アプリケーションの作成を容易にします。APIコールの命名や引数の順番などの規約を覚えやすくし、エラーのないコードをできるだけ簡単に書けるようにする必要があります。</p><p>API設計の決定には、いくつかの重要な懸念事項があります。</p><ul><li>一貫性：APIコールと引数を覚えやすいこと。</li><li>バージョン管理：APIの拡張を容易にし、設計上の行き詰まりを回避する。</li><li>フットプリント：Duktape内部とアプリケーション・コール・サイトのコード・フットプリントを最小にする。</li><li>パフォーマンス：あるAPIの設計は、他のものより優れたパフォーマンスを可能にします。</li></ul><p>この文書では、一般的なAPI設計の問題点とトレードオフについて、いくつかの注意点を提 供しています。この文書は、完全なものであることを意図しておらず、出てきた現実的な問題 をカバーしているに過ぎません。</p><h2 id="ネーミング" tabindex="-1">ネーミング <a class="header-anchor" href="#ネーミング" aria-label="Permalink to &quot;ネーミング&quot;">​</a></h2><h3 id="apiコール" tabindex="-1">APIコール <a class="header-anchor" href="#apiコール" aria-label="Permalink to &quot;APIコール&quot;">​</a></h3><p>全てのAPIコールは小文字で、アンダースコアで区切られ、接頭辞は <code>duk_</code> で始まっています。 Duktapeの内部で、公開APIに含まれないものも、この規則に従った呼び出しがあります。 公開APIのコールは、公開APIヘッダー(実際には配布ファイルにある <code>duktape.h</code> の一部)とAPIドキュメントに記述されています。</p><p>値スタック項目を操作するための既存の規約です。</p><ul><li><code>duk_get_XXX()</code> はスタック上の値を変更することなく値を取得します。もし値が期待された型と一致しない場合、何らかのデフォルト値(NULLや0など)が返されます。</li><li><code>duk_require_XXX()</code> はスタックにある値を変更せずに値を取得します。もし値が期待された型と一致しない場合は、エラーがスローされます。</li><li><code>duk_to_XXX()</code> は、値をインプレースで目的の型に変換します。</li></ul><p>Varargs API コールを使用します。</p><ul><li>例えば <code>duk_error_va()</code> のように、末尾に <code>_va()</code> を付けた名前になります。 <ul><li>既存の例外: <code>duk_push_sprintf()</code>.</li></ul></li></ul><p>安全/保護された通話に関する既存の規約。</p><ul><li>すべてのコールはデフォルトではアンセーフです。</li><li><code>duk_pXXX()</code> のコールは protected、つまりエラーをキャッチします。 APIコールの戻り値は成功かエラーを示し、エラーは通常バリュースタックを介して渡されます。</li><li><code>duk_safe_XXX()</code> の呼び出しは安全で、すなわちスローしませんが、成功/エラーの表示は行いません。 <ul><li>既存の例外: <code>duk_safe_call()</code> は現在この規約にマッチしていません: protected call (エラーをキャッチして成功/失敗のインジケータを返す) です。</li></ul></li></ul><h3 id="引数" tabindex="-1">引数 <a class="header-anchor" href="#引数" aria-label="Permalink to &quot;引数&quot;">​</a></h3><p>小文字、アンダースコアで区切る。 他に厳密なガイドラインはなく、現在の名称もある。</p><ul><li><code>ctx</code></li><li><code>idx</code>, <code>obj_index</code>, <code>from_index</code>, <code>to_index</code>, <code>index1</code>, <code>index2</code></li><li><code>arr_index</code></li><li><code>flags</code>, <code>enum_flags</code></li><li><code>len</code>, <code>ptr</code>, <code>key</code></li></ul><p>引数名は避けてください。</p><ul><li><code>index</code>: strings.h の関数と衝突する。</li></ul><h2 id="typing" tabindex="-1">Typing <a class="header-anchor" href="#typing" aria-label="Permalink to &quot;Typing&quot;">​</a></h2><h3 id="戻り値" tabindex="-1">戻り値 <a class="header-anchor" href="#戻り値" aria-label="Permalink to &quot;戻り値&quot;">​</a></h3><ul><li><code>duk_bool_t</code> が真/偽の値を返します。</li><li><code>duk_idx_t</code> は値スタックインデックスに使用する。</li><li><code>duk_int</code> は、符号付きと符号なし両方の値を表現する必要がある一般的な戻り値です。</li><li>Duktape/C 関数の戻り値用の <code>duk_ret_t</code> 。</li></ul><h3 id="引数-1" tabindex="-1">引数 <a class="header-anchor" href="#引数-1" aria-label="Permalink to &quot;引数&quot;">​</a></h3><ul><li><code>duk_idx_t</code> は値スタックインデックスを表し、 <code>duk_uarridx_t</code> は ECMAScript の配列インデックスを表します。</li><li><code>duk_uarridx_t</code> は ECMAScript の配列インデックスを表します。</li><li><code>duk_size_t</code> はバイト長 (文字列、バッファなど) を表します。</li><li><code>void *</code>: 汎用的な void ポインタ。</li><li>文字列データポインタ: <code>const char *</code>.</li><li>バッファデータポインタ: <code>void *</code>.</li></ul><h3 id="varargs-apiコール" tabindex="-1">Varargs APIコール <a class="header-anchor" href="#varargs-apiコール" aria-label="Permalink to &quot;Varargs APIコール&quot;">​</a></h3><p>Vararg APIコールのバリエーションは、アプリケーションが非Varg APIコールのバリエーションを使用するのが面倒な場合に提供されます。 例えば、最初にフォーマットされた文字列を作成し、それを <code>duk_push_string()</code> でプッシュするのは面倒でしょうから、 <code>duk_push_sprintf()</code> が提供されています。</p><h2 id="flags-vs-variants" tabindex="-1">Flags vs. variants <a class="header-anchor" href="#flags-vs-variants" aria-label="Permalink to &quot;Flags vs. variants&quot;">​</a></h2><p>よくある問題は、フラグで制御される多様な動作を提供するAPIコールがあるべきか、それともそれに対応する個別のAPIコールのセットがあるべきか、ということです。</p><p>一般に、APIでは個々のAPIコールが好まれる。</p><ul><li>フラグ定義を覚えたり組み合わせたりする必要がないため、アプリケーションでの呼び出しサイトが簡単になる。</li><li>個々のAPIコールは、個々の内部実装か、フラグを取る内部ヘルパーのどちらか、内部実装に最も適した方に簡単にマッピングすることができる。 マクロ呼び出しのサイトでフラグをチェックすることは可能だが、マクロがフラグを複数回評価することになり、APIマクロ保証に反することになる。</li><li>flagsフィールドの構築やデコードを行わないため、最高のパフォーマンスを実現できる。</li><li>APIに改良されたコールが追加されても、個々のコールを新しいプロバイダにマッピングするのは簡単なので、APIの混乱を放置したままでもバージョンアップは簡単にできる。</li></ul><p>動作フラグを持つコールが少ない方が望ましい状況もある。</p><ul><li>APIコールが多くの機能を提供し、個々のコールのバリアントのセットが非常に大きくなる場合、フラグがより適切かもしれない。</li><li>APIコールの動作が、時間とともに新しい制御フラグを進化させそうな場合、 フラグがより適切かもしれない。</li></ul><p>例えば、 <code>duk_def_prop()</code> はこの両方の条件に当てはまります。 フラグを使用することのデメリットは、以下の通りです。</p><ul><li>API のマクロでフラグをデコードして、個々の内部実装を呼び出すことは簡単ではありません。</li><li>フラグを渡すことによるパフォーマンスコストは小さく、呼び出し先でフラグをデコードすることによるパフォーマンスコストは相対的に大きくなります。</li></ul>',35)]))}const _=a(o,[["render",c]]);export{h as __pageData,_ as default};
