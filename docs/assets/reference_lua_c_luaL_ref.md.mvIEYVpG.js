import{_ as e,c as i,a2 as s,o as t}from"./chunks/framework.CKGreiRV.js";const k=JSON.parse('{"title":"luaL_ref","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/luaL_ref.md","filePath":"reference/lua_c/luaL_ref.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/luaL_ref.md"};function r(n,a,d,h,o,c){return t(),i("div",null,a[0]||(a[0]=[s('<h1 id="lual-ref" tabindex="-1">luaL_ref <a class="header-anchor" href="#lual-ref" aria-label="Permalink to &quot;luaL_ref&quot;">​</a></h1><p>スタックのトップにあるオブジェクトを指定したテーブル内に参照として追加し、ユニークな整数キーを返します。</p><p><code>[-1, +0, m]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>スタックのトップにあるオブジェクトのために、インデックス<code>t</code>のテーブル内に参照を作成し、返します（そしてそのオブジェクトをポップします）。</p><p>参照とはユニークな整数キーです。テーブル<code>t</code>に手動で整数キーを追加しない限り、<code>luaL_ref</code>は返すキーの一意性を保証します。参照<code>r</code>によって参照されるオブジェクトは、<code>lua_rawgeti(L, t, r)</code>を呼び出すことで取得できます。関数<code>luaL_unref</code>は参照とそれに関連付けられたオブジェクトを解放します。</p><p>スタックのトップにあるオブジェクトが<code>nil</code>の場合、<code>luaL_ref</code>は定数<code>LUA_REFNIL</code>を返します。定数<code>LUA_NOREF</code>は、<code>luaL_ref</code>によって返される任意の参照と異なることが保証されています。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaL_ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, LUA_REGISTRYINDEX);</span></span></code></pre></div><p>このコードは、スタックトップのオブジェクトをレジストリに追加し、参照キーを返します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>luaL_unref</li><li>lua_rawgeti</li></ul>',15)]))}const u=e(l,[["render",r]]);export{k as __pageData,u as default};
