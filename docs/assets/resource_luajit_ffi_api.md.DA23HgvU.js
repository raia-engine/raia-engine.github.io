import{_ as i,c as t,a2 as s,o as e}from"./chunks/framework.CuCbyi2k.js";const f=JSON.parse('{"title":"ffi.* API関数","description":"","frontmatter":{},"headers":[],"relativePath":"resource/luajit/ffi_api.md","filePath":"resource/luajit/ffi_api.md","lastUpdated":1729914702000}'),l={name:"resource/luajit/ffi_api.md"};function r(n,a,d,p,h,c){return e(),t("div",null,a[0]||(a[0]=[s('<h1 id="ffi-api関数" tabindex="-1">ffi.* API関数 <a class="header-anchor" href="#ffi-api関数" aria-label="Permalink to &quot;ffi.* API関数&quot;">​</a></h1><p>このページでは、FFIライブラリによって提供されるAPI関数について詳細に説明します。まずは導入とFFIチュートリアルを読むことをお勧めします。</p><h2 id="用語集" tabindex="-1">用語集 <a class="header-anchor" href="#用語集" aria-label="Permalink to &quot;用語集&quot;">​</a></h2><ul><li>cdecl — 抽象的なC型宣言（Lua文字列）。</li><li>ctype — C型オブジェクト。これはffi.typeof()によって返される特別な種類のcdataです。呼び出されるとcdataコンストラクタとして機能します。</li><li>cdata — Cデータオブジェクト。対応するctypeの値を保持します。</li><li>ct — ほとんどのAPI関数で使用できるC型指定。cdecl、ctype、またはテンプレート型として機能するcdataのいずれか。</li><li>cb — コールバックオブジェクト。特別な関数ポインタを保持するCデータオブジェクトです。この関数をCコードから呼び出すと、関連するLua関数が実行されます。</li><li>VLA — 可変長配列は、要素数の代わりに?を使用して宣言されます。例えば&quot;<code>int[?]</code>&quot;。要素数（nelem）は作成時に指定する必要があります。</li><li>VLS — 可変長構造体は、最後の要素がVLAである構造体C型です。宣言と作成に関する同じルールが適用されます。</li></ul><h2 id="外部シンボルの宣言とアクセス" tabindex="-1">外部シンボルの宣言とアクセス <a class="header-anchor" href="#外部シンボルの宣言とアクセス" aria-label="Permalink to &quot;外部シンボルの宣言とアクセス&quot;">​</a></h2><p>外部シンボルは最初に宣言され、その後、特定のライブラリにシンボルを自動的にバインドするCライブラリ名前空間をインデックス化することでアクセスできます。</p><h3 id="ffi-cdef-def" tabindex="-1">ffi.cdef(def) <a class="header-anchor" href="#ffi-cdef-def" aria-label="Permalink to &quot;ffi.cdef(def)&quot;">​</a></h3><p>型または外部シンボル（名前付き変数または関数）の複数のC宣言を追加します。defはLua文字列でなければなりません。文字列引数のシンタックスシュガーを以下のように使用することをお勧めします：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cdef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[[</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b; } </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 構造体とtypedefを宣言。</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dofoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 外部C関数を宣言。 */</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]]</span></span></code></pre></div><p>文字列の内容（上記の緑色の部分）は、セミコロンで区切られたC宣言のシーケンスでなければなりません。単一の宣言の場合、末尾のセミコロンは省略されることがあります。</p><p>外部シンボルは宣言されるだけで、まだ特定のアドレスにバインドされていないことに注意してください。バインドはCライブラリ名前空間（後述）を使用して行われます。</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Cの宣言はまだCプリプロセッサを通していません。#pragma packを除き、プリプロセッサトークンは許可されていません。既存のCヘッダーファイル内の#defineをenum、static const、typedefに置き換えるか、外部Cプリプロセッサを一度通してください。関連しないヘッダーファイルから不要または冗長な宣言を含めないように注意してください。</p></div><h3 id="ffi-c" tabindex="-1">ffi.C <a class="header-anchor" href="#ffi-c" aria-label="Permalink to &quot;ffi.C&quot;">​</a></h3><p>これはデフォルトのCライブラリ名前空間です — 大文字の&#39;C&#39;に注意してください。これはターゲットシステム上のデフォルトのシンボルまたはライブラリセットにバインドします。これらは、追加のリンクライブラリを指定せずに、Cコンパイラがデフォルトで提供するものとほぼ同じです。</p><p>POSIXシステムでは、これはデフォルトまたはグローバル名前空間内のシンボルにバインドします。これには、実行可能ファイルとグローバル名前空間にロードされた任意のライブラリからのすべてのエクスポートされたシンボルが含まれます。少なくともlibc、libm、libdl（Linux上）、libgcc（GCCでコンパイルされた場合）、およびLuaJIT自体によって提供されるLua/C APIからの任意のエクスポートされたシンボルが含まれます。</p><p>Windowsシステムでは、これは*.exe、lua51.dll（つまりLuaJIT自体によって提供されるLua/C API）、LuaJITがリンクされたCランタイムライブラリ（msvcrt*.dll）、kernel32.dll、user32.dll、gdi32.dllからエクスポートされたシンボルにバインドします。</p><h3 id="clib-ffi-load-name-global" tabindex="-1"><code>clib = ffi.load(name [,global])</code> <a class="header-anchor" href="#clib-ffi-load-name-global" aria-label="Permalink to &quot;`clib = ffi.load(name [,global])`&quot;">​</a></h3><p>これはnameによって指定された動的ライブラリをロードし、そのシンボルにバインドする新しいCライブラリ名前空間を返します。POSIXシステムでは、globalがtrueの場合、ライブラリシンボルもグローバル名前空間にロードされます。</p><p>nameがパスの場合、ライブラリはこのパスからロードされます。そうでない場合、nameはシステム依存の方法で標準化され、動的ライブラリのデフォルトの検索パスで検索されます：</p><p>POSIXシステムでは、名前にドットが含まれていない場合、拡張子.soが追加されます。また、必要に応じてlib接頭辞が追加されます。したがって、ffi.load(&quot;z&quot;)はデフォルトの共有ライブラリ検索パスで&quot;libz.so&quot;を探します。</p><p>Windowsシステムでは、名前にドットが含まれていない場合、拡張子.dllが追加されます。したがって、ffi.load(&quot;ws2_32&quot;)はデフォルトのDLL検索パスで&quot;ws2_32.dll&quot;を探します。</p><h2 id="cdataオブジェクトの作成" tabindex="-1">cdataオブジェクトの作成 <a class="header-anchor" href="#cdataオブジェクトの作成" aria-label="Permalink to &quot;cdataオブジェクトの作成&quot;">​</a></h2><p>次のAPI関数はcdataオブジェクトを作成します（type()は&quot;cdata&quot;を返します）。作成されたすべてのcdataオブジェクトはガーベージコレクションされます。</p><ul><li><code>cdata = ffi.new(ct [,nelem] [,init...])</code></li><li><code>cdata = ctype([nelem,] [init...])</code></li></ul><p>指定されたctのcdataオブジェクトを作成します。VLA/VLS型はnelem引数が必要です。2番目の構文はctypeをコンストラクタとして使用し、それ以外は完全に等価です。</p><p>cdataオブジェクトは、オプションのinit引数を使用して、初期化子のルールに従って初期化されます。余分な初期化子はエラーを引き起こします。</p><p>パフォーマンスに関する注意：一種類のオブジェクトを多く作成したい場合は、cdeclを一度だけ解析し、そのctypeをffi.typeof()で取得してください。その後、ctypeを繰り返しコンストラクタとして使用します。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>無名構造体の宣言は、ffi.new()で使用するたびに新しい、区別されたctypeを暗黙的に作成することに注意してください。これは特に、複数のcdataオブジェクトを作成する場合、望んでいることではないかもしれません。C標準では、異なる無名構造体はフィールドが同じでも代入互換とはみなされません！また、これらはJITコンパイラによって異なる型とみなされ、トレースの過剰な数を引き起こす可能性があります。名前付き構造体をffi.cdef()で宣言するか、無名構造体に対して単一のctypeオブジェクトをffi.typeof()で作成することを強く推奨します。</p></div><h3 id="ctype-ffi-typeof-ct" tabindex="-1">ctype = ffi.typeof(ct) <a class="header-anchor" href="#ctype-ffi-typeof-ct" aria-label="Permalink to &quot;ctype = ffi.typeof(ct)&quot;">​</a></h3><p>指定されたctのctypeオブジェクトを作成します。</p><p>この関数は、cdeclを一度だけ解析し、その結果得られたctypeオブジェクトをコンストラクタとして使用する場合に特に便利です。</p><h3 id="cdata-ffi-cast-ct-init" tabindex="-1">cdata = ffi.cast(ct, init) <a class="header-anchor" href="#cdata-ffi-cast-ct-init" aria-label="Permalink to &quot;cdata = ffi.cast(ct, init)&quot;">​</a></h3><p>指定されたctのスカラーcdataオブジェクトを作成します。cdataオブジェクトはC型の変換ルールの「キャスト」バリアントを使用してinitで初期化されます。</p><p>この関数は主に、ポインターの互換性チェックをオーバーライドする場合や、ポインターをアドレスに変換する場合、またはその逆の場合に便利です。</p><h3 id="ctype-ffi-metatype-ct-metatable" tabindex="-1">ctype = ffi.metatype(ct, metatable) <a class="header-anchor" href="#ctype-ffi-metatype-ct-metatable" aria-label="Permalink to &quot;ctype = ffi.metatype(ct, metatable)&quot;">​</a></h3><p>指定されたctのctypeオブジェクトを作成し、それをメタテーブルと関連付けます。構造体/共用体型、複素数、ベクトルのみが許可されます。必要に応じて、他の型は構造体でラップできます。</p><p>メタテーブルとの関連付けは永続的であり、後から変更することはできません。メタテーブルの内容や__indexテーブル（存在する場合）の内容も後から変更することはできません。関連付けられたメタテーブルは、オブジェクトの作成方法や発生元に関係なく、この型のすべての使用に自動的に適用されます。型に対する事前定義された操作が優先されることに注意してください（例えば、宣言されたフィールド名はオーバーライドできません）。</p><p>すべての標準Luaメタメソッドが実装されています。これらは直接、ショートカットなしで、そして任意の型の組み合わせで呼び出されます。二項演算については、左オペランドが有効なctypeメタメソッドを持っているかどうかが最初にチェックされます。__gcメタメソッドは構造体/共用体型にのみ適用され、インスタンスの作成時に暗黙的なffi.gc()呼び出しを行います。</p><h3 id="cdata-ffi-gc-cdata-finalizer" tabindex="-1">cdata = ffi.gc(cdata, finalizer) <a class="header-anchor" href="#cdata-ffi-gc-cdata-finalizer" aria-label="Permalink to &quot;cdata = ffi.gc(cdata, finalizer)&quot;">​</a></h3><p>ポインターまたは集合型cdataオブジェクトにファイナライザーを関連付けます。cdataオブジェクトは変更されずに返されます。</p><p>この関数は、管理されていないリソースをLuaJITガーベージコレクタの自動メモリ管理に安全に統合することを可能にします。典型的な使用法は次のとおりです：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ffi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n), ffi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- pへの最後の参照がなくなる。</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- GCは最終的にファイナライザーを実行します: ffi.C.free(p)</span></span></code></pre></div><p>cdataファイナライザーはユーザーデータオブジェクトの__gcメタメソッドのように動作します：cdataオブジェクトへの最後の参照がなくなると、関連付けられたファイナライザーがcdataオブジェクトを引数として呼び出されます。ファイナライザーは、Lua関数またはcdata関数、またはcdata関数ポインターであることができます。既存のファイナライザーは、リソースを明示的に削除する直前にnilファイナライザーを設定することで削除できます：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 手動でメモリを解放します。</span></span></code></pre></div><h2 id="c型の情報" tabindex="-1">C型の情報 <a class="header-anchor" href="#c型の情報" aria-label="Permalink to &quot;C型の情報&quot;">​</a></h2><p>次のAPI関数はC型に関する情報を返します。これらは主にcdataオブジェクトを検査するために役立ちます。</p><h3 id="size-ffi-sizeof-ct-nelem" tabindex="-1"><code>size = ffi.sizeof(ct [,nelem])</code> <a class="header-anchor" href="#size-ffi-sizeof-ct-nelem" aria-label="Permalink to &quot;`size = ffi.sizeof(ct [,nelem])`&quot;">​</a></h3><p>ctのサイズをバイト単位で返します。サイズが不明な場合（例えば&quot;void&quot;や関数型の場合）はnilを返します。VLA/VLS型の場合はnelemが必要ですが、cdataオブジェクトの場合は除きます。</p><h3 id="align-ffi-alignof-ct" tabindex="-1">align = ffi.alignof(ct) <a class="header-anchor" href="#align-ffi-alignof-ct" aria-label="Permalink to &quot;align = ffi.alignof(ct)&quot;">​</a></h3><p>ctの必要な最小アラインメントをバイト単位で返します。</p><h3 id="ofs-bpos-bsize-ffi-offsetof-ct-field" tabindex="-1"><code>ofs [,bpos,bsize] = ffi.offsetof(ct, field)</code> <a class="header-anchor" href="#ofs-bpos-bsize-ffi-offsetof-ct-field" aria-label="Permalink to &quot;`ofs [,bpos,bsize] = ffi.offsetof(ct, field)`&quot;">​</a></h3><p>ctの開始からfieldまでのオフセット（バイト単位）を返します。ctは構造体でなければなりません。ビットフィールドの場合は、位置とフィールドサイズ（ビット単位）も返します。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ct, obj)</span></span></code></pre></div><p>objがctで指定されたC型を持っている場合はtrueを返します。それ以外の場合はfalseを返します。</p><p>C型の修飾子（constなど）は無視されます。ポインターは標準のポインター互換性ルールでチェックされますが、void *に対する特別な処理はありません。ctが構造体/共用体を指定している場合、この型へのポインターも受け入れられます。それ以外の場合、型は正確に一致する必要があります。</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>この関数はobj引数に対してあらゆる種類のLuaオブジェクトを受け入れますが、非cdataオブジェクトに対しては常にfalseを返します。</p></div><h2 id="ユーティリティ関数" tabindex="-1">ユーティリティ関数 <a class="header-anchor" href="#ユーティリティ関数" aria-label="Permalink to &quot;ユーティリティ関数&quot;">​</a></h2><h3 id="err-ffi-errno-newerr" tabindex="-1"><code>err = ffi.errno([newerr])</code> <a class="header-anchor" href="#err-ffi-errno-newerr" aria-label="Permalink to &quot;`err = ffi.errno([newerr])`&quot;">​</a></h3><p>最後にエラー状態を示したC関数呼び出しによって設定されたエラー番号を返します。オプションのnewerr引数が指定されている場合、エラー番号が新しい値に設定され、以前の値が返されます。</p><p>この関数は、エラー番号を取得および設定するためのポータブルでOSに依存しない方法を提供します。エラー番号を設定するC関数は一部に限られています。そして、それは関数が実際にエラー状態を示した場合（例えば-1またはNULLの戻り値で）のみ意味があります。そうでない場合、以前に設定された値を含んでいるかもしれませんし、含んでいないかもしれません。</p><p>関連するC関数の戻り値の直後に必要なとき、そして可能な限り早くこの関数を呼び出すことをお勧めします。errno値はフック、メモリ割り当て、JITコンパイラの呼び出し、その他の内部VMアクティビティを通じて保持されます。Windows上でGetLastError()によって返される値も同様ですが、それを宣言して自分自身で呼び出す必要があります。</p><h3 id="str-ffi-string-ptr-len" tabindex="-1"><code>str = ffi.string(ptr [,len])</code> <a class="header-anchor" href="#str-ffi-string-ptr-len" aria-label="Permalink to &quot;`str = ffi.string(ptr [,len])`&quot;">​</a></h3><p>ptrが指すデータからインターンされたLua文字列を作成します。</p><p>オプショナル引数lenが省略された場合、ptrは「char *」に変換され、データはゼロ終端であると見なされます。文字列の長さはstrlen()で計算されます。</p><p>それ以外の場合、ptrは「void *」に変換され、lenはデータの長さを示します。データには組み込みのゼロが含まれる場合があり、バイト指向である必要はありません（ただし、これはエンディアンの問題を引き起こす可能性があります）。</p><p>この関数は主に、C関数によって返された（一時的な）「const char *」ポインターをLua文字列に変換し、それを保存するか、Lua文字列を期待する他の関数に渡すために役立ちます。Lua文字列はデータの（インターンされた）コピーであり、もはや元のデータ領域とは関係がありません。Lua文字列は8ビットクリーンであり、任意の非文字データを保持するために使用できます。</p><p>パフォーマンスに関する注意：文字列の長さが分かっている場合は、長さを渡す方が速いです。例えば、sprintf()のようなCコールによって長さが返されるときなどです。</p><h3 id="ffi-copy-dst-src-len" tabindex="-1">ffi.copy(dst, src, len) <a class="header-anchor" href="#ffi-copy-dst-src-len" aria-label="Permalink to &quot;ffi.copy(dst, src, len)&quot;">​</a></h3><h3 id="ffi-copy-dst-str" tabindex="-1">ffi.copy(dst, str) <a class="header-anchor" href="#ffi-copy-dst-str" aria-label="Permalink to &quot;ffi.copy(dst, str)&quot;">​</a></h3><p>srcが指すデータをdstにコピーします。dstは「void *」に変換され、srcは「const void *」に変換されます。</p><p>最初の構文では、lenはコピーするバイト数を示します。注意：srcがLua文字列の場合、lenは#src+1を超えてはなりません。</p><p>二番目の構文では、コピーのソースはLua文字列でなければなりません。文字列の全バイトに加えてゼロ終端がdstにコピーされます（つまり、#src+1バイト）。</p><p>パフォーマンスに関する注意：ffi.copy()は、Cライブラリ関数memcpy()、strcpy()、strncpy()のより速い（インライン化可能な）代替として使用できます。</p><h3 id="ffi-fill-dst-len-c" tabindex="-1">ffi.fill(dst, len [,c]) <a class="header-anchor" href="#ffi-fill-dst-len-c" aria-label="Permalink to &quot;ffi.fill(dst, len [,c])&quot;">​</a></h3><p>dstが指すデータを、cで指定されたlen個の定数バイトで埋めます。cが省略された場合、データはゼロで埋められます。</p><p>パフォーマンスに関する注意：ffi.fill()は、Cライブラリ関数memset(dst, c, len)のより速い（インライン化可能な）代替として使用できます。引数の順序が異なることに注意してください！</p><h2 id="ターゲット固有の情報" tabindex="-1">ターゲット固有の情報 <a class="header-anchor" href="#ターゲット固有の情報" aria-label="Permalink to &quot;ターゲット固有の情報&quot;">​</a></h2><h3 id="status-ffi-abi-param" tabindex="-1">status = ffi.abi(param) <a class="header-anchor" href="#status-ffi-abi-param" aria-label="Permalink to &quot;status = ffi.abi(param)&quot;">​</a></h3><p>param（Lua文字列）がターゲットのABI（アプリケーションバイナリインターフェース）に適用される場合はtrueを返します。そうでない場合はfalseを返します。現在定義されているパラメータは以下の通りです：</p><table tabindex="0"><thead><tr><th>パラメータ</th><th>説明</th></tr></thead><tbody><tr><td>32bit</td><td>32ビットアーキテクチャ</td></tr><tr><td>64bit</td><td>64ビットアーキテクチャ</td></tr><tr><td>le</td><td>リトルエンディアンアーキテクチャ</td></tr><tr><td>be</td><td>ビッグエンディアンアーキテクチャ</td></tr><tr><td>fpu</td><td>ハードウェアFPUを持つターゲット</td></tr><tr><td>softfp</td><td>softfp呼び出し規約</td></tr><tr><td>hardfp</td><td>hardfp呼び出し規約</td></tr><tr><td>eabi</td><td>標準ABIのEABIバリアント</td></tr><tr><td>win</td><td>標準ABIのWindowsバリアント</td></tr><tr><td>pauth</td><td>ポインタ認証ABI</td></tr><tr><td>uwp</td><td>ユニバーサルWindowsプラットフォーム</td></tr><tr><td>gc64</td><td>64ビットGC参照</td></tr></tbody></table><h3 id="ffi-os" tabindex="-1">ffi.os <a class="header-anchor" href="#ffi-os" aria-label="Permalink to &quot;ffi.os&quot;">​</a></h3><p>ターゲットOS名を含みます。jit.osと同じ内容です。</p><h3 id="ffi-arch" tabindex="-1">ffi.arch <a class="header-anchor" href="#ffi-arch" aria-label="Permalink to &quot;ffi.arch&quot;">​</a></h3><p>ターゲットアーキテクチャ名を含みます。jit.archと同じ内容です。</p><h3 id="コールバックのメソッド" tabindex="-1">コールバックのメソッド <a class="header-anchor" href="#コールバックのメソッド" aria-label="Permalink to &quot;コールバックのメソッド&quot;">​</a></h3><p>コールバックのC型にはいくつかの追加メソッドがあります：</p><h3 id="cb-free" tabindex="-1">cb:free() <a class="header-anchor" href="#cb-free" aria-label="Permalink to &quot;cb:free()&quot;">​</a></h3><p>コールバックに関連付けられたリソースを解放します。関連するLua関数はアンカーされなくなり、ガベージコレクションされる可能性があります。コールバック関数ポインターはもはや有効ではなく、再び呼び出されるべきではありません（新しく作成されたコールバックによって再利用される可能性があります）。</p><h3 id="cb-set-func" tabindex="-1">cb:set(func) <a class="header-anchor" href="#cb-set-func" aria-label="Permalink to &quot;cb:set(func)&quot;">​</a></h3><p>コールバックに新しいLua関数を関連付けます。コールバックのC型とコールバック関数ポインターは変更されません。</p><p>このメソッドは、新しいコールバックを毎回作成して再登録することなく、コールバックの受信者を動的に切り替えるのに役立ちます（例：GUIライブラリで）。</p><h2 id="標準ライブラリ関数の拡張" tabindex="-1">標準ライブラリ関数の拡張 <a class="header-anchor" href="#標準ライブラリ関数の拡張" aria-label="Permalink to &quot;標準ライブラリ関数の拡張&quot;">​</a></h2><p>次の標準ライブラリ関数は、cdataオブジェクトで動作するように拡張されています：</p><h3 id="n-tonumber-cdata" tabindex="-1">n = tonumber(cdata) <a class="header-anchor" href="#n-tonumber-cdata" aria-label="Permalink to &quot;n = tonumber(cdata)&quot;">​</a></h3><p>数値cdataオブジェクトをダブルに変換し、それをLua数値として返します。これは特にボックス化された64ビット整数値にとって有用です。注意：この変換は精度の損失を招く可能性があります。</p><h3 id="s-tostring-cdata" tabindex="-1">s = tostring(cdata) <a class="header-anchor" href="#s-tostring-cdata" aria-label="Permalink to &quot;s = tostring(cdata)&quot;">​</a></h3><p>64ビット整数（&quot;nnnLL&quot;または&quot;nnnULL&quot;）や複素数（&quot;re±imi&quot;）の値の文字列表現を返します。それ以外の場合は、ctypeオブジェクトのC型（&quot;<code>ctype&lt;type&gt;</code>&quot;）またはcdataオブジェクト（&quot;<code>cdata&lt;type&gt;: address</code>&quot;）の文字列表現を返します。ただし、__tostringメタメソッドでオーバーライドしない限り（ffi.metatype()を参照）。</p><h3 id="iter-obj-start-pairs-cdata" tabindex="-1">iter, obj, start = pairs(cdata) <a class="header-anchor" href="#iter-obj-start-pairs-cdata" aria-label="Permalink to &quot;iter, obj, start = pairs(cdata)&quot;">​</a></h3><h3 id="iter-obj-start-ipairs-cdata" tabindex="-1">iter, obj, start = ipairs(cdata) <a class="header-anchor" href="#iter-obj-start-ipairs-cdata" aria-label="Permalink to &quot;iter, obj, start = ipairs(cdata)&quot;">​</a></h3><p>対応するctypeの__pairsまたは__ipairsメタメソッドを呼び出します。</p><h2 id="luaパーサーの拡張" tabindex="-1">Luaパーサーの拡張 <a class="header-anchor" href="#luaパーサーの拡張" aria-label="Permalink to &quot;Luaパーサーの拡張&quot;">​</a></h2><p>Luaソースコードのパーサーは、接尾辞LLまたはULLを持つ数値リテラルを符号付きまたは符号なしの64ビット整数として扱います。大文字と小文字は区別されませんが、可読性のために大文字の使用が推奨されます。10進数（42LL）、16進数（0x2aLL）、2進数（0b101010LL）リテラルを処理します。</p><p>複素数の虚部は、数値リテラルにiまたはIを接尾辞として付けることで指定できます。例えば12.5iです。注意点として、i自体はまだ変数iを指しているので、値が1の虚部を得るには1iを使用する必要があります。</p>',103)]))}const k=i(l,[["render",r]]);export{f as __pageData,k as default};
