import{_ as s,c as i,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"lua_Hook","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_Hook.md","filePath":"reference/lua_c/lua_Hook.md","lastUpdated":1731828945000}'),l={name:"reference/lua_c/lua_Hook.md"};function n(h,a,k,o,p,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="lua-hook" tabindex="-1">lua_Hook <a class="header-anchor" href="#lua-hook" aria-label="Permalink to &quot;lua_Hook&quot;">​</a></h1><p>デバッグフック関数のための型です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lua_Hook) (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ar);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>デバッグフック関数のための型です。</p><p>フックが呼び出されるとき、その<code>ar</code>引数の<code>event</code>フィールドはフックをトリガーした特定のイベントに設定されます。Luaはこれらのイベントを次の定数で識別します：<code>LUA_HOOKCALL</code>, <code>LUA_HOOKRET</code>, <code>LUA_HOOKTAILRET</code>, <code>LUA_HOOKLINE</code>, <code>LUA_HOOKCOUNT</code>。さらに、行イベントの場合、<code>currentline</code>フィールドも設定されます。<code>ar</code>の他のフィールドの値を取得するには、フックは<code>lua_getinfo</code>を呼び出さなければなりません。戻りイベントの場合、<code>event</code>は<code>LUA_HOOKRET</code>（通常の値）または<code>LUA_HOOKTAILRET</code>になります。後者の場合、Luaはテールコールを行った関数からの戻りをシミュレートしています。この場合、<code>lua_getinfo</code>を呼び出すことは無意味です。</p><p>Luaがフックを実行している間、他のフックへの呼び出しは無効になります。したがって、フックがLuaを呼び出して関数やチャンクを実行する場合、この実行はフックへの呼び出しなしで行われます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lua_Debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ar-&gt;event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LUA_HOOKCALL) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;関数が呼び出されました</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このコードは、関数呼び出しイベントでメッセージを表示するデバッグフックを定義します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_sethook</li><li>lua_gethook</li></ul>`,14)]))}const E=s(l,[["render",n]]);export{c as __pageData,E as default};
