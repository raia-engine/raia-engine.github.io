import{_ as e,c as i,a2 as t,o as s}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"debug.gethook","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/debug/gethook.md","filePath":"reference/built_in/debug/gethook.md","lastUpdated":1729914702000}'),l={name:"reference/built_in/debug/gethook.md"};function o(h,a,n,r,d,p){return s(),i("div",null,a[0]||(a[0]=[t(`<h1 id="debug-gethook" tabindex="-1">debug.gethook <a class="header-anchor" href="#debug-gethook" aria-label="Permalink to &quot;debug.gethook&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">debug.gethook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([thread])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>指定したスレッドに設定されているフック関数、フックマスク、およびフックカウントを返します。フックは、関数の呼び出しやリターン、行の遷移などのイベントを捕捉するために使用されます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hook, mask, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> debug.gethook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hook, mask, count)</span></span></code></pre></div><p>この例では、現在設定されているフック関数とそのマスクやカウントが出力されます。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><p>メタメソッドを識別する。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./sethook.html"><code>debug.sethook</code></a></li></ul>`,13)]))}const c=e(l,[["render",o]]);export{u as __pageData,c as default};
