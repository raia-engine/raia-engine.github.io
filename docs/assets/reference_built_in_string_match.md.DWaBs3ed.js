import{_ as i,c as s,a2 as t,o as e}from"./chunks/framework.6x3wfQve.js";const k=JSON.parse('{"title":"string.match","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/string/match.md","filePath":"reference/built_in/string/match.md","lastUpdated":null}'),l={name:"reference/built_in/string/match.md"};function n(h,a,r,d,p,o){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="string-match" tabindex="-1">string.match <a class="header-anchor" href="#string-match" aria-label="Permalink to &quot;string.match&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string.match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s, pattern [, init])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>文字列<code>s</code>からパターンに最初にマッチする部分を返します。<code>pattern</code>がキャプチャを指定していれば、そのキャプチャを返します。見つからなければ<code>nil</code>を返します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I have 2 apples&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string.match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 2</span></span></code></pre></div><p>この例では、文字列の中から最初に見つかる数字を抽出しています。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><ul><li>文字列マッチングパターン<code>%g</code>が追加された。(Lua5.2から)</li></ul><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./find.html"><code>string.find</code></a></li><li><a href="./gmatch.html"><code>string.gmatch</code></a></li></ul>`,13)]))}const u=i(l,[["render",n]]);export{k as __pageData,u as default};
