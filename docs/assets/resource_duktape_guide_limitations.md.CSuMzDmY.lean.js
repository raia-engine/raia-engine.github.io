import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/guide/limitations.md","filePath":"resource/duktape/guide/limitations.md","lastUpdated":1732350347000}'),l={name:"resource/duktape/guide/limitations.md"};function p(e,s,h,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="limitations" tabindex="-1">制限事項 <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;制限事項 {#limitations}&quot;">​</a></h2><p>以下は、現在の実装における既知の制限事項のリストです。制限には、セマンティクスの観点からの欠点、性能の制限、実装の制限（これは避けられない）などがあります。</p><p>些細なバグは「長期的なバグ」でない限り、リストアップしていません。</p><h3 id="再入可能性なし" tabindex="-1">再入可能性なし <a class="header-anchor" href="#再入可能性なし" aria-label="Permalink to &quot;再入可能性なし&quot;">​</a></h3><p>単一のDuktapeヒープ、つまり同じガベージコレクタを共有するコンテキストは、リエントラントではありません。C/C++のスレッドで、特定のDuktapeヒープに対して一度にDuktape APIを呼び出せるのは1つだけです（ただし、呼び出すスレッドは時間の経過とともに変更される可能性があります）。スレッド化」を参照してください。</p><h3 id="文字列とバッファの制限" tabindex="-1">文字列とバッファの制限 <a class="header-anchor" href="#文字列とバッファの制限" aria-label="Permalink to &quot;文字列とバッファの制限&quot;">​</a></h3><p>内部表現では、文字列の最大長は 2**31-1 (0x7fffffff) バイト（文字ではありません） までです。16ビットのコードポイントは最悪の場合UTF-8の3バイトにエンコードされるため、 動作が保証される最大文字列長は約0.7G文字となります。</p><p>バッファの値も 2**31-1 (0x7fffffff) バイトに制限されます。</p><h3 id="プロパティの制限" tabindex="-1">プロパティの制限 <a class="header-anchor" href="#プロパティの制限" aria-label="Permalink to &quot;プロパティの制限&quot;">​</a></h3><p>オブジェクトは最大で DUK_HOBJECT_MAX_PROPERTIES (内部定義) を持つことができます。現在のところ、この制限は 0x7ffffff です。</p><h3 id="配列の制限" tabindex="-1">配列の制限 <a class="header-anchor" href="#配列の制限" aria-label="Permalink to &quot;配列の制限&quot;">​</a></h3><p>配列のアイテム・インデックスが 2**31-1 の制限 (0x7ffffff) を超えると、Duktape には配列のセマンティクスに関するいくつかの既知のバグが発生します。</p><h3 id="空のマッチを超える正規表現量化子" tabindex="-1">空のマッチを超える正規表現量化子 <a class="header-anchor" href="#空のマッチを超える正規表現量化子" aria-label="Permalink to &quot;空のマッチを超える正規表現量化子&quot;">​</a></h3><p>正規表現エンジンは、空のマッチ上で量化子が使用されたときに行き詰まりますが、最終的には内部再帰（または実行ステップ）制限で救済されます。たとえば、次のコードは &quot;no match&quot; の結果を生成するはずですが、代わりに内部再帰の制限にヒットします。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> duk</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RangeError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> regexp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> executor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> recursion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> limit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [anon] (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_regexp_executor.c:145</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) internal</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () native strict preventsyield</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (input:1) preventsyield</span></span></code></pre></div><h3 id="duktapeはロケールを完全にサポートしていません。" tabindex="-1">Duktapeはロケールを完全にサポートしていません。 <a class="header-anchor" href="#duktapeはロケールを完全にサポートしていません。" aria-label="Permalink to &quot;Duktapeはロケールを完全にサポートしていません。&quot;">​</a></h3><p>Duktape はローカル時刻の概念をサポートしていますが、ロケールに関連する他の機能、例えば、ロケール固有の日付書式、ロケール固有の文字列比較、ロケール/言語固有の Unicode 規則（トルコ語、アゼリ語、リスアニア語のケース変換規則など）はサポートされていません。</p><h3 id="unicodeの大文字・小文字変換は、ロケールや文脈に依存しない。" tabindex="-1">Unicodeの大文字・小文字変換は、ロケールや文脈に依存しない。 <a class="header-anchor" href="#unicodeの大文字・小文字変換は、ロケールや文脈に依存しない。" aria-label="Permalink to &quot;Unicodeの大文字・小文字変換は、ロケールや文脈に依存しない。&quot;">​</a></h3><p>E5 15.5.4.16から15.5.4.19項では、Unicode SpecialCasing.txtのコンテキストとロケール処理を要求しています。しかし、Duktapeは現在、&quot;current locale &quot;の概念を持っていない。</p><h3 id="デフォルトでないプロパティ属性を使用した場合の配列のパフォーマンス" tabindex="-1">デフォルトでないプロパティ属性を使用した場合の配列のパフォーマンス <a class="header-anchor" href="#デフォルトでないプロパティ属性を使用した場合の配列のパフォーマンス" aria-label="Permalink to &quot;デフォルトでないプロパティ属性を使用した場合の配列のパフォーマンス&quot;">​</a></h3><p>すべての配列要素は、書き込み可能で、列挙可能で、設定可能であることが期待されています（新しいプロパティのデフォルト・プロパティ属性）。この仮定が一時的にでも破られた場合、オブジェクトの「配列部分」全体は永久に放棄され、配列エントリーは「エントリー部分」に移動されます。この場合、使用されているすべての配列インデックスを明示的な文字列キー（&quot;0&quot;、&quot;1 &quot;など）としてインターフェイスすることになります。これはコンプライアンス上の問題ではありませんが、パフォーマンスを低下させます。</p><h3 id="object-defineproperty-を用いて要素を書き込む際の配列の性能" tabindex="-1">Object.defineProperty() を用いて要素を書き込む際の配列の性能 <a class="header-anchor" href="#object-defineproperty-を用いて要素を書き込む際の配列の性能" aria-label="Permalink to &quot;Object.defineProperty() を用いて要素を書き込む際の配列の性能&quot;">​</a></h3><p>Object.defineProperty() を使用して数値添字の配列要素を書き込む場合、現在の実装では内部の「配列部分」を放棄しているため、後の配列アクセスが非常に遅くなります。これを避けるには、a[123] = 321 のような直接代入で配列要素を記述してください。</p><h3 id="グローバル-評価コードに生成されるバイトコードは、関数コードより遅い。" tabindex="-1">グローバル/評価コードに生成されるバイトコードは、関数コードより遅い。 <a class="header-anchor" href="#グローバル-評価コードに生成されるバイトコードは、関数コードより遅い。" aria-label="Permalink to &quot;グローバル/評価コードに生成されるバイトコードは、関数コードより遅い。&quot;">​</a></h3><p>グローバルコードや評価コード用に生成されたバイトコードは、変数をレジスタに静的に割り当てることができず、明示的な名前ベースの変数読み取り/書き込みアクセスが使用されます。関数コード用に生成されたバイトコードにはこの制限がありません。ほとんどの変数はレジスタに静的に割り当てられ、アクセスには直接レジスタ参照が使用されます。</p><p>これは、トップレベルのグローバル/評価コードを長時間実行するのでなければ、些細な問題です。回避策は簡単で、トップレベルから呼び出す関数の中にコードを入れておくことです。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>また、この目的のために無名関数を使用するイディオムもよくあります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div><h3 id="関数テンポラリは、予想以上に長くガベージコレクションのために生き続けるかもしれません" tabindex="-1">関数テンポラリは、予想以上に長くガベージコレクションのために生き続けるかもしれません <a class="header-anchor" href="#関数テンポラリは、予想以上に長くガベージコレクションのために生き続けるかもしれません" aria-label="Permalink to &quot;関数テンポラリは、予想以上に長くガベージコレクションのために生き続けるかもしれません&quot;">​</a></h3><p>ECMAScript の関数は、固定されたレジスタのセットでバイトコードにコンパイルされます。いくつかのレジスタは引数や変数バインディングのために予約され、他のものはテンポラリとして使用されます。すべてのレジスタはガベージコレクションの観点から生きているとみなされ、関数が実際にはもう参照できない古い値を含む一時的なレジスタであってもです。このような一時的なレジスタは、他の式の評価によって上書きされるか、関数が終了するまで到達可能であると見なされます。関数の終了は、ガベージコレクションを確実にするために、唯一容易に予測できる条件です。</p><p>もし、非常に長い時間実行し続ける関数があるならば、その関数には必要最小限の変数とテンポラリしかないはずです。例えば、次のようなコード構成にすることができます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // run one iteration, lots of temporaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foreverLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        runOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは通常、長時間稼働する関数がなければ問題にはならない。</p><h3 id="関数インスタンスはマークアンドスイープによってのみガベージコレクションされます" tabindex="-1">関数インスタンスはマークアンドスイープによってのみガベージコレクションされます <a class="header-anchor" href="#関数インスタンスはマークアンドスイープによってのみガベージコレクションされます" aria-label="Permalink to &quot;関数インスタンスはマークアンドスイープによってのみガベージコレクションされます&quot;">​</a></h3><p>ECMAScript のすべての関数インスタンスは、デフォルトでは、関数のために自動的に作成されたプロトタイプオブジェクトとの参照ループ内にあります。関数インスタンスの prototype プロパティは prototype オブジェクトを指し、prototype のコンストラクタのプロパティは関数インスタンスに戻ります。このような参照ループを収集できるのは、今のところマークアンドスイープだけです。参照カウントのみで構築した場合（推奨しません）、関数インスタンスがメモリをリークしているように見えることがあります。メモリは、関連するヒープが破棄されたときに解放されます。</p><p>参照ループを手動で解除することができます (ただし、これは少し面倒です)。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;finalizer for f&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;finalizer for g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(h, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;finalizer for h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not collected until heap destruction in a reference counting only build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not collected immediately</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// break cycle by deleting &#39;prototype&#39; reference (alternative 1)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// collected immediately, finalizer runs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// break cycle by deleting &#39;constructor&#39; reference (alternative 2)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// collected immediately, finalizer runs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mark-and-sweep triggers finalizer for &#39;f&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duktape.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>内部技術的な理由により、名前付き関数式は内部環境レコードオブジェクトとの参照ループの中にもあります。このループはユーザーコードから抜け出すことができず、マークアンドスイープのみがこのような関数を収集することができます。通常の関数宣言や無名関数にはこの制限はありません。例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // myfunc is in reference loop with an internal environment record,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // and can only be collected with mark-and-sweep.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Duktape 2.x以降、マーク・アンド・スイープは常に有効になっており、参照ループに参加しているオブジェクトは最終的に解放されます。設定オプションにより、定期的な「自発的」（緊急ではない）マーク＆スイープを無効化することで、時間に敏感な環境での収集の一時停止を減らすことができます。</p><h3 id="非標準的な関数の「呼び出し元」プロパティの制限" tabindex="-1">非標準的な関数の「呼び出し元」プロパティの制限 <a class="header-anchor" href="#非標準的な関数の「呼び出し元」プロパティの制限" aria-label="Permalink to &quot;非標準的な関数の「呼び出し元」プロパティの制限&quot;">​</a></h3><p>DUK_USE_NONSTD_FUNC_CALLER_PROPERTY が与えられると、 Duktape は、例えば V8 や Spidermonkey と同様に、非標準の関数インスタンスの呼び出し側プロパティを更新します。しかし、いくつかの制限事項があります。</p><ul><li>evalコードから（非厳密な）関数が呼び出された場合、Duktapeはcallerに、evalコードが非厳密であればnull、厳密であればeval（組み込み関数evalの参照）をセットします。これは、例えばV8の動作とは異なっています。</li><li>コルーチンとcallerは相性が悪く、コルーチンのコールスタックが完全に巻き戻された後でもcallerがnullでない状態で残っていることがあります。また、コルーチンがそのコールスタックが巻き戻される前にガベージコレクションされた場合、そのコールスタック内の関数の呼び出し元のプロパティは、今更更新されません。</li></ul><p>詳細については、内部の test-bi-function-nonstd-caller-prop.js テストケースを参照してください。</p><h3 id="デバッガー休止状態でのガベージコレクション" tabindex="-1">デバッガー休止状態でのガベージコレクション <a class="header-anchor" href="#デバッガー休止状態でのガベージコレクション" aria-label="Permalink to &quot;デバッガー休止状態でのガベージコレクション&quot;">​</a></h3><p>デバッガー・サポートが有効で、デバッガー・セッションがアクティブで、Duktape が一時停止しているとき、現在いくつかの制限があります。</p><p>一時停止中はガベージ・コレクションが無効になるため、Duktape.gc() および duk_gc() への呼び出しは黙って無視されます。</p>`,48)]))}const c=i(l,[["render",p]]);export{o as __pageData,c as default};
