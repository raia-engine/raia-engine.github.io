import{_ as i,c as t,a2 as a,o as p}from"./chunks/framework.DPuwY6B9.js";const g=JSON.parse('{"title":"入力","description":"","frontmatter":{},"headers":[],"relativePath":"resource/glfw/reference/input.md","filePath":"resource/glfw/reference/input.md","lastUpdated":1729914702000}'),l={name:"resource/glfw/reference/input.md"};function n(e,s,h,k,d,o){return p(),t("div",null,s[0]||(s[0]=[a(`<h1 id="入力" tabindex="-1">入力 <a class="header-anchor" href="#入力" aria-label="Permalink to &quot;入力&quot;">​</a></h1><p>これは、入力に関連する関数と型に関する参考文書である。タスク指向の情報については、入力ガイドを参照してください。</p><nav class="table-of-contents"><ul><li><a href="#モジュール">モジュール</a></li><li><a href="#マクロ">マクロ</a></li><li><a href="#型定義">型定義</a></li><li><a href="#関数">関数</a></li></ul></nav><h2 id="モジュール" tabindex="-1">モジュール <a class="header-anchor" href="#モジュール" aria-label="Permalink to &quot;モジュール&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>ゲームパッドの軸</td><td>ゲームパッドの軸。</td></tr><tr><td>ゲームパッドのボタン</td><td>ゲームパッドのボタン</td></tr><tr><td>ジョイスティック・ハット</td><td>ジョイスティック・ハットの状態。</td></tr><tr><td>ジョイスティック</td><td>ジョイスティックのID。</td></tr><tr><td>キーボードのキー</td><td>キーボードのキーID。</td></tr><tr><td>修飾キー・フラグ</td><td>修飾キーのフラグ。</td></tr><tr><td>マウスボタン</td><td>マウスボタンのID。</td></tr><tr><td>標準カーソル形状</td><td>標準システムのカーソル形状。</td></tr></tbody></table><h2 id="マクロ" tabindex="-1">マクロ <a class="header-anchor" href="#マクロ" aria-label="Permalink to &quot;マクロ&quot;">​</a></h2><table tabindex="0"><thead><tr><th>マクロ</th><th>説明</th></tr></thead><tbody><tr><td>GLFW_RELEASE</td><td>キーまたはマウスボタンが離された。</td></tr><tr><td>GLFW_PRESS</td><td>キーまたはマウスボタンが押された。</td></tr><tr><td>GLFW_REPEAT</td><td>キーは繰り返されるまで押し続けられた。</td></tr></tbody></table><details class="details custom-block"><summary>GLFW_RELEASE</summary><p>キーまたはマウスボタンが離された。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_RELEASE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_PRESS</summary><p>キーまたはマウスボタンが押された。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_PRESS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1</span></span></code></pre></div></details><details class="details custom-block"><summary>GLFW_REPEAT</summary><p>キーは繰り返されるまで押し続けられた。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLFW_REPEAT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   2</span></span></code></pre></div></details><h2 id="型定義" tabindex="-1">型定義 <a class="header-anchor" href="#型定義" aria-label="Permalink to &quot;型定義&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>struct GLFWcursor</code></td><td>不透明なカーソルオブジェクト。</td></tr><tr><td><code>void(* GLFWmousebuttonfun)</code></td><td>マウスボタンコールバック用の関数ポインタタイプ。</td></tr><tr><td><code>void(* GLFWcursorposfun)</code></td><td>カーソル位置コールバックの関数ポインタタイプ。</td></tr><tr><td><code>void(* GLFWcursorenterfun)</code></td><td>カーソル入力/離脱コールバックの関数ポインタタイプ。</td></tr><tr><td><code>void(* GLFWscrollfun)</code></td><td>スクロールコールバックの関数ポインタタイプ。</td></tr><tr><td><code>void(* GLFWkeyfun)</code></td><td>キーボード・キー・コールバックの関数ポインタ・タイプ。</td></tr><tr><td><code>void(* GLFWcharfun)</code></td><td>Unicode 文字コールバック用の関数ポインタ型。</td></tr><tr><td><code>void(* GLFWcharmodsfun)</code></td><td>Unicode 文字修飾子付きコールバック用の関数ポインタ型。</td></tr><tr><td><code>void(* GLFWdropfun)</code></td><td>パス・ドロップ・コールバックの関数ポインタ型。</td></tr><tr><td><code>void(* GLFWjoystickfun)</code></td><td>ジョイスティック設定コールバックの関数ポインタ型。</td></tr><tr><td><code>struct GLFWgamepadstate</code></td><td>ゲームパッドの入力状態。</td></tr></tbody></table><details class="details custom-block"><summary><code>struct GLFWcursor</code></summary><p>不透明なカーソルオブジェクト。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWcursor GLFWcursor</span></span></code></pre></div><p><strong>参照</strong>:</p><ul><li>Cursor objects</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWmousebuttonfun)</code></summary><p>これは、マウスボタンコールバック関数のための関数ポインタタイプです。マウスボタンコールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWmousebuttonfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> action, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mods)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] button</code>: 押された、または離されたマウスボタン。</li><li><code>[in] action</code>: GLFW_PRESSまたはGLFW_RELEASEのいずれか。将来のリリースでは、さらに多くのアクションが追加されるかもしれません。</li><li><code>[in] mods</code>: どの修飾キーが押されたかを示すビットフィールド。</li></ul><p><strong>参照</strong>:</p><ul><li>Mouse button input</li><li>glfwSetMouseButtonCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルとモディファイアマスクのパラメータを追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWcursorposfun)</code></summary><p>これは、カーソル位置コールバック用の関数ポインタ・タイプである。カーソル位置コールバック関数は以下のシグネチャを持つ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWcursorposfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xpos, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ypos)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] xpos</code>: コンテンツ領域の左端からの相対的な、新しいカーソルのX座標。</li><li><code>[in] ypos</code>: コンテンツ領域の上端からの相対的な、新しいカーソルのy座標。</li></ul><p><strong>参照</strong>:</p><ul><li>Cursor position</li><li>glfwSetCursorPosCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。GLFWmouseposfun を置き換える。</p></details><details class="details custom-block"><summary><code>void(* GLFWcursorenterfun)</code></summary><p>これは、カーソル・エンター/リーブ・コールバック用の関数ポインタ・タイプである。カーソル入力/離脱コールバック関数は以下のシグネチャを持つ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> entered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWcursorenterfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entered)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] entered</code>: カーソルがウィンドウのコンテンツ領域に入った場合はGLFW_TRUE、ウィンドウから出た場合はGLFW_FALSE。</li></ul><p><strong>参照</strong>:</p><ul><li>Cursor enter/leave events</li><li>glfwSetCursorEnterCallback</li></ul><p><strong>追加</strong>: バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWscrollfun)</code></summary><p>これは、スクロールコールバック用の関数ポインタ型である。スクロールコールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> yoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWscrollfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xoffset, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yoffset)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] xoffset</code>: X軸に沿ったスクロールオフセット。</li><li><code>[in] yoffset</code>: Y軸方向のスクロールオフセット。</li></ul><p><strong>参照</strong>:</p><ul><li>Scroll input</li><li>glfwSetScrollCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。GLFWmousewheelfun を置き換える。</p></details><details class="details custom-block"><summary><code>void(* GLFWkeyfun)</code></summary><p>これは、キーボード・キー・コールバック用の関数ポインタ・タイプである。キーボード・キー・コールバック関数は以下のシグネチャを持つ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> scancode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWkeyfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scancode, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> action, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mods)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] key</code>: 押された、または離されたキーボードキー。</li><li><code>[in] scancode</code>: キーのシステム固有のスキャンコード。</li><li><code>[in] action</code>: GLFW_PRESS, GLFW_RELEASE または GLFW_REPEAT.将来のリリースでは、さらに多くのアクションが追加されるかもしれません。</li><li><code>[in] mods</code>: どの修飾キーが押されたかを示すビットフィールド。</li></ul><p><strong>参照</strong>:</p><ul><li>Key input</li><li>glfwSetKeyCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドル、スキャンコード、モディファイアマスクパラメーターを追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWcharfun)</code></summary><p>これは、Unicode 文字コールバック用の関数ポインタ型です。Unicode文字コールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> codepoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWcharfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codepoint)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] codepoint</code>: 文字のUnicodeコードポイント。</li></ul><p><strong>参照</strong>:</p><ul><li>Text input</li><li>glfwSetCharCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン2.4で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWcharmodsfun)</code></summary><p>これは、Unicode 文字修飾子付きコールバック用の関数ポインタ型です。どの修飾キーが押されているかに関係なく、入力文字ごとに呼び出されます。Unicode修飾子付き文字コールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> codepoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWcharmodsfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codepoint, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mods)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] codepoint</code>: 文字のUnicodeコードポイント。</li><li><code>[in] mods</code>: どの修飾キーが押されたかを示すビットフィールド。</li></ul><p><strong>参照</strong>:</p><ul><li>Text input</li><li>glfwSetCharModsCallback</li></ul><p><strong>非推奨</strong>:</p><p>バージョン4.0で削除予定。</p><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWdropfun)</code></summary><p>これは、パスドロップ・コールバック用の関数ポインタ型である。パス・ドロップ・コールバック関数は以下のシグネチャを持つ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> paths</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWdropfun) (GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path_count, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">paths</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: イベントを受信したウィンドウ。</li><li><code>[in] path_count</code>: ドロップされたパスの数。</li><li><code>[in] paths</code>: UTF-8エンコードされたファイルやディレクトリのパス名。</li></ul><p><strong>ポインタの寿命</strong>:</p><p>パス配列とその文字列は、コールバック関数が戻るまで有効である。</p><p><strong>参照</strong>:</p><ul><li>Path drop input</li><li>glfwSetDropCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>void(* GLFWjoystickfun)</code></summary><p>これはジョイスティック設定コールバック用の関数ポインタ型である。ジョイスティック設定コールバック関数は以下のシグネチャを持ちます：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWjoystickfun) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jid, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 接続または切断されたジョイスティック。</li><li><code>[in] event</code>: GLFW_CONNECTEDまたはGLFW_DISCONNECTEDのいずれか。将来のリリースでは、さらに多くのイベントが追加されるかもしれません。</li></ul><p><strong>参照</strong>:</p><ul><li>Joystick configuration changes</li><li>glfwSetJoystickCallback</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>struct GLFWgamepadstate</code></summary><p>ゲームパッドの入力状態を表します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWgamepadstate GLFWgamepadstate</span></span></code></pre></div><p><strong>参照</strong>:</p><ul><li>Gamepad input</li><li>glfwGetGamepadState</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><h2 id="関数" tabindex="-1">関数 <a class="header-anchor" href="#関数" aria-label="Permalink to &quot;関数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td>glfwGetInputMode</td><td>指定したウィンドウの入力オプションの値を返します。</td></tr><tr><td>glfwSetInputMode</td><td>指定したウィンドウの入力オプションを設定する。</td></tr><tr><td>glfwRawMouseMotionSupported</td><td>生のマウスモーションがサポートされているかどうかを返します。</td></tr><tr><td>glfwGetKeyName</td><td>指定された印刷可能キーのレイアウト固有の名前を返します。</td></tr><tr><td>glfwGetKeyScancode</td><td>指定されたキーのプラットフォーム固有のスキャンコードを返します。</td></tr><tr><td>glfwGetKey</td><td>指定したウィンドウのキーボードのキーが最後に報告された状態を返します。</td></tr><tr><td>glfwGetMouseButton</td><td>指定されたウィンドウで、最後に報告されたマウスボタンの状態を返します。</td></tr><tr><td>glfwGetCursorPos</td><td>ウィンドウのコンテンツ領域に対するカーソルの位置を取得する。</td></tr><tr><td>glfwSetCursorPos</td><td>ウィンドウのコンテンツ領域からの相対的なカーソルの位置を設定する。</td></tr><tr><td>glfwCreateCursor</td><td>カスタムカーソルを作成する。</td></tr><tr><td>glfwCreateStandardCursor</td><td>標準的な形状のカーソルを作成する。</td></tr><tr><td>glfwDestroyCursor</td><td>カーソルを破壊する。</td></tr><tr><td>glfwSetCursor</td><td>ウィンドウのカーソルを設定する。</td></tr><tr><td>glfwSetKeyCallback</td><td>キー・コールバックを設定する。</td></tr><tr><td>glfwSetCharCallback</td><td>Unicode文字コールバックを設定します。</td></tr><tr><td>glfwSetCharModsCallback</td><td>修飾子付きUnicode文字コールバックを設定します。</td></tr><tr><td>glfwSetMouseButtonCallback</td><td>マウスボタンのコールバックを設定します。</td></tr><tr><td>glfwSetCursorPosCallback</td><td>カーソル位置のコールバックを設定する。</td></tr><tr><td>glfwSetCursorEnterCallback</td><td>カーソルの入力/離脱コールバックを設定する。</td></tr><tr><td>glfwSetScrollCallback</td><td>スクロールコールバックを設定します。</td></tr><tr><td>glfwSetDropCallback</td><td>パス・ドロップ・コールバックを設定します。</td></tr><tr><td>glfwJoystickPresent</td><td>指定されたジョイスティックが存在するかどうかを返します。</td></tr><tr><td>glfwGetJoystickAxes</td><td>指定したジョイスティックの全軸の値を返す。</td></tr><tr><td>glfwGetJoystickButtons</td><td>指定したジョイスティックのすべてのボタンの状態を返します。</td></tr><tr><td>glfwGetJoystickHats</td><td>指定したジョイスティックのすべてのハットの状態を返します。</td></tr><tr><td>glfwGetJoystickName</td><td>指定されたジョイスティックの名前を返します。</td></tr><tr><td>glfwGetJoystickGUID</td><td>指定したジョイスティックのSDL互換GUIDを返します。</td></tr><tr><td>glfwSetJoystickUserPointer</td><td>指定したジョイスティックのユーザーポインターを設定します。</td></tr><tr><td>glfwGetJoystickUserPointer</td><td>指定されたジョイスティックのユーザポインタを返します。</td></tr><tr><td>glfwJoystickIsGamepad</td><td>指定されたジョイスティックがゲームパッドマッピングを持っているかどうかを返します。</td></tr><tr><td>glfwSetJoystickCallback</td><td>ジョイスティック設定コールバックを設定します。</td></tr><tr><td>glfwUpdateGamepadMappings</td><td>指定した SDL_GameControllerDB ゲームパッドマッピングを追加します。</td></tr><tr><td>glfwGetGamepadName</td><td>指定されたジョイスティックの、人間が読めるゲームパッド名を返します。</td></tr><tr><td>glfwGetGamepadState</td><td>ゲームパッドとしてリマップされた指定されたジョイスティックの状態を取得する。</td></tr><tr><td>glfwSetClipboardString</td><td>指定した文字列をクリップボードに設定する。</td></tr><tr><td>glfwGetClipboardString</td><td>クリップボードの内容を文字列として返す。</td></tr><tr><td>glfwGetTime</td><td>GLFWの時間を返す。</td></tr><tr><td>glfwSetTime</td><td>GLFWの時間を設定する。</td></tr><tr><td>glfwGetTimerValue</td><td>生タイマーの現在値を返す。</td></tr><tr><td>glfwGetTimerFrequency</td><td>生タイマーの周波数を Hz 単位で返します。</td></tr></tbody></table><details class="details custom-block"><summary><code>glfwGetInputMode()</code></summary><p>この関数は指定されたウィンドウの入力オプションの値を返す。モードは GLFW_CURSOR, GLFW_STICKY_KEYS, GLFW_STICKY_MOUSE_BUTTONS, GLFW_LOCK_KEY_MODS, GLFW_RAW_MOUSE_MOTION のいずれかでなければならない。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetInputMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: クエリーするウィンドウ。</li><li><code>[in] mode</code>: GLFW_CURSOR、GLFW_STICKY_KEYS、GLFW_STICKY_MOUSE_BUTTONS、GLFW_LOCK_KEY_MODS、GLFW_RAW_MOUSE_MOTIONのいずれか。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>glfwSetInputMode</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetInputMode()</code></summary><p>この関数は指定されたウィンドウの入力モードオプションを設定します。モードは GLFW_CURSOR, GLFW_STICKY_KEYS, GLFW_STICKY_MOUSE_BUTTONS, GLFW_LOCK_KEY_MODS, GLFW_RAW_MOUSE_MOTION のいずれかでなければならない。</p><p>モードがGLFW_CURSORの場合、値は以下のカーソルモードのいずれかでなければならない：</p><ul><li>GLFW_CURSOR_NORMAL: カーソルが表示され、正常に動作するようにする。</li><li>GLFW_CURSOR_HIDDEN: カーソルがウィンドウのコンテンツ領域上にあるとき、カーソルを不可視にするが、カーソルが離れることは制限しない。</li><li>GLFW_CURSOR_DISABLED: カーソルを隠したりつかんだりすることで、仮想的で無制限のカーソル移動を提供する。これは、例えば3Dカメラコントロールの実装に便利です。</li></ul><p>モードが GLFW_STICKY_KEYS の場合、スティッキーキーを有効にするには GLFW_TRUE を、無効にするには GLFW_FALSE を指定しなければならない。スティッキーキーが有効な場合、キーが押されると、glfwGetKey が次に呼ばれたとき、たとえその前にキーが離されていたとしても、 GLFW_PRESS が返される。これは、キーが押されたかどうかだけに興味があり、いつ、どの順番で押されたかには興味がない場合に便利である。</p><p>モードが GLFW_STICKY_MOUSE_BUTTONS の場合、値はスティッキーマウスボタンを有効にする GLFW_TRUE か、無効にする GLFW_FALSE のどちらかでなければならない。スティッキーマウスボタンが有効な場合、マウスボタンが押されると、glfwGetMouseButton が次に呼ばれたとき、たとえその前にマウスボタンが離されていたとしても、GLFW_PRESS を返す。これは、マウスボタンが押されたかどうかだけに興味があるが、いつ、どの順番で押されたかには興味がない場合に便利である。</p><p>モードが GLFW_LOCK_KEY_MODS の場合、値はロックキー修飾ビットを有効にする GLFW_TRUE か、無効にする GLFW_FALSE のいずれかでなければならない。有効な場合、修飾ビットを受け取るコールバックは、イベントがCaps Lockがオンの時に生成された場合はGLFW_MOD_CAPS_LOCKビットもセットされ、Num Lockがオンの時はGLFW_MOD_NUM_LOCKビットもセットされる。</p><p>モードがGLFW_RAW_MOUSE_MOTIONの場合、カーソルが無効になっているときに生の（スケールされず加速されない）マウスモーションを有効にするにはGLFW_TRUE、無効にするにはGLFW_FALSEのどちらかの値でなければならない。生の動きがサポートされていない場合、これを設定しようとするとGLFW_PLATFORM_ERRORが出る。glfwRawMouseMotionSupportedを呼び出してサポートの有無を確認する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetInputMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 入力モードを設定するウィンドウ。</li><li><code>[in] mode</code>: GLFW_CURSOR、GLFW_STICKY_KEYS、GLFW_STICKY_MOUSE_BUTTONS、GLFW_LOCK_KEY_MODS、GLFW_RAW_MOUSE_MOTIONのいずれか。</li><li><code>[in] value</code>: 指定された入力モードの新しい値。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>glfwGetInputMode</li></ul><p><strong>追加</strong>:</p><p>バージョン 3.0 で追加された。glfwEnable と glfwDisable を置き換える。</p></details><details class="details custom-block"><summary><code>glfwRawMouseMotionSupported()</code></summary><p>この関数は、生のマウスモーションが現在のシステムでサポートされているかどうかを返す。このステータスはGLFWが初期化された後も変化しないので、一度だけ確認すればよい。生モーションをサポートしていないシステムで生モーションを有効にしようとすると、GLFW_PLATFORM_ERRORが発生します。</p><p>生のマウスモーションは、表面を横切るマウスの実際の動きに近い。デスクトップカーソルの動きに適用されるスケーリングや加速度の影響を受けません。 この処理はカーソルに適しているが、生の動きは例えば3Dカメラのコントロールに適している。このため、生のマウスモーションはカーソルが無効な場合にのみ提供される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwRawMouseMotionSupported</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>現在のマシンで生のマウスモーションがサポートされていればGLFW_TRUE、そうでなければGLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Raw mouse motion</li><li>glfwSetInputMode</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetKeyName()</code></summary><p>この関数は、指定された印字可能キーの名前をUTF-8でエンコードして返します。これは通常、修飾キーなしでキーが生成する文字であり、キーバインディングをユーザーに表示するためのものです。デッドキーの場合は、通常、文字に付加される発音記号です。</p><p>この関数をテキスト入力に使わないでください。多くの言語でテキスト入力ができなくなります。</p><p>キーが GLFW_KEY_UNKNOWN の場合、スキャンコードがキーを識別するために使われる。印字不可能なキー、または GLFW_KEY_UNKNOWN と印字不可能なキーに対応するスキャンコードを指定した場合、この関数は NULL を返すがエラーは発生しない。</p><p>この動作により、キー・コールバックの引数を常にそのまま渡すことができます。</p><p>印刷可能なキーは以下の通りです：</p><ul><li>GLFW_KEY_APOSTROPHE</li><li>GLFW_KEY_COMMA</li><li>GLFW_KEY_MINUS</li><li>GLFW_KEY_PERIOD</li><li>GLFW_KEY_SLASH</li><li>GLFW_KEY_SEMICOLON</li><li>GLFW_KEY_EQUAL</li><li>GLFW_KEY_LEFT_BRACKET</li><li>GLFW_KEY_RIGHT_BRACKET</li><li>GLFW_KEY_BACKSLASH</li><li>GLFW_KEY_WORLD_1</li><li>GLFW_KEY_WORLD_2</li><li>GLFW_KEY_0 to GLFW_KEY_9</li><li>GLFW_KEY_A to GLFW_KEY_Z</li><li>GLFW_KEY_KP_0 to GLFW_KEY_KP_9</li><li>GLFW_KEY_KP_DECIMAL</li><li>GLFW_KEY_KP_DIVIDE</li><li>GLFW_KEY_KP_MULTIPLY</li><li>GLFW_KEY_KP_SUBTRACT</li><li>GLFW_KEY_KP_ADD</li><li>GLFW_KEY_KP_EQUAL</li></ul><p>印字可能なキーの名前はキーボードレイアウトに依存し、印字不可能なキーの名前はレイアウトを問わず同じですが、アプリケーション言語に依存するため、他のユーザーインターフェーステキストと一緒にローカライズする必要があります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetKeyName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> scancode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] key</code>: 問い合わせるキー、または GLFW_KEY_UNKNOWN.</li><li><code>[in] scancode</code>: 問い合わせるキーのスキャンコード。</li></ul><p><strong>戻り値</strong>:</p><p>UTF-8でエンコードされたレイアウト固有のキー名、またはNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>キーボードレイアウト変更イベントを受信すると、返される文字列の内容が変更されることがある。</p><p><strong>ポインタの寿命</strong>:</p><p>返された文字列はGLFWによって割り当てられ、解放される。自分で解放してはいけない。ライブラリが終了するまで有効である．</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Key names</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetKeyScancode()</code></summary><p>この関数は、指定されたキーのプラットフォーム固有のスキャンコードを返します。</p><p>キーが GLFW_KEY_UNKNOWN またはキーボード上に存在しない場合、このメソッドは -1 を返します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetKeyScancode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] key</code>: 任意の名前付きキー。</li></ul><p><strong>戻り値</strong>:</p><p>キーのプラットフォーム固有のスキャンコード。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Key input</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetKey()</code></summary><p>この関数は、指定されたキーに対して最後に報告されたウィンドウの状態を返します。返される状態は GLFW_PRESS または GLFW_RELEASE のいずれかです。アクションGLFW_REPEATはキーコールバックにのみ報告されます。</p><p>GLFW_STICKY_KEYS入力モードが有効な場合、この関数は、押されたキーに対して最初に呼び出されたとき、そのキーがすでにリリースされていても、GLFW_PRESSを返します。</p><p>key関数は物理的なキーを扱い、標準的なUSキーボードレイアウトで使用されるキーにちなんで名付けられたキートークンを持つ。テキストを入力したい場合は、代わりにUnicode文字コールバックを使用してください。</p><p>修飾キーのビットマスクはキートークンではないので、この関数では使用できません。</p><p>テキスト入力を実装するためにこの関数を使用しないでください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 目的のウィンドウ。</li><li><code>[in] key</code>: キーボードのキー。GLFW_KEY_UNKNOWN はこの関数では有効なキーではない。</li></ul><p><strong>戻り値</strong>:</p><p>GLFW_PRESS または GLFW_RELEASE のいずれか。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Key input</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwGetMouseButton()</code></summary><p>この関数は、指定されたウィンドウに対して指定されたマウスボタンが最後に報告した状態を返す。返される状態は GLFW_PRESS または GLFW_RELEASE のいずれかである。</p><p>GLFW_STICKY_MOUSE_BUTTONS入力モードが有効な場合、この関数は、押されたマウスボタンに対して最初に呼び出されたとき、そのマウスボタンがすでにリリースされていても、GLFW_PRESSを返します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetMouseButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 目的のウィンドウ。</li><li><code>[in] button</code>: 希望のマウスボタン。</li></ul><p><strong>戻り値</strong>:</p><p>GLFW_PRESS または GLFW_RELEASE のいずれか。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Mouse button input</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメーターを追加。</p></details><details class="details custom-block"><summary><code>glfwGetCursorPos()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域の左上隅からの相対的なカーソルの位置を、スクリーン座標で返す。</p><p>カーソルが（GLFW_CURSOR_DISABLEDで）無効になっている場合、カーソル位置は束縛されず、doubleの最小値と最大値によってのみ制限される。</p><p>座標は、floor 関数で整数に変換できる。 整数型への直接のキャストは、正の座標では機能するが、負の座標では失敗する。</p><p>位置引数のいずれかまたはすべてがNULLであってもよい。エラーが発生した場合、NULLでない位置引数はすべて0に設定される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetCursorPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 目的のウィンドウ。</li><li><code>[out] xpos</code>: カーソルのX座標を格納する場所。コンテンツ領域の左端からの相対座標、またはNULL。</li><li><code>[out] ypos</code>: カーソルのy座標を格納する場所。コンテンツ領域の上端からの相対座標、またはNULL。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor position</li><li>glfwSetCursorPos</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。glfwGetMousePos を置き換える。</p></details><details class="details custom-block"><summary><code>glfwSetCursorPos()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域の左上隅に対するカーソルの位置を、スクリーン座標で設定する。ウィンドウには入力フォーカスがなければならない。この関数が呼び出されたときにウィンドウに入力フォーカスがなければ、無言で失敗する。</p><p>カメラコントロールのようなものを実装するためにこの関数を使用しないでください。GLFWはすでにGLFW_CURSOR_DISABLEDカーソルモードを提供しており、カーソルを隠し、透過的に再中心化し、制約のないカーソルモーションを提供しています。詳細はglfwSetInputModeを参照してください。</p><p>カーソルモードがGLFW_CURSOR_DISABLEDの場合、カーソル位置は制約されず、doubleの最小値と最大値によってのみ制限される。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetCursorPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 目的のウィンドウ。</li><li><code>[in] xpos</code>: コンテンツ領域の左端を基準としたX座標。</li><li><code>[in] ypos</code>: コンテンツ領域の上端からの相対的なy座標。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>備考</strong>:</p><p>Wayland: この関数は、カーソルモードがGLFW_CURSOR_DISABLEDのときのみ動作し、そうでないときは何もしない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor position</li><li>glfwGetCursorPos</li></ul><p><strong>追加</strong>: バージョン3.0で追加。glfwSetMousePos を置き換える。</p></details><details class="details custom-block"><summary><code>glfwCreateCursor()</code></summary><p>glfwSetCursorでウィンドウに設定できる新しいカスタムカーソル画像を作成します。カーソルは glfwDestroyCursor で破棄できます。残りのカーソルはglfwTerminateで破棄されます。</p><p>ピクセルは32ビット、リトルエンディアン、非前置乗算RGBA、すなわち赤チャンネルを最初にチャンネルあたり8ビットである。ピクセルは左上から順番に並べられます。</p><p>カーソルのホットスポットは、カーソル画像の左上隅を基準にピクセル単位で指定されます。GLFWの他のすべての座標系と同様に、X軸は右を指し、Y軸は下を指す。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWcursor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwCreateCursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFWimage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xhot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> yhot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] image</code>: 希望のカーソル画像。</li><li><code>[in] xhot</code>: カーソルのホットスポットのX座標をピクセル単位で指定する。</li><li><code>[in] yhot</code>: カーソルのホットスポットのy座標をピクセル単位で指定する。</li></ul><p><strong>戻り値</strong>:</p><p>作成されたカーソルのハンドル、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_VALUE、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>指定された画像データは、この関数が戻る前にコピーされる。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor objects</li><li>glfwDestroyCursor</li><li>glfwCreateStandardCursor</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwCreateStandardCursor()</code></summary><p>glfwSetCursorでウィンドウに設定できる標準的な形状のカーソルを返します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWcursor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwCreateStandardCursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] shape</code>: 標準的な形状のひとつ。</li></ul><p><strong>戻り値</strong>:</p><p>使用可能な新しいカーソル、またはエラーが発生した場合は NULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor objects</li><li>glfwCreateCursor</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwDestroyCursor()</code></summary><p>この関数は、以前に glfwCreateCursor で作成されたカーソルを破棄する。残りのカーソルは glfwTerminate によって破棄されます。</p><p>指定されたカーソルがウィンドウのカレントカーソルである場合、そのウィンドウはデフォルトカーソルに戻されます。これはカーソルモードには影響しません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwDestroyCursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWcursor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] cursor</code>: 破棄するカーソルオブジェクト。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>リエントランシー</strong>:</p><p>この関数はコールバックから呼んではならない。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor objects</li><li>glfwCreateCursor</li></ul><p><strong>追加</strong>:</p><p>Added in version 3.1.</p></details><details class="details custom-block"><summary><code>glfwSetCursor()</code></summary><p>この関数は、指定されたウィンドウのコンテンツ領域上にカーソルがある場合に使用するカーソル画像を設定します。設定されたカーソルは、ウィンドウのカーソルモードが GLFW_CURSOR_NORMAL の場合にのみ表示されます。</p><p>いくつかのプラットフォームでは、設定されたカーソルはウィンドウが入力フォーカスを持たない限り表示されないかもしれません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetCursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWcursor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: カーソルを設定するウィンドウ。</li><li><code>[in] cursor</code>: 設定するカーソル、またはデフォルトの矢印カーソルに戻るにはNULL。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor objects</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwSetKeyCallback()</code></summary><p>この関数は、キーが押されたり、繰り返されたり、離されたりしたときに呼び出される、指定されたウィンドウのキーコールバックを設定します。</p><p>key関数は物理的なキーを扱い、レイアウトに依存しないキートークンは標準的なUSキーボード・レイアウトの値にちなんで命名されます。テキストを入力したい場合は、代わりに文字コールバックを使用してください。</p><p>ウィンドウが入力フォーカスを失うと、押されたすべてのキーに対して合成キー・リリース・イベントが生成されます。合成キー・リリース・イベントは、フォーカス喪失イベントが処理された後、つまりウィンドウ・フォーカス・コールバックが呼び出された後に生成されます。</p><p>キーのスキャンコードは、そのプラットフォーム、または時にはそのマシンに固有です。スキャンコードは、ユーザーがGLFWキートークンを持たないキーをバインドできるようにするためのものです。そのようなキーはGLFW_KEY_UNKNOWNに設定され、その状態は保存されないので、glfwGetKeyで問い合わせることはできません。</p><p>時々、GLFWは合成キーイベントを生成する必要があり、その場合、scancodeは0になるかもしれません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWkeyfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetKeyCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWkeyfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> scancode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Key input</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメータと戻り値を追加。</p></details><details class="details custom-block"><summary><code>glfwSetCharCallback()</code></summary><p>この関数は、ユニコード文字が入力されたときに呼び出される、指定されたウィンドウの文字コールバックを設定します。</p><p>文字コールバックはUnicodeテキスト入力用です。文字を扱うため、キーボード レイアウトに依存しますが、キー コールバックは依存しません。キーは0文字、1文字、またはそれ以上の文字を入力することができるため、文字は物理的なキーに1対1で対応するわけではありません。特定の物理キーが押されたか離されたかを知りたい場合は、代わりにキー・コールバックを参照してください。</p><p>文字コールバックは通常のシステムテキスト入力と同じように動作し、そのプラットフォームで通常のテキスト入力を妨げるような修飾キー、例えばmacOSのSuper（Command）キーやWindowsのAltキーが押されたままになっている場合は呼び出されません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWcharfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetCharCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWcharfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> codepoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Text input</li></ul><p><strong>追加</strong>:</p><p>バージョン2.4で追加。GLFW 3: ウィンドウハンドルパラメータと戻り値を追加。</p></details><details class="details custom-block"><summary><code>glfwSetCharModsCallback()</code></summary><p>この関数は、どの修飾キーが使われているかにかかわらず、Unicode文字が入力されたときに呼び出される、指定されたウィンドウの修飾子付き文字コールバックを設定します。</p><p>修飾子付き文字コールバックは、カスタムUnicode文字入力を実装するためのものです。通常のUnicodeテキスト入力については、characterコールバックを参照してください。characterコールバックと同様に、character with modifiersコールバックは文字を扱い、キーボードレイアウトに依存します。1つのキーが0文字、1文字、またはそれ以上の文字を入力する可能性があるため、文字は物理的なキーに1:1でマッピングされません。特定の物理キーが押されたか離されたかを知りたい場合は、代わりにkeyコールバックを参照してください。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWcharmodsfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetCharModsCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWcharmodsfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、エラーが発生した場合は NULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> codepoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>非推奨</strong>:</p><p>バージョン4.0で削除予定。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Text input</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwSetMouseButtonCallback()</code></summary><p>この関数は、マウスボタンが押されたり離されたりしたときに呼び出される、指定されたウィンドウのマウスボタンコールバックを設定します。</p><p>ウィンドウが入力フォーカスを失うと、押されたすべてのマウスボタンに対して合成マウスボタン解放イベントが生成されます。これらのイベントは、フォーカス喪失イベントが処理された後、つまりウィンドウ・フォーカス・コールバックが呼び出された後に合成イベントが生成されるという事実によって、ユーザが生成したイベントと見分けることができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWmousebuttonfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetMouseButtonCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWmousebuttonfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Mouse button input</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。GLFW 3: ウィンドウハンドルパラメータと戻り値を追加。</p></details><details class="details custom-block"><summary><code>glfwSetCursorPosCallback()</code></summary><p>この関数は、指定されたウィンドウのカーソル位置コールバックを設定します。このコールバックは、カーソルが移動したときに呼び出されます。 コールバックには、ウィンドウのコンテンツ領域の左上隅からの相対的な位置をスクリーン座標で指定する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWcursorposfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetCursorPosCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWcursorposfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ypos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor position</li></ul><p><strong>追加</strong>:</p><p>バージョン 3.0 で追加されました。glfwSetMousePosCallback を置き換える。</p></details><details class="details custom-block"><summary><code>glfwSetCursorEnterCallback()</code></summary><p>この関数は、指定されたウィンドウのカーソル境界通過コールバックを設定します。このコールバックは、カーソルがウィンドウのコンテンツ領域に入るとき、またはウィンドウのコンテンツ領域から離れるときに呼び出されます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWcursorenterfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetCursorEnterCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWcursorenterfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> entered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Cursor enter/leave events</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary>glfwSetScrollCallback()</summary><p>この関数は、指定されたウィンドウのスクロールコールバックを設定する。このコールバックは、マウスホイールやタッチパッドのスクロール領域などのスクロールデバイスが使用されたときに呼び出される。</p><p>スクロールコールバックは、マウスホイールやタッチパッドのスクロールエリアからのようなすべてのスクロール入力を受け取ります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWscrollfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetScrollCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWscrollfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいスクロールコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> xoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> yoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Scroll input</li></ul><p><strong>追加</strong>:</p><p>バージョン 3.0 で追加されました。glfwSetMouseWheelCallback を置き換える。</p></details><details class="details custom-block"><summary><code>glfwSetDropCallback()</code></summary><p>この関数は、ドラッグされたパスがウィンドウにドロップされたときに呼び出される、 指定されたウィンドウのパスドロップコールバックを設定します。</p><p>パスの配列とその文字列は、そのイベントのために特別に生成されたものである可能性があるため、コールバックが返された後の有効性は保証されません。コールバックが返された後にそれらを使用したい場合は、ディープ コピーを作成する必要があります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWdropfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetDropCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWdropfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: コールバックを設定するウィンドウ。</li><li><code>[in] callback</code>: 新しいファイルドロップコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> paths</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>備考</strong>:</p><p>Wayland: ファイルドロップは現在未実装。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Path drop input</li></ul><p><strong>追加</strong>:</p><p>バージョン3.1で追加。</p></details><details class="details custom-block"><summary><code>glfwJoystickPresent()</code></summary><p>この関数は、指定されたジョイスティックが存在するかどうかを返します。</p><p>ジョイスティックIDを受け付ける他の関数の前にこの関数を呼ぶ必要はありません。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwJoystickPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li></ul><p><strong>戻り値</strong>:</p><p>ジョイスティックがあればGLFW_TRUE、なければGLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Joystick input</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加されました。glfwGetJoystickParam を置き換える。</p></details><details class="details custom-block"><summary><code>glfwGetJoystickAxes()</code></summary><p>この関数は、指定されたジョイスティックのすべての軸の値を返します。配列の各要素は-1.0〜1.0の値である。</p><p>指定されたジョイスティックが存在しない場合、この関数はNULLを返しますがエラーは発生しません。glfwJoystickPresentを最初に呼び出す代わりに使用できます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetJoystickAxes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li><li><code>[out] count</code>: 返された配列の軸値の数を格納する場所。ジョイスティックが存在しないか、エラーが発生した場合は0がセットされる。</li></ul><p><strong>戻り値</strong>:</p><p>ジョイスティックが存在しないか、エラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>返された配列はGLFWによって割り当てられ、解放される。自分で解放してはいけません。指定したジョイスティックが切断されるか、ライブラリが終了するまで有効です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Joystick axis states</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。glfwGetJoystickPos を置き換える。</p></details><details class="details custom-block"><summary><code>glfwGetJoystickButtons()</code></summary><p>この関数は指定されたジョイスティックのすべてのボタンの状態を返す。配列の各要素はGLFW_PRESSかGLFW_RELEASEである。</p><p>glfwGetJoystickHatsがなかった以前のバージョンとの後方互換性のために、 button配列にはすべての帽子も含まれ、それぞれ4つのボタンとして表現される。帽子は glfwGetJoystickHats が返すのと同じ順番で、上、右、下、左の順です。これらの余分なボタンを無効にするには、初期化の前にGLFW_JOYSTICK_HAT_BUTTONS initヒントを設定する。</p><p>指定されたジョイスティックが存在しない場合、この関数はNULLを返しますが、エラーは発生しません。これは最初にglfwJoystickPresentを呼ぶ代わりに使うことができる。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetJoystickButtons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li><li><code>[out] count</code>: 返された配列のボタンの状態の数を格納する場所。ジョイスティックが存在しないかエラーが発生した場合は0がセットされる。</li></ul><p><strong>戻り値</strong>:</p><p>ジョイスティックが存在しないかエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>返された配列はGLFWによって割り当てられ、解放される。自分で解放してはいけません。指定したジョイスティックが切断されるか、ライブラリが終了するまで有効です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Joystick button states</li></ul><p><strong>追加</strong>:</p><p>バージョン2.2で追加。GLFW 3: 動的配列を返すように変更。</p></details><details class="details custom-block"><summary><code>glfwGetJoystickHats()</code></summary><p>この関数は、指定されたジョイスティックのすべてのハットの状態を返します。配列の各要素は以下の値のいずれかである：</p><ul><li>GLFW_HAT_CENTERED0</li><li>GLFW_HAT_UP1</li><li>GLFW_HAT_RIGHT2</li><li>GLFW_HAT_DOWN4</li><li>GLFW_HAT_LEFT8</li><li>GLFW_HAT_RIGHT_UPGLFW_HAT_RIGHT | GLFW_HAT_UP</li><li>GLFW_HAT_RIGHT_DOWNGLFW_HAT_RIGHT | GLFW_HAT_DOWN</li><li>GLFW_HAT_LEFT_UPGLFW_HAT_LEFT | GLFW_HAT_UP</li><li>GLFW_HAT_LEFT_DOWNGLFW_HAT_LEFT | GLFW_HAT_DOWN</li></ul><p>対角線方向は、主要な方向（上、右、下、左）のビット単位の組み合わせであり、対応する方向とANDすることで、これらを個別にテストすることができる。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLFW_HAT_RIGHT) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // State of hat 2 could be right-up, right or right-down</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>指定されたジョイスティックが存在しない場合、この関数はNULLを返しますが、エラーは発生しません。glfwJoystickPresentを最初に呼び出す代わりに使用することができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetJoystickHats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li><li><code>[out] count</code>: ハット状態の数を返す配列のどこに格納するか。ジョイスティックが存在しないかエラーが発生した場合は0がセットされる。</li></ul><p><strong>戻り値</strong>:</p><p>ジョイスティックが存在しないか、エラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>返された配列はGLFWによって割り当てられ、解放される。自分で解放してはいけません。指定したジョイスティックが切断されるか、そのジョイスティックに対して再度この関数が呼ばれるか、 ライブラリが終了するまで有効です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Joystick hat states</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetJoystickName()</code></summary><p>この関数は、指定されたジョイスティックの名前をUTF-8でエンコードして返します。返された文字列はGLFWによって確保・解放されます。自分で解放してはいけません。</p><p>指定されたジョイスティックが存在しない場合、この関数はNULLを返しますが、エラーは発生しません。最初にglfwJoystickPresentを呼ぶ代わりに、この関数を使ってもよい。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetJoystickName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li></ul><p><strong>戻り値</strong>:</p><p>ジョイスティックのUTF-8エンコード名。ジョイスティックが存在しないかエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>返された文字列はGLFWによって割り当てられ、解放される。自分で解放してはいけません。指定されたジョイスティックが切断されるか、ライブラリが終了するまで有効です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Joystick name</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetJoystickGUID()</code></summary><p>この関数は、指定されたジョイスティックのSDL互換のGUIDを、UTF-8でエンコードされた16進文字列として返します。返された文字列はGLFWによって割り当てられ、解放される。自分で解放してはいけない。</p><p>GUIDはジョイスティックとゲームパッドマッピングを結びつけるものです。ゲームパッドマッピングが割り当てられていなくても、 接続されたジョイスティックは常にGUIDを持ちます。</p><p>指定されたジョイスティックが存在しない場合、この関数はNULLを返しますがエラーにはなりません。この関数はglfwJoystickPresentを最初に呼ぶ代わりに使うことができます。</p><p>GUIDはSDL 2.0.5で導入された形式を使用する。このGUIDはジョイスティックのメーカーとモデルを一意に識別しようとするもので、特定のユニットを識別するものではない。プラットフォーム固有のAPIがどのようなハードウェア情報を提供するかによって、 ユニットのGUIDはプラットフォーム間で異なる可能性があります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetJoystickGUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li></ul><p><strong>戻り値</strong>:</p><p>ジョイスティックのGUIDをUTF-8エンコードしたもの、またはジョイスティックが存在しないかエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZED、GLFW_INVALID_ENUM、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>返された文字列はGLFWによって割り当てられ、解放される。自分で解放してはいけません。指定されたジョイスティックが切断されるか、ライブラリが終了するまで有効です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Gamepad input</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwSetJoystickUserPointer()</code></summary><p>この関数は、指定されたジョイスティックのユーザー定義ポインタを設定します。現在の値はジョイスティックが切断されるまで保持されます。初期値はNULLです。</p><p>この関数は、切断中のジョイスティックに対しても、 ジョイスティックコールバックから呼び出すことができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetJoystickUserPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: ポインターを設定するジョイスティック。</li><li><code>[in] pointer</code>: 新しい値。</li></ul><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>参照</strong>:</p><ul><li>Joystick user pointer</li><li>glfwGetJoystickUserPointer</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetJoystickUserPointer()</code></summary><p>この関数は、指定されたジョイスティックのユーザ定義ポインタの現在値を返します。初期値はNULLです。</p><p>この関数は、切断中のジョイスティックに対しても、 ジョイスティックコールバックから呼び出すことができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetJoystickUserPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: ジョイスティックのポインタを戻す。</li></ul><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。アクセスは同期化されない。</p><p><strong>参照</strong>:</p><ul><li>Joystick user pointer</li><li>glfwSetJoystickUserPointer</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwJoystickIsGamepad()</code></summary><p>この関数は、指定されたジョイスティックが存在し、かつゲームパッドマッピングがあるかどうかを返します。</p><p>指定されたジョイスティックが存在するがゲームパッドマッピングがない場合、この関数はGLFW_FALSEを返しますが、エラーは発生しません。glfwJoystickPresentを呼び出すと、ジョイスティックが存在するかどうかをマッピングの有無にかかわらずチェックすることができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwJoystickIsGamepad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li></ul><p><strong>戻り値</strong>:</p><p>ジョイスティックが存在し、ゲームパッドマッピングがある場合はGLFW_TRUE、そうでない場合はGLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Gamepad input</li><li>glfwGetGamepadState</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwSetJoystickCallback()</code></summary><p>この関数は、ジョイスティック設定コールバックを設定するか、 現在設定されているコールバックを削除します。ジョイスティックがシステムに接続されたり、 システムから切断されたりしたときに呼び出されます。</p><p>ジョイスティックの接続・切断イベントをすべてのプラットフォームで配信するには、 イベント処理関数のいずれかを呼び出す必要があります。ジョイスティックの切断を検出し、ジョイスティック関数からコールバックを呼び出すこともできます。この関数は、ジョイスティックが存在しない場合に返すものをそのまま返します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GLFWjoystickfun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glfwSetJoystickCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWjoystickfun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] callback</code>: 新しいコールバック、または現在設定されているコールバックを削除する場合は NULL。</li></ul><p><strong>戻り値</strong>:</p><p>コールバックが設定されていないか、ライブラリが初期化されていない場合はNULL。</p><p><strong>コールバックのシグネチャ</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コールバック・パラメータの詳細については、関数ポインタ型を参照のこと。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><p>ジョイスティックの設定変更</p><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwUpdateGamepadMappings()</code></summary><p>この関数は指定されたASCIIエンコード文字列を解析し、見つかったゲームパッドマッピングで内部リストを更新する。この文字列は、単一のゲームパッドマッピングか、改行で区切られた多数のマッピングを含むことができます。パーサは、空行やコメントを含む、gamecontrollerdb.txt ソースファイルの完全なフォーマットをサポートします。</p><p>フォーマットの説明は Gamepad mappings を参照してください。</p><p>内部リストに指定されたGUIDのゲームパッドマッピングが既にある場合、それはこの関数に渡されたもので置き換えられます。ライブラリを終了して再初期化すると、内部リストは組み込みのデフォルトに戻ります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwUpdateGamepadMappings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] string</code>: ゲームパッドのマッピングを含む文字列。</li></ul><p><strong>戻り値</strong>:</p><p>成功すればGLFW_TRUE、エラーが発生すればGLFW_FALSE。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_VALUE である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Gamepad input</li><li>glfwJoystickIsGamepad</li><li>glfwGetGamepadName</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetGamepadName()</code></summary><p>この関数は、指定されたジョイスティックに割り当てられたゲームパッドマッピングから、ゲームパッドの名前を可読形式で返します。</p><p>指定されたジョイスティックが存在しないか、ゲームパッドマッピングを持っていない場合、 この関数はNULLを返しますが、エラーは発生しません。glfwJoystickPresentを呼び出すと、 マッピングの有無にかかわらず存在するかどうかをチェックすることができます。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetGamepadName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li></ul><p><strong>戻り値</strong>:</p><p>ゲームパッドのUTF-8エンコード名、またはジョイスティックが存在しないか、マッピングがないか、エラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>ポインタの寿命</strong>:</p><p>返された文字列はGLFWによって割り当てられ、解放される。自分で解放してはいけません。指定されたジョイスティックが切断されるか、ゲームパッドのマッピングが更新されるか、 ライブラリが終了するまで有効です。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Gamepad input</li><li>glfwJoystickIsGamepad</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwGetGamepadState()</code></summary><p>この関数は、Xboxのようなゲームパッドにリマップされた指定されたジョイスティックの状態を取得する。</p><p>指定されたジョイスティックが存在しないか、ゲームパッドのマッピングがない場合、この関数はGLFW_FALSEを返しますが、エラーは発生しません。glfwJoystickPresentを呼び出すと、マッピングの有無にかかわらず、ジョイスティックが存在するかどうかを調べることができます。</p><p>ガイドボタンはシステムやSteamクライアントによってフックされていることが多いため、入力できないことがあります。</p><p>すべてのデバイスがGLFWgamepadstateによって提供されるすべてのボタンや軸を持っているわけではありません。利用できないボタンと軸は、常にそれぞれGLFW_RELEASEと0.0を報告します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetGamepadState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> jid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GLFWgamepadstate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] jid</code>: 照会するジョイスティック。</li><li><code>[out] state</code>: ジョイスティックのゲームパッド入力状態。</li></ul><p><strong>戻り値</strong>:</p><p>成功した場合はGLFW_TRUE、ジョイスティックが接続されていない、ゲームパッドマッピングがない、エラーが発生した場合はGLFW_FALSEとなる。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_ENUM である。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Gamepad input</li><li>glfwUpdateGamepadMappings</li><li>glfwJoystickIsGamepad</li></ul><p><strong>追加</strong>:</p><p>バージョン3.3で追加。</p></details><details class="details custom-block"><summary><code>glfwSetClipboardString()</code></summary><p>この関数は、指定されたUTF-8でエンコードされた文字列をシステムクリップボードに設定する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetClipboardString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 非推奨。有効なウィンドウまたはNULL。</li><li><code>[in] string</code>: UTF-8でエンコードされた文字列。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーはGLFW_NOT_INITIALIZEDとGLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>指定された文字列は、この関数が戻る前にコピーされる。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Clipboard input and output</li><li>glfwGetClipboardString</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetClipboardString()</code></summary><p>この関数は、システムクリップボードの内容が UTF-8 でエンコードされた文字列を含むか、 または変換可能である場合に、その内容を返す。クリップボードが空であるか、その内容が変換できない場合、NULL が返され、 GLFW_FORMAT_UNAVAILABLE エラーが発生する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetClipboardString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLFWwindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] window</code>: 非推奨。有効なウィンドウまたはNULL。</li></ul><p><strong>戻り値</strong>:</p><p>クリップボードの内容をUTF-8エンコードした文字列、またはエラーが発生した場合はNULL。</p><p><strong>エラー</strong>:</p><p>起こりうるエラーは、GLFW_NOT_INITIALIZED、 GLFW_FORMAT_UNAVAILABLE、GLFW_PLATFORM_ERRORである。</p><p><strong>ポインタの寿命</strong>:</p><p>返された文字列はGLFWによって割り当てられ、解放される。自分で解放してはならない．それは，次にglfwGetClipboardStringまたはglfwSetClipboardStringを呼ぶか，ライブラリが終了するまで有効である．</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はメインスレッドからのみ呼び出されなければならない。</p><p><strong>参照</strong>:</p><ul><li>Clipboard input and output</li><li>glfwSetClipboardString</li></ul><p><strong>追加</strong>:</p><p>バージョン3.0で追加。</p></details><details class="details custom-block"><summary><code>glfwGetTime()</code></summary><p>この関数は現在の GLFW の時間を秒単位で返します。glfwSetTimeで時間が設定されていない限り、GLFWが初期化されてからの経過時間を測定する。</p><p>この関数とglfwSetTimeは、glfwGetTimerFrequencyとglfwGetTimerValueの上位のヘルパー関数です。</p><p>タイマーの分解能はシステムに依存するが、通常は数マイクロ秒またはナノ秒のオーダーである。サポートされている各プラットフォームで最も分解能の高い単調時間ソースを使用する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>秒単位の現在時刻。エラーが発生した場合はゼロ。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。内部基準時刻の読み書きはアトミックではないので、glfwSetTimeの呼び出しと外部で同期させる必要がある。</p><p><strong>参照</strong>:</p><ul><li>Time input</li></ul><p><strong>追加</strong>:</p><p>バージョン1.0で追加。</p></details><details class="details custom-block"><summary><code>glfwSetTime()</code></summary><p>この関数は現在のGLFW時間を秒単位で設定する。値は18446744073.0以下の正の有限数でなければならず、これは約584.5年である。</p><p>この関数とglfwGetTimeは、glfwGetTimerFrequencyとglfwGetTimerValueの上位のヘルパー関数です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwSetTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>引数</strong>:</p><ul><li><code>[in] time</code>: 秒単位の新しい値。</li></ul><p><strong>エラー</strong>:</p><p>起こりうるエラーは GLFW_NOT_INITIALIZED と GLFW_INVALID_VALUE である。</p><p><strong>備考</strong>:</p><p>GLFW時間の上限はfloor((264 - 1) / 109)として計算され、実装がナノ秒を64ビットで保存するためである。この上限は将来引き上げられる可能性がある。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。内部基準時刻の読み書きはアトミックではないので、glfwGetTimeの呼び出しと外部で同期させる必要がある。</p><p><strong>参照</strong>:</p><ul><li>Time input</li></ul><p><strong>追加</strong>:</p><p>バージョン2.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetTimerValue()</code></summary><p>この関数は、生のタイマーの現在値を 1 / 周波数の秒数で返します。周波数を取得するには、glfwGetTimerFrequencyを呼び出します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetTimerValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>タイマーの値。エラーが発生した場合はゼロ。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Time input</li><li>glfwGetTimerFrequency</li></ul><p><strong>追加</strong>:</p><p>バージョン3.2で追加。</p></details><details class="details custom-block"><summary><code>glfwGetTimerFrequency()</code></summary><p>この関数は、生のタイマーの周波数をHz単位で返す。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> glfwGetTimerFrequency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span></code></pre></div><p><strong>戻り値</strong>:</p><p>タイマーの周波数をHzで表し、エラーが発生した場合はゼロ。</p><p><strong>エラー</strong>:</p><p>考えられるエラーはGLFW_NOT_INITIALIZED。</p><p><strong>スレッドセーフ</strong>:</p><p>この関数はどのスレッドからでも呼び出すことができる。</p><p><strong>参照</strong>:</p><ul><li>Time input</li><li>glfwGetTimerValue</li></ul><p><strong>追加</strong>: バージョン3.2で追加。</p></details>`,65)]))}const c=i(l,[["render",n]]);export{g as __pageData,c as default};
