import{_ as s,c as a,a2 as t,o as e}from"./chunks/framework.6x3wfQve.js";const c=JSON.parse('{"title":"io.type","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/io/type.md","filePath":"reference/built_in/io/type.md","lastUpdated":null}'),l={name:"reference/built_in/io/type.md"};function n(h,i,p,o,k,r){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="io-type" tabindex="-1">io.type <a class="header-anchor" href="#io-type" aria-label="Permalink to &quot;io.type&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">io.type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>obj</code> がファイルハンドルかどうかを判定し、&quot;file&quot;（開いているファイル）、&quot;closed file&quot;（閉じているファイル）、または <code>nil</code>（ファイルハンドルでない）を返します。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> io.open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">io.type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &quot;file&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">io.type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &quot;closed file&quot;</span></span></code></pre></div><p>この例では、ファイルハンドルの状態を判定しています。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><p>64ビットファイルオフセットを扱う。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li><li>LuaJIT</li></ul>`,11)]))}const u=s(l,[["render",n]]);export{c as __pageData,u as default};
