import{_ as a,c as i,a2 as n,o as t}from"./chunks/framework.CKGreiRV.js";const r=JSON.parse('{"title":"Skia のビルド方法","description":"","frontmatter":{},"headers":[],"relativePath":"resource/skia/how_to_build_skia.md","filePath":"resource/skia/how_to_build_skia.md","lastUpdated":1732376957000}'),e={name:"resource/skia/how_to_build_skia.md"};function p(l,s,h,o,k,d){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="skia-のビルド方法" tabindex="-1">Skia のビルド方法 <a class="header-anchor" href="#skia-のビルド方法" aria-label="Permalink to &quot;Skia のビルド方法&quot;">​</a></h1><p>まず最初に Skia のダウンロード手順に従ってください。Skia はビルドを構成するために GN を使用します。</p><nav class="table-of-contents"><ul><li><a href="#is-official-build-とサードパーティ依存関係">is_official_build とサードパーティ依存関係</a></li><li><a href="#サポートおよび推奨コンパイラ">サポートおよび推奨コンパイラ</a></li><li><a href="#クイックスタート">クイックスタート</a></li><li><a href="#android">Android</a></li><li><a href="#chromeos">ChromeOS</a></li><li><a href="#mac">Mac</a><ul><li><a href="#python">Python</a></li></ul></li><li><a href="#ios">iOS</a></li><li><a href="#windows">Windows</a></li><li><a href="#強く推奨-clang-cl-でビルド">強く推奨: clang-cl でビルド</a><ul><li><a href="#visual-studio-ソリューション">Visual Studio ソリューション</a></li></ul></li><li><a href="#windows-arm64">Windows ARM64</a></li><li><a href="#windows-arm64-1">Windows ARM64</a></li><li><a href="#cmake">CMake</a></li></ul></nav><h2 id="is-official-build-とサードパーティ依存関係" tabindex="-1">is_official_build とサードパーティ依存関係 <a class="header-anchor" href="#is-official-build-とサードパーティ依存関係" aria-label="Permalink to &quot;is_official_build とサードパーティ依存関係&quot;">​</a></h2><p>ほとんどの Skia ユーザーは is_official_build=true を設定するべきであり、ほとんどの開発者はデフォルトの false のままにしておくべきです。</p><p>このモードは Skia を配布に適した方法で構成します。これは、デバッグシンボルのない最適化されたビルドであり、通常のライブラリ検索パスを使用してサードパーティ依存関係に動的にリンクされます。</p><p>対照的に、開発者向けのデフォルト設定は、完全なデバッグシンボルを持つ最適化されていないビルドであり、すべてのサードパーティ依存関係がソースからビルドされて libskia に埋め込まれます。これが私たちがすべての手動および自動テストを行う方法です。</p><p>Skia は、画像をデコードするための libpng、libwebp、または libjpeg-turbo、フォントをサブセット化するための ICU および sftnly など、サードパーティライブラリを利用するいくつかの機能を提供します。これらすべてのサードパーティ依存関係はオプションであり、適切な foo に対して skia_use_foo のような GN 引数で制御できます。</p><p>skia_use_foo が有効になっている場合、skia_use_system_foo を有効にすると、システムパス上で見つかったヘッダーおよびライブラリに対して Skia をビルドおよびリンクします。is_official_build=true はデフォルトですべての skia_use_system_foo を有効にします。必要に応じて、extra_cflags および extra_ldflags を使用してインクルードパスやライブラリパスを追加できます。</p><h2 id="サポートおよび推奨コンパイラ" tabindex="-1">サポートおよび推奨コンパイラ <a class="header-anchor" href="#サポートおよび推奨コンパイラ" aria-label="Permalink to &quot;サポートおよび推奨コンパイラ&quot;">​</a></h2><p>Skia は GCC、MSVC、その他のコンパイラでコンパイルできるはずですが、Skia のソフトウェアバックエンドの多くのルーチンは Clang でコンパイルしたときに最速で実行されるように書かれています。ソフトウェアラスタライズ、画像デコード、またはカラースペース変換に依存していて、Clang 以外のコンパイラで Skia をコンパイルすると、劇的に性能が低下します。この選択は優先順位の問題に過ぎず、非 Clang コンパイラに根本的な問題があるわけではありません。したがって、これが重大な問題である場合は、メーリングリストでお知らせください。</p><p>Skia は C++17 言語機能を使用しており（-std=c++17 フラグでコンパイル）、したがって C++17 対応のコンパイラが必要です。Clang 5 以降は c++17 標準のすべての機能を実装しています。C++17 サポートが不足している古いコンパイラは、明確でないコンパイルエラーを生成する可能性があります。クイックスタートに示されているように、--args=&#39;cc=&quot;clang&quot; cxx=&quot;clang++&quot;&#39; のような GN ビルド引数を使用して、cc および cxx の呼び出しに特定の実行ファイルを使用するようにビルドを構成できます。これは、マシンのデフォルトのコンパイラツールチェーンを変更することなく Skia をビルドするのに便利です。</p><p>GN 引数で cc および cxx を指定しない場合、Skia はデフォルトで cc および c++ を使用します。これは多くのプラットフォームでデフォルトで GCC であり、Clang ではありません。</p><h2 id="クイックスタート" tabindex="-1">クイックスタート <a class="header-anchor" href="#クイックスタート" aria-label="Permalink to &quot;クイックスタート&quot;">​</a></h2><p><code>gn gen</code> を実行してビルドファイルを生成します。<code>gn gen</code> の引数として、ビルドディレクトリの名前を渡し、オプションで --args= を渡してビルドタイプを構成します。</p><p>ビルドディレクトリを <code>out/Static</code> として Skia を静的ライブラリとしてビルドするには:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Static</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;is_official_build=true&#39;</span></span></code></pre></div><p>ビルドディレクトリを <code>out/Shared</code> として Skia を共有ライブラリ (DLL) としてビルドするには:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;is_official_build=true is_component_build=true&#39;</span></span></code></pre></div><p><code>bin/gn</code> がない場合は、以下を実行してください:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tools/git-sync-deps</span></span></code></pre></div><p>使用可能なビルド引数のリストは、<code>gn/skia.gni</code> を確認するか、次を実行して確認できます:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> args</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Debug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list</span></span></code></pre></div><p>GN は複数のビルドフォルダーの共存を許可します。各ビルドは希望に応じて個別に構成できます。例えば:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Debug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;is_debug=false&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Clang</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cc=&quot;clang&quot; cxx=&quot;clang++&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Cached</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cc_wrapper=&quot;ccache&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/RTTI</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;extra_cflags_cc=[&quot;-frtti&quot;]&#39;</span></span></code></pre></div><p>ビルドファイルを生成したら、Ninja を実行して Skia をコンパイルおよびリンクします:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Static</span></span></code></pre></div><p>ヘッダーファイルが欠落している場合は、対応する依存関係をインストールしてください:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tools/install_dependencies.sh</span></span></code></pre></div><p>新しい変更をプルして再ビルドするには:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tools/git-sync-deps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Static</span></span></code></pre></div><h2 id="android" tabindex="-1">Android <a class="header-anchor" href="#android" aria-label="Permalink to &quot;Android&quot;">​</a></h2><p>Android 用に Skia をビルドするには、Android NDK が必要です。</p><p>NDK を持っておらず、CIPD にアクセスできる場合は、次のコマンドのいずれかを使用して、ボットが使用する NDK を取得できます:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/fetch-sk</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android_ndk_linux</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/ndk</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Linux で</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android_ndk_darwin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/ndk</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Mac で</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android_ndk_windows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:/ndk</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Windows で</span></span></code></pre></div><p>GN ビルドファイルを生成する際には、ndk のパスと目的の target_cpu を渡します:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/arm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ndk=&quot;/tmp/ndk&quot; target_cpu=&quot;arm&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/arm64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ndk=&quot;/tmp/ndk&quot; target_cpu=&quot;arm64&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/x64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ndk=&quot;/tmp/ndk&quot; target_cpu=&quot;x64&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/x86</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ndk=&quot;/tmp/ndk&quot; target_cpu=&quot;x86&quot;&#39;</span></span></code></pre></div><p>is_debug や is_component_build などの他の引数も引き続き動作します。ndk_api を調整することで、Vulkan などの新しい Android 機能にアクセスできます。</p><p>Android デバイスでテストするには、バイナリとリソースをプッシュし、通常通りに実行します。<code>bin/droid</code> を使うと便利かもしれません。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/arm64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/arm64/dm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/local/tmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resources</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/local/tmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cd /data/local/tmp; ./dm --src gm --config gl&quot;</span></span></code></pre></div><h2 id="chromeos" tabindex="-1">ChromeOS <a class="header-anchor" href="#chromeos" aria-label="Permalink to &quot;ChromeOS&quot;">​</a></h2><p>arm ChromeOS デバイス用に Skia をクロスコンパイルするには、以下のものが必要です:</p><ul><li>Clang 4 以降</li><li>armhf sysroot</li><li>リンクするための arm Chromebook 上の (E)GL ライブラリファイル</li></ul><p>x86 ChromeOS デバイス用に Skia をコンパイルする場合は、Clang とライブラリファイルだけが必要です。</p><p>CIPD にアクセスできる場合は、次のようにしてこれらをすべて取得できます:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clang_linux</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> armhf_sysroot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/armhf_sysroot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chromebook_arm_gles</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/chromebook_arm_gles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chromebook_x86_64_gles</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/chromebook_x86_64_gles</span></span></code></pre></div><p>これらのアセットを使用する権限がない場合は、armhf_sysroot、chromebook_arm_gles、および chromebook_x86_64_gles の README.md ファイルを参照して、これらのアセットの作成手順を確認してください。</p><p>これらのファイルが配置されたら、次のような GN 引数を生成します:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ARM</span></span>
<span class="line"><span>cc= &quot;/opt/clang/bin/clang&quot;</span></span>
<span class="line"><span>cxx = &quot;/opt/clang/bin/clang++&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>extra_asmflags = [</span></span>
<span class="line"><span>    &quot;--target=armv7a-linux-gnueabihf&quot;,</span></span>
<span class="line"><span>    &quot;--sysroot=/opt/armhf_sysroot/&quot;,</span></span>
<span class="line"><span>    &quot;-march=armv7-a&quot;,</span></span>
<span class="line"><span>    &quot;-mfpu=neon&quot;,</span></span>
<span class="line"><span>    &quot;-mthumb&quot;,</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>extra_cflags=[</span></span>
<span class="line"><span>    &quot;--target=armv7a-linux-gnueabihf&quot;,</span></span>
<span class="line"><span>    &quot;--sysroot=/opt/armhf_sysroot&quot;,</span></span>
<span class="line"><span>    &quot;-I/opt/chromebook_arm_gles/include&quot;,</span></span>
<span class="line"><span>    &quot;-I/opt/armhf_sysroot/include/&quot;,</span></span>
<span class="line"><span>    &quot;-I/opt/armhf_sysroot/include/c++/4.8.4/&quot;,</span></span>
<span class="line"><span>    &quot;-I/opt/armhf_sysroot/include/c++/4.8.4/arm-linux-gnueabihf/&quot;,</span></span>
<span class="line"><span>    &quot;-DMESA_EGL_NO_X11_HEADERS&quot;,</span></span>
<span class="line"><span>    &quot;-funwind-tables&quot;,</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>extra_ldflags=[</span></span>
<span class="line"><span>    &quot;--sysroot=/opt/armhf_sysroot&quot;,</span></span>
<span class="line"><span>    &quot;-B/opt/armhf_sysroot/bin&quot;,</span></span>
<span class="line"><span>    &quot;-B/opt/armhf_sysroot/gcc-cross&quot;,</span></span>
<span class="line"><span>    &quot;-L/opt/armhf_sysroot/gcc-cross&quot;,</span></span>
<span class="line"><span>    &quot;-L/opt/armhf_sysroot/lib&quot;,</span></span>
<span class="line"><span>    &quot;-L/opt/chromebook_arm_gles/lib&quot;,</span></span>
<span class="line"><span>    &quot;--target=armv7a-linux-gnueabihf&quot;,</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>target_cpu=&quot;arm&quot;</span></span>
<span class="line"><span>skia_use_fontconfig = false</span></span>
<span class="line"><span>skia_use_system_freetype2 = false</span></span>
<span class="line"><span>skia_use_egl = true</span></span></code></pre></div><h1 id="x86-64" tabindex="-1">x86_64 <a class="header-anchor" href="#x86-64" aria-label="Permalink to &quot;x86_64&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cc= &quot;/opt/clang/bin/clang&quot;</span></span>
<span class="line"><span>cxx = &quot;/opt/clang/bin/clang++&quot;</span></span>
<span class="line"><span>extra_cflags=[</span></span>
<span class="line"><span>    &quot;-I/opt/clang/include/c++/v1/&quot;,</span></span>
<span class="line"><span>    &quot;-I/opt/chromebook_x86_64_gles/include&quot;,</span></span>
<span class="line"><span>    &quot;-DMESA_EGL_NO_X11_HEADERS&quot;,</span></span>
<span class="line"><span>    &quot;-DEGL_NO_IMAGE_EXTERNAL&quot;,</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>extra_ldflags=[</span></span>
<span class="line"><span>    &quot;-stdlib=libc++&quot;,</span></span>
<span class="line"><span>    &quot;-fuse-ld=lld&quot;,</span></span>
<span class="line"><span>    &quot;-L/opt/chromebook_x86_64_gles/lib&quot;,</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>target_cpu=&quot;x64&quot;</span></span>
<span class="line"><span>skia_use_fontconfig = false</span></span>
<span class="line"><span>skia_use_system_freetype2 = false</span></span>
<span class="line"><span>skia_use_egl = true</span></span></code></pre></div><p>Ninja を使用して、通常通りに dm（または他の任意の実行ファイル）をコンパイルします。</p><p>バイナリを ssh 経由で Chromebook にプッシュし、gles GPU 構成を使用して通常通りに dm を実行します。</p><p>ほとんどの Chromebook はデフォルトでホームディレクトリのパーティションが noexec としてマークされています。「permission denied」エラーを避けるために、次のようなコマンドを実行することを忘れないでください:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remount,exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/chronos</span></span></code></pre></div><h2 id="mac" tabindex="-1">Mac <a class="header-anchor" href="#mac" aria-label="Permalink to &quot;Mac&quot;">​</a></h2><p>Mac ユーザーは、<code>bin/gn gen</code> に <code>--ide=xcode</code> を渡して Xcode プロジェクトを生成することをお勧めします。</p><p>Mac の GN ビルドはデフォルトで Intel CPU を想定しています。Apple Silicon (M1 以降) 用にビルドする場合は、gn 引数に <code>target_cpu=&quot;arm64&quot;</code> を追加します:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/AppleSilicon</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target_cpu=&quot;arm64&quot;&#39;</span></span></code></pre></div><p>Googler は、社内マシンでの Xcode セットアップ手順については <a href="http://go/skia-corp-xcode" target="_blank" rel="noreferrer">go/skia-corp-xcode</a> を参照してください。</p><h3 id="python" tabindex="-1">Python <a class="header-anchor" href="#python" aria-label="Permalink to &quot;Python&quot;">​</a></h3><p>Apple が提供する Python のバージョンは数バージョン古く、私たちのビルドシステムと相性が良くないことが知られています。最新の公式バージョンの Python を <a href="https://www.python.org/downloads/" target="_blank" rel="noreferrer">Python.org</a> からインストールすることをお勧めします。その後、<code>Applications/Python 3.11/Install Certificates.command</code> を実行します。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><p>GN を実行してビルドファイルを生成します。iOS 用にビルドするには、<code>target_os=&quot;ios&quot;</code> を設定します。これにより、デフォルトで <code>target_cpu=&quot;arm64&quot;</code> が設定されます。iOS シミュレータを使用するには、<code>ios_use_simulator=true</code> を設定し、ターゲット CPU を Mac のアーキテクチャに設定します。Intel Mac では、<code>target_cpu=&quot;x64&quot;</code> を設定するだけで iOS シミュレータをターゲットにします。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/ios64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target_os=&quot;ios&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/ios32</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target_os=&quot;ios&quot; target_cpu=&quot;arm&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/iossim-apple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot; ios_use_simulator=true&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/iossim-intel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target_os=&quot;ios&quot; target_cpu=&quot;x64&quot;&#39;</span></span></code></pre></div><p>デフォルトでは、iOS テストバイナリもパッケージ化し（シミュレータではないデバイスの場合は署名も行います）。署名をスキップしたい場合（たとえば、コンパイルのテストだけを行う場合など）は、<code>skia_ios_use_signing</code> を false に設定することで無効にできます。</p><p>署名を行う場合、ビルドはデフォルトで Google の署名アイデンティティおよびプロビジョニングプロファイルを使用します。別のものを使用するには、GN 引数 <code>skia_ios_identity</code> をコード署名アイデンティティに一致するように設定し、<code>skia_ios_profile</code> をプロビジョニングプロファイルの名前に設定します。例:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skia_ios_identity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.*Jane Doe.*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skia_ios_profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iPad Profile&quot;</span></span></code></pre></div><p>アイデンティティのリストは、コマンドラインで <code>security find-identity</code> と入力することで見つけることができます。プロビジョニングプロファイルの名前は Apple Developer サイトで確認できます。あるいは、Finder で <code>~/Library/MobileDevice/Provisioning Profiles</code> に移動し、.mobileprovision ファイルを選択してスペースキーを押すことで、インストールされているプロビジョニングプロファイルファイルを確認することもできます。<code>skia_ios_profile</code> の値は、そのファイルの上部に記載されている文字列または開発者サイトに記載されている文字列、あるいはファイルの絶対パスにすることができます。</p><p>Google の署名アイデンティティまたはプロビジョニングプロファイルが不足している場合は、<a href="http://go/appledev" target="_blank" rel="noreferrer">go/appledev</a> を確認してください。</p><p>署名されたパッケージについては、<code>ios-deploy</code> を使用するとデバイスへのインストールと実行が簡単に行えます:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ios-deploy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/Debug/dm.app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;--match foo&quot;</span></span></code></pre></div><p>Xcode を通じてデプロイしたい場合は、<code>bin/gn gen</code> に <code>--ide=xcode</code> を渡してプロジェクトを生成できます。Xcode バージョン 10 以降を使用している場合は、プロジェクト設定に移動し、ビルドシステムが「レガシービルドシステム」に設定されていることを確認する必要があるかもしれません。</p><p>現在の SDK よりも古い OS を持つデバイスにデプロイする場合は、<code>ios_min_target</code> 引数を設定することで行えます:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ios_min_target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;major&gt;.&lt;minor&gt;&quot;</span></span></code></pre></div><p>ここで <code>&lt;major&gt;</code>.<code>&lt;minor&gt;</code> はデバイスの iOS バージョンを示します。例えば、12.0 や 11.4 などです。</p><h2 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h2><p>Skia は Visual Studio 2017 または 2019 で Windows 上にビルドできます。GN がこれらのいずれかを見つけられない場合、エラーメッセージが表示されます。その場合は、VC パスを <code>win_vc</code> 経由で GN に渡すことができます。</p><p>Skia は Visual Studio 2017 または 2019 の無料ビルドツールでコンパイルできます。</p><p>ボットはパッケージ化された 2019 ツールチェーンを使用しており、Googler は次のようにダウンロードできます:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/sk.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> win_toolchain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:/toolchain</span></span></code></pre></div><p>その後、VC と SDK のパスを GN に設定して渡します:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">win_vc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\toolchain\\VC&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">win_sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\toolchain\\win_sdk&quot;</span></span></code></pre></div><p>このツールチェーンは、<code>target_cpu=&quot;x86&quot;</code> を設定することで 32 ビットビルドをサポートする唯一の方法です。</p><p>Skia のビルドでは、PATHEXT 環境変数に「.EXE」が含まれていることを前提としています。</p><h2 id="強く推奨-clang-cl-でビルド" tabindex="-1">強く推奨: clang-cl でビルド <a class="header-anchor" href="#強く推奨-clang-cl-でビルド" aria-label="Permalink to &quot;強く推奨: clang-cl でビルド&quot;">​</a></h2><p>Skia は、clang でビルドされた場合にのみ最適化される生成コードを使用します。他のコンパイラでは一般的な最適化されていないコードが使用されます。</p><p>clang-cl でビルドするためには、cc および cxx の gn 引数を設定するだけでは不十分です。これらの変数は Windows では無視されます。代わりに、変数 <code>clang_win</code> を LLVM インストールディレクトリに設定します。ここからダウンロードしたプレビルドの LLVM をデフォルトの場所にインストールした場合、それは次のようになります:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clang_win</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\Program Files\\LLVM&quot;</span></span></code></pre></div><p>標準の Windows パス指定に従い、MinGW の規約は使用しないでください（例: <code>C:\\Program Files\\LLVM</code> であり、<code>/c/Program Files/LLVM</code> ではありません）。</p><p>プログラムの残りを Clang 以外のコンパイラでコンパイルする場合は、次の GN 引数も追加します:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_trivial_abi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><h3 id="visual-studio-ソリューション" tabindex="-1">Visual Studio ソリューション <a class="header-anchor" href="#visual-studio-ソリューション" aria-label="Permalink to &quot;Visual Studio ソリューション&quot;">​</a></h3><p>Visual Studio を使用する場合、<code>bin/gn gen</code> に <code>--ide=vs</code> を渡して <code>all.sln</code> を生成することをお勧めします。そのソリューションは特定の構成用に GN ディレクトリ内に存在し、その構成のみをビルド/実行します。</p><p>複数の GN 構成をサポートする Visual Studio ソリューションが必要な場合、ヘルパースクリプトがあります。すべての GN ディレクトリを <code>out</code> ディレクトリ内に配置する必要があります。まず、通常通りにすべての GN 構成を作成します。各構成のために <code>bin/gn gen</code> を実行する際に <code>--ide=vs</code> を渡します。その後、以下を実行します:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gn/gn_meta_sln.py</span></span></code></pre></div><p>これにより、新しい専用の出力ディレクトリとソリューションファイル <code>out/sln/skia.sln</code> が作成されます。各 GN 構成に対して1つのソリューション構成があり、それらのいずれかをビルドおよび実行することができます。また、選択したソリューション構成のプリプロセッサ定義に基づいて、非アクティブなコードブロックの構文ハイライトも調整されます。</p><h2 id="windows-arm64" tabindex="-1">Windows ARM64 <a class="header-anchor" href="#windows-arm64" aria-label="Permalink to &quot;Windows ARM64&quot;">​</a></h2><p>これにより、新しい専用の出力ディレクトリとソリューションファイル <code>out/sln/skia.sln</code> が作成されます。各 GN 構成に対して1つのソリューション構成があり、それらのいずれかをビルドおよび実行することができます。また、選択したソリューション構成のプリプロセッサ定義に基づいて、非アクティブなコードブロックの構文ハイライトも調整されます。</p><h2 id="windows-arm64-1" tabindex="-1">Windows ARM64 <a class="header-anchor" href="#windows-arm64-1" aria-label="Permalink to &quot;Windows ARM64&quot;">​</a></h2><p>ARM 上の Windows 10 に対する初期の実験的サポートがあります。これには現在、（最新バージョンの）MSVC および Visual Studio インストーラーの ARM64 用の Visual C++ コンパイラとライブラリ個別コンポーネントが必要です。Googler 向けには、<code>win_toolchain</code> アセットに ARM64 コンパイラが含まれています。</p><p>そのツールチェーンを使用するには、<code>target_cpu</code> GN 引数を &quot;arm64&quot; に設定します。なお、OpenGL は ARM 上の Windows 10 ではサポートされていないため、Skia の GL バックエンドはスタブ化されており、機能しません。ANGLE はサポートされています:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/win-arm64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target_cpu=&quot;arm64&quot; skia_use_angle=true&#39;</span></span></code></pre></div><p>これにより、DM でソフトウェアまたは ANGLE バックエンドを使用できる Skia のビルドが生成されます。Viewer は <code>--backend angle</code> を指定して起動した場合にのみ動作します。これは、ソフトウェアバックエンドがウィンドウの内容を表示するために OpenGL を使用しようとするためです。</p><h2 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h2><p>CMake プロジェクト記述を好む IDE での使用を主な目的として、GN から CMake への翻訳機能を追加しました。これは開発以外の目的には向いていません。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/gn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ide=json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --json-ide-script=../../gn/gn_to_cmake.py</span></span></code></pre></div>`,107)]))}const g=a(e,[["render",p]]);export{r as __pageData,g as default};
