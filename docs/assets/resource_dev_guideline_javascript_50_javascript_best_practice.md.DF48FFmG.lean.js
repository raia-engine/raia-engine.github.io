import{_ as e,c as t,a2 as r,o}from"./chunks/framework.CuCbyi2k.js";const p=JSON.parse('{"title":"より良いコードを書くためのJavaScriptのベストプラクティス50のルール","description":"","frontmatter":{},"headers":[],"relativePath":"resource/dev_guideline/javascript/50_javascript_best_practice.md","filePath":"resource/dev_guideline/javascript/50_javascript_best_practice.md","lastUpdated":1732720247000}'),i={name:"resource/dev_guideline/javascript/50_javascript_best_practice.md"};function h(l,a,n,u,c,s){return o(),t("div",null,a[0]||(a[0]=[r('<h1 id="より良いコードを書くためのjavascriptのベストプラクティス50のルール" tabindex="-1">より良いコードを書くためのJavaScriptのベストプラクティス50のルール <a class="header-anchor" href="#より良いコードを書くためのjavascriptのベストプラクティス50のルール" aria-label="Permalink to &quot;より良いコードを書くためのJavaScriptのベストプラクティス50のルール&quot;">​</a></h1><p><a href="https://medium.com/before-semicolon/50-javascript-best-practice-rules-to-write-better-code-86ce731311d7" target="_blank" rel="noreferrer">原文</a></p><p>JavaScriptは強力で柔軟なため、好きなようにコードを書くことができ、コードのバグにつながる非常に珍しいことを試すことができます。ここでは、私が学んだ、JavaScriptでのコーディングについて知っておくべき50のことを紹介します。</p><h2 id="常にuse-strictオン" tabindex="-1">常にuse strictオン <a class="header-anchor" href="#常にuse-strictオン" aria-label="Permalink to &quot;常にuse strictオン&quot;">​</a></h2><p>もしあなたがJavaScriptのライブラリやフレームワーク、コンパイラを使っているなら、「use strict」がオンになっている可能性が高いですが、そうでない場合に備えて、ファイルや関数に追加するのを忘れないようにしましょう。そうでない場合は、ファイルや関数に追加することを忘れないでください。</p><h2 id="関数宣言の代わりに関数式を使用する" tabindex="-1">関数宣言の代わりに関数式を使用する <a class="header-anchor" href="#関数宣言の代わりに関数式を使用する" aria-label="Permalink to &quot;関数宣言の代わりに関数式を使用する&quot;">​</a></h2><p>Function の動作やプロパティを利用したいのでなければ、関数式を使うことをお勧めします。関数宣言は、時には便利ですが、コードに奇妙な振る舞いをもたらし、何が起こっているのかが常に明らかではないので、避けてください。変なアクセスにならないように、使う関数がどこから来て、それらは使う前に来るのかを明確にするようにしましょう。</p><h2 id="varを使うのはやめましょう" tabindex="-1">varを使うのはやめましょう <a class="header-anchor" href="#varを使うのはやめましょう" aria-label="Permalink to &quot;varを使うのはやめましょう&quot;">​</a></h2><p>varを使った宣言は、var宣言が起こる前にアクセスできるようにするhoistedもあり、これは奇妙で明白でない動作です。</p><h2 id="constと不変性をできるだけ使おう" tabindex="-1">constと不変性をできるだけ使おう <a class="header-anchor" href="#constと不変性をできるだけ使おう" aria-label="Permalink to &quot;constと不変性をできるだけ使おう&quot;">​</a></h2><p>可能な限り不変性を優先しましょう。常にデータを変更し、それを受け渡しすることは、バグや変更点の追跡を困難にします。データのコピーで作業し、副作用を避ける。</p><h2 id="純粋な関数を優先する" tabindex="-1">純粋な関数を優先する <a class="header-anchor" href="#純粋な関数を優先する" aria-label="Permalink to &quot;純粋な関数を優先する&quot;">​</a></h2><p>副作用の話を続けますが、関数が呼び出されたときのデータや、関数が生成されたときのスコープのデータを変更しないようにします。</p><h2 id="コンストラクタ関数よりもクラスを優先する" tabindex="-1">コンストラクタ関数よりもクラスを優先する <a class="header-anchor" href="#コンストラクタ関数よりもクラスを優先する" aria-label="Permalink to &quot;コンストラクタ関数よりもクラスを優先する&quot;">​</a></h2><p>コンストラクタ関数を使用すると、非常に素晴らしいことができますが、そのプロトタイプに手を伸ばしてしまうようであれば、ほとんどすべての場所でサポートされている「クラス」を使用する必要がある兆候です。その方がすっきりしているし、人々にも理解されやすい。</p><h2 id="destructuringを使う" tabindex="-1">destructuringを使う <a class="header-anchor" href="#destructuringを使う" aria-label="Permalink to &quot;destructuringを使う&quot;">​</a></h2><p>デストラクチャリングはエレガントで、配列やオブジェクトから何が必要かをより明確にし、また、コードに意味を持たせるために名前を変更する機会を与えてくれる。</p><h2 id="必要なデータだけを扱う" tabindex="-1">必要なデータだけを扱う <a class="header-anchor" href="#必要なデータだけを扱う" aria-label="Permalink to &quot;必要なデータだけを扱う&quot;">​</a></h2><p>上記の例と同様に、デストラクチャリングは作業に必要なデータを抽出する良い方法ですが、必要なものだけをメソッドや関数に呼び出す習慣をつけましょう。これは、APIから送られてくるデータにも言えることです。必要なデータだけを抽出し、クリーンアップしてから、保存したり、何かをしたりする。</p><h2 id="常に-を使う" tabindex="-1">常に===を使う <a class="header-anchor" href="#常に-を使う" aria-label="Permalink to &quot;常に===を使う&quot;">​</a></h2><p>トリプルイコールは値と型をチェックするもので、常に行いたいことです。常にトリプルチェックをする習慣をつけ、好ましくない影響を避けるようにしましょう。</p><h2 id="グローバル変数を避ける" tabindex="-1">グローバル変数を避ける <a class="header-anchor" href="#グローバル変数を避ける" aria-label="Permalink to &quot;グローバル変数を避ける&quot;">​</a></h2><p>ライブラリ/フレームワークを作成している場合を除き、グローバルオブジェクトにものを作成することは避けましょう。グローバルなプロパティ名は、サードパーティや同僚が導入したものと衝突する可能性があり、デバッグがしにくくなります。</p><h2 id="緩い宣言はブロックで囲む" tabindex="-1">緩い宣言はブロックで囲む <a class="header-anchor" href="#緩い宣言はブロックで囲む" aria-label="Permalink to &quot;緩い宣言はブロックで囲む&quot;">​</a></h2><p>ロジックを独自のスコープで素早くラップすることで、名前の衝突や緩い一時的な宣言のアクセスを回避することができます。</p><h2 id="宣言の仕方を整理する" tabindex="-1">宣言の仕方を整理する <a class="header-anchor" href="#宣言の仕方を整理する" aria-label="Permalink to &quot;宣言の仕方を整理する&quot;">​</a></h2><p>宣言の仕方は統一してください。定数から始まって変数に至るまで、すべての宣言を一番上に配置します。定数はすべて大文字にして、定数であることを示すと、開発者がそれを変更しようとするのを防ぐことができます。</p><h2 id="undefinedで初期化しない" tabindex="-1">undefinedで初期化しない <a class="header-anchor" href="#undefinedで初期化しない" aria-label="Permalink to &quot;undefinedで初期化しない&quot;">​</a></h2><p>値がないものは &quot;undefined &quot;です。値がない」ものを「値」として割り当てるのは、かなり奇妙な概念であることに同意しましょうか。JavaScriptはすでに物事を「未定義」にしているので、何かが未定義なのはあなたのせいなのかJavaScriptのせいなのか、どうやって見分けるのでしょうか？なぜ「未定義」なのかをデバッグするのは難しいので、代わりに「null」を設定することをお勧めします。</p><h2 id="宣言は必ず初期化する" tabindex="-1">宣言は必ず初期化する <a class="header-anchor" href="#宣言は必ず初期化する" aria-label="Permalink to &quot;宣言は必ず初期化する&quot;">​</a></h2><p>同じ理由で、宣言に「undefined」という値を与えてはいけません。また、デフォルトで「undefined」だからといって、値を与えずに放置してはいけません。</p><h2 id="コードのリントを行い、一貫したスタイルを持つ" tabindex="-1">コードのリントを行い、一貫したスタイルを持つ <a class="header-anchor" href="#コードのリントを行い、一貫したスタイルを持つ" aria-label="Permalink to &quot;コードのリントを行い、一貫したスタイルを持つ&quot;">​</a></h2><p>コードをLintすることは、コードのルック＆フィールを一貫させ、かつ、他の人がコードに対して奇妙なことをしないようにするための最良の方法です。これによって、誰もが同じページに立つことができます。</p><h2 id="typescriptを使う" tabindex="-1">TypeScriptを使う <a class="header-anchor" href="#typescriptを使う" aria-label="Permalink to &quot;TypeScriptを使う&quot;">​</a></h2><p>TypeScriptは、より良いコードを提供するために大いに役立つ。型システムを試したことがない人は慣れる必要があるが、長い目で見れば報われる。</p><h2 id="関数とメソッドは一つのことだけを行うべき" tabindex="-1">関数とメソッドは一つのことだけを行うべき <a class="header-anchor" href="#関数とメソッドは一つのことだけを行うべき" aria-label="Permalink to &quot;関数とメソッドは一つのことだけを行うべき&quot;">​</a></h2><p>関数に余計なものを追加することに夢中になりがちですが、関数がやりすぎているかどうかを判断する最良の方法は、その名前を見ることです。関数名は、その関数が何をするものかを示すものでなければならず、関係のないものは削除されるべきです。</p><h2 id="ネーミングに手抜きは禁物" tabindex="-1">ネーミングに手抜きは禁物 <a class="header-anchor" href="#ネーミングに手抜きは禁物" aria-label="Permalink to &quot;ネーミングに手抜きは禁物&quot;">​</a></h2><p>名前をつけるときは、常に工夫をしましょう。もし名前が難しいなら、あなたはそれに余分な責任を与えたか、それが何であるかを理解していないのでしょう。少なくとも3文字の意味を持つ名前をつけましょう。</p><h2 id="不必要な宣言は避ける" tabindex="-1">不必要な宣言は避ける <a class="header-anchor" href="#不必要な宣言は避ける" aria-label="Permalink to &quot;不必要な宣言は避ける&quot;">​</a></h2><p>宣言の中には、完全に避けることができるものもあるので、厳密に必要なときだけ宣言しましょう。宣言が多すぎる場合は、コード設計や宣言に関する考慮が不十分であることを示唆する場合があります。</p><h2 id="可能な限りデフォルト値を使用する" tabindex="-1">可能な限りデフォルト値を使用する <a class="header-anchor" href="#可能な限りデフォルト値を使用する" aria-label="Permalink to &quot;可能な限りデフォルト値を使用する&quot;">​</a></h2><p>デフォルト値を使用することは、何かが提供されなかったためにエラーをスローするよりも、よりエレガントです。もし本当に値が提供されていないことを検出したいのであれば、私の記事「25 JavaScriptソリューション」を参照してください。</p><h2 id="switch文には常にデフォルトのケースを用意する" tabindex="-1">switch文には常にデフォルトのケースを用意する <a class="header-anchor" href="#switch文には常にデフォルトのケースを用意する" aria-label="Permalink to &quot;switch文には常にデフォルトのケースを用意する&quot;">​</a></h2><p>switchステートメントにデフォルトケースを設けないのは、何か問題が発生したときにそれを確実にキャッチするためです。</p><h2 id="evalは使わない" tabindex="-1">evalは使わない <a class="header-anchor" href="#evalは使わない" aria-label="Permalink to &quot;evalは使わない&quot;">​</a></h2><p>絶対に使ってはいけません。必要ありません。</p><h2 id="newキーワードは使わない" tabindex="-1">newキーワードは使わない <a class="header-anchor" href="#newキーワードは使わない" aria-label="Permalink to &quot;newキーワードは使わない&quot;">​</a></h2><p>クラスやコンストラクタ関数のインスタンス化以外では、&quot;new &quot;キーワードを使うべきではありません。コンパイラの速度を低下させる可能性があります。</p><h2 id="当たり前でないことに意味のあるコメントをつける" tabindex="-1">当たり前でないことに意味のあるコメントをつける <a class="header-anchor" href="#当たり前でないことに意味のあるコメントをつける" aria-label="Permalink to &quot;当たり前でないことに意味のあるコメントをつける&quot;">​</a></h2><p>一般的でないこと、奇妙なこと、理解するために文脈が必要なことをしたときだけ、コメントを追加してください。また、ハックするようなこと、後で改善・修正が必要になりそうなことには、次の人に理由がわかるようにコメントを付けましょう。サードパーティのモジュールや自分のコードベースのモジュールには、アーキテクチャや物事の背後にある意図を説明するためのコメントを追加します。</p><h2 id="三項対立はシンプルに" tabindex="-1">三項対立はシンプルに <a class="header-anchor" href="#三項対立はシンプルに" aria-label="Permalink to &quot;三項対立はシンプルに&quot;">​</a></h2><p>最悪の場合、2つのネストしたサナリーを持つことになります。これより長いものは、可読性とデバッグのしやすさを考慮して、if文かswitchにすべきです。</p><h2 id="オプションのチェインでシンプルに" tabindex="-1">オプションのチェインでシンプルに <a class="header-anchor" href="#オプションのチェインでシンプルに" aria-label="Permalink to &quot;オプションのチェインでシンプルに&quot;">​</a></h2><p>ネストされたチェックを取り除き、&quot;? &quot;演算子を使用します。</p><h2 id="コールバックよりプロミスを優先" tabindex="-1">コールバックよりプロミスを優先 <a class="header-anchor" href="#コールバックよりプロミスを優先" aria-label="Permalink to &quot;コールバックよりプロミスを優先&quot;">​</a></h2><p>プロミスは使いやすく、コールバックを持つものはすべて「プロミス化」できる。コールバックは同期かどうかにかかわらず、何かが完了したときに呼び出す関数です。プロミスやasync...awaitを使えば、非同期で物事を行うことができ、特にJavaScriptはシングルスレッドなので、コードを高速化できるかもしれません。特にJavaScriptはシングルスレッドなので、プロミスを使うとコードが速くなる可能性があります。</p><h2 id="forループ-foreach-の場合もある" tabindex="-1">Forループ &gt; .forEach の場合もある <a class="header-anchor" href="#forループ-foreach-の場合もある" aria-label="Permalink to &quot;Forループ &gt; .forEach の場合もある&quot;">​</a></h2><p>.forEach &quot;するために配列に変更するのはやめましょう。遅い処理に余計な処理を追加することになる。forループは高速で、continueやbreakといったキーワードでループを制御することができる。</p><h2 id="for-in-と-for-of" tabindex="-1">&quot;for...in &quot;と &quot;for...of&quot; <a class="header-anchor" href="#for-in-と-for-of" aria-label="Permalink to &quot;&quot;for...in &quot;と &quot;for...of&quot;&quot;">​</a></h2><p>for-inループとfor-ofループは、非常に強力なループの方法である。for-of」ループでは、配列、文字列、Map、Setなどの値を調べていくことができます。.forEachを使うために何かを配列に変更する必要はありません。ループのための &quot;for-in &quot;は最も遅いもので、プロトタイプのキーを繰り返し処理するので、私は避けたいと思います。</p><h2 id="ループのために最適化する" tabindex="-1">ループのために最適化する？ <a class="header-anchor" href="#ループのために最適化する" aria-label="Permalink to &quot;ループのために最適化する？&quot;">​</a></h2><p>forループはすでにコンパイラによって最適化されているので、そのような最適化は必要ありません。</p><h2 id="jsonメソッドは常に-try-catch-すること" tabindex="-1">JSONメソッドは常に &quot;try...catch &quot;すること <a class="header-anchor" href="#jsonメソッドは常に-try-catch-すること" aria-label="Permalink to &quot;JSONメソッドは常に &quot;try...catch &quot;すること&quot;">​</a></h2><p>JSON メソッド &quot;.stringify&quot; と &quot;.parse&quot; に渡されるものは信用しないでください。失敗してコードが壊れないように、必ずcatchしてください。</p><h2 id="テンプレート文字列を優先する" tabindex="-1">テンプレート文字列を優先する <a class="header-anchor" href="#テンプレート文字列を優先する" aria-label="Permalink to &quot;テンプレート文字列を優先する&quot;">​</a></h2><p>単純なことです。テンプレート文字列は、文字列に値を注入することができ、便利な書式を維持することができます。</p><h2 id="ループの入れ子や連結を避ける" tabindex="-1">ループの入れ子や連結を避ける <a class="header-anchor" href="#ループの入れ子や連結を避ける" aria-label="Permalink to &quot;ループの入れ子や連結を避ける&quot;">​</a></h2><p>ループを連鎖させたり、ループを入れ子にしたりすると、コードが複雑になり、後々データが大きくなったときに処理が遅くなる可能性があります。たとえそれが必要な処理であっても、不要なループや連結可能なループがないように、常にループ戦略を評価するようにしましょう。</p><h2 id="読めない変なハックは避ける" tabindex="-1">読めない変なハックは避ける <a class="header-anchor" href="#読めない変なハックは避ける" aria-label="Permalink to &quot;読めない変なハックは避ける&quot;">​</a></h2><p>これらは、人々が「クール」だと感じるため、インターネット上にあふれています。それらはたいてい、奇妙で、型にはまったものでなく、見ていてわからないものです。適切なパフォーマンスを確保するためには、使用しているツールのガイドラインに従うことが常にベストです。ハッキングは最後の手段であるべきです。</p><h2 id="rest-演算子を-arguments-よりも優先する。" tabindex="-1">&quot;rest &quot;演算子を &quot;arguments &quot;よりも優先する。 <a class="header-anchor" href="#rest-演算子を-arguments-よりも優先する。" aria-label="Permalink to &quot;&quot;rest &quot;演算子を &quot;arguments &quot;よりも優先する。&quot;">​</a></h2><p>rest &quot;演算子は、&quot;arguments &quot;が使用できない矢印関数で機能します。関数の引数にアクセスする方法はひとつに絞ってください。</p><h2 id="グローバルアクセスには-globalthis-を優先する" tabindex="-1">グローバルアクセスには &quot;globalThis &quot;を優先する <a class="header-anchor" href="#グローバルアクセスには-globalthis-を優先する" aria-label="Permalink to &quot;グローバルアクセスには &quot;globalThis &quot;を優先する&quot;">​</a></h2><p>残りは JavaScript に任せて、Web Worker や Backend Node の内部であなたのコードが動作するようにしましょう。</p><h2 id="javascriptを理解しつつ、ライブラリやフレームワークで構築する" tabindex="-1">JavaScriptを理解しつつ、ライブラリやフレームワークで構築する <a class="header-anchor" href="#javascriptを理解しつつ、ライブラリやフレームワークで構築する" aria-label="Permalink to &quot;JavaScriptを理解しつつ、ライブラリやフレームワークで構築する&quot;">​</a></h2><p>JavaScript言語そのものを理解するために時間を費やすことをお勧めしますが、よくある間違いを避けるためにReactやAngularのような強力なツールで構築することをお勧めします。これらのツールはすでによくある間違いを防ぎ、ベストプラクティスを採用しているので、必ずそのガイドラインに従ってください。</p><h2 id="セミコロンを常に追加する" tabindex="-1">セミコロンを常に追加する <a class="header-anchor" href="#セミコロンを常に追加する" aria-label="Permalink to &quot;セミコロンを常に追加する&quot;">​</a></h2><p>JavaScriptのコードにセミコロンを付けなくても大丈夫なことに驚くかもしれません。コンパイラはセミコロンを追加し、Babelのようなツールは簡単にあなたのコードを読み間違えて、本番にバグを発生させる可能性があることを知っておいてください。必ずセミコロンをつけてください。</p><h2 id="パフォーマンスが必要でない限り、読みやすさよりパフォーマンス" tabindex="-1">パフォーマンスが必要でない限り、読みやすさよりパフォーマンス <a class="header-anchor" href="#パフォーマンスが必要でない限り、読みやすさよりパフォーマンス" aria-label="Permalink to &quot;パフォーマンスが必要でない限り、読みやすさよりパフォーマンス&quot;">​</a></h2><p>読みにくいことをやってパフォーマンスを上げる方法もありますが、コードレベルでどうしてもパフォーマンスが必要な場合（それは稀）以外は、読みやすいものにしましょう。</p><h2 id="truthy」「falsy」チェックに気をつけよう" tabindex="-1">Truthy」「Falsy」チェックに気をつけよう <a class="header-anchor" href="#truthy」「falsy」チェックに気をつけよう" aria-label="Permalink to &quot;Truthy」「Falsy」チェックに気をつけよう&quot;">​</a></h2><p>コードにバグを持ち込みやすいので、「truthy」「falsy」チェックに頼らないようにしましょう。予期せぬものがtruthyチェックとして通る可能性があるので、具体的なチェックを心がけましょう。</p><h2 id="論理的な-や-チェックより三項演算子を優先する" tabindex="-1">論理的な&quot;||&quot;や&quot;&amp;&amp;&quot;チェックより三項演算子を優先する <a class="header-anchor" href="#論理的な-や-チェックより三項演算子を優先する" aria-label="Permalink to &quot;論理的な&quot;||&quot;や&quot;&amp;&amp;&quot;チェックより三項演算子を優先する&quot;">​</a></h2><p>or&quot; と &quot;and&quot; 演算子は、値の &quot;true&quot; と &quot;false&quot; を評価するため、望ましくない結果になる可能性があります。また、変な論理条件チェックは可読性が低く理解しにくいので、これに頼らないでください。</p><h2 id="未定義」と「null」に気をつける「-」演算子" tabindex="-1">未定義」と「NULL」に気をつける「??」演算子 <a class="header-anchor" href="#未定義」と「null」に気をつける「-」演算子" aria-label="Permalink to &quot;未定義」と「NULL」に気をつける「??」演算子&quot;">​</a></h2><p>nullish合体演算子は、nullや未定義の値が選ばれないようにするもので、値があることを確認したい場合やデフォルト値へのフォールバックを行いたい場合に最適です。</p><h2 id="自動的な型変換に注意する" tabindex="-1">自動的な型変換に注意する <a class="header-anchor" href="#自動的な型変換に注意する" aria-label="Permalink to &quot;自動的な型変換に注意する&quot;">​</a></h2><p>これはおそらくTypeScriptを試すもう一つの理由だろう。JavaScriptはその場で自動的に型変換を行うが、それはあなたが期待しているものとは違うかもしれない。「Truthy」値は「true」になり、「Falsy」値は「false」になる。数値と文字列の間で計算をすると、実際に動作する場合と、文字列の連結になる場合があります。数値はほとんどの場合、「Falsy」値を「0」に、「Truthy」値を「1」に変換します。</p><h2 id="自分が作成したものではないデータを信用しない" tabindex="-1">自分が作成したものではないデータを信用しない <a class="header-anchor" href="#自分が作成したものではないデータを信用しない" aria-label="Permalink to &quot;自分が作成したものではないデータを信用しない&quot;">​</a></h2><p>ユーザーやAPIから送られてきた知らないデータを扱うときはいつでも、そのデータが正しい型であり、扱える形式であることを確認してから操作してください。</p><h2 id="文字列の中から何かを抽出したり探したりするときは正規表現を使う" tabindex="-1">文字列の中から何かを抽出したり探したりするときは正規表現を使う <a class="header-anchor" href="#文字列の中から何かを抽出したり探したりするときは正規表現を使う" aria-label="Permalink to &quot;文字列の中から何かを抽出したり探したりするときは正規表現を使う&quot;">​</a></h2><p>正規表現は非常に強力で楽しいものです。インデックスを探したり、物をつかんだりするような変な操作は避けましょう。Regexを使うと、複雑なパターンを探したり</p><h2 id="iifeと小さなユーティリティ・ライブラリ" tabindex="-1">IIFEと小さなユーティリティ・ライブラリ <a class="header-anchor" href="#iifeと小さなユーティリティ・ライブラリ" aria-label="Permalink to &quot;IIFEと小さなユーティリティ・ライブラリ&quot;">​</a></h2><p>IIFEはできるだけ早い段階で物事を実行する優れた方法で、コードの残りの部分が実行される前に何らかの設定をするのに活用できます。また、複雑なロジックをカプセル化し、jQueryの構築方法と同様に、対話に使用できるオブジェクトを公開することができるシンプルなAPIを持つ小さなライブラリを初期化するために使用することができます。</p><h2 id="ユーティリティで同じことを繰り返さないようにする" tabindex="-1">ユーティリティで同じことを繰り返さないようにする <a class="header-anchor" href="#ユーティリティで同じことを繰り返さないようにする" aria-label="Permalink to &quot;ユーティリティで同じことを繰り返さないようにする&quot;">​</a></h2><p>繰り返し行うことは、常に小さな汎用関数に変換して、後で再利用できるようにしましょう。開発者として、物事を繰り返すべきではありませんし、小さな関数であれば、テストや再利用が容易になります。</p><h2 id="javascriptの奇妙な-機能-を利用しない" tabindex="-1">JavaScriptの奇妙な &quot;機能 &quot;を利用しない <a class="header-anchor" href="#javascriptの奇妙な-機能-を利用しない" aria-label="Permalink to &quot;JavaScriptの奇妙な &quot;機能 &quot;を利用しない&quot;">​</a></h2><p>配列の長さのプロパティの更新、「with」キーワードの使用、voidキーワード、Date、Array、Objectなどのネイティブのオブジェクトのプロトタイプの更新など。その他、setTimeoutやsetIntervalに文字列を渡すようなこと。言語が許すからといって、そうすべきとは限りません。</p><h2 id="単体テストの追加" tabindex="-1">単体テストの追加 <a class="header-anchor" href="#単体テストの追加" aria-label="Permalink to &quot;単体テストの追加&quot;">​</a></h2><p>開発者として、私はしばしばユニットテストを追加し始めるとバグを発見しました。テストは、あなたのコードができるだけエラーフリーであることを保証する究極の方法です。Jestは手始めに使うのに最適なオプションですが、同じように簡単に使える他のテストもあります。</p>',101)]))}const q=e(i,[["render",h]]);export{p as __pageData,q as default};
