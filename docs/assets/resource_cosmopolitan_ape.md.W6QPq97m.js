import{_ as a,c as i,a2 as n,o as l}from"./chunks/framework.DzmM640o.js";const c=JSON.parse('{"title":"実際にポータブルな実行ファイル","description":"","frontmatter":{},"headers":[],"relativePath":"resource/cosmopolitan/ape.md","filePath":"resource/cosmopolitan/ape.md","lastUpdated":1732350347000}'),p={name:"resource/cosmopolitan/ape.md"};function e(t,s,h,k,o,r){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="実際にポータブルな実行ファイル" tabindex="-1">実際にポータブルな実行ファイル <a class="header-anchor" href="#実際にポータブルな実行ファイル" aria-label="Permalink to &quot;実際にポータブルな実行ファイル&quot;">​</a></h1><p>ある日、古いコードを研究していたところ、トンプソン・シェルがshebang行を使わなかったことから、WindowsのPortable ExecutableファイルをUNIX第6版のシェルスクリプトとしてエンコードできることを知った。Unix、Windows、MacOSで使われているバイナリ・フォーマットを合成して作ることが可能だとわかってから、私はそれを実現したいという誘惑に勝てなかった。仕組みはこうだ：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MZqFpD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BIOS BOOT SECTOR&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> $0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\177ELF...LINKER-ENCODED-FREEBSD-HEADER&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&amp;7</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qemu-x86_64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MODE...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ELF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SEGMENTS...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OPENBSD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NOTE...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NETBSD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NOTE...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MACHO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEADERS...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DATA...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ZIP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DIRECTORY...</span></span></code></pre></div><p>私は、実際にポータブルな実行ファイル (APE) フォーマットを実装したCosmopolitanというプロジェクトを始めた。この名前を選んだのは、伝統的な境界を超えた、制限のないソフトウェアを書く自由があるというアイデアが好きだからだ。私の目標は、C言語がグリーンフィールド開発に適したビルド・ワンス・ラン・エニウェア言語となるよう支援することであり、同時に技術者コミュニティ間でのソフトウェアの共有を妨げるような前提を避けることである。C言語を始めるのは簡単だ：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -static</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fno-pie</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -no-pie</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -mno-red-zone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nostdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nostdinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -Wl,--oformat=binary</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wl,--gc-sections</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wl,-z,max-page-size=0x1000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fuse-ld=bfd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -gdwarf-4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -Wl,-T,ape.lds</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmopolitan.h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crt.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ape.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmopolitan.a</span></span></code></pre></div><p>上記のワンライナーで、我々は基本的にLinuxの純正コンパイラを再設定し、MacOS、Windows、FreeBSD、OpenBSD、NetBSDでも動作するバイナリを出力するようにした。これらは BIOS からも起動する。これは、デスクトップGUIに興味がなく、ただstdioとソケットが欲しいだけで、開発者が苦労しない人向けであることに注意してほしい。</p><h2 id="プラットフォームにとらわれないc-c-fortranツール" tabindex="-1">プラットフォームにとらわれないC / C++ / FORTRANツール <a class="header-anchor" href="#プラットフォームにとらわれないc-c-fortranツール" aria-label="Permalink to &quot;プラットフォームにとらわれないC / C++ / FORTRANツール&quot;">​</a></h2><p>クロスプラットフォームのネイティブビルドがこんなに簡単になるとは誰が予想できただろうか？結局のところ、驚くほど安上がりでもある。すべてのマジックナンバー、win32 utf-8ポリフィル、biosブートローダーのコードを使っても、exeはGo Hello Worldのおよそ100分の1のサイズになる：</p><ul><li>life.com is 12kb (symbols, source)</li><li>hello.com is 16kb (symbols, source)</li></ul><p>zshにはThompson Shellとのちょっとした後方互換性の不具合があることに注意してほしい（update 2021-02-15: zshは現在パッチを適用済み）。<code>./hello.com</code> ではなく、<code>sh hello.com</code> を試してほしい。それはさておき、こんなに簡単なのに、なぜ今まで誰もやらなかったのでしょうか？私が言える最善の答えは、システム・インターフェースに関連するCプリプロセッサ・マクロをシンボリックにする必要があるという、ちょっとしたABIの変更が必要だからだ。これは、<code>switch(errno){case EINVAL:...}</code> のようなケースを除けば、ほとんど問題にならない。もしルールを曲げても問題ないと感じるなら、GNUリンカは、特別なツールチェインなしで、必要なPE/Darwinデータ構造をリンク時に生成するように簡単に設定できる。</p><h2 id="pkzip実行可能ファイルは非常に優れたコンテナになる" tabindex="-1">PKZIP実行可能ファイルは非常に優れたコンテナになる <a class="header-anchor" href="#pkzip実行可能ファイルは非常に優れたコンテナになる" aria-label="Permalink to &quot;PKZIP実行可能ファイルは非常に優れたコンテナになる&quot;">​</a></h2><p>単一ファイルの実行可能ファイルはあると便利だ。zoneinfoのように、システムファイルに依存する静的な実行ファイルが理にかなっているケースもいくつかある。しかし、Windowsもサポートする複数のディストロで動作するバイナリをビルドするのであれば、そのような仮定はできない。</p><p>結局のところ、PKZIPはそのマジックマーカーをファイルの最初ではなく最後に置くように設計されているので、ZIPでもELF/PE/MachOバイナリを合成することができる！私は、数行のリンカスクリプトと、セクションをインクリメンタルに圧縮するプログラムを使って、Cosmopolitanコードベースにこれを効率的に実装することができた。</p><p>unzip -vl executable.comを実行して中身を見ることができる。Windows 10では、ファイルの拡張子を.zipに変更し、MicrosoftのバンドルされているZIP GUIで開くことも可能だ。コンパイル後のアセットを簡単に編集できるという柔軟性があるということは、ZIP経由で解釈されたソースを反射的にロードする、簡単に配布可能なJavaScriptインタプリタを作成するようなこともできるということだ。</p><ul><li>hellojs.com is 300kb (symbols, source)</li></ul><p>Cosmopolitanはまた、GPLv2 (update 2020-12-28: APEは現在ISCライセンスです)の遵守を自動化するためにZIPフォーマットを使用しています。非商用の libre ビルドは、デフォルトで、hermetic make モノレポからリンクされたソースファイルを埋め込むように設定されています。そのため、バイナリがおよそ10倍大きくなります。例えば</p><ul><li>life2.com is 216kb (symbols, source)</li><li>hello2.com is 256kb (symbols, source)</li></ul><p>ロックミュージシャンは、ダイナミックレンジの圧縮と愛憎関係にある。なぜなら、圧縮は彼らの音楽から複雑な次元を取り除くが、プロフェッショナルに聞こえるためには必要だからだ。その場合、zipソースファイルの埋め込みは、クラシカルでないソフトウェアの消費者にアピールするために、リソースを浪費する、より社会的配慮のある方法かもしれない。</p><h2 id="x86-64-linux-abiはかなり良いリンガフランカになる" tabindex="-1">x86-64 Linux ABIはかなり良いリンガフランカになる <a class="header-anchor" href="#x86-64-linux-abiはかなり良いリンガフランカになる" aria-label="Permalink to &quot;x86-64 Linux ABIはかなり良いリンガフランカになる&quot;">​</a></h2><p>コンピューティングの歴史において、ハードウェア・アーキテクチャが明確に淘汰されたのはごく最近のことで、それはTOP500リストが最もよく証明している。電話ルーター・メインフレーム・自動車以外では、x86を取り巻くコンセンサスはバベルの塔に例えられるほど強固だ。リーナス・トーバルズのおかげで、我々はアーキテクチャに関するコンセンサスを得ただけでなく、SYSCALL命令を介してプログラムがホストマシンと通信する入出力メカニズムに関するコンセンサスも得ることができた。リーナス・トーバルズは、自宅でバスローブ姿で巨大企業に電子メールを送り、コモンズの悲劇とは正反対のものを作るためにリソースを割くことに同意させることで、それを達成したのだ。</p><p>だから、システムエンジニアリングについて楽観的になるには、今が本当にベストな時期だと思う。私たちは、これまで以上に物事を共有することに同意している。アップルやマイクロソフトがARMにPCの軸足を移そうとしていることは、ニュースでもよく耳にする。x86_64の特許は今年で切れるはずなので、なぜCクラスのマッキントッシュが必要なのかはわからない。アップルはおそらく、ロイヤリティを支払うことなく独自のx86チップを作ることができただろう。私たちがいつも夢見てきたフリー/オープン・アーキテクチャは、すでに私たちが使っているものになるかもしれない。</p><p>マイクロプロセッサー・アーキテクチャーのコンセンサスが最終的に存在するのであれば、ソフトウェア開発者がその恩恵を受けられるような、より良いツールの構築に注力すべきだと私は思う。x86-64の実行がメモリに与える影響を視覚化する、より友好的な方法を構築することである。これにより、APEがどのように機能するかが明らかになるはずだ。</p><p>Windows PEヘッダをコードのように扱うことで、実行が開始されることに気づくだろう。例えば、ASCII文字列 &quot;MZqFpD &quot;は pop %r10 ; jno 0x4a ; jo 0x4a とデコードされ、文字列&quot;177ELF&quot;は jg 0x47 とデコードされる。その後、プログラムがブートされるのではなくユーザー空間から実行されることを示すmovステートメントを経て、エントリポイントにホップする。</p><p>マジック・ナンバーは、分散セクションとGNUアセンブラの.sleb128ディレクティブを使って、ホスト・オペレーティング・システム用に簡単にアンパックされる。UNICODEビットルックアップテーブルのような低エントロピーデータは、一般に103バイトのLZ4デコンプレッサーか17バイトのランレングスデコーダーを使ってデコードされ、ランタイムコードモーフィングはインテルの3kb x86デコーダーを使って簡単にできる。</p><p>このエミュレータは必須ではないことに注意してほしい。APEは、シェルやNTコマンドプロンプトで実行するか、BIOSからブートすれば問題なく動作します。これはJVMではない。エミュレータは必要なときだけ使う。例えば、プログラムの実行がメモリにどのような影響を与えるかをクールに視覚化できるのは便利だ。</p><p>私たちが書いたどんな普通のPCプログラムも、Raspberry PiやApple ARM上で「ただ動く」ことがわかるとうれしい。コスモポリタンがqemu-x86_64を使ってすでにやっているのと同じように、x86の実行ファイルに上記のエミュレーターのARMビルドを埋め込み、適切にモーフィングして再実行させるだけだ。トレードオフは、そうすると、バイナリがGoのHello Worldの100倍ではなく、10倍しか小さくならないということだ。もう一つのトレードオフは、GCCランタイムの例外がコードのモーフィングを禁じていることです。</p><p>x86-64-linux-gnuを可能な限り小さくし、完全なエミュレーションを利用できるようにする最も説得力のあるユースケースは、通常のシンプルなネイティブプログラムを、デフォルトでウェブブラウザを含むあらゆる場所で実行できるようにすることです。この分野で構築されたソリューションの多くは、GUIやスレッドのようなコンセンサスが得られていないインターフェースに集中しすぎる傾向がある。そうでなければ、DockerやブラウザでWindowsを実行するFabrice Bellardのように、オペレーティング・システム全体をエミュレートするだけになってしまう。</p><h2 id="メンテナンス不要の長寿命" tabindex="-1">メンテナンス不要の長寿命 <a class="header-anchor" href="#メンテナンス不要の長寿命" aria-label="Permalink to &quot;メンテナンス不要の長寿命&quot;">​</a></h2><p>私がこういった多くの古いテクノロジーを使って仕事をするのが好きな理由のひとつは、自分が関わるソフトウェアが、最小限の労力で時の試練に耐えられるものであってほしいからだ。スーパーマリオブラザーズのROMが、GitHubのissue trackerを必要とすることなく、何年も生き延びることができたのと似ている。</p><p>そうするための最善のチャンスは、すでに何十年もコンセンサスを得ているバイナリー・インターフェイスを接着し、APIを無視することだと私は信じている。例えば、ここにMac、Linux、BSD、Windowsディストロで使われているマジックナンバーがある。これらの数字は、あなたが使ったことのあるほとんどすべてのコンピューター、サーバー、電話の内部を支えているのだから。</p><p>すべてのシステムに共通する数字のサブセットに注目し、共通の祖先であるベル・システム5と比較すれば、システムエンジニアリングに関することは、バイナリレベルでは過去40年間ほとんど変わっていないことがわかる。マグナムはつまらない。プラットフォームは、自分自身を壊すことなく、それを壊すことはできない。UNIXの数秘術を変える必要がある理由について、長年にわたってビジョンを提案してきた人はほとんどいない。</p><h3 id="ダウンロード" tabindex="-1">ダウンロード <a class="header-anchor" href="#ダウンロード" aria-label="Permalink to &quot;ダウンロード&quot;">​</a></h3><ul><li>emulator.com (280k PE+ELF+MachO+ZIP+SH)</li><li>tinyemu.com (188k PE+ELF+MachO+ZIP+SH)</li></ul><h3 id="ソースコード" tabindex="-1">ソースコード <a class="header-anchor" href="#ソースコード" aria-label="Permalink to &quot;ソースコード&quot;">​</a></h3><ul><li>ape.S</li><li>ape.lds</li><li>blinkenlights.c</li><li>x86ild.greg.c</li><li>syscalls.sh</li><li>consts.sh</li></ul><h3 id="プログラム" tabindex="-1">プログラム <a class="header-anchor" href="#プログラム" aria-label="Permalink to &quot;プログラム&quot;">​</a></h3><ul><li>life.com (12kb ape symbols)</li><li>sha256.elf (3kb x86_64-linux-gnu)</li><li>hello.bin (55b x86_64-linux-gnu)</li></ul><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # runs it natively</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # runs it natively</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./tinyemu.com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # just runs program</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./emulator.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> life.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # show debugger gui</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ./emulator.com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sha256.elf</span></span></code></pre></div><h3 id="マニュアル" tabindex="-1">マニュアル <a class="header-anchor" href="#マニュアル" aria-label="Permalink to &quot;マニュアル&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SYNOPSIS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ./emulator.com [-?HhrRstv] [ROM] [ARGS...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DESCRIPTION</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  Emulates x86 Linux Programs w/ Dense Machine State Visualization</span></span>
<span class="line"><span>  Please keep still and only watchen astaunished das blinkenlights</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FLAGS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  -h        help</span></span>
<span class="line"><span>  -z        zoom</span></span>
<span class="line"><span>  -v        verbosity</span></span>
<span class="line"><span>  -r        real mode</span></span>
<span class="line"><span>  -s        statistics</span></span>
<span class="line"><span>  -H        disable highlight</span></span>
<span class="line"><span>  -t        tui debugger mode</span></span>
<span class="line"><span>  -R        reactive tui mode</span></span>
<span class="line"><span>  -b ADDR   push a breakpoint</span></span>
<span class="line"><span>  -L PATH   log file location</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ARGUMENTS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ROM files can be ELF or a flat αcτµαlly pδrταblε εxεcµταblε.</span></span>
<span class="line"><span>  It should use x86_64 in accordance with the System Five ABI.</span></span>
<span class="line"><span>  The SYSCALL ABI is defined as it is written in Linux Kernel.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FEATURES</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  8086, 8087, i386, x86_64, SSE3, SSSE3, POPCNT, MDA, CGA, TTY</span></span>
<span class="line"><span></span></span>
<span class="line"><span>WEBSITE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  https://justine.lol/blinkenlights/</span></span></code></pre></div><h3 id="資金調達" tabindex="-1">資金調達 <a class="header-anchor" href="#資金調達" aria-label="Permalink to &quot;資金調達&quot;">​</a></h3><p>[United States of Lemuria - two dollar bill - all debts public and primate]</p><p>この技術の資金は、Justine TunneyのGitHubスポンサーとPatreon購読者からのクラウドソースでした。あなたのサポートが、Actually Portable Executableのようなプロジェクトを可能にしているのです。ありがとうございました。</p><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>ジャスティンのページ</p>`,46)]))}const F=a(p,[["render",e]]);export{c as __pageData,F as default};
