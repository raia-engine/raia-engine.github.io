import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.DPuwY6B9.js";const c=JSON.parse('{"title":"APIメンテナのためのクラス修飾子","description":"","frontmatter":{},"headers":[],"relativePath":"resource/dart/language/class_modifiers/class_modifiers_for_api_maintainers.md","filePath":"resource/dart/language/class_modifiers/class_modifiers_for_api_maintainers.md","lastUpdated":null}'),p={name:"resource/dart/language/class_modifiers/class_modifiers_for_api_maintainers.md"};function e(t,s,h,k,d,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="apiメンテナのためのクラス修飾子" tabindex="-1">APIメンテナのためのクラス修飾子 <a class="header-anchor" href="#apiメンテナのためのクラス修飾子" aria-label="Permalink to &quot;APIメンテナのためのクラス修飾子&quot;">​</a></h1><p>Dart 3.0では、クラス宣言やミキシン宣言に置ける新しい修飾子がいくつか追加されました。もしあなたがライブラリパッケージの作者であれば、これらの修飾子を使用することで、あなたのパッケージがエクスポートする型に対してユーザがどのような操作を行うことができるかを、より詳細に制御することができます。これにより、パッケージの進化が容易になり、コードの変更がユーザーを壊してしまう可能性があるかどうかがわかりやすくなります。</p><p>また、Dart 3.0では、クラスをmixinとして使用することに関する変更も含まれています。この変更によって、あなたのクラスが壊れることはないかもしれませんが、あなたのクラスのユーザーが壊れる可能性があります。</p><p>このガイドでは、新しい修飾子の使用方法と、それがライブラリのユーザーに与える影響について説明します。</p><h2 id="クラスの-mixin-修飾子" tabindex="-1">クラスの mixin 修飾子 <a class="header-anchor" href="#クラスの-mixin-修飾子" aria-label="Permalink to &quot;クラスの mixin 修飾子&quot;">​</a></h2><p>最も重要な修飾子は mixin です。Dart 3.0より前のバージョンの言語では、クラスのwith節で任意のクラスをmixinとして使用することができます：</p><ul><li>ファクトリー以外のコンストラクタを宣言している。</li><li>Object 以外のクラスを継承している。</li></ul><p>このため、コンストラクタやextends句をクラスに追加しても、他のクラスがそのクラスをwith句で使用していることに気づかず、誤って他の人のコードを壊してしまうことがあります。</p><p>Dart 3.0では、デフォルトでクラスをmixinとして使用することができなくなりました。その代わりに、mixinクラスを宣言することで、その動作を明示的に許可する必要があります：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mixin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UseAsMixin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UseAsSuperclass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>パッケージを Dart 3.0 に更新し、コードを変更しなければ、エラーは発生しないかもしれません。しかし、あなたのパッケージのユーザがあなたのクラスをmixinとして使用していた場合、うっかりして壊してしまうかもしれません。</p><h2 id="クラスをミックスインとして移行する" tabindex="-1">クラスをミックスインとして移行する <a class="header-anchor" href="#クラスをミックスインとして移行する" aria-label="Permalink to &quot;クラスをミックスインとして移行する&quot;">​</a></h2><p>クラスが非ファクトリーコンストラクタ、extends 節、または with 節を持っている場合、そのクラスはすでにミキシンとして使用できません。Dart 3.0でも動作は変わりませんので、心配する必要はありません。</p><p>実際には、これは既存のクラスの約90%に当てはまります。ミキシンとして使用できる残りのクラスについては、何をサポートしたいかを決定する必要があります。</p><p>ここで、決断の助けとなる質問をいくつか挙げてみよう。1つ目は実用的なことです：</p><ul><li>ユーザーを壊したくありませんか？もしその答えが「ノー」であるなら、mixinとして使われる可能性のあるすべてのクラスの前にmixinを置く。こうすることで、APIの既存の動作が維持されます。</li></ul><p>一方、この機会にAPIが提供するアフォーダンスを再考したいのであれば、mixinクラスにはしない方がよいかもしれません。この2つの設計上の疑問について考えてみよう：</p><ul><li><p>ユーザーが直接インスタンスを作成できるようにしたいのか？言い換えれば、そのクラスは意図的に抽象化されていないのか？</p></li><li><p>この宣言をミキシンとして使えるようにしたいのか？言い換えれば、with節で使えるようにしたいのか？</p></li></ul><p>両方の答えが「イエス」なら、ミキシン・クラスにする。2つ目の答えが「いいえ」なら、クラスのままにしておきます。つ目の答えが「いいえ」で、2つ目の答えが「はい」の場合は、クラスからミキシン宣言に変更します。</p><p>最後の2つの選択肢、クラスのままにするか、純粋なmixinにするかは、APIを変更することになります。これを行う場合は、パッケージのメジャーバージョンを上げる必要があります。</p><h2 id="その他のオプトイン修飾語" tabindex="-1">その他のオプトイン修飾語 <a class="header-anchor" href="#その他のオプトイン修飾語" aria-label="Permalink to &quot;その他のオプトイン修飾語&quot;">​</a></h2><p>クラスを mixin として扱うことは、Dart 3.0 におけるパッケージの API に影響する唯一の重要な変更点です。ここまでくれば、パッケージがユーザにできることに他の変更を加えたくなければ、もうやめてもかまいません。</p><p>もし、このまま続けて以下に説明する修飾子を使用した場合、パッケージの API を破壊する変更になる可能性があり、メジャーバージョンアップが必要になることに注意してください。</p><h2 id="interface修飾子" tabindex="-1">interface修飾子 <a class="header-anchor" href="#interface修飾子" aria-label="Permalink to &quot;interface修飾子&quot;">​</a></h2><p>Dartには、純粋なインターフェースを宣言するための個別の構文はありません。その代わりに、抽象メソッドのみを含む抽象クラスを宣言します。ユーザがパッケージのAPIでそのクラスを見たとき、クラスを拡張することで再利用できるコードが含まれているのか、それともインターフェイスとして使用されることを意図しているのか、わからないかもしれません。</p><p>interface修飾子をクラスにつけることで、それを明確にすることができます。そうすることで、クラスをimplements節で使うことはできますが、 extends節で使うことはできなくなります。</p><p>クラスが抽象でないメソッドを持っている場合でも、ユーザーがそのクラスを拡張できないようにしたい場合があります。継承は、コードの再利用を可能にするため、ソフトウェアにおける最も強力な結合の1つです。しかし、このカップリングは危険で壊れやすいものでもあります。継承がパッケージの境界を越える場合、サブクラスを壊すことなくスーパークラスを進化させるのは難しいでしょう。</p><p>クラスのインターフェイスをマークすることで、ユーザはそのクラスを構築し（抽象クラスとマークされていない限り）、クラスのインターフェイスを実装することができます。</p><p>クラスがインターフェースとマークされている場合、そのクラスが宣言されているライブラリ内ではその制限を無視することができます。ライブラリ内では、そのクラスはすべて自分のコードであり、おそらく自分が何をしているかわかっているはずなので、自由に拡張することができます。この制限は、他のパッケージや、自分のパッケージ内の他のライブラリにも適用されます。</p><h2 id="base修飾子" tabindex="-1">base修飾子 <a class="header-anchor" href="#base修飾子" aria-label="Permalink to &quot;base修飾子&quot;">​</a></h2><p>base修飾子はinterfaceの逆です。extends 節でクラスを使ったり、with 節で mixin や mixin クラスを使うことができます。しかし、そのクラスのライブラリ以外のコードがimplements句でそのクラスやmixinを使うことはできません。</p><p>これにより、クラスやmixinのインターフェイスのインスタンスであるすべてのオブジェクトが、実際の実装を継承することになります。特に、これはすべてのインスタンスが、あなたのクラスやミキシンが宣言しているすべてのプライベート・メンバーを含むことを意味します。これは、他の方法で発生する可能性のある実行時エラーを防ぐのに役立ちます。</p><p>このライブラリを考えてみよう:</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.dart</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _privateMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;I inherited from A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callPrivateMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_privateMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このコードだけでは問題ないように思えるが、ユーザーがこのような別のライブラリを作ることを妨げるものは何もない：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.dart</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // No implementation of _privateMethod()!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  callPrivateMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Runtime exception!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>クラスにbase修飾子を追加することで、このような実行時エラーを防ぐことができます。インターフェースの場合と同様、基底クラスやミキシンが宣言されているのと同じライブラリでは、この制限を無視することができます。その場合、同じライブラリのサブクラスはプライベート・メソッドを実装するように注意喚起されます。しかし、次のセクションが適用されることに注意してください：</p><h2 id="塩基の他動性" tabindex="-1">塩基の他動性 <a class="header-anchor" href="#塩基の他動性" aria-label="Permalink to &quot;塩基の他動性&quot;">​</a></h2><p>クラスの基本をマークする目的は、その型のすべてのインスタンスがそのクラスを具体的に継承することを保証することである。これを維持するために、基底の制限は「伝染性」である。直接型であれ間接型であれ、ベースとマークされた型のすべてのサブタイプは、実装されることも防がなければならない。つまり、baseとマークされていなければならない（あるいはfinalかsealedでなければならない。）</p><p>型にbaseを適用するには、それなりの注意が必要だ。それは、ユーザーがあなたのクラスやミキシンでできることだけでなく、サブクラスが提供できるアフォーダンスにも影響します。ある型にbaseを付けると、その下の階層全体が実装禁止になります。</p><p>強烈に聞こえるかもしれないが、これは他のほとんどのプログラミング言語が常に行ってきたことだ。そのため、JavaやC#などの言語でクラスを宣言しても、事実上同じ制約を受けることになる。</p><h2 id="final修飾子" tabindex="-1">final修飾子 <a class="header-anchor" href="#final修飾子" aria-label="Permalink to &quot;final修飾子&quot;">​</a></h2><p>interface と base の両方の制限を受けたい場合は、クラスや mixin クラスを final にすることができます。これにより、あなたのライブラリの外部からは、このクラスのサブタイプを作成することができなくなります。つまり、implements句、extends句、with句、on句でこのクラスを使用することができなくなります。</p><p>これは、そのクラスのユーザーにとって最も厳しい制限です。彼らができることは、（abstractとマークされていない限り）そのクラスを構築することだけです。その代わり、クラスのメンテナとしての制約が最も少なくなります。新しいメソッドを追加したり、コンストラクタをファクトリ・コンストラクタに変更したりすることができます。</p><h2 id="sealed修飾子" tabindex="-1">sealed修飾子 <a class="header-anchor" href="#sealed修飾子" aria-label="Permalink to &quot;sealed修飾子&quot;">​</a></h2><p>最後の修飾子sealedは特別である。これは主に、パターン・マッチにおける網羅性チェックを可能にするために存在する。もしスイッチがsealedとマークされた型の直接のサブタイプすべてに対してケースを持つ場合、コンパイラはそのスイッチが網羅的であると認識します。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// amigos.dart</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Lucky</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dusty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Ned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lastName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amigo) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (amigo) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      Lucky</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Day&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      Dusty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Bottoms&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      Ned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Nederlander&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span></code></pre></div><p>このスイッチは、アミーゴのサブタイプごとにケースを持っています。コンパイラーは、アミーゴのすべてのインスタンスがこれらのサブタイプのインスタンスでなければならないことを知っているので、スイッチが安全に網羅的であり、最終的なデフォルト・ケースを必要としないことを知っています。</p><p>これが健全であるために、コンパイラーは2つの制限を課しています：</p><ol><li>シールされたクラスは、それ自身は直接コンストラクトできない。そうでなければ、どのサブタイプのインスタンスでもないAmigoのインスタンスができてしまう。つまり、すべてのシールドされたクラスも暗黙のうちに抽象化されています。</li><li>シールされた型の直接のサブタイプはすべて、シールされた型が宣言されたのと同じライブラリになければなりません。こうすることで、コンパイラーはそれらをすべて見つけることができる。コンパイラーは、どのケースにもマッチしないような隠れたサブタイプが他に存在しないことを知ることができる。</li></ol><p>2つ目の制限はfinalと似ている。finalと同様、sealedとマークされたクラスは、それが宣言されたライブラリの外で直接拡張したり、実装したり、混在させたりすることはできないということです。しかし、baseやfinalとは異なり、他律的な制限はありません：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// amigo.dart</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Lucky</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dusty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Ned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// other.dart</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is an error:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Amigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// But these are both fine:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OtherLucky</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Lucky</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OtherDusty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dusty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>もちろん、sealed型のサブタイプにも制限をかけたい場合は、interface、base、final、sealedのいずれかを使ってマークすればよい。</p><h2 id="sealed-vs-final" tabindex="-1">sealed vs final <a class="header-anchor" href="#sealed-vs-final" aria-label="Permalink to &quot;sealed vs final&quot;">​</a></h2><p>ユーザーに直接サブタイプされたくないクラスがある場合、どのような場合にsealedとfinalを使い分けるべきか？簡単なルールがいくつかある：</p><ul><li>もしユーザーがクラスのインスタンスを直接構築できるようにしたいのであれば、sealed型は暗黙の抽象型であるため使用できません。</li><li>もしそのクラスがライブラリにサブタイプを持っていないのであれば、sealedを使う意味はありません。</li></ul><p>そうでない場合、もしクラスがいくつかのサブタイプを定義しているのであれば、sealedが望ましいでしょう。クラスがいくつかのサブタイプを持っていることをユーザーが知っている場合、それぞれのサブタイプをスイッチ・ケースとして個別に扱うことができ、コンパイラーに型全体がカバーされていることを認識させることができるのは便利だ。</p><p>sealedを使うということは、後でライブラリに別のサブタイプを追加した場合、APIが変更されるということを意味する。新しいサブタイプが登場すると、既存のスイッチは新しい型を扱えないため、すべて非網羅的なものになる。まさにenumに新しい値を追加するようなものだ。</p><p>これらの非網羅的なスイッチのコンパイル・エラーは、新しい型を処理する必要があるコードの場所にユーザーの注意を向けさせるので、ユーザーにとって有益です。</p><p>しかし、これは新しいサブタイプを追加するたびに、それが変更されることを意味する。もし壊れない方法で新しいサブタイプを自由に追加したいのであれば、sealedの代わりにfinalを使ってスーパータイプをマークするのがいいだろう。つまり、ユーザーがそのスーパータイプの値をオンにしたとき、たとえすべてのサブタイプのケースを持っていたとしても、コンパイラーは別のデフォルトのケースを追加するように強制する。そのデフォルトのケースは、後でサブタイプを追加したときに実行されるケースになる。</p><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p>API設計者として、これらの新しいモディファイアは、ユーザがあなたのコードをどのように扱うかをコントロールし、逆に、ユーザがあなたのコードを壊すことなく、あなたのコードをどのように進化させることができるかをコントロールすることができる。</p><p>しかし、これらのオプションは複雑さを伴います。また、これらの機能は新しいものなので、ベストプラクティスがどうなるかはまだわからない。言語ごとにエコシステムは異なり、ニーズも異なる。</p><p>幸い、一度にすべてを把握する必要はない。何もしなくても、あなたのクラスはほとんど3.0以前と同じアフォーダンスが得られるように、私たちは意図的にデフォルトを選びました。APIを以前のままにしておきたいだけなら、すでにそれをサポートしているクラスにmixinを追加すればいい。</p><p>時間が経つにつれて、より細かい制御が必要な部分がわかってきたら、他の修飾子の適用を検討すればいい：</p><ul><li>ユーザーがクラスのコードを再利用できないようにするために interface を使います。</li><li>baseを使用すると、ユーザーにクラスのコードの再利用を要求し、クラスの型のすべてのインスタンスが実際のクラスまたはサブクラスのインスタンスであることを保証します。</li><li>クラスが拡張されるのを完全に防ぐにはfinalを使います。</li><li>sealedを使用すると、サブタイプのファミリーの網羅性チェックを行うことができます。</li></ul><p>これらの修飾子はすべて、変更を壊すような制限を意味するからです。</p>`,68)]))}const E=i(p,[["render",e]]);export{c as __pageData,E as default};
