import{_ as i,c as e,a2 as s,o as l}from"./chunks/framework.DPuwY6B9.js";const k=JSON.parse('{"title":"lua_gc","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_gc.md","filePath":"reference/lua_c/lua_gc.md","lastUpdated":null}'),t={name:"reference/lua_c/lua_gc.md"};function d(h,a,c,n,o,p){return l(),e("div",null,a[0]||(a[0]=[s('<h1 id="lua-gc" tabindex="-1">lua_gc <a class="header-anchor" href="#lua-gc" aria-label="Permalink to &quot;lua_gc&quot;">​</a></h1><p>ガーベジコレクタを制御します。</p><p><code>[-0, +0, e]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>ガーベジコレクタを制御します。</p><p>この関数は<code>what</code>パラメータの値に応じて、いくつかのタスクを実行します：</p><ul><li><code>LUA_GCSTOP</code>: ガーベジコレクタを停止します。</li><li><code>LUA_GCRESTART</code>: ガーベジコレクタを再起動します。</li><li><code>LUA_GCCOLLECT</code>: 完全なガーベジコレクションサイクルを実行します。</li><li><code>LUA_GCCOUNT</code>: Luaが使用中のメモリの現在の量（キロバイト単位）を返します。</li><li><code>LUA_GCCOUNTB</code>: Luaが使用中のメモリの現在のバイト数を1024で割った余りを返します。</li><li><code>LUA_GCSTEP</code>: ガーベジコレクションのインクリメンタルステップを実行します。ステップの「サイズ」は<code>data</code>（大きい値はより多くのステップを意味します）によって非指定の方法で制御されます。ステップサイズを制御したい場合は、<code>data</code>の値を実験的に調整する必要があります。この関数は、ステップがガーベジコレクションサイクルを終了した場合に1を返します。</li><li><code>LUA_GCSETPAUSE</code>: <code>data</code>をコレクタの一時停止の新しい値として設定します。関数は一時停止の前の値を返します。</li><li><code>LUA_GCSETSTEPMUL</code>: <code>data</code>をコレクタのステップ乗数の新しい値として設定します。関数はステップ乗数の前の値を返します。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, LUA_GCCOLLECT, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>このコードは、Luaのガーベジコレクションを強制的に実行します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>LUA_GCSTOP</li><li>LUA_GCCOUNT</li></ul>',15)]))}const u=i(t,[["render",d]]);export{k as __pageData,u as default};
