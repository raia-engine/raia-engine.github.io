import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.CKGreiRV.js";const c=JSON.parse('{"title":"非同期のサポート","description":"","frontmatter":{},"headers":[],"relativePath":"resource/dart/language/concurrency/asynchronous_support.md","filePath":"resource/dart/language/concurrency/asynchronous_support.md","lastUpdated":1732376957000}'),p={name:"resource/dart/language/concurrency/asynchronous_support.md"};function l(e,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="非同期のサポート" tabindex="-1">非同期のサポート <a class="header-anchor" href="#非同期のサポート" aria-label="Permalink to &quot;非同期のサポート&quot;">​</a></h1><p>Dartライブラリには、FutureやStreamオブジェクトを返す関数がたくさんあります。これらの関数は非同期です。（I/Oのような）時間のかかる処理を設定した後に、その処理が完了するのを待たずに返します。</p><p>asyncとawaitキーワードは非同期プログラミングをサポートし、同期コードに似た非同期コードを書くことができます。</p><h2 id="futuresハンドリング" tabindex="-1">Futuresハンドリング <a class="header-anchor" href="#futuresハンドリング" aria-label="Permalink to &quot;Futuresハンドリング&quot;">​</a></h2><p>完了したFutureの結果が必要な場合、2つの選択肢があります：</p><ul><li>ここや非同期プログラミングのコードラボで説明されているように、asyncとawaitを使う。</li><li>dart:async ドキュメントで説明されている Future API を使う。</li></ul><p>asyncとawaitを使用したコードは非同期ですが、同期コードによく似ています。例えば、非同期関数の結果を待つためにawaitを使用するコードを以下に示します：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>awaitを使うには、コードが非同期関数（asyncとマークされた関数）の中になければならない：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Do something with version</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>非同期関数は時間のかかる処理を実行するかもしれないが、その処理を待つことはない。その代わり、async関数は最初のawait式に出会うまで実行します。そしてFutureオブジェクトを返し、await式が完了してから実行を再開します。</p></div><p>try、catch、finallyを使用して、awaitを使用するコードのエラーとクリーンアップを処理する：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // React to inability to look up the version</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>awaitは非同期関数の中で複数回使うことができる。例えば、以下のコードは関数の結果を3回待つ：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entrypoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findEntryPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exitCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runExecutable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entrypoint, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flushThenExit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exitCode);</span></span></code></pre></div><p>await式では、expressionの値は通常Futureです。そうでない場合は、値は自動的にFutureにラップされます。このFutureオブジェクトは、オブジェクトを返すという約束を示します。await式の値は、その返されたオブジェクトです。await式は、そのオブジェクトが利用可能になるまで実行を一時停止させる。</p><p>awaitの使用時にコンパイルエラーが発生する場合は、awaitが非同期関数内にあることを確認してください。例えば、アプリのmain()関数でawaitを使うには、main()の本体がasyncとしてマークされていなければならない：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  checkVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;In main: version is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookUpVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>前述の例では、結果を待たずに非同期関数（checkVersion()）を使用しています。 これは、コードが関数の実行が終了したと仮定すると問題を引き起こす可能性がある。 この問題を避けるには、unawaited_futuresリインター・ルールを使う。</p></div><p>futures、async、awaitの使い方をインタラクティブに紹介するには、非同期プログラミングのコードラボを参照。</p><h2 id="非同期関数の宣言" tabindex="-1">非同期関数の宣言 <a class="header-anchor" href="#非同期関数の宣言" aria-label="Permalink to &quot;非同期関数の宣言&quot;">​</a></h2><p>非同期関数は、ボディにasync修飾子が付いた関数です。</p><p>関数にasyncキーワードを追加すると、その関数はFutureを返すようになります。例えば、Stringを返すこの同期関数を考えてみましょう：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>非同期関数に変更した場合、例えば、Futureの実装には時間がかかるため、戻り値はフューチャーとなる：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>関数本体がFuture APIを使う必要はないことに注意してください。Dartは必要に応じてFutureオブジェクトを生成します。関数が有用な値を返さない場合は、戻り値の型を <code>Future&lt;void&gt;</code> にしてください。</p><p>future、async、awaitの使い方をインタラクティブに紹介した、非同期プログラミングのコードラボを参照してください。</p><h2 id="streamsハンドリング" tabindex="-1">Streamsハンドリング <a class="header-anchor" href="#streamsハンドリング" aria-label="Permalink to &quot;Streamsハンドリング&quot;">​</a></h2><p>ストリームから値を取得する必要がある場合、2つの選択肢がある：</p><ul><li>asyncと非同期forループ（await for）を使用します。</li><li>dart:async ドキュメントで説明されているように、Stream API を使用します。</li></ul><div class="info custom-block"><p class="custom-block-title">Note</p><p>await forを使う前に、それがコードを明瞭にし、本当にストリームのすべての結果を待ちたいのかどうかを確認してください。例えば、UIイベントリスナーにはawait forを使うべきではありません。なぜなら、UIフレームワークはイベントの無限のストリームを送信するからです。</p></div><p>非同期forループは次のような形をしている：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (varOrType identifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Executes each time the stream emits a value.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>式の値はStream型でなければならない。実行は以下のように進む：</p><ol><li>ストリームが値を返すまで待つ。</li><li>変数にその値がセットされた状態で、forループの本体を実行する。</li><li>ストリームが閉じるまで1と2を繰り返す。</li></ol><p>ストリームのリッスンを停止するには、break文またはreturn文を使用する。</p><p>非同期forループを実装する際にコンパイルエラーが発生した場合は、await forが非同期関数内にあることを確認してください。例えば、アプリのmain()関数で非同期forループを使用するには、main()の本体が非同期としてマークされていなければなりません：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestServer) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Dartの非同期プログラミングサポートの詳細については、dart:asyncライブラリのドキュメントを参照してください。</p>`,40)]))}const E=i(p,[["render",l]]);export{c as __pageData,E as default};
