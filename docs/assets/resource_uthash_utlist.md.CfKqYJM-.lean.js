import{_ as l,c as n,a2 as a,j as s,o as t}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"utlist: C構造体用リンクリストマクロ","description":"","frontmatter":{},"headers":[],"relativePath":"resource/uthash/utlist.md","filePath":"resource/uthash/utlist.md","lastUpdated":1732350347000}'),e={name:"resource/uthash/utlist.md"};function h(p,i,d,k,E,r){return t(),n("div",null,i[0]||(i[0]=[a(`<h1 id="utlist-c構造体用リンクリストマクロ" tabindex="-1">utlist: C構造体用リンクリストマクロ <a class="header-anchor" href="#utlist-c構造体用リンクリストマクロ" aria-label="Permalink to &quot;utlist: C構造体用リンクリストマクロ&quot;">​</a></h1><ul><li>Troy D. Hanson <a href="mailto:tdh@tkhanson.net" target="_blank" rel="noreferrer">tdh@tkhanson.net</a></li><li>v2.3.0, February 2021</li></ul><p><a href="https://github.com/troydhanson/uthash" target="_blank" rel="noreferrer">GitHubプロジェクトページ</a>へのリンクです。</p><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p><code>utlist.h</code>には、uthashと一緒にCの構造体のための汎用の「リンクリスト」マクロが含まれている。これらのマクロを自分のCプログラムで使うには、<code>utlist.h</code>をソースディレクトリにコピーして、自分のプログラムで使うだけでよい。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;utlist.h&quot;</span></span></code></pre></div><p>これらのマクロは、基本的なリンクリストの操作（要素の追加と削除、ソート、繰り返し）をサポートしている。</p><h3 id="ダウンロード" tabindex="-1">ダウンロード <a class="header-anchor" href="#ダウンロード" aria-label="Permalink to &quot;ダウンロード&quot;">​</a></h3><p><code>utlist.h</code>ヘッダーファイルをダウンロードするには、<a href="https://github.com/troydhanson/uthash" target="_blank" rel="noreferrer">https://github.com/troydhanson/uthash</a> のリンクに従ってuthashをクローンするか、zipファイルを入手し、src/サブディレクトリを探す。</p><h3 id="bsdライセンス" tabindex="-1">BSDライセンス <a class="header-anchor" href="#bsdライセンス" aria-label="Permalink to &quot;BSDライセンス&quot;">​</a></h3><p>このソフトウェアは、license.html (revised BSD license)というリンクの下で利用可能です。フリーでオープンソースです。</p><h3 id="プラットフォーム" tabindex="-1">プラットフォーム <a class="header-anchor" href="#プラットフォーム" aria-label="Permalink to &quot;プラットフォーム&quot;">​</a></h3><p>utlist マクロは以下のプラットフォームでテストされている：</p><ul><li>Linux</li><li>Mac OS X</li><li>Windows, using Visual Studio 2008, Visual Studio 2010, or Cygwin/MinGW.</li></ul><h2 id="utlistを使う" tabindex="-1">utlistを使う <a class="header-anchor" href="#utlistを使う" aria-label="Permalink to &quot;utlistを使う&quot;">​</a></h2><h3 id="リストの種類" tabindex="-1">リストの種類 <a class="header-anchor" href="#リストの種類" aria-label="Permalink to &quot;リストの種類&quot;">​</a></h3><p>3種類のリンクリストがサポートされている：</p><ul><li><em>singly-linked</em> リスト</li><li><em>doubly-linked</em> リスト</li><li><em>circular, doubly-linked</em> リスト</li></ul><h4 id="効率性" tabindex="-1">効率性 <a class="header-anchor" href="#効率性" aria-label="Permalink to &quot;効率性&quot;">​</a></h4><p><strong>要素の前置</strong>:</p><p>すべてのリストタイプで一定時間。</p><p><strong>追加</strong></p><p>単一連結リストでは&#39;O(n)&#39;、二重連結リストでは定数時間。(2重リンクリストのutlist実装では、<code>head-&gt;prev</code>に末尾ポインタを保持するので、追加を定数時間で行うことができる)。</p><p><strong>エレメントの削除</strong></p><p>一重連結リストでは&#39;O(n)&#39;、二重連結リストでは定数時間。</p><p><strong>ソート</strong></p><p>すべてのリストタイプで&#39;O(n log(n))&#39;。</p><p><strong>順番に挿入（ソートされたリストの場合）</strong></p><p>すべてのリストタイプで「O(n)」。</p><p><strong>反復、カウント、検索</strong></p><p>すべてのリストタイプで「O(n)」。</p><h3 id="リスト要素" tabindex="-1">リスト要素 <a class="header-anchor" href="#リスト要素" aria-label="Permalink to &quot;リスト要素&quot;">​</a></h3><p>これらのマクロでは、構造体に <code>next</code> ポインタが含まれていれば、どのような構造体でも使用することができます。二重にリンクされたリストを作りたい場合は、要素にも <code>prev</code> ポインタが必要です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prev;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 二重リンクリストにのみ必要 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 単一または二重リンクリストに必要 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} element;</span></span></code></pre></div><p>構造体の名前は何でもいい。上の例では<code>element</code>と呼んでいる。特定のリスト内では、すべての要素は同じ型でなければならない。</p><h5 id="柔軟な前-次ネーミング" tabindex="-1">柔軟な前/次ネーミング <a class="header-anchor" href="#柔軟な前-次ネーミング" aria-label="Permalink to &quot;柔軟な前/次ネーミング&quot;">​</a></h5><p>prev<code>と</code>next\`のポインタには別の名前をつけることができる。その場合、同じように動作するが、これらの名前を追加引数として受け取る flex_names,family of macrosがある。</p><h3 id="リストヘッド" tabindex="-1">リストヘッド <a class="header-anchor" href="#リストヘッド" aria-label="Permalink to &quot;リストヘッド&quot;">​</a></h3><p>リストヘッドは、単にエレメント構造へのポインターである。名前は何でもよい。NULL\`で初期化しなければならない。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="リスト操作" tabindex="-1">リスト操作 <a class="header-anchor" href="#リスト操作" aria-label="Permalink to &quot;リスト操作&quot;">​</a></h3><p>リストは、要素の挿入や削除、要素のソート、要素の反復処理をサポートしている。</p>`,42),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"Singly-linked"),s("th",null,"Doubly-linked"),s("th",null,"Circular, doubly-linked")])]),s("tbody",null,[s("tr",null,[s("td",null,"LL_PREPEND(head,add);"),s("td",null,"DL_PREPEND(head,add);"),s("td",null,"CDL_PREPEND(head,add);")]),s("tr",null,[s("td",null,"LL_PREPEND_ELEM(head,ref,add);"),s("td",null,"DL_PREPEND_ELEM(head,ref,add);"),s("td",null,"CDL_PREPEND_ELEM(head,ref,add);")]),s("tr",null,[s("td",null,"LL_APPEND_ELEM(head,ref,add);"),s("td",null,"DL_APPEND_ELEM(head,ref,add);"),s("td",null,"CDL_APPEND_ELEM(head,ref,add);")]),s("tr",null,[s("td",null,"LL_REPLACE_ELEM(head,del,add);"),s("td",null,"DL_REPLACE_ELEM(head,del,add);"),s("td",null,"CDL_REPLACE_ELEM(head,del,add);")]),s("tr",null,[s("td",null,"LL_APPEND(head,add);"),s("td",null,"DL_APPEND(head,add);"),s("td",null,"CDL_APPEND(head,add);")]),s("tr",null,[s("td",null,"LL_INSERT_INORDER(head,add,cmp);"),s("td",null,"DL_INSERT_INORDER(head,add,cmp);"),s("td",null,"CDL_INSERT_INORDER(head,add,cmp);")]),s("tr",null,[s("td",null,"LL_CONCAT(head1,head2);"),s("td",null,"DL_CONCAT(head1,head2);"),s("td")]),s("tr",null,[s("td",null,"LL_DELETE(head,del);"),s("td",null,"DL_DELETE(head,del);"),s("td",null,"CDL_DELETE(head,del);")]),s("tr",null,[s("td",null,"LL_SORT(head,cmp);"),s("td",null,"DL_SORT(head,cmp);"),s("td",null,"CDL_SORT(head,cmp);")]),s("tr",null,[s("td",{"css-module":"."},"LL_FOREACH(head,elt)"),s("td",{"css-module":"."},"DL_FOREACH(head,elt)"),s("td",{"css-module":"."},"CDL_FOREACH(head,elt)")]),s("tr",null,[s("td",{"css-module":"."},"LL_FOREACH_SAFE(head,elt,tmp)"),s("td",{"css-module":"."},"DL_FOREACH_SAFE(head,elt,tmp)"),s("td",{"css-module":"."},"CDL_FOREACH_SAFE(head,elt,tmp1,tmp2)")]),s("tr",null,[s("td",null,"LL_SEARCH_SCALAR(head,elt,mbr,val);"),s("td",null,"DL_SEARCH_SCALAR(head,elt,mbr,val);"),s("td",null,"CDL_SEARCH_SCALAR(head,elt,mbr,val);")]),s("tr",null,[s("td",null,"LL_SEARCH(head,elt,like,cmp);"),s("td",null,"DL_SEARCH(head,elt,like,cmp);"),s("td",null,"CDL_SEARCH(head,elt,like,cmp);")]),s("tr",null,[s("td",null,"LL_LOWER_BOUND(head,elt,like,cmp);"),s("td",null,"DL_LOWER_BOUND(head,elt,like,cmp);"),s("td",null,"CDL_LOWER_BOUND(head,elt,like,cmp);")]),s("tr",null,[s("td",null,"LL_COUNT(head,elt,count);"),s("td",null,"DL_COUNT(head,elt,count);"),s("td",null,"CDL_COUNT(head,elt,count);")])])],-1),a(`<p>Prependとは、既存のリストの先頭に要素を挿入し、リストの先頭を新しい要素に変更することです。</p><p>Appendとは、リストの末尾に要素を追加し、それが新しい末尾の要素になることを意味します。</p><p>Concatenate は適切に作成された2つのリストを受け取り、2番目のリストを1番目のリストに追加します。 (Visual Studio 2008は <code>LL_CONCAT</code> と <code>DL_CONCAT</code> をサポートしていませんが、VS2010は大丈夫です)。</p><p>リストの先頭ではなく、任意の要素の前に前置するには、 <code>_PREPEND_ELEM</code> マクロファミリを使用します。リストの先頭ではなく、任意の要素の後に追加するには、 <code>_APPEND_ELEM</code> マクロファミリを使用する。任意のリスト要素を別の要素で「置換」するには <code>_REPLACE_ELEM</code> マクロファミリを使用する。</p><p>ソート操作はメモリ上の要素を移動させることはなく、各要素の <code>prev</code> と <code>next</code> ポインタを変更してリストの順番を調整するだけである。また、ソート操作はリストの先頭が新しい要素を指すように変更することもできます。</p><p>foreach は、リストの先頭から末尾までを簡単に反復処理するためのものです。使用例を以下に示す。もちろん、&#39;foreach&#39; マクロを使う代わりに <code>prev</code> と <code>next</code> ポインタを直接使うこともできる。</p><p>foreach_safe 演算は、繰り返し処理中にリスト要素を削除する場合に使用する。</p><p>search は、特定の要素を探すための反復処理のショートカットである。各要素を手作業で反復してテストするよりも速いわけではない。スカラー」バージョンは、与えられた構造体メンバに対して単純な等式テストを使用して要素を検索します。一般的なバージョンは、<code>cmp</code>関数を使用してリスト内の他のすべての要素を比較します。</p><p>lower_bound は、指定された <code>cmp</code> 関数に従って、指定された <code>like</code> 要素よりも大きくないリストの最初の要素を見つける。つまり、適切な挿入ポイントがリストの先頭にある場合は <code>elt=NULL</code> となり、適切な挿入ポイントが <code>p</code> と <code>p-&gt;next</code> の間にある場合は <code>elt=p</code> となる。</p><p>count は、リストを反復処理し、指定されたカウンターをインクリメントする。</p><p>上の表に示したパラメータについて、ここで説明する。</p><p><strong>head</strong>:</p><p>リストの先頭（リスト要素構造へのポインタ）。</p><p><strong>add</strong>:</p><p>リストに追加するリスト要素構造へのポインタ。</p><p><strong>del</strong>:</p><p>リストから置換または削除するリスト要素構造へのポインタ。</p><p><strong>elt</strong>:</p><p>反復マクロの場合、各リスト要素に連続して割り当てられるポインタ（例を参照）。</p><p><strong>ref</strong>:</p><p>prepend および append 操作のための参照要素。ref\` がポインタで値が NULL の場合、_PREPEND_ELEM() 操作では新しい要素がリストに追加され、_APPEND_ELEM() 操作では新しい要素が先頭に追加される。代わりに_PREPEND()と_APPEND()マクロファミリーを使用する。</p><p><strong>like</strong>:</p><p>検索マクロがマッチを求める <code>elt</code> と同じ型の要素ポインタである（マッチが見つかれば <code>elt</code> に格納される）。一致するかどうかは、与えられた <code>cmp</code> 関数によって決定される。</p><p><strong>cmp</strong>:</p><p>比較関数へのポインタです。この関数は2つの引数を受け取りますが、これらは比較される2つの要素構造へのポインタです。比較関数は <code>int</code> を返さなければならない。この <code>int</code> は負、0、または正であり、それぞれ最初の項目が2番目の項目の前、等しい、または後にソートされるべきかを指定する。(つまり、 <code>strcmp</code> で使用されるのと同じ規則である)。Visual Studio 2008では、2つの引数を <code>void *</code> として宣言し、実際の型にキャストする必要があるかもしれないことに注意しよう。</p><p><strong>tmp</strong>:</p><p><code>elt</code>と同じ型のポインタ。内部的に使用される。初期化する必要はない。</p><p><strong>mbr</strong>:</p><p>スカラーサーチマクロでは、構造体 <code>elt</code> 内のメンバ名で、値 <code>val</code> と等しいかどうかを（<code>==</code> を使って）テストします。</p><p><strong>val</strong>:</p><p>スカラー検索マクロでは、検索対象の要素の（構造体メンバ <code>field</code> の）値を指定する。</p><p><strong>count</strong>:</p><p>リストの長さに設定される整数。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><p>このサンプル・プログラムはテキスト・ファイルから名前を読み込み（1行に1つの名前）、それぞれの名前を2重にリンクされたリストに追加する。そして、ソートして表示する。</p><h4 id="二重にリンクされたリスト" tabindex="-1">二重にリンクされたリスト <a class="header-anchor" href="#二重にリンクされたリスト" aria-label="Permalink to &quot;二重にリンクされたリスト&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;utlist.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BUFLEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[BUFLEN];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prev;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} el;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> namecmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a-&gt;bname,b-&gt;bname);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 重要 - NULLに初期化する！ */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elt, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tmp, etmp;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> linebuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[BUFLEN];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( (file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fopen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test11.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        perror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;can&#39;t open: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fgets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(linebuf,BUFLEN,file) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( (name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        strcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name-&gt;bname, linebuf);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        DL_APPEND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DL_SORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head, namecmp);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DL_FOREACH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head,elt) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, elt-&gt;bname);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DL_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head, elt, count);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number of elements in list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etmp.bname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WES</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DL_SEARCH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head,elt,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etmp,namecmp);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (elt) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;found </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, elt-&gt;bname);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 各要素を削除するには、安全なイテレータを使用する。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DL_FOREACH_SAFE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head,elt,tmp) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      DL_DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head,elt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fclose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="prevとnextの他の呼び方" tabindex="-1">prevとnextの他の呼び方 <a class="header-anchor" href="#prevとnextの他の呼び方" aria-label="Permalink to &quot;prevとnextの他の呼び方&quot;">​</a></h3><p>もし <code>prev</code> と <code>next</code> フィールドの名前が別のものであれば、別のマクロを使わなければならない。これらのマクロは通常のマクロと同じように動作しますが、フィールド名を追加パラメータとして受け取ります。</p><p>これらの「柔軟なフィールド名」マクロを以下に示す。これらはすべて<code>2</code>で終わります。それぞれは <code>2</code> を除いたものと同じ動作をしますが、末尾の引数として <code>prev</code> と <code>next</code> フィールド名（必要に応じて）を受け取ります。</p>`,40),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"Singly-linked"),s("th",null,"Doubly-linked"),s("th",null,"Circular, doubly-linked")])]),s("tbody",null,[s("tr",null,[s("td",null,"LL_PREPEND2(head,add,next);"),s("td",null,"DL_PREPEND2(head,add,prev,next);"),s("td",null,"CDL_PREPEND2(head,add,prev,next);")]),s("tr",null,[s("td",null,"LL_PREPEND_ELEM2(head,ref,add,next);"),s("td",null,"DL_PREPEND_ELEM2(head,ref,add,prev,next);"),s("td",null,"CDL_PREPEND_ELEM2(head,ref,add,prev,next);")]),s("tr",null,[s("td",null,"LL_APPEND_ELEM2(head,ref,add,next);"),s("td",null,"DL_APPEND_ELEM2(head,ref,add,prev,next);"),s("td",null,"CDL_APPEND_ELEM2(head,ref,add,prev,next);")]),s("tr",null,[s("td",null,"LL_REPLACE_ELEM2(head,del,add,next);"),s("td",null,"DL_REPLACE_ELEM2(head,del,add,prev,next);"),s("td",null,"CDL_REPLACE_ELEM2(head,del,add,prev,next);")]),s("tr",null,[s("td",null,"LL_APPEND2(head,add,next);"),s("td",null,"DL_APPEND2(head,add,prev,next);"),s("td",null,"CDL_APPEND2(head,add,prev,next);")]),s("tr",null,[s("td",null,"LL_INSERT_INORDER2(head,add,cmp,next);"),s("td",null,"DL_INSERT_INORDER2(head,add,cmp,prev,next);"),s("td",null,"CDL_INSERT_INORDER2(head,add,cmp,prev,next);")]),s("tr",null,[s("td",null,"LL_CONCAT2(head1,head2,next);"),s("td",null,"DL_CONCAT2(head1,head2,prev,next);"),s("td")]),s("tr",null,[s("td",null,"LL_DELETE2(head,del,next);"),s("td",null,"DL_DELETE2(head,del,prev,next);"),s("td",null,"CDL_DELETE2(head,del,prev,next);")]),s("tr",null,[s("td",null,"LL_SORT2(head,cmp,next);"),s("td",null,"DL_SORT2(head,cmp,prev,next);"),s("td",null,"CDL_SORT2(head,cmp,prev,next);")]),s("tr",null,[s("td",{"css-module":"."},"LL_FOREACH2(head,elt,next)"),s("td",{"css-module":"."},"DL_FOREACH2(head,elt,next)"),s("td",{"css-module":"."},"CDL_FOREACH2(head,elt,next)")]),s("tr",null,[s("td",{"css-module":"."},"LL_FOREACH_SAFE2(head,elt,tmp,next)"),s("td",{"css-module":"."},"DL_FOREACH_SAFE2(head,elt,tmp,next)"),s("td",{"css-module":"."},"CDL_FOREACH_SAFE2(head,elt,tmp1,tmp2,prev,next)")]),s("tr",null,[s("td",null,"LL_SEARCH_SCALAR2(head,elt,mbr,val,next);"),s("td",null,"DL_SEARCH_SCALAR2(head,elt,mbr,val,next);"),s("td",null,"CDL_SEARCH_SCALAR2(head,elt,mbr,val,next);")]),s("tr",null,[s("td",null,"LL_SEARCH2(head,elt,like,cmp,next);"),s("td",null,"DL_SEARCH2(head,elt,like,cmp,next);"),s("td",null,"CDL_SEARCH2(head,elt,like,cmp,next);")]),s("tr",null,[s("td",null,"LL_LOWER_BOUND2(head,elt,like,cmp,next);"),s("td",null,"DL_LOWER_BOUND2(head,elt,like,cmp,next);"),s("td",null,"CDL_LOWER_BOUND2(head,elt,like,cmp,next);")]),s("tr",null,[s("td",null,"LL_COUNT2(head,elt,count,next);"),s("td",null,"DL_COUNT2(head,elt,count,next);"),s("td",null,"CDL_COUNT2(head,elt,count,next);")])])],-1)]))}const u=l(e,[["render",h]]);export{o as __pageData,u as default};
