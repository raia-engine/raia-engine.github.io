import{_ as s,c as a,a2 as t,o as l}from"./chunks/framework.6x3wfQve.js";const u=JSON.parse('{"title":"プロファイラ","description":"","frontmatter":{},"headers":[],"relativePath":"reference/luajit/profiler.md","filePath":"reference/luajit/profiler.md","lastUpdated":1728966685000}'),p={name:"reference/luajit/profiler.md"};function e(h,i,n,o,d,k){return l(),a("div",null,i[0]||(i[0]=[t('<h1 id="プロファイラ" tabindex="-1">プロファイラ <a class="header-anchor" href="#プロファイラ" aria-label="Permalink to &quot;プロファイラ&quot;">​</a></h1><p>LuaJITには非常に低いオーバーヘッドを持つ統計的プロファイラが統合されています。これにより、定期的な間隔で現在実行中のスタックや他のパラメータをサンプリングすることができます。</p><ul><li>統合プロファイラは三つのレベルからアクセスできます： <ul><li>-jpコマンドラインオプションによって呼び出されるバンドルされた高レベルプロファイラ。</li><li>プロファイラを制御するための低レベルLua API。</li><li>プロファイラを制御するための低レベルC API。</li></ul></li></ul><h2 id="高レベルプロファイラ" tabindex="-1">高レベルプロファイラ <a class="header-anchor" href="#高レベルプロファイラ" aria-label="Permalink to &quot;高レベルプロファイラ&quot;">​</a></h2><p>バンドルされた高レベルプロファイラは基本的なプロファイリング機能を提供します。簡単なテキストの要約やソースコードの注釈を生成します。-jpコマンドラインオプションまたはLuaコードからjit.pモジュールをロードすることでアクセスできます。</p><p>要するに、関数名によるCPU使用率のプロファイルを取得するにはこれを実行します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myapp.lua</span></span></code></pre></div><p>バンドルされたプロファイラの明確な目標は、あらゆる可能なオプションを追加したり、特別なプロファイリングニーズに対応したりすることではありません。低レベルプロファイラAPIは以下で説明されています。これらはサードパーティの著者によって高度な機能（例えば、IDEの統合やグラフィカルプロファイラ）を実装するために使用されるかもしれません。</p><div class="info custom-block"><p class="custom-block-title">注意</p><p>サンプリングは、解釈されたコードとJITコンパイルされたコードの両方で機能します。JITコンパイルされたコードの結果は時々驚くべきものになることがあります。LuaJITはLuaコードを大幅に最適化してインライン化します — ソースコードの行とサンプル化されたマシンコードとの間に単純な一対一の対応はありません。</p></div><h4 id="jp-options-output" tabindex="-1"><code>-jp=[options[,output]]</code> <a class="header-anchor" href="#jp-options-output" aria-label="Permalink to &quot;`-jp=[options[,output]]`&quot;">​</a></h4><p>-jpコマンドラインオプションは高レベルプロファイラを起動します。コマンドラインで実行されたアプリケーションが終了すると、プロファイラは停止し、結果をstdoutまたは指定された出力ファイルに書き出します。</p><p>プロファイリングの方法を指定するためのオプション引数について:</p><ul><li>f — スタックダンプ: 関数名、それ以外の場合はモジュール:行。これがデフォルトモードです。</li><li>F — スタックダンプ: 同上ですが、モジュール:名前をダンプします。</li><li>l — スタックダンプ: モジュール:行。</li><li><code>&lt;number&gt;</code> — スタックダンプの深さ（呼び出し先 ← 呼び出し元）。デフォルト: 1。</li><li><code>-&lt;number&gt;</code> — 逆のスタックダンプの深さ（呼び出し元 → 呼び出し先）。</li><li>s — 最初のスタックレベルの後でスタックダンプを分割します。深さ ≥ 2 または深さ ≤ -2 を意味します。</li><li>p — モジュール名の完全なパスを表示します。</li><li>v — VMの状態を表示します。</li><li>z — ゾーンを表示します。</li><li>r — 生のサンプル数を表示します。デフォルト: パーセンテージを表示します。</li><li>a — ソースコードファイルからの抜粋に注釈を付けます。</li><li>A — 完全なソースコードファイルに注釈を付けます。</li><li>G — グラフィカルツール用の生の出力を生成します。</li><li><code>m&lt;number&gt;</code> — 表示される最小サンプルパーセンテージ。デフォルト: 3%。</li><li><code>i&lt;number&gt;</code> — サンプリング間隔（ミリ秒単位）。デフォルト: 10ms。</li></ul><div class="info custom-block"><p class="custom-block-title">注意</p><p>実際のサンプリング精度はOSに依存します。</p></div><p>-jp のデフォルト出力は、アプリケーションで最もCPUを消費する場所のリストです。スタックダンプの深さを（例えば）-jp=2 として増やすと、ホットスポットの主な呼び出し元や呼び出し先を示すのに役立ちます。しかし、サンプルの集約はユニークなスタックダンプごとにフラットです。</p><p>呼び出し元/呼び出し先の二階層ビュー（分割ビュー）を得るには、-jp=s または -jp=-s を使用します。二階層目に表示されるパーセンテージは、一階層目に対する相対値です。</p><p>関数に対して各行でどれだけの時間が費やされているかを見るには、-jp=fl を使用します。</p><p>異なるVMの状態やゾーンでどれだけの時間が費やされているかを見るには、-jp=v または -jp=z を使用します。</p><p>v/z を f/F/l と組み合わせると、二階層ビューが生成されます。例えば -jp=vf や -jp=fv です。これは、VMの状態やゾーンとホットスポットで費やされる時間を示します。これは「どの時間消費関数が解釈されるだけか」や「特定の関数のガベージコレクタのオーバーヘッドは何か」といった質問に答えるために使用できます。</p><p>複数のオプションを組み合わせることができますが、すべての組み合わせが意味をなすわけではありません。上記を参照してください。例えば、-jp=3si4m1 は3つのスタックレベルを4msの間隔でサンプリングし、CPUを消費する関数とその呼び出し元の分割ビューを1%の閾値で表示します。</p><p>-jp=a または -jp=A によって生成されるソースコードの注釈は、常にフラットであり、行レベルで表示されます。明らかに、ソースコードファイルはプロファイラスクリプトによって読み取り可能である必要があります。</p><p>高レベルプロファイラは、Luaコードからも開始および停止することができます:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jit.p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(オプション, 出力)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jit.p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="jit-zone-—-ゾーン" tabindex="-1">jit.zone — ゾーン <a class="header-anchor" href="#jit-zone-—-ゾーン" aria-label="Permalink to &quot;jit.zone — ゾーン&quot;">​</a></h4><p>ゾーンは、アプリケーションの異なる部分についての情報を高レベルプロファイラに提供するために使用できます。例えば、ゲームは「AI」ゾーンや「PHYS」ゾーンなどを利用できます。ゾーンは階層的で、スタックとして組織されています。</p><p>jit.zone モジュールは明示的にロードする必要があります:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jit.zone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>zone(&quot;名前&quot;) は名前付きゾーンをゾーンスタックにプッシュします。</li><li>zone() は現在のゾーンをゾーンスタックからポップし、その名前を返します。</li><li>zone:get() は現在のゾーン名またはnilを返します。</li><li>zone:flush() はゾーンスタックをフラッシュします。</li></ul><p>各ゾーンで費やされた時間を表示するには -jp=z を使用します。ホットスポットに対して相対的に費やされた時間を表示するには、例えば -jp=zf や -jp=fz を使用します。</p><h2 id="低レベルlua-api" tabindex="-1">低レベルLua API <a class="header-anchor" href="#低レベルlua-api" aria-label="Permalink to &quot;低レベルLua API&quot;">​</a></h2><p>jit.profile モジュールは、Luaコードからプロファイラの低レベルAPIにアクセスするために使用されます。このモジュールは明示的にロードする必要があります:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jit.profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>このモジュールは、独自の高レベルプロファイラを実装するために使用できます。典型的なプロファイリング実行は、プロファイラを開始し、プロファイラコールバックでスタックダンプをキャプチャし、それらをハッシュテーブルに追加してサンプル数を集約し、プロファイラを停止し、すべてのキャプチャされたスタックダンプを分析することです。プロファイラコールバック内で他のパラメータをサンプリングすることも可能です。しかし、統計を歪める可能性があるため、コールバック内で過度の時間を費やさないことが重要です。</p><h4 id="profile-start-mode-cb-—-プロファイラの開始" tabindex="-1">profile.start(mode, cb) — プロファイラの開始 <a class="header-anchor" href="#profile-start-mode-cb-—-プロファイラの開始" aria-label="Permalink to &quot;profile.start(mode, cb) — プロファイラの開始&quot;">​</a></h4><p>この関数はプロファイラを開始します。mode 引数はオプションを保持する文字列です:</p><ul><li>f — 関数レベルまでの精度でプロファイリングします。</li><li>l — 行レベルまでの精度でプロファイリングします。</li><li><code>i&lt;number&gt;</code> — サンプリング間隔（ミリ秒単位、デフォルトは10ms）。</li></ul><div class="info custom-block"><p class="custom-block-title">注意</p><p>実際のサンプリング精度はOSに依存します。</p></div><p>cb 引数は3つの引数を持つコールバック関数です: (thread, samples, vmstate)。コールバックは別のコルーチン上で呼び出され、thread 引数はプロファイリングのためのスタックサンプルを保持する状態です。注意: その状態のスタックを変更したり、その上で関数を呼び出したりしないでください。</p><p>samples は、前回のコールバックからの累積サンプル数を示します（通常は1）。</p><p>vmstate はプロファイリングタイマーがトリガーされた時点のVM状態を保持します。これは、プロファイリングコールバックが呼び出された時のVMの状態と一致するかもしれませんし、しないかもしれません。状態は &#39;N&#39; ネイティブ（コンパイル済み）コード、&#39;I&#39; 解釈されたコード、&#39;C&#39; Cコード、&#39;G&#39; ガーベージコレクタ、または &#39;J&#39; JITコンパイラのいずれかです。</p><h4 id="profile-stop-—-プロファイラの停止" tabindex="-1">profile.stop() — プロファイラの停止 <a class="header-anchor" href="#profile-stop-—-プロファイラの停止" aria-label="Permalink to &quot;profile.stop() — プロファイラの停止&quot;">​</a></h4><p>この関数はプロファイラを停止します。</p><h4 id="dump-profile-dumpstack-thread-fmt-depth-—-スタックのダンプ" tabindex="-1"><code>dump = profile.dumpstack([thread,] fmt, depth)</code> — スタックのダンプ <a class="header-anchor" href="#dump-profile-dumpstack-thread-fmt-depth-—-スタックのダンプ" aria-label="Permalink to &quot;`dump = profile.dumpstack([thread,] fmt, depth)` — スタックのダンプ&quot;">​</a></h4><p>この関数は効率的にスタックダンプを取得することを可能にします。それはスレッド（コルーチン）のスタックダンプを文字列で返し、fmt 引数に従ってフォーマットされます:</p><ul><li>p — モジュール名の完全なパスを保持します。それ以外の場合は、ファイル名のみが使用されます。</li><li>f — それが導き出される場合は関数名をダンプします。そうでなければ、モジュール:行を使用します。</li><li>F — 同上ですが、モジュール:名前をダンプします。</li><li>l — モジュール:行をダンプします。</li><li>Z — 最後にダンプされたフレームの次の文字を消去します。</li><li>その他の文字は出力文字列にそのまま追加されます。</li></ul><p>depth 引数は、スレッドの最上位フレームから始まるダンプするフレームの数を指定します。負の数を指定すると、フレームが逆順にダンプされます。</p><p>最初の例では、現在のモジュール名と最大10フレームの行番号を個別の行でリスト表示します。二番目の例では、逆順のすべてのフレーム（最大100）の関数名をセミコロン区切りで表示します:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profile.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dumpstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thread, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profile.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dumpstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thread, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lZ;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="低レベルc-api" tabindex="-1">低レベルC API <a class="header-anchor" href="#低レベルc-api" aria-label="Permalink to &quot;低レベルC API&quot;">​</a></h2><p>プロファイラはCコードから直接制御できます。例えば、IDEによる使用のためです。宣言は &quot;luajit.h&quot; にあります（Lua/C API拡張を参照）。</p><h4 id="luajit-profile-start-l-mode-cb-data-—-プロファイラの開始" tabindex="-1">luaJIT_profile_start(L, mode, cb, data) — プロファイラの開始 <a class="header-anchor" href="#luajit-profile-start-l-mode-cb-data-—-プロファイラの開始" aria-label="Permalink to &quot;luaJIT_profile_start(L, mode, cb, data) — プロファイラの開始&quot;">​</a></h4><p>この関数はプロファイラを開始します。mode 引数の説明については上記を参照してください。</p><p>cb 引数は以下の宣言を持つコールバック関数です:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">luaJIT_profile_callback)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data, lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> samples, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vmstate);</span></span></code></pre></div><p>data はコールバックによって使用されます。L はプロファイリングのためのスタックを持つ状態です。注意: このスタックを変更したり、このスタック上で関数を呼び出したりしないでください — この目的のためには別のコルーチンを使用してください。samples と vmstate の説明については上記を参照してください。</p><h4 id="luajit-profile-stop-l-—-プロファイラの停止" tabindex="-1">luaJIT_profile_stop(L) — プロファイラの停止 <a class="header-anchor" href="#luajit-profile-stop-l-—-プロファイラの停止" aria-label="Permalink to &quot;luaJIT_profile_stop(L) — プロファイラの停止&quot;">​</a></h4><p>この関数はプロファイラを停止します。</p><h4 id="p-luajit-profile-dumpstack-l-fmt-depth-len-—-スタックのダンプ" tabindex="-1">p = luaJIT_profile_dumpstack(L, fmt, depth, len) — スタックのダンプ <a class="header-anchor" href="#p-luajit-profile-dumpstack-l-fmt-depth-len-—-スタックのダンプ" aria-label="Permalink to &quot;p = luaJIT_profile_dumpstack(L, fmt, depth, len) — スタックのダンプ&quot;">​</a></h4><p>この関数は効率的にスタックダンプを取得することを可能にします。fmt と depth の説明については上記を参照してください。</p><p>この関数はプロファイラのプライベート文字列バッファを指す const char * を返します。int *len 引数は出力文字列の長さを返します。バッファは次の呼び出しで上書きされ、プロファイラが停止すると解放されます。内容をすぐに使用するか、後で使用するためにコピーする必要があります。</p>',60)]))}const c=s(p,[["render",e]]);export{u as __pageData,c as default};
