import{_ as e,c as s,a2 as i,o as t}from"./chunks/framework.DzmM640o.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/guide/modules.md","filePath":"resource/duktape/guide/modules.md","lastUpdated":1732350347000}'),l={name:"resource/duktape/guide/modules.md"};function o(n,a,p,r,d,h){return t(),s("div",null,a[0]||(a[0]=[i(`<h2 id="modules" tabindex="-1">モジュール <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;モジュール {#modules}&quot;">​</a></h2><h3 id="commonjsモジュールローディングフレームワーク" tabindex="-1">CommonJSモジュールローディングフレームワーク <a class="header-anchor" href="#commonjsモジュールローディングフレームワーク" aria-label="Permalink to &quot;CommonJSモジュールローディングフレームワーク&quot;">​</a></h3><p>モジュール・ローディングの多様なユースケースに単一のフレームワークで対応するのは難しいので、ビルトインのモジュール・ローディング・フレームワークはありません。Duktapeの配布物には、例えば、いくつかのオプションのモジュール・ローダー・ フレームワークが含まれています。</p><ul><li>module-duktape: CommonJS modules version 1.1.1 をベースにしたDuktape 1.x 互換ローダーで、module.exportsといくつかのDuktape固有のモジュール・オブジェクトのプロパティを追加でサポートしています。内部構造はmodules.rstで説明されており、例としてはモジュールの使い方を参照してください。このローダーはDuktape 1.xではビルトインでしたが、Duktape 2.xではオプショナルな追加機能として移動しました。</li><li>module-node: Node.jsのモジュールに対応したローダーです。Node.js的なモジュールの使い方の例を参照してください。</li></ul><p>また、独自のモジュール・ローダーを一から実装することもできます。上記のローダーは、DuktapeのパブリックAPIを使って実装されており、内部への特別なアクセスはありません。</p><p>モジュール・ローダーは require() 関数を提供し、以下のようにモジュールをロードすることができます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo/bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mod.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>ローダーは、実際のモジュール解決やロードをユーザー提供のフックに抽象化し、様々な環境での組み込みを可能にします。例えば</p><ul><li>ファイルシステムのない環境でも、仮想的な組み込みファイルの集合からモジュールをロードすることで、モジュールロードを利用することができます。</li><li>Babelなどを使って、ロード中にオンザフライのトランスパイルが可能です。</li></ul><h3 id="es2015-モジュール" tabindex="-1">ES2015 モジュール <a class="header-anchor" href="#es2015-モジュール" aria-label="Permalink to &quot;ES2015 モジュール&quot;">​</a></h3><p>ES2015 のインポート/エクスポートと ES2015 モジュールは、現在サポートされていません。</p><h3 id="c-モジュール規約§。" tabindex="-1">C モジュール規約§。 <a class="header-anchor" href="#c-モジュール規約§。" aria-label="Permalink to &quot;C モジュール規約§。&quot;">​</a></h3><p>DLL から C モジュールをロードして初期化するための推奨される (必須ではありませんが) C モジュール規約があります: c-module-convention.rst.</p>`,13)]))}const c=e(l,[["render",o]]);export{k as __pageData,c as default};
