import{_ as e,c as i,a2 as s,o as t}from"./chunks/framework.CKGreiRV.js";const k=JSON.parse('{"title":"next","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/std/next.md","filePath":"reference/built_in/std/next.md","lastUpdated":1730041717000}'),l={name:"reference/built_in/std/next.md"};function n(d,a,h,o,p,c){return t(),i("div",null,a[0]||(a[0]=[s(`<h1 id="next" tabindex="-1">next <a class="header-anchor" href="#next" aria-label="Permalink to &quot;next&quot;">​</a></h1><p>テーブルの次のキーと値を返し、テーブルをトラバース可能にする</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (table [, index])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>テーブル内の全てのフィールドを順にトラバースするために使用されます。第一引数はテーブル <code>table</code>、第二引数はそのテーブル内のキー <code>index</code> です。<code>next</code> は次のキーとその値を返します。</p><ul><li><code>index</code> に <code>nil</code> を指定すると、最初のキーとその値を返します。</li><li>最後のキーで呼び出した場合、または空のテーブルで <code>nil</code> を指定した場合、<code>next</code> は <code>nil</code> を返します。</li></ul><p>第二引数を省略した場合、<code>nil</code> と見なされます。<code>next(t)</code> を使用することで、テーブル <code>t</code> が空かどうかを確認できます。</p><p>キーが列挙される順序は未定義であり、数値キーでも順序は保証されません。（数値順にテーブルをトラバースするには、数値 <code>for</code> ループや <code>ipairs</code> を使用してください。）</p><p>トラバース中にテーブルに存在しない新しいキーに値を割り当てると、<code>next</code> の動作は未定義になります。ただし、既存のキーの値を変更することは可能です。特に、既存のキーの値を <code>nil</code> に設定して削除することができます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t))</span></span></code></pre></div><p>この例では、テーブル<code>t</code>の最初のキーと値が表示されます。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./pairs.html"><code>pairs</code></a></li><li><a href="./ipairs.html"><code>ipairs</code></a></li></ul>`,16)]))}const u=e(l,[["render",n]]);export{k as __pageData,u as default};
