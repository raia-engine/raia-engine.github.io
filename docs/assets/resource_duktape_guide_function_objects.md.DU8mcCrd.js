import{_ as s,c as a,a2 as i,o as n}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/guide/function_objects.md","filePath":"resource/duktape/guide/function_objects.md","lastUpdated":1732350347000}'),e={name:"resource/duktape/guide/function_objects.md"};function p(l,t,d,h,r,k){return n(),a("div",null,t[0]||(t[0]=[i(`<h2 id="function_objects" tabindex="-1">関数オブジェクト <a class="header-anchor" href="#function_objects" aria-label="Permalink to &quot;関数オブジェクト {#function_objects}&quot;">​</a></h2><h3 id="ecmascriptの関数" tabindex="-1">ECMAScriptの関数 <a class="header-anchor" href="#ecmascriptの関数" aria-label="Permalink to &quot;ECMAScriptの関数&quot;">​</a></h3><p>Duktape Function オブジェクトは、標準的な ECMAScript プロパティにいくつかのプロパティを追加します。以下の表は、新しく作成された関数インスタンスに割り当てられたプロパティをまとめたものです（もちろん、プロパティは後から追加したり削除したりすることができます）。</p><table tabindex="0"><thead><tr><th>プロパティ</th><th>互換性</th><th>説明</th></tr></thead><tbody><tr><td>length</td><td>standard</td><td>Function (nominal) 引数の数 (該当する場合)。バインドされた関数を含む全てのFunctionオブジェクトに存在する。</td></tr><tr><td>prototype</td><td>standard</td><td>コンストラクタとして呼び出されたとき、新しいオブジェクトに使用されるプロトタイプです。ほとんどの構築可能なFunctionオブジェクトに存在し、バインドされた関数にはコピーされない。</td></tr><tr><td>caller</td><td>standard</td><td>エラーを投げるアクセサです。ストリクト関数とバインド関数に存在します。バインドされた関数にはコピーされません。(DUK_USE_NONSTD_FUNC_CALLER_PROPERTY が与えられた場合、非厳密関数は非標準の呼び出し側プロパティを取得します)。</td></tr><tr><td>arguments</td><td>standard</td><td>アクセサで、エラーを投げます。厳密な関数とバインドされた関数に存在します。バインドされた関数にはコピーされません。</td></tr><tr><td>name</td><td>Duktape</td><td>関数名、下記参照。バウンド関数名は、このプロパティに基づいて、&quot;bound &quot; という接頭辞が付きます（ES2015の標準的な動作です）。</td></tr><tr><td>fileName</td><td>Duktape</td><td>関数が宣言されたファイル名またはコンテキスト（エラートレースバックと同じ名前）。ターゲット関数からバインド関数にコピーされます。</td></tr><tr><td>callee</td><td>n/a</td><td>デフォルトでは割り当てられない（&quot;caller&quot; プロパティとの関係を明確にするために、ここに記載）。</td></tr></tbody></table><p>name プロパティは、すべての関数に割り当てられ、トレースバックで使用される名前でもあります。以下のように割り当てられる。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> funcDecl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Function declaration: &#39;name&#39; is declaration name, here &#39;funcDecl&#39;. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> namedFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Named function expression: &#39;name&#39; is the name used in expression,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * here &#39;namedFunc&#39; (not &#39;foo&#39;).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Anonymous function expression: &#39;name&#39; is the empty string. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>ECMAScript のいくつかの組み込み関数は、ユーザーが作成した関数とは異なるプロパティを持ちます。</p></blockquote><h3 id="duktape-c関数" tabindex="-1">Duktape/C関数 <a class="header-anchor" href="#duktape-c関数" aria-label="Permalink to &quot;Duktape/C関数&quot;">​</a></h3><p>ユーザーが作成したDuktape/C関数（duk_push_c_function()）は、Functionオブジェクトのメモリフットプリントを削減するために、異なるプロパティのセットを持っています。</p><table tabindex="0"><thead><tr><th>プロパティ</th><th>互換性</th><th>説明</th></tr></thead><tbody><tr><td>length</td><td>standard</td><td>Functionの引数カウント、duk_push_c_function()への引数にマッチ、 varargsの場合は0。書き込み不可、設定不可。</td></tr></tbody></table><p>特に、標準のprototype、caller、argumentsプロパティがデフォルトで欠落していることに注意。これは厳密にはコンプライアンスではありませんが、関数のフットプリントを小さくするためには重要です。もちろん、ユーザがこれらのプロパティを設定することは可能ですが、設定する必要はありません。</p><p>また、（非標準の）name プロパティもありません。手動で設定すると、トレースバックで関数がどのように表示されるかに影響するため、便利です。</p><h3 id="軽量duktape-c関数" tabindex="-1">軽量Duktape/C関数 <a class="header-anchor" href="#軽量duktape-c関数" aria-label="Permalink to &quot;軽量Duktape/C関数&quot;">​</a></h3><p>軽量 Duktape/C 関数 (lightfuncs) は、ECMAScript 環境でネイティブ関数を表現するための非常にメモリ効率の良い方法です。Lightfuncs はプロパティ・テーブルを持たないので、プロパティを保持することはできま せん。しかし、Function.prototype を継承し、以下の仮想プロパティ（設定不可、書き込み不可）を持っています。</p><table tabindex="0"><thead><tr><th>Property name</th><th>Compatibility</th><th>Description</th></tr></thead><tbody><tr><td>length</td><td>standard</td><td>Function (nominal) argument count.</td></tr><tr><td>name</td><td>Duktape</td><td>Function name: &quot;light_&lt;PTR&gt;_&lt;FLAGS&gt;&quot;.</td></tr></tbody></table><p>nameプロパティは自動生成された仮想関数名です。&lt;PTR&gt;はDuktape/C関数ポインタのプラットフォーム依存ダンプ、&lt;FLAGS&gt;は16ビット内部制御フィールドの生の16進ダンプです（フォーマットはDuktape内部）。特定のフォーマットに依存してはいけません。例えば</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myLightFunc.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">light_0805b94c_0511</span></span></code></pre></div><p>通常の関数と同様に、lightfunc は実装に依存した文字列に強制されます。特定のフォーマットに依存してはいけません。例えば</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myLightFunc);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> light_0805b94c_0511</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;light&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳しくは、こちらをご覧ください。</p><ul><li>lightfuncsの使い方</li><li>アルゴリズムを入力する</li><li>lightweight-functions.rst</li></ul>`,21)]))}const u=s(e,[["render",p]]);export{o as __pageData,u as default};
