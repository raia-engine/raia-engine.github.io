import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.CuCbyi2k.js";const c=JSON.parse('{"title":"Cosmopolitan","description":"","frontmatter":{},"headers":[],"relativePath":"resource/cosmopolitan/index.md","filePath":"resource/cosmopolitan/index.md","lastUpdated":1732376957000}'),n={name:"resource/cosmopolitan/index.md"};function l(p,s,h,o,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="cosmopolitan" tabindex="-1">Cosmopolitan <a class="header-anchor" href="#cosmopolitan" aria-label="Permalink to &quot;Cosmopolitan&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このページおよび同じカテゴリーにあるすべてのページは<a href="https://github.com/jart/cosmopolitan" target="_blank" rel="noreferrer">CosmopolitanのGithubリポジトリ</a>のドキュメント等を翻訳したものです。</p></div><p><a href="https://justine.lol/cosmopolitan/index.html" target="_blank" rel="noreferrer">Cosmopolitan Libc</a> は、インタプリタや仮想マシンを必要としないことを除けば、C を Java のようなビルドワンスでどこでも実行できる言語にする。その代わりに、Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS上でネイティブに動作するPOSIX公認のポリグロットフォーマットを出力するように、ストックのGCCとClangを再構成し、可能な限り最高のパフォーマンスと想像できる限り小さなフットプリントで動作します。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>このプロジェクトの紹介は、<a href="https://justine.lol/ape.html" target="_blank" rel="noreferrer">actually portable executable</a> ブログ記事と、<a href="https://justine.lol/cosmopolitan/index.html" target="_blank" rel="noreferrer">cosmopolitan libc</a> ウェブサイトをお読みください。<a href="https://justine.lol/cosmopolitan/documentation.html" target="_blank" rel="noreferrer">APIドキュメント</a>もあります。</p><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p><a href="https://cosmo.zip/pub/cosmocc/" target="_blank" rel="noreferrer">https://cosmo.zip/pub/cosmocc/</a> から <code>cosmocc</code> コンパイラのリリースを入手することから始めることができる。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmocc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmocc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://cosmo.zip/pub/cosmocc/cosmocc.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cosmocc.zip</span></span></code></pre></div><p>以下はそのプログラム例である：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hello.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次のようにまとめることができる：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cosmocc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span></span></code></pre></div><p>Cosmopolitan Libcランタイムは、デフォルトでいくつかのヘビー級のトラブルシューティング機能をリンクしている。ここでは、システムコールのログを取る方法を説明します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --strace</span></span></code></pre></div><p>ここでは、関数呼び出しのログをより詳細に取得する方法を紹介する：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ftrace</span></span></code></pre></div><p>Cosmopolitanのツールチェーンを使って、オートツールを使う従来のオープンソースプロジェクトをビルドすることができる。この戦略は通常うまくいく：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x86_64-unknown-cosmo-cc</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CXX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x86_64-unknown-cosmo-c++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=/opt/cosmos/x86_64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="cosmopolitan-ソースビルド" tabindex="-1">Cosmopolitan ソースビルド <a class="header-anchor" href="#cosmopolitan-ソースビルド" aria-label="Permalink to &quot;Cosmopolitan ソースビルド&quot;">​</a></h2><p>Cosmopolitanは私たちがサポートしているどのプラットフォームでもソースからコンパイルすることができます。Makefileは自動的にcosmoccをダウンロードします。</p><p>システム全体のAPEローダーをインストールすることをお勧めします。このコマンドは<code>ape</code>コマンドをシステムフォルダにコピーし、Linuxのbinfmt_miscに登録するために、<code>sudo</code>アクセスが必要です。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ape/apeinstall.sh</span></span></code></pre></div><p>GNU Makeの最新バージョンでmonoレポをビルドできるようになりました。cosmoccツールチェーンは互換性が保証されており、さらにビルドシステムのサンドボックス化のための拡張機能も含まれています。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bootstrap/make.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">o//examples/hello.com</span></span></code></pre></div><p>Cosmopolitanのリポジトリは非常に大きいので、ある特定のものだけをビルドしたいかもしれません。比較的早くコンパイルできるターゲットの例として、LIBCのコアパッケージにのみ依存する単純なPOSIXテストを紹介します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> o//libc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> o//test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bootstrap/make.com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> o//test/posix/signal_test.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">o//test/posix/signal_test.com</span></span></code></pre></div><p>時には、個々のターゲットをリストアップすることなく、ターゲットのサブセットをビルドしたいことがあります。例えば、<code>TEST_POSIX</code> パッケージのすべてのユニットテストをビルドして実行したい場合は、次のようにします：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bootstrap/make.com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> o//test/posix</span></span></code></pre></div><p>Cosmopolitanには様々なビルドモードがあります。例えば、本当に小さなバイナリ（12kbほどのサイズ）が欲しいなら、こう言うだろう：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bootstrap/make.com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> m=tiny</span></span></code></pre></div><p>さらに、他のオペレーティングシステムの肥大化をカットし、CosmopolitanをMusl Libcにもっと近づけることができる。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bootstrap/make.com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> m=tinylinux</span></span></code></pre></div><p>詳細は<a href="./build/config.mk.html">//build/config.mk</a>を参照のこと。</p><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>システムコールのログを標準エラー出力する：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cosmocc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --strace</span></span></code></pre></div><p>関数呼び出しのログを標準エラー出力する：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cosmocc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ftrace</span></span></code></pre></div><p>straceもftraceも、解読不可能なkprintf()機能を使用しており、環境変数を設定することでファイルに送信することができる。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KPRINTF_LOG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --strace</span></span></code></pre></div><h2 id="gdb" tabindex="-1">GDB <a class="header-anchor" href="#gdb" aria-label="Permalink to &quot;GDB&quot;">​</a></h2><p>以下は推奨される <code>~/.gdbinit</code> の設定です：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set host-charset UTF-8</span></span>
<span class="line"><span>set target-charset UTF-8</span></span>
<span class="line"><span>set target-wide-charset UTF-8</span></span>
<span class="line"><span>set osabi none</span></span>
<span class="line"><span>set complaints 0</span></span>
<span class="line"><span>set confirm off</span></span>
<span class="line"><span>set history save on</span></span>
<span class="line"><span>set history filename ~/.gdb_history</span></span>
<span class="line"><span>define asm</span></span>
<span class="line"><span>  layout asm</span></span>
<span class="line"><span>  layout reg</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>define src</span></span>
<span class="line"><span>  layout src</span></span>
<span class="line"><span>  layout reg</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>src</span></span></code></pre></div><p>通常はgdbの下で<code>.com.dbg</code>ファイルを実行する。<code>.com</code>ファイル自体をデバッグする必要がある場合は、デバッグ・シンボルを以下のように個別にロードすることができる。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;add-symbol-file foo.com.dbg 0x401000&#39;</span></span></code></pre></div><h2 id="プラットフォームノート" tabindex="-1">プラットフォームノート <a class="header-anchor" href="#プラットフォームノート" aria-label="Permalink to &quot;プラットフォームノート&quot;">​</a></h2><h3 id="シェル" tabindex="-1">シェル <a class="header-anchor" href="#シェル" aria-label="Permalink to &quot;シェル&quot;">​</a></h3><p>zsh を使っていて APE プログラムの実行に問題がある場合は、<code>sh -c ./prog</code> を試すか、zsh 5.9+ にアップグレードしてください（2年前にパッチを当てたので）。Python の <code>subprocess</code> や古いバージョンの fish などについても同様です。</p><h3 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h3><p>Linuxシステムの中には、WINEでMZ実行ファイルを起動するように設定されているものがある。他のディストロでは、APEプログラムが &quot;run-detectors: unable to find an interpreter &quot;と表示されるように、純正インストールを設定しています。例えば</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jart@ubuntu:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://cosmo.zip/pub/cosmos/bin/dash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jart@ubuntu:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jart@ubuntu:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./dash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run-detectors:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> interpreter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./dash</span></span></code></pre></div><p><code>binfmt_misc</code>でAPEを登録することで修正できる：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ape</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://cosmo.zip/pub/cosmos/bin/ape-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.elf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ape</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE:M::MZqFpD::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;:APE-jart:M::jartsr::/usr/bin/ape:&#39; &gt;/proc/sys/fs/binfmt_misc/register&quot;</span></span></code></pre></div><p>これで大丈夫だ。APEは動作するだけでなく、実行ファイルの起動も400μ秒速くなる。それでもうまくいかない場合は、次のようにして<code>binfmt_misc</code>を無効にすることもできる：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo -1 &gt; /proc/sys/fs/binfmt_misc/cli&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # remove Ubuntu&#39;s MZ interpreter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo -1 &gt; /proc/sys/fs/binfmt_misc/status&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # remove ALL binfmt_misc entries</span></span></code></pre></div><h3 id="wsl" tabindex="-1">WSL <a class="header-anchor" href="#wsl" aria-label="Permalink to &quot;WSL&quot;">​</a></h3><p>通常、WSL環境でAPEを使用するのは安全ではありません。なぜなら、APEはWSL環境内でMZ実行可能ファイルをWIN32バイナリとして実行しようとするからです。WSLでCosmopolitanソフトを安全に使うには、これを実行してください：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo -1 &gt; /proc/sys/fs/binfmt_misc/WSLInterop&quot;</span></span></code></pre></div><h2 id="discordチャットルーム" tabindex="-1">Discordチャットルーム <a class="header-anchor" href="#discordチャットルーム" aria-label="Permalink to &quot;Discordチャットルーム&quot;">​</a></h2><p>Cosmopolitan開発チームはRedbean Discordサーバーで共同作業を行っています。ぜひご参加ください！ <a href="https://discord.gg/FwAVVu7eJ4" target="_blank" rel="noreferrer">https://discord.gg/FwAVVu7eJ4</a></p><h2 id="support-vector" tabindex="-1">Support Vector <a class="header-anchor" href="#support-vector" aria-label="Permalink to &quot;Support Vector&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Platform</th><th style="text-align:right;">Min Version</th><th style="text-align:right;">Circa</th></tr></thead><tbody><tr><td style="text-align:left;">AMD</td><td style="text-align:right;">K8 Venus</td><td style="text-align:right;">2005</td></tr><tr><td style="text-align:left;">Intel</td><td style="text-align:right;">Core</td><td style="text-align:right;">2006</td></tr><tr><td style="text-align:left;">Linux</td><td style="text-align:right;">2.6.18</td><td style="text-align:right;">2007</td></tr><tr><td style="text-align:left;">Windows</td><td style="text-align:right;">8 [1]</td><td style="text-align:right;">2012</td></tr><tr><td style="text-align:left;">Mac OS X</td><td style="text-align:right;">15.6</td><td style="text-align:right;">2018</td></tr><tr><td style="text-align:left;">OpenBSD</td><td style="text-align:right;">7</td><td style="text-align:right;">2021</td></tr><tr><td style="text-align:left;">FreeBSD</td><td style="text-align:right;">13</td><td style="text-align:right;">2020</td></tr><tr><td style="text-align:left;">NetBSD</td><td style="text-align:right;">9.2</td><td style="text-align:right;">2021</td></tr></tbody></table><p>Windows VistaとWindows 7で動作するCosmopolitanのコミュニティサポートバージョンについては、私たちの<a href="https://github.com/jart/cosmopolitan/tree/vista" target="_blank" rel="noreferrer">vistaブランチ</a>をご覧ください。</p><h2 id="スペシャルサンクス" tabindex="-1">スペシャルサンクス <a class="header-anchor" href="#スペシャルサンクス" aria-label="Permalink to &quot;スペシャルサンクス&quot;">​</a></h2><p>このプロジェクトの資金は、<a href="https://github.com/sponsors/jart" target="_blank" rel="noreferrer">GitHub Sponsors</a>と<a href="https://www.patreon.com/jart" target="_blank" rel="noreferrer">Patreon</a>を利用したクラウドソーシングで調達しています。皆様のご支援がこのプロジェクトを可能にしています。ありがとうございます！また、以下のグループと個人の方々にも特別な感謝の意を表したいと思います。:</p><ul><li><a href="https://github.com/jdrumgoole" target="_blank" rel="noreferrer">Joe Drumgoole</a></li><li><a href="https://github.com/robfig" target="_blank" rel="noreferrer">Rob Figueiredo</a></li><li><a href="https://wasmer.io/" target="_blank" rel="noreferrer">Wasmer</a></li></ul><p>私たちの活動を最高レベルで公的に後援してくれたことに対して。</p>`,67)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
