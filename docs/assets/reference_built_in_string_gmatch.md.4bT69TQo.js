import{_ as i,c as s,a2 as t,o as e}from"./chunks/framework.DPuwY6B9.js";const k=JSON.parse('{"title":"string.gmatch","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/string/gmatch.md","filePath":"reference/built_in/string/gmatch.md","lastUpdated":null}'),n={name:"reference/built_in/string/gmatch.md"};function l(h,a,r,p,o,d){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="string-gmatch" tabindex="-1">string.gmatch <a class="header-anchor" href="#string-gmatch" aria-label="Permalink to &quot;string.gmatch&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string.gmatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s, pattern)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>文字列<code>s</code>上でパターン<code>pattern</code>に一致する部分を順に返すイテレータ関数を生成します。キャプチャを指定していない場合は、マッチ全体が返されます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Lua is great&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string.gmatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%a+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(word)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- &quot;Lua&quot;, &quot;is&quot;, &quot;great&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>この例では、文字列内のすべての単語を取得して出力します。</p><h2 id="luajit独自の拡張" tabindex="-1">LuaJIT独自の拡張 <a class="header-anchor" href="#luajit独自の拡張" aria-label="Permalink to &quot;LuaJIT独自の拡張&quot;">​</a></h2><ul><li>文字列マッチングパターン<code>%g</code>が追加された。(Lua5.2から)</li></ul><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./match.html"><code>string.match</code></a></li></ul>`,13)]))}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
