import{_ as a,c as i,a2 as l,o as e}from"./chunks/framework.CuCbyi2k.js";const o=JSON.parse('{"title":"lua_pcall","description":"","frontmatter":{},"headers":[],"relativePath":"reference/lua_c/lua_pcall.md","filePath":"reference/lua_c/lua_pcall.md","lastUpdated":1731828945000}'),t={name:"reference/lua_c/lua_pcall.md"};function h(n,s,p,k,d,r){return e(),i("div",null,s[0]||(s[0]=[l(`<h1 id="lua-pcall" tabindex="-1">lua_pcall <a class="header-anchor" href="#lua-pcall" aria-label="Permalink to &quot;lua_pcall&quot;">​</a></h1><p>保護モードで関数を呼び出します。エラーが発生した場合、エラーコードを返します。</p><p><code>[-(nargs + 1), +(nresults|1), -]</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> errfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>保護モードで関数を呼び出します。</p><p><code>nargs</code>と<code>nresults</code>は<code>lua_call</code>と同じ意味を持ちます。呼び出し中にエラーがなければ、<code>lua_pcall</code>は<code>lua_call</code>と全く同じように振る舞います。しかし、エラーが発生した場合、<code>lua_pcall</code>はそれをキャッチし、スタックに単一の値（エラーメッセージ）をプッシュし、エラーコードを返します。<code>lua_call</code>と同様に、<code>lua_pcall</code>は常に関数とその引数をスタックから削除します。</p><p><code>errfunc</code>が0の場合、スタックに返されるエラーメッセージは元のエラーメッセージと完全に同じです。それ以外の場合、<code>errfunc</code>はエラーハンドラ関数のスタックインデックスです。（現在の実装では、このインデックスは擬似インデックスにはなり得ません。）ランタイムエラーの場合、この関数はエラーメッセージと共に呼び出され、その返り値が<code>lua_pcall</code>によってスタックに返されるメッセージになります。</p><p>通常、エラーハンドラ関数はエラーメッセージにさらなるデバッグ情報（スタックトレースなど）を追加するために使用されます。このような情報は<code>lua_pcall</code>の戻り後には収集できません。その時点ではすでにスタックが巻き戻されています。</p><p><code>lua_pcall</code>関数は成功の場合に0を返します。または以下のエラーコードのいずれか（lua.hで定義）を返します：</p><ul><li><code>LUA_ERRRUN</code>: ランタイムエラー。</li><li><code>LUA_ERRMEM</code>: メモリ割り当てエラー。この種のエラーに対しては、Luaはエラーハンドラ関数を呼び出しません。</li><li><code>LUA_ERRERR</code>: エラーハンドラ関数の実行中にエラーが発生しました。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stderr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;エラー: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_tostring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lua_pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このコードは、関数を保護モードで呼び出し、エラーが発生した場合にエラーメッセージを出力します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>lua_call</li><li>lua_cpcall</li></ul>`,18)]))}const E=a(t,[["render",h]]);export{o as __pageData,E as default};
