import{_ as e,c as i,a2 as l,o as s}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"module","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/package/module.md","filePath":"reference/built_in/package/module.md","lastUpdated":1729914702000}'),t={name:"reference/built_in/package/module.md"};function d(o,a,n,h,r,c){return s(),i("div",null,a[0]||(a[0]=[l(`<h1 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h1><p>モジュールを定義する</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (name [, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p>新しいモジュールを作成・定義します。<code>package.loaded[name]</code> にテーブルが既に存在する場合、そのテーブルをモジュールとして使用します。存在しない場合は、指定された名前のグローバルテーブルを作成または再利用し、それをモジュールとして設定します。</p><p>モジュール名がドットで区切られた複合名（例：<code>&quot;my.module.name&quot;</code>）の場合、各部分に対してテーブルを作成し、ネストした構造を構築します。オプションの引数として、モジュールに適用する関数（例：<code>package.seeall</code>）を指定できます。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li><code>module</code> 関数は Lua 5.1 で導入されましたが、Lua 5.2 以降では廃止されました。LuaJIT は Lua 5.1 と互換性があるため、<code>module</code> 関数を使用できますが、新しいコードでは推奨されていません。</li><li>モジュールを定義する際には、<code>module</code> 関数の代わりに、モジュールの内容をテーブルとして定義し、<code>return</code> 文で返す形式が一般的です。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mymodule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_NAME)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- mymodule</span></span></code></pre></div><p>この例では、<code>mymodule</code>という名前のモジュールを作成し、モジュールの名前を表示します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>Lua 5.1</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li><a href="./require.html"><code>require</code></a></li><li><a href="./loaded.html"><code>package.loaded</code></a></li></ul>`,15)]))}const k=e(t,[["render",d]]);export{u as __pageData,k as default};
