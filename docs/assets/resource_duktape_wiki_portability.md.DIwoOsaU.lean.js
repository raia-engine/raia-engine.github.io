import{_ as d,c as a,a2 as e,o as r}from"./chunks/framework.CKGreiRV.js";const C=JSON.parse('{"title":"ポータビリティ","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/wiki/portability.md","filePath":"resource/duktape/wiki/portability.md","lastUpdated":1732350347000}'),i={name:"resource/duktape/wiki/portability.md"};function n(l,t,s,o,p,u){return r(),a("div",null,t[0]||(t[0]=[e(`<h1 id="ポータビリティ" tabindex="-1">ポータビリティ <a class="header-anchor" href="#ポータビリティ" aria-label="Permalink to &quot;ポータビリティ&quot;">​</a></h1><h2 id="プラットフォームとコンパイラ" tabindex="-1">プラットフォームとコンパイラ <a class="header-anchor" href="#プラットフォームとコンパイラ" aria-label="Permalink to &quot;プラットフォームとコンパイラ&quot;">​</a></h2><p>以下の表は、Duktapeが動作することが確認されているプラットフォームとコンパイラをまとめたもので、必要に応じて移植性に関する注意事項も記載しています。これは、サポート/非サポート・プラットフォームの網羅的なリストではなく、むしろ、動作することが知られているもの（および動作しないもの）のリストです。プラットフォームやコンパイラー固有の問題については、表の下の方で詳しく説明しています。</p><table tabindex="0"><thead><tr><th>Operating system</th><th>Compiler</th><th>Processor</th><th>Notes</th></tr></thead><tbody><tr><td>Linux</td><td>GCC</td><td>x86</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>GCC</td><td>x64</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>GCC</td><td>x32</td><td>既知の問題はありません。-mx32を使用してください。</td></tr><tr><td>Linux</td><td>GCC</td><td>ARM</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>GCC</td><td>MIPS</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>GCC</td><td>SuperH</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>GCC</td><td>SPARC</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>Clang</td><td>x86</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>Clang</td><td>x64</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>Clang</td><td>ARM</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>Clang</td><td>MIPS</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>TCC</td><td>x64</td><td>符号の問題はゼロ（後述）。</td></tr><tr><td>FreeBSD</td><td>Clang</td><td>x86</td><td>64-bit FreeBSD上のclang 3.3、-m32、packed duk_tvalでのエイリアシング問題(下記参照)。</td></tr><tr><td>FreeBSD</td><td>Clang</td><td>x64</td><td>既知の問題はありません。</td></tr><tr><td>NetBSD</td><td>GCC</td><td>x86</td><td>既知の問題はありません(NetBSD 6.0)。NetBSD では pow() 関数の非互換性がありますが、回避策があります。</td></tr><tr><td>OpenBSD</td><td>GCC</td><td>x86</td><td>既知の問題はありません(OpenBSD 5.4)。</td></tr><tr><td>Windows</td><td>MinGW</td><td>x86</td><td>-std=c99 を推奨、ISO 8601 日付形式のみサポート (プラットフォーム固有の形式はなし)。</td></tr><tr><td>Windows</td><td>MinGW-w64</td><td>x64</td><td>-m64、-std=c99 を推奨、ISO 8601 日付形式のみをサポート (プラットフォーム固有の形式はなし)。</td></tr><tr><td>Windows</td><td>MSVC<br>(Visual Studio Express 2010)</td><td>x86</td><td>ISO 8601 日付形式のみサポート (プラットフォーム固有の形式はありません)。Wp64が有効な場合、無害な警告が表示されます。</td></tr><tr><td>Windows</td><td>MSVC<br>(Visual Studio Express 2013 for Windows Desktop)</td><td>x64</td><td>ISO 8601の日付フォーマットのみサポート（プラットフォーム固有のフォーマットはありません）。</td></tr><tr><td>Windows</td><td>MSVC<br>(Visual Studio 2010)</td><td>x64</td><td>ISO 8601 日付形式のみサポート (プラットフォーム固有の形式はありません)。Duktape 0.10.0 では、DUK_OPT_NO_PACKED_TVAL を明示的に指定する必要があるかもしれません。</td></tr><tr><td>Android</td><td>GCC<br>(Android NDK)</td><td>ARM</td><td>少なくともNDKのいくつかのバージョンでは、-std=c99が必要です。</td></tr><tr><td>OSX</td><td>Clang</td><td>x64</td><td>OSX 10.9.2、XCodeでテスト済み。</td></tr><tr><td>Darwin</td><td>GCC</td><td>x86</td><td>既知の問題はありません。</td></tr><tr><td>QNX</td><td>GCC</td><td>x86</td><td>-std=c99 を推奨します。x86 以外のアーキテクチャでも動作するはずです。</td></tr><tr><td>AmigaOS</td><td>VBCC</td><td>M68K</td><td>プリプロセッサの定義が必要で、日時の分解能は秒単位に制限されます。</td></tr><tr><td>TOS<br>(Atari ST)</td><td>VBCC</td><td>M68K</td><td>プリプロセッサの定義が必要で、日時の分解能は秒単位に制限されます。</td></tr><tr><td>RISC OS</td><td>GCC</td><td>ARM</td><td>既知の問題はありません。</td></tr><tr><td>Emscripten</td><td>Emscripten</td><td>n/a</td><td>追加オプションが必要です。少なくともV8/NodeJsは動作します。</td></tr><tr><td>Adobe Flash Runtime</td><td>CrossBridge<br>(GCC-4.2 with Flash backend)</td><td>n/a</td><td>-std=c99を推奨、32ビットJavaを実行する場合は、-jvmopt=-Xmx1Gが必要な場合があります。64ビットWindows 7上のCrossBridge 1.0.1でテスト済み。</td></tr><tr><td>pNaCl</td><td>clang</td><td>n/a</td><td>既知の問題はありません。</td></tr><tr><td>Linux</td><td>BCC<br>(Bruce&#39;s C compiler)</td><td>i386</td><td>-3と-ansiが必要。コンパイルはできるがリンクはしない。移植性のテストに便利な古いコンパイラです(例えば16ビットint型)。</td></tr></tbody></table><h3 id="clang" tabindex="-1">Clang <a class="header-anchor" href="#clang" aria-label="Permalink to &quot;Clang&quot;">​</a></h3><p>FreeBSD 上の Clang 3.3 では、-m32 を使用したときに Duktape が pack された duk_tval 値表現型を使用した場合に、(少なくとも) エイリアスの問題が発生します。この問題は、DUK_OPT_NO_PACKED_TVAL を定義して、packed value type を無効にすることにより回避できます。この問題は全てのclangのバージョンで発生するわけではありません。Duktapeのセルフテストはこの問題をカバーしています（コンパイル時にDUK_OPT_SELF_TESTSを定義してください。内部テストファイルclang_aliasing.cを参照してください。</p><h3 id="msvc" tabindex="-1">MSVC <a class="header-anchor" href="#msvc" aria-label="Permalink to &quot;MSVC&quot;">​</a></h3><p>Wp64 (64ビット移植性の問題の検出) オプションは、32ビットコードをコンパイルする際に無害なコンパイル警告を発生させます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>duk_api.c(2419): warning C4311: &#39;type cast&#39; : pointer truncation from &#39;duk_hstring *&#39; to &#39;duk_uint32_t&#39;</span></span>
<span class="line"><span>この警告は、Duktapeが32ビット・ポインタを内部値表現で使われる32ビット整数にキャストしたために発生します。これらのキャストは64ビット環境では正しくなく、これは/Wp64オプションで報告されます。Duktapeが64ビット環境でコンパイルされた場合、これらのキャストを全く使用しない別の値表現が使用されるので、警告は適切ではありません。</span></span></code></pre></div><p>Wallを使ったコンパイルは、今のところクリーンではありません。</p><h3 id="tcc" tabindex="-1">TCC <a class="header-anchor" href="#tcc" aria-label="Permalink to &quot;TCC&quot;">​</a></h3><p>TCC にはゼロ記号の処理に問題があります。Duktape はほとんど動作しますが、ゼロ記号は正しく処理されません。これは ECMAScript に準拠しない結果となります。例えば、1/-0 は Infinity と評価され、-Infinity と評価されるはずのものではありません。</p><h3 id="vbcc-amigaos-tos" tabindex="-1">VBCC (AmigaOS / TOS) <a class="header-anchor" href="#vbcc-amigaos-tos" aria-label="Permalink to &quot;VBCC (AmigaOS / TOS)&quot;">​</a></h3><p>VBCCは、OSやプロセッサの定義を提供しないようです。M68K AmigaOS または TOS 用にコンパイルするには、以下が必要です。</p><ul><li>手動で__MC68K__を定義する。</li><li>AMIGAか__TOS__を手動で定義する。</li></ul><p>AmigaOSまたはTOSでVBCCを使用する場合、日付の分解能は完全な秒に制限されます。</p><h3 id="emscripten" tabindex="-1">Emscripten <a class="header-anchor" href="#emscripten" aria-label="Permalink to &quot;Emscripten&quot;">​</a></h3><p>emccオプションのセットが必要です。V8で実行した場合、以下が動作するようです。</p><ul><li>DEMSCRIPTEN: DuktapeがEmscriptenを検出するために必要な必須オプションです。このオプションがないと、DuktapeはEmscriptenが許可しないアラインド・アクセスを使用する可能性があります。この結果、奇妙で一貫性のない動作になり、Duktapeのセルフ・テストでは必ずしも検出されません。 -std=c99</li><li>-O2 -メモリ・イット・ファイル 0</li></ul><p>Dukweb は Emscripten を使ってコンパイルされているので、Duktape の git リポジトリをチェックして、Dukweb がどのようにコンパイルされているかを確認することもできます。</p><h2 id="制限事項" tabindex="-1">制限事項 <a class="header-anchor" href="#制限事項" aria-label="Permalink to &quot;制限事項&quot;">​</a></h2><ul><li>ポインターの小なり大なりの比較は、ポインターが符号なしであるかのように動作することが期待されます。これはいくつかのプラットフォームでは正しくありません。</li><li>2の補数符号付き演算が必要です。ANSI Cでは技術的に保証されていませんが、この前提が成立しない環境は非常に少ないです。</li><li>float 型と double 型は IEEE の動作を仮定しています。これは、例えば gcc -ffast-math (<a href="https://gcc.gnu.org/wiki/FloatingPointMath" target="_blank" rel="noreferrer">https://gcc.gnu.org/wiki/FloatingPointMath</a> を参照) がサポートされていないことを意味します。Duktapeは、IEEEのfloatとdoubleのメモリ表現も直接扱えます。</li><li>Duktape は現在、EBCDIC プラットフォームなどでは動作しません。</li></ul><h2 id="トラブルシューティング" tabindex="-1">トラブルシューティング <a class="header-anchor" href="#トラブルシューティング" aria-label="Permalink to &quot;トラブルシューティング&quot;">​</a></h2><ul><li>可能であれば C モードでコンパイルしてください。C++ コンパイルは現在動作していますが、C コンパイルほどポータブルではありません。</li><li>可能であれば C99 モードを有効にしてください (-std=c99 など)。C99を使わない場合の型検出は、C99を使う場合よりも信頼性が低くなります。Duktape はまた、C99/POSIX の (v)snprintf() に依存しています。MSVC にはフィルインがありますが、他の非C99プラットフォームでは、 DUK_SNPRINTF() と DUK_VSNPRINTF() をあなたの duk_config.h ヘッダーで手動定義しなければならない場合があります。</li><li>Duktape をコンパイルしても正しく動作しないようであれば、 DUK_OPT_SELF_TESTS で自己テストを有効にしてください。セルフ・テストは、コンパイル時に捕捉できないコンパイラーやプラットフォームの問題を検出します。</li><li>もし、ターゲット・プラットフォームが特定のアライメント要求を持っていて、Duktapeがプラットフォームを正しく自動検出しない場合、DUK_OPT_FORCE_ALIGN=4かDUK_OPT_FORCE_ALIGN=8を指定する必要があるかもしれません。アラインメント番号は、IEEEダブルや64ビット整数値に対して必要なアラインメントと一致させる必要があります。</li><li>エンディアンの検出でコンパイルに失敗する場合、Duktapeはあなたのプラットフォーム特有のエンディアン・ヘッダを（まだ）サポートしていない可能性があります。そのようなヘッダは残念ながら標準化されていませんので、エンディアンの検出はカスタム・プラットフォームにおける一般的な（そして通常は些細な）移植性の問題です。DUK_OPT_FORCE_BYTEORDER を使用して、回避策としてエンディアンを強制的に検出します。もし、あなたのプラットフォームでエンディアンの検出がどのように機能すべきかを知っているなら、その問題についてメールを送るか、パッチを提供してください。</li><li>新しい/エキゾチックなプラットフォームにおけるもう1つの典型的な移植性の問題は、日付と時間を扱うためにいくつかのプラットフォーム固有の関数を必要とする組み込みの日付です。多くの場合、既存のDate関数で十分ですが、そうでない場合は、Duktapeの変更を必要としない外部の「Dateプロバイダ」を実装することができます（参考： datetime.rst.</li><li>いくつかのエキゾチックなプラットフォームでは、doubleからinteger、integerからdoubleへのキャストが壊れており、例えば <a href="https://github.com/svaarala/duktape/issues/336" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/issues/336</a> のような現象が発生します。Duktapeの内部では、いくつかの場所でキャストが使用されているため、現時点では簡単な回避策はありません。将来的には、このようなキャストにマクロを使用することで、プラットフォームに依存した方法でキャストを修正し、duk_config.hを編集して動作するキャスト・マクロを提供できるようにすることが可能です。</li><li>Duktape 1.3以降、移植性に関連するほとんど全てのincludeとdefineは、外部のduk_config.hヘッダにあり、異国のプラットフォームに合うように自由に変更することができます。</li></ul>`,24)]))}const h=d(i,[["render",n]]);export{C as __pageData,h as default};
