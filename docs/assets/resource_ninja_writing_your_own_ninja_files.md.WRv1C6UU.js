import{_ as n,c as s,a2 as e,o as p}from"./chunks/framework.DPuwY6B9.js";const h=JSON.parse('{"title":"独自のNinjaファイルを書き込む","description":"","frontmatter":{},"headers":[],"relativePath":"resource/ninja/writing_your_own_ninja_files.md","filePath":"resource/ninja/writing_your_own_ninja_files.md","lastUpdated":null}'),i={name:"resource/ninja/writing_your_own_ninja_files.md"};function l(o,a,c,t,r,d){return p(),s("div",null,a[0]||(a[0]=[e(`<h1 id="独自のninjaファイルを書き込む" tabindex="-1">独自のNinjaファイルを書き込む <a class="header-anchor" href="#独自のninjaファイルを書き込む" aria-label="Permalink to &quot;独自のNinjaファイルを書き込む&quot;">​</a></h1><p>このマニュアルの残りの部分は、Ninjaファイルを自分で構築する場合にのみ有用です。例えば、メタビルドシステムを書いたり、新しい言語をサポートする場合などです。</p><h2 id="コンセプトの概要" tabindex="-1">コンセプトの概要 <a class="header-anchor" href="#コンセプトの概要" aria-label="Permalink to &quot;コンセプトの概要&quot;">​</a></h2><p>Ninjaはファイル間の依存関係のグラフを評価し、ファイルの変更時間から判断して、ビルド対象を最新の状態にするのに必要なコマンドを実行します。Makeに慣れている人なら、Ninjaは非常によく似ている。</p><p>ビルドファイル（デフォルト名：build.ninja）は、ルール（コンパイラの実行方法などの長いコマンドの短い名前）のリストと、そのルールを使ってどのようにファイルを構築するか（どのルールをどの入力に適用してどの出力を生成するか）を示すビルド文のリストを提供するものです。</p><p>概念的には、ビルドステートメントはプロジェクトの依存関係グラフを記述し、ルールステートメントはグラフの与えられたエッジに沿ってファイルを生成する方法を記述します。</p><h2 id="構文例" tabindex="-1">構文例 <a class="header-anchor" href="#構文例" aria-label="Permalink to &quot;構文例&quot;">​</a></h2><p>ここに、ほとんどの構文を示す基本的な .ninja ファイルがあります。これは以下のセクションの例として使用されます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cflags = -Wall</span></span>
<span class="line"><span></span></span>
<span class="line"><span>rule cc</span></span>
<span class="line"><span>  command = gcc $cflags -c $in -o $out</span></span>
<span class="line"><span></span></span>
<span class="line"><span>build foo.o: cc foo.c</span></span></code></pre></div><h2 id="変数" tabindex="-1">変数 <a class="header-anchor" href="#変数" aria-label="Permalink to &quot;変数&quot;">​</a></h2><p>手書きで書くのが便利という非目的はあるものの、ビルドファイルの可読性（デバッグ性）を保つために、Ninjaは文字列の短い再利用可能な名前の宣言をサポートしています。以下のような宣言である。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cflags = -g</span></span></code></pre></div><p>等号の右側で使用でき、次のようにドル記号で再参照します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rule cc</span></span>
<span class="line"><span>  command = gcc $cflags -c $in -o $out</span></span></code></pre></div><p>また、変数は、\${in}のように中括弧を使って参照することもできます。</p><p>変数は、与えられた変数を変更することはできず、シャドウイングされるだけであるという点で、「バインディング」と呼ぶ方がよいかもしれません。シャドウイングがどのように機能するかについては、このドキュメントの後のほうで詳しく説明します。</p><h2 id="ルール" tabindex="-1">ルール <a class="header-anchor" href="#ルール" aria-label="Permalink to &quot;ルール&quot;">​</a></h2><p>ルールは、コマンドラインの短い名前を宣言するものです。ルールは、ルールのキーワードとルールの名前で構成される行から始まります。その後、インデントされた変数=値の行が続きます。</p><p>上記の基本的な例では、ccという名前の新しいルールと、実行するコマンドを宣言しています。ルールのコンテキストでは、command変数が実行するコマンドを定義し、$inが入力ファイルのリスト(foo.c)に展開し、$outがそのコマンドの出力ファイル(foo.o)に展開します。特殊変数の完全なリストは、リファレンスに記載されています。</p><h2 id="ビルドステートメント" tabindex="-1">ビルドステートメント <a class="header-anchor" href="#ビルドステートメント" aria-label="Permalink to &quot;ビルドステートメント&quot;">​</a></h2><p>Build文は、入力ファイルと出力ファイルの関係を宣言します。build キーワードで始まり、build outputs: rulename inputs のような形式をとります。この宣言は、すべての出力ファイルが入力ファイルから派生していることを意味する。出力ファイルが存在しない場合や入力が変更された場合、Ninjaは出力を再生成するためにルールを実行する。</p><p>上記の基本的な例では、ccルールを使ってfoo.oをビルドする方法を説明しています。</p><p>ビルドブロックのスコープ（関連するルールの評価も含む）において、変数$inは入力のリスト、変数$outは出力のリストである。</p><p>build文の後には、ルールのようにキーと値のペアをインデントで記述することができます。これらの変数は、コマンドの変数を評価するときに、すべての変数をシャドウします。たとえば、以下のようになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cflags = -Wall -Werror</span></span>
<span class="line"><span>rule cc</span></span>
<span class="line"><span>  command = gcc $cflags -c $in -o $out</span></span>
<span class="line"><span></span></span>
<span class="line"><span># If left unspecified, builds get the outer $cflags.</span></span>
<span class="line"><span>build foo.o: cc foo.c</span></span>
<span class="line"><span></span></span>
<span class="line"><span># But you can shadow variables like cflags for a particular build.</span></span>
<span class="line"><span>build special.o: cc special.c</span></span>
<span class="line"><span>  cflags = -Wall</span></span>
<span class="line"><span></span></span>
<span class="line"><span># The variable was only shadowed for the scope of special.o;</span></span>
<span class="line"><span># Subsequent build lines get the outer (original) cflags.</span></span>
<span class="line"><span>build bar.o: cc bar.c</span></span></code></pre></div><p>スコープがどのように機能するかについては、<a href="https://ninja-build.org/manual.html#ref_scope" target="_blank" rel="noreferrer">参考文献</a>を参照してください。</p><p>もし、build文からルールへより複雑な情報を渡す必要がある場合（例えば、ルールが「最初の入力のファイル拡張子」を必要とする場合）、上記のcflagsが渡される方法のように、追加の変数としてその情報を渡します。</p><p>トップレベルのNinjaファイルがbuild文の出力として指定され、それが古い場合、Ninjaはユーザが要求したターゲットを構築する前に、ファイルを再構築して再読み込みする。</p><h2 id="コードからninjaファイルを生成する" tabindex="-1">コードからNinjaファイルを生成する <a class="header-anchor" href="#コードからninjaファイルを生成する" aria-label="Permalink to &quot;コードからNinjaファイルを生成する&quot;">​</a></h2><p>Ninjaの配布物に含まれる misc/ninja_syntax.py は、Ninjaファイルの生成を容易にするための小さなPythonモジュールです。ninja.rule(name=&#39;foo&#39;, command=&#39;bar&#39;, depfile=&#39;$out.d&#39;) のようなPythonの呼び出しを行うと、適切な構文を生成してくれます。もし有用であれば、あなたのプロジェクトのビルドシステムにインライン化するのも自由です。</p>`,30)]))}const b=n(i,[["render",l]]);export{h as __pageData,b as default};
