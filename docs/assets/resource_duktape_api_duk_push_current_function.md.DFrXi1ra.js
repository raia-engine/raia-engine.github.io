import{_ as t,c as e,a2 as i,o as s}from"./chunks/framework.CuCbyi2k.js";const l=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/api/duk_push_current_function.md","filePath":"resource/duktape/api/duk_push_current_function.md","lastUpdated":1732350347000}'),n={name:"resource/duktape/api/duk_push_current_function.md"};function r(u,a,c,p,o,h){return s(),e("div",null,a[0]||(a[0]=[i('<h2 id="duk-push-current-function" tabindex="-1">duk_push_current_function() <a class="header-anchor" href="#duk-push-current-function" aria-label="Permalink to &quot;duk_push_current_function()&quot;">​</a></h2><p>1.0.0 stack function</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_push_current_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | -&gt; | ... | func | (if current function exists) | ... | -&gt; | ... | undefined | (if no current function)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>現在実行中の関数をスタックにプッシュします。プッシュされる値は ECMAScript Function オブジェクトです。現在実行中の関数がない場合、代わりに undefined がプッシュされます。</p><p>現在の関数が 1 つ以上のバインド関数や Proxy オブジェクトを介して呼び出されていた場合、この呼び出しから返される関数は最終的に解決された関数です（バインド関数やProxy ではありません）。</p><p>この関数により、C関数はその関数オブジェクトにアクセスすることができます。複数の関数オブジェクトは内部的に同じC関数を指すことができるので、関数オブジェクトは関数のパラメータ化のための便利な場所であり、内部の状態の隠し場所として機能することもできます。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_push_current_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span></code></pre></div>',12)]))}const k=t(n,[["render",r]]);export{l as __pageData,k as default};
