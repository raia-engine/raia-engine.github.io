import{_ as i,c as s,a2 as t,o as e}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"ffi.cast","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/ffi/cast.md","filePath":"reference/built_in/ffi/cast.md","lastUpdated":null}'),l={name:"reference/built_in/ffi/cast.md"};function n(h,a,p,r,d,k){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="ffi-cast" tabindex="-1">ffi.cast <a class="header-anchor" href="#ffi-cast" aria-label="Permalink to &quot;ffi.cast&quot;">​</a></h1><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ct, init)</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>ffi.cast</code> 関数は、指定された型 <code>ct</code> に従って <code>init</code> をキャストし、新しい <code>cdata</code> オブジェクトを返します。これにより、数値やポインタ型の変換が可能です。ポインタの型変換やアドレス変換に特に便利です。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><ul><li><code>ffi.cast</code> は、ポインタ互換性チェックをオーバーライドしたい場合にも使用されます。ポインタや数値の型を他の型に簡単にキャストするのに適しています。</li></ul><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ffi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 3</span></span></code></pre></div><p>このコードは、浮動小数点数を整数型にキャストし、その結果を出力します。</p><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>LuaJIT</li></ul><h2 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h2><ul><li>ffi.typeof</li><li>ffi.new</li></ul>`,13)]))}const f=i(l,[["render",n]]);export{o as __pageData,f as default};
