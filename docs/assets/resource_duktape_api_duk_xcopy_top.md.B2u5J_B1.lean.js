import{_ as s,c as t,a2 as i,o as e}from"./chunks/framework.CKGreiRV.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resource/duktape/api/duk_xcopy_top.md","filePath":"resource/duktape/api/duk_xcopy_top.md","lastUpdated":1732350347000}'),p={name:"resource/duktape/api/duk_xcopy_top.md"};function o(h,a,l,n,d,k){return e(),t("div",null,a[0]||(a[0]=[i('<h2 id="duk-xcopy-top" tabindex="-1">duk_xcopy_top() <a class="header-anchor" href="#duk-xcopy-top" aria-label="Permalink to &quot;duk_xcopy_top()&quot;">​</a></h2><p>1.0.0 stack slice</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> duk_xcopy_top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to_ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duk_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from_ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duk_idx_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | val1 | ... | valN | -&gt; | ... | val1 | ... | valN | (on source stack, from_ctx) | ... | -&gt; | ... | val1 | ... | valN | (on target stack, to_ctx)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>duk_xmove_top() と同様ですが、コピーされる要素はコピー元スタックからポップアップされません。コピー元とコピー先の両方のスタックは、同じ Duktape ヒープに存在しなければなりません。</p><p>Lua の lua_xmove() と比較して、スタックからの順序とスタックへの順序が逆になっています。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duk_xcopy_top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_ctx, ctx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_xmove_top</p>',13)]))}const u=s(p,[["render",o]]);export{c as __pageData,u as default};
