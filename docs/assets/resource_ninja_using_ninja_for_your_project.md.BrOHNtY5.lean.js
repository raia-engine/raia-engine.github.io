import{_ as e,c as i,a2 as s,o as n}from"./chunks/framework.DzmM640o.js";const g=JSON.parse('{"title":"プロジェクトにNinjaを使用する","description":"","frontmatter":{},"headers":[],"relativePath":"resource/ninja/using_ninja_for_your_project.md","filePath":"resource/ninja/using_ninja_for_your_project.md","lastUpdated":1732376957000}'),t={name:"resource/ninja/using_ninja_for_your_project.md"};function r(l,a,p,h,o,d){return n(),i("div",null,a[0]||(a[0]=[s(`<h1 id="プロジェクトにninjaを使用する" tabindex="-1">プロジェクトにNinjaを使用する <a class="header-anchor" href="#プロジェクトにninjaを使用する" aria-label="Permalink to &quot;プロジェクトにNinjaを使用する&quot;">​</a></h1><p>Ninjaは現在、Unix系システムおよびWindowsで動作します。Linuxでの動作確認が最も多かったが、Mac OS XやFreeBSDでも問題なく動作する。</p><p>プロジェクトが小規模な場合、Ninjaの速度への影響はあまり感じられないと思います。(ただし、小規模なプロジェクトであっても、Ninjaの限られたシンタックスによって、ビルドルールを簡略化し、結果としてビルドを高速化することができる場合があります。)つまり、編集とコンパイルのサイクルタイムに満足しているプロジェクトでは、Ninjaは役に立たないと言うことです。</p><p>Ninjaよりも使いやすく、機能的なビルドシステムは他にもたくさんあります。おすすめポイント：Ninjaの作者は、Ninjaのデザインに影響を与えた<a href="http://gittup.org/tup/" target="_blank" rel="noreferrer">tupのビルドシステム</a>を見つけ、<a href="https://github.com/apenwarr/redo" target="_blank" rel="noreferrer">redo</a>のデザインは非常に巧妙だと考えています。</p><p>Ninjaの利点は、よりスマートなメタビルドシステムと組み合わせて使用することです。</p><p><a href="https://gn.googlesource.com/gn/" target="_blank" rel="noreferrer">gn</a></p><p>Google Chromeや関連プロジェクト（v8、node.js）、Google Fuchsiaのビルドファイルを生成するためのメタビルドシステム。 gnはChromeがサポートするすべてのプラットフォーム用のNinjaファイルを生成することができる。</p><p><a href="https://cmake.org/" target="_blank" rel="noreferrer">CMake</a></p><p>広く使われているメタビルドシステムで、CMakeバージョン2.8.8現在、Linux上でNinjaファイルを生成することができる。CMakeの新しいバージョンでは、WindowsとMac OS XでもNinjaファイルを生成できるようになりました。</p><p><a href="https://github.com/ninja-build/ninja/wiki/List-of-generators-producing-ninja-build-files" target="_blank" rel="noreferrer">others</a></p><p>Ninjaは、premakeのような他のメタビルドソフトウェアに完璧にフィットするはずです。もし、この作業を行った場合は、是非ともご一報ください。</p><h2 id="ninjaを実行する" tabindex="-1">Ninjaを実行する <a class="header-anchor" href="#ninjaを実行する" aria-label="Permalink to &quot;Ninjaを実行する&quot;">​</a></h2><p>ninjaを実行します。デフォルトでは、カレントディレクトリにあるbuild.ninjaというファイルを探し、古くなったターゲットをすべてビルドします。コマンドライン引数で、ビルドするターゲット（ファイル）を指定することができます。</p><p>また、コマンドラインに入力したソースを含むルールの最初の出力として、ターゲットを指定するための特別な構文 target^ があります (存在する場合)。たとえば、target を foo.c^ と指定すると、foo.o がビルドされます (ビルドファイルにこれらのターゲットがあると仮定しています)。</p><p>ninja -h はヘルプを表示します。Ninjaのフラグの多くはMakeのフラグと意図的に一致しています。例えば、ninja -C build -j 20はbuildディレクトリに移動し、buildコマンドを20個並列に実行します。(なお、Ninjaはデフォルトでコマンドを並列に実行するので、通常-jを渡す必要はありません)。</p><h2 id="環境変数" tabindex="-1">環境変数 <a class="header-anchor" href="#環境変数" aria-label="Permalink to &quot;環境変数&quot;">​</a></h2><p>Ninjaは、その動作を制御するために1つの環境変数をサポートしています。NINJA_STATUS は、ルールが実行される前に表示される進捗状況である。</p><p>いくつかのプレースホルダーが利用可能です。</p><ul><li>%s: 開始したエッジの数。</li><li>%t: ビルドを完了するために実行しなければならないエッジの総数です。</li><li>%p: 開始されたエッジの割合です。</li><li>%r: 現在実行中のエッジの数。</li><li>%u: 開始する残りのエッジの数。</li><li>%f: 完成したエッジの数。</li><li>%o: 1秒間に仕上げるエッジの総合的なレート</li><li>%c: 1 秒あたりのエッジの完了率 (-j またはそのデフォルト値で指定されたビルドの平均)</li><li>%e: 経過時間(秒)。(Ninja1.2以降で利用可能)。</li><li>%%: プレーンな%文字。</li></ul><p>デフォルトの進行状況は、&quot;[%f/%t]&quot; です (ビルドルールから分離するための末尾のスペースに注意)。他の進行状況の例としては、&quot;[%u/%r/%f]&quot; が考えられます。</p><h2 id="追加ツール" tabindex="-1">追加ツール <a class="header-anchor" href="#追加ツール" aria-label="Permalink to &quot;追加ツール&quot;">​</a></h2><p>Ninjaのコマンドラインにある-tフラグは、Ninjaの開発中に便利だと思われるツールを実行します。現在のツールは</p><h3 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">​</a></h3><p>指定されたターゲットの入出力をダンプします。</p><h3 id="browse" tabindex="-1">browse <a class="header-anchor" href="#browse" aria-label="Permalink to &quot;browse&quot;">​</a></h3><p>ウェブブラウザで依存関係グラフをブラウズします。ファイルをクリックすると、そのファイルにフォーカスが当たり、入力と出力が表示されます。この機能を使用するには、Pythonのインストールが必要です。デフォルトでは、ポート8000が使用され、Webブラウザが開かれます。これは以下のように変更することができます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> browse</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=8000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-browser</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mytarget</span></span></code></pre></div><h3 id="graph" tabindex="-1">graph <a class="header-anchor" href="#graph" aria-label="Permalink to &quot;graph&quot;">​</a></h3><p>グラフの自動レイアウトツールであるgraphvizが使用する構文でファイルを出力します。という感じで使ってください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> graph</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mytarget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Tpng</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ograph.png</span></span></code></pre></div><p>Ninjaのソースツリーにおいて、ninja graph.pngはNinja自身のイメージを生成する。ターゲットが与えられていない場合は、すべてのルートターゲットのグラフを生成する。</p><h3 id="targets" tabindex="-1">targets <a class="header-anchor" href="#targets" aria-label="Permalink to &quot;targets&quot;">​</a></h3><p>ルール別または深さ別のターゲットのリストを出力する。ninja -t targets rule name のように使用すると、与えられたルールを使って構築されたターゲットのリストが表示されます。ルールが与えられない場合、ソースファイル (グラフの葉) が表示される。ninja -t targets depth digit のように使用すると、ルートターゲット (出力のないもの) から始まる深さ優先の方法でターゲットのリストを表示します。インデントは依存関係をマークするために使われます。深さが0であれば、すべてのターゲットを表示する。引数が提供されない場合、ninja -t targets depth 1が仮定されます。このモードではターゲットは何度もリストアップされるかもしれません。このように使用すると、 ninja -t targets all はインデントなしで利用可能なすべてのターゲットを表示し、 depth モードよりも高速になります。</p><h3 id="commands" tabindex="-1">commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;commands&quot;">​</a></h3><p>ターゲットのリストが与えられたとき、順番に実行すれば、すべての出力ファイルが古いと仮定して、これらのターゲットを再構築するために使用することができるコマンドのリストを表示します。</p><h3 id="inputs" tabindex="-1">inputs <a class="header-anchor" href="#inputs" aria-label="Permalink to &quot;inputs&quot;">​</a></h3><p>ターゲットのリストが与えられたとき、それらのターゲットを再構築するために使用されたすべての入力のリストを表示する。Ninja1.11以降で利用可能。</p><h3 id="clean" tabindex="-1">clean <a class="header-anchor" href="#clean" aria-label="Permalink to &quot;clean&quot;">​</a></h3><p>ビルドされたファイルを削除します。デフォルトでは、ジェネレーターによって作成されたものを除く、すべてのビルドされたファイルを削除します。gフラグを追加すると、ジェネレーターによって作成されたビルドファイルも削除されます。<a href="https://ninja-build.org/manual.html#ref_rule" target="_blank" rel="noreferrer">ジェネレーター属性のルールリファレンス</a>を参照してください。追加の引数はtargetsで、与えられたターゲットとそのターゲット用にビルドされたすべてのファイルを再帰的に削除します。</p><p>ninja -t clean -r rules のように使用すると、与えられたルールでビルドされたすべてのファイルを削除します。</p><p>作成されたものの、グラフで参照されていないファイルは削除されません。このツールは-vと-nオプションを考慮します(-nは-vを意味することに注意してください)。</p><h3 id="cleandead" tabindex="-1">cleandead <a class="header-anchor" href="#cleandead" aria-label="Permalink to &quot;cleandead&quot;">​</a></h3><p>以前のビルドによって生成された、ビルドファイルに含まれなくなったファイルを削除する。Ninja 1.10以降で利用可能。</p><h3 id="compdb" tabindex="-1">compdb <a class="header-anchor" href="#compdb" aria-label="Permalink to &quot;compdb&quot;">​</a></h3><p>ソースファイル名を第一入力とするC言語のコンパイラルールのリストを与え、 Clangツールインタフェースが期待する<a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html" target="_blank" rel="noreferrer">JSON形式</a>のコンパイルデータベースを 標準出力に表示させる。Ninja 1.2以降で利用可能。</p><h3 id="deps" tabindex="-1">deps <a class="header-anchor" href="#deps" aria-label="Permalink to &quot;deps&quot;">​</a></h3><p>.ninja_deps ファイルに格納されているすべての依存関係を表示します。ターゲットを指定すると、そのターゲットの依存関係のみを表示する。Ninja 1.4 以降で利用可能。</p><h3 id="missingdeps" tabindex="-1">missingdeps <a class="header-anchor" href="#missingdeps" aria-label="Permalink to &quot;missingdeps&quot;">​</a></h3><p>ターゲットのリストが与えられたとき、生成されたファイルに依存しているが、ジェネレータに適切な（おそらく推移的な）依存性を持っていないターゲットを探します。そのようなターゲットは、クリーンビルドでビルドの脆弱性を引き起こすかもしれません。</p><p>壊れたターゲットは、depsログ/depfile依存情報が正しいことを仮定して見つけることができます。生成されたファイル（ジェネレータターゲットの出力）に暗黙的に依存するが、ジェネレータターゲットへの明示的または順序的な依存パスを持っていないターゲットは、壊れていると見なされます。</p><p>このツールの発見は、他のターゲットをビルドすることなく、クリーンなアウトディレクトリでリストされたターゲットをビルドしようとすることによって検証することができます。ビルドは、生成されたファイルを指し示すインクルードエラーか同等のエラーが出て、それぞれ失敗するはずである。Ninja 1.11以降で利用可能。</p><h3 id="recompact" tabindex="-1">recompact <a class="header-anchor" href="#recompact" aria-label="Permalink to &quot;recompact&quot;">​</a></h3><p>.ninja_deps ファイルを再コンパクトする。Ninja 1.4 以降で利用可能。</p><h3 id="restat" tabindex="-1">restat <a class="header-anchor" href="#restat" aria-label="Permalink to &quot;restat&quot;">​</a></h3><p>.ninja_log ファイルに記録された全てのファイル変更タイムスタンプを更新する。Ninja 1.10 以降で利用可能。</p><h3 id="rules" tabindex="-1">rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;rules&quot;">​</a></h3><p>全ルールの一覧を出力する。ninja -t targets ルール名やninja -t compdbにどのルール名を渡せばよいかを知るために利用できる。dフラグを追加すると、ルールの説明も出力される。</p><h3 id="msvc" tabindex="-1">msvc <a class="header-anchor" href="#msvc" aria-label="Permalink to &quot;msvc&quot;">​</a></h3><p>Windowsホストでのみ利用可能です。のように、あらかじめ設定された環境変数のセットでcl.exeコンパイラーを起動するためのヘルパーツール。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> msvc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ENVFILE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cl.exe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>ここで、ENVFILEは、WindowsのCreateProcessA()に適した環境ブロック(すなわち、NAME=VALUEのように見えるゼロ終端の文字列とそれに続く余分なゼロ終端を持つ一連の文字列)を含むバイナリファイルである。これは、ローカルのコードページ・エンコードを使用していることに注意してください。</p><p>また、このツールは、/showIncludesフラグが使用されているときに、コンパイラの出力を解析し、そこからGCC互換のdepfileを生成する非推奨の方法をサポートしています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+ --- ninja -t msvc -o DEPFILE [-p STRING] — cl.exe /showIncludes &lt;arguments&gt; ---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>+</span></span></code></pre></div><p>このオプションを使用する場合、-p STRINGを使用して、cl.exeが依存情報を出力するために使用するローカライズされた行頭語を渡すことができます。英語圏の場合、これは二重引用符なしで &quot;Note: including file:「という二重引用符のないものになりますが、他の地域では異なります。</p><p>Ninjaは現在、Ninjaファイル中のdeps = msvcとmsvc_deps_prefixを使用することで、これをネイティブにサポートしていることに注意してください。ネイティブサポートは、コンパイラが呼ばれるたびに余分なツールプロセスを起動することを避け、Windowsでのビルドを著しく高速化することができる。</p><h3 id="wincodepage" tabindex="-1">wincodepage <a class="header-anchor" href="#wincodepage" aria-label="Permalink to &quot;wincodepage&quot;">​</a></h3><p>Windowsホストで利用可能(Ninja 1.11以降)。ビルドファイルのエンコーディングに対応するWindowsコードページを表示する。出力は次のような形式である。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Build file encoding: &lt;codepage&gt;</span></span></code></pre></div><p>今後のNinjaのバージョンアップでセリフが追加される可能性があります。</p><p><code>&lt;codepage&gt;</code>のいずれかである。</p><ul><li>UTF-8: UTF-8でエンコードする。</li><li>ANSI: システム全体のANSIコードページにエンコードする。</li></ul>`,71)]))}const u=e(t,[["render",r]]);export{g as __pageData,u as default};
