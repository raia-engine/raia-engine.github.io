import{_ as i,c as s,a2 as t,o as e}from"./chunks/framework.CuCbyi2k.js";const k=JSON.parse('{"title":"jit.arch","description":"","frontmatter":{},"headers":[],"relativePath":"reference/built_in/jit/arch.md","filePath":"reference/built_in/jit/arch.md","lastUpdated":1730090475000}'),h={name:"reference/built_in/jit/arch.md"};function l(n,a,r,o,p,c){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="jit-arch" tabindex="-1">jit.arch <a class="header-anchor" href="#jit-arch" aria-label="Permalink to &quot;jit.arch&quot;">​</a></h1><p>現在のターゲットアーキテクチャの名前を示す文字列</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arch</span></span></code></pre></div><h2 id="説明" tabindex="-1">説明 <a class="header-anchor" href="#説明" aria-label="Permalink to &quot;説明&quot;">​</a></h2><p><code>jit.arch</code> は、現在実行中のターゲットアーキテクチャ名を示す文字列を返します。例えば、<code>&quot;x86&quot;</code>、<code>&quot;x64&quot;</code>、<code>&quot;arm&quot;</code>、<code>&quot;arm64&quot;</code> などが返されます。これにより、スクリプトが動作しているCPUアーキテクチャを判別することができます。</p><h2 id="サンプルコード" tabindex="-1">サンプルコード <a class="header-anchor" href="#サンプルコード" aria-label="Permalink to &quot;サンプルコード&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Processor Architecture:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><ul><li>LuaJIT</li></ul>`,9)]))}const u=i(h,[["render",l]]);export{k as __pageData,u as default};
